import ESM_COMPAT_Module from "node:module";
import { fileURLToPath as ESM_COMPAT_fileURLToPath } from 'node:url';
import { dirname as ESM_COMPAT_dirname } from 'node:path';
const __filename = ESM_COMPAT_fileURLToPath(import.meta.url);
const __dirname = ESM_COMPAT_dirname(__filename);
const require = ESM_COMPAT_Module.createRequire(import.meta.url);
var mO = Object.create;
var Rp = Object.defineProperty;
var yO = Object.getOwnPropertyDescriptor;
var gO = Object.getOwnPropertyNames;
var bO = Object.getPrototypeOf, EO = Object.prototype.hasOwnProperty;
var i = (e, t) => Rp(e, "name", { value: t, configurable: !0 }), le = /* @__PURE__ */ ((e) => typeof require < "u" ? require : typeof Proxy <
"u" ? new Proxy(e, {
  get: (t, r) => (typeof require < "u" ? require : t)[r]
}) : e)(function(e) {
  if (typeof require < "u") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + e + '" is not supported');
});
var A = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
var TO = (e, t, r, n) => {
  if (t && typeof t == "object" || typeof t == "function")
    for (let s of gO(t))
      !EO.call(e, s) && s !== r && Rp(e, s, { get: () => t[s], enumerable: !(n = yO(t, s)) || n.enumerable });
  return e;
};
var zn = (e, t, r) => (r = e != null ? mO(bO(e)) : {}, TO(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  t || !e || !e.__esModule ? Rp(r, "default", { value: e, enumerable: !0 }) : r,
  e
));

// ../node_modules/@babel/types/lib/utils/shallowEqual.js
var tl = A((qp) => {
  "use strict";
  Object.defineProperty(qp, "__esModule", {
    value: !0
  });
  qp.default = SO;
  function SO(e, t) {
    let r = Object.keys(t);
    for (let n of r)
      if (e[n] !== t[n])
        return !1;
    return !0;
  }
  i(SO, "shallowEqual");
});

// ../node_modules/@babel/types/lib/utils/deprecationWarning.js
var ga = A((Up) => {
  "use strict";
  Object.defineProperty(Up, "__esModule", {
    value: !0
  });
  Up.default = xO;
  var A1 = /* @__PURE__ */ new Set();
  function xO(e, t, r = "") {
    if (A1.has(e)) return;
    A1.add(e);
    let {
      internal: n,
      trace: s
    } = vO(1, 2);
    n || console.warn(`${r}\`${e}\` has been deprecated, please migrate to \`${t}\`
${s}`);
  }
  i(xO, "deprecationWarning");
  function vO(e, t) {
    let {
      stackTraceLimit: r,
      prepareStackTrace: n
    } = Error, s;
    if (Error.stackTraceLimit = 1 + e + t, Error.prepareStackTrace = function(o, l) {
      s = l;
    }, new Error().stack, Error.stackTraceLimit = r, Error.prepareStackTrace = n, !s) return {
      internal: !1,
      trace: ""
    };
    let a = s.slice(1 + e, 1 + e + t);
    return {
      internal: /[\\/]@babel[\\/]/.test(a[1].getFileName()),
      trace: a.map((o) => `    at ${o}`).join(`
`)
    };
  }
  i(vO, "captureShortStackTrace");
});

// ../node_modules/@babel/types/lib/validators/generated/index.js
var St = A((T) => {
  "use strict";
  Object.defineProperty(T, "__esModule", {
    value: !0
  });
  T.isAccessor = LF;
  T.isAnyTypeAnnotation = sB;
  T.isArgumentPlaceholder = B3;
  T.isArrayExpression = PO;
  T.isArrayPattern = xN;
  T.isArrayTypeAnnotation = iB;
  T.isArrowFunctionExpression = vN;
  T.isAssignmentExpression = AO;
  T.isAssignmentPattern = SN;
  T.isAwaitExpression = GN;
  T.isBigIntLiteral = YN;
  T.isBinary = aF;
  T.isBinaryExpression = CO;
  T.isBindExpression = k3;
  T.isBlock = uF;
  T.isBlockParent = lF;
  T.isBlockStatement = _O;
  T.isBooleanLiteral = XO;
  T.isBooleanLiteralTypeAnnotation = oB;
  T.isBooleanTypeAnnotation = aB;
  T.isBreakStatement = OO;
  T.isCallExpression = NO;
  T.isCatchClause = BO;
  T.isClass = kF;
  T.isClassAccessorProperty = ZN;
  T.isClassBody = PN;
  T.isClassDeclaration = CN;
  T.isClassExpression = AN;
  T.isClassImplements = uB;
  T.isClassMethod = MN;
  T.isClassPrivateMethod = tB;
  T.isClassPrivateProperty = eB;
  T.isClassProperty = QN;
  T.isCompletionStatement = fF;
  T.isConditional = dF;
  T.isConditionalExpression = kO;
  T.isContinueStatement = FO;
  T.isDebuggerStatement = jO;
  T.isDecimalLiteral = U3;
  T.isDeclaration = xF;
  T.isDeclareClass = cB;
  T.isDeclareExportAllDeclaration = EB;
  T.isDeclareExportDeclaration = bB;
  T.isDeclareFunction = pB;
  T.isDeclareInterface = fB;
  T.isDeclareModule = dB;
  T.isDeclareModuleExports = hB;
  T.isDeclareOpaqueType = yB;
  T.isDeclareTypeAlias = mB;
  T.isDeclareVariable = gB;
  T.isDeclaredPredicate = TB;
  T.isDecorator = j3;
  T.isDirective = wO;
  T.isDirectiveLiteral = IO;
  T.isDoExpression = L3;
  T.isDoWhileStatement = LO;
  T.isEmptyStatement = MO;
  T.isEmptyTypeAnnotation = OB;
  T.isEnumBody = WF;
  T.isEnumBooleanBody = i3;
  T.isEnumBooleanMember = u3;
  T.isEnumDeclaration = s3;
  T.isEnumDefaultedMember = f3;
  T.isEnumMember = KF;
  T.isEnumNumberBody = a3;
  T.isEnumNumberMember = c3;
  T.isEnumStringBody = o3;
  T.isEnumStringMember = p3;
  T.isEnumSymbolBody = l3;
  T.isExistsTypeAnnotation = SB;
  T.isExportAllDeclaration = DN;
  T.isExportDeclaration = FF;
  T.isExportDefaultDeclaration = wN;
  T.isExportDefaultSpecifier = M3;
  T.isExportNamedDeclaration = IN;
  T.isExportNamespaceSpecifier = JN;
  T.isExportSpecifier = _N;
  T.isExpression = iF;
  T.isExpressionStatement = RO;
  T.isExpressionWrapper = yF;
  T.isFile = qO;
  T.isFlow = RF;
  T.isFlowBaseAnnotation = UF;
  T.isFlowDeclaration = VF;
  T.isFlowPredicate = $F;
  T.isFlowType = qF;
  T.isFor = gF;
  T.isForInStatement = UO;
  T.isForOfStatement = ON;
  T.isForStatement = VO;
  T.isForXStatement = bF;
  T.isFunction = EF;
  T.isFunctionDeclaration = $O;
  T.isFunctionExpression = WO;
  T.isFunctionParent = TF;
  T.isFunctionTypeAnnotation = xB;
  T.isFunctionTypeParam = vB;
  T.isGenericTypeAnnotation = PB;
  T.isIdentifier = KO;
  T.isIfStatement = GO;
  T.isImmutable = DF;
  T.isImport = HN;
  T.isImportAttribute = F3;
  T.isImportDeclaration = NN;
  T.isImportDefaultSpecifier = BN;
  T.isImportExpression = jN;
  T.isImportNamespaceSpecifier = kN;
  T.isImportOrExportDeclaration = C1;
  T.isImportSpecifier = FN;
  T.isIndexedAccessType = d3;
  T.isInferredPredicate = AB;
  T.isInterfaceDeclaration = DB;
  T.isInterfaceExtends = CB;
  T.isInterfaceTypeAnnotation = wB;
  T.isInterpreterDirective = DO;
  T.isIntersectionTypeAnnotation = IB;
  T.isJSX = GF;
  T.isJSXAttribute = m3;
  T.isJSXClosingElement = y3;
  T.isJSXClosingFragment = I3;
  T.isJSXElement = g3;
  T.isJSXEmptyExpression = b3;
  T.isJSXExpressionContainer = E3;
  T.isJSXFragment = D3;
  T.isJSXIdentifier = S3;
  T.isJSXMemberExpression = x3;
  T.isJSXNamespacedName = v3;
  T.isJSXOpeningElement = P3;
  T.isJSXOpeningFragment = w3;
  T.isJSXSpreadAttribute = A3;
  T.isJSXSpreadChild = T3;
  T.isJSXText = C3;
  T.isLVal = PF;
  T.isLabeledStatement = HO;
  T.isLiteral = CF;
  T.isLogicalExpression = ZO;
  T.isLoop = hF;
  T.isMemberExpression = eN;
  T.isMetaProperty = LN;
  T.isMethod = IF;
  T.isMiscellaneous = HF;
  T.isMixedTypeAnnotation = _B;
  T.isModuleDeclaration = r4;
  T.isModuleExpression = V3;
  T.isModuleSpecifier = jF;
  T.isNewExpression = tN;
  T.isNoop = _3;
  T.isNullLiteral = zO;
  T.isNullLiteralTypeAnnotation = lB;
  T.isNullableTypeAnnotation = NB;
  T.isNumberLiteral = QF;
  T.isNumberLiteralTypeAnnotation = BB;
  T.isNumberTypeAnnotation = kB;
  T.isNumericLiteral = JO;
  T.isObjectExpression = nN;
  T.isObjectMember = _F;
  T.isObjectMethod = sN;
  T.isObjectPattern = RN;
  T.isObjectProperty = iN;
  T.isObjectTypeAnnotation = FB;
  T.isObjectTypeCallProperty = LB;
  T.isObjectTypeIndexer = MB;
  T.isObjectTypeInternalSlot = jB;
  T.isObjectTypeProperty = RB;
  T.isObjectTypeSpreadProperty = qB;
  T.isOpaqueType = UB;
  T.isOptionalCallExpression = XN;
  T.isOptionalIndexedAccessType = h3;
  T.isOptionalMemberExpression = zN;
  T.isParenthesizedExpression = uN;
  T.isPattern = BF;
  T.isPatternLike = vF;
  T.isPipelineBareFunction = K3;
  T.isPipelinePrimaryTopicReference = G3;
  T.isPipelineTopicExpression = W3;
  T.isPlaceholder = O3;
  T.isPrivate = MF;
  T.isPrivateName = rB;
  T.isProgram = rN;
  T.isProperty = OF;
  T.isPureish = SF;
  T.isQualifiedTypeIdentifier = VB;
  T.isRecordExpression = R3;
  T.isRegExpLiteral = QO;
  T.isRegexLiteral = ZF;
  T.isRestElement = aN;
  T.isRestProperty = e4;
  T.isReturnStatement = oN;
  T.isScopable = oF;
  T.isSequenceExpression = lN;
  T.isSpreadElement = qN;
  T.isSpreadProperty = t4;
  T.isStandardized = sF;
  T.isStatement = cF;
  T.isStaticBlock = nB;
  T.isStringLiteral = YO;
  T.isStringLiteralTypeAnnotation = $B;
  T.isStringTypeAnnotation = WB;
  T.isSuper = UN;
  T.isSwitchCase = cN;
  T.isSwitchStatement = pN;
  T.isSymbolTypeAnnotation = KB;
  T.isTSAnyKeyword = rk;
  T.isTSArrayType = xk;
  T.isTSAsExpression = Uk;
  T.isTSBaseType = XF;
  T.isTSBigIntKeyword = sk;
  T.isTSBooleanKeyword = nk;
  T.isTSCallSignatureDeclaration = X3;
  T.isTSConditionalType = Ik;
  T.isTSConstructSignatureDeclaration = Q3;
  T.isTSConstructorType = gk;
  T.isTSDeclareFunction = Y3;
  T.isTSDeclareMethod = J3;
  T.isTSEntityName = AF;
  T.isTSEnumDeclaration = Wk;
  T.isTSEnumMember = Kk;
  T.isTSExportAssignment = Qk;
  T.isTSExpressionWithTypeArguments = jk;
  T.isTSExternalModuleReference = zk;
  T.isTSFunctionType = yk;
  T.isTSImportEqualsDeclaration = Jk;
  T.isTSImportType = Yk;
  T.isTSIndexSignature = tk;
  T.isTSIndexedAccessType = Bk;
  T.isTSInferType = _k;
  T.isTSInstantiationExpression = qk;
  T.isTSInterfaceBody = Mk;
  T.isTSInterfaceDeclaration = Lk;
  T.isTSIntersectionType = wk;
  T.isTSIntrinsicKeyword = ik;
  T.isTSLiteralType = Fk;
  T.isTSMappedType = kk;
  T.isTSMethodSignature = ek;
  T.isTSModuleBlock = Hk;
  T.isTSModuleDeclaration = Gk;
  T.isTSNamedTupleMember = Ck;
  T.isTSNamespaceExportDeclaration = Zk;
  T.isTSNeverKeyword = ak;
  T.isTSNonNullExpression = Xk;
  T.isTSNullKeyword = ok;
  T.isTSNumberKeyword = lk;
  T.isTSObjectKeyword = uk;
  T.isTSOptionalType = Pk;
  T.isTSParameterProperty = H3;
  T.isTSParenthesizedType = Ok;
  T.isTSPropertySignature = Z3;
  T.isTSQualifiedName = z3;
  T.isTSRestType = Ak;
  T.isTSSatisfiesExpression = Vk;
  T.isTSStringKeyword = ck;
  T.isTSSymbolKeyword = pk;
  T.isTSThisType = mk;
  T.isTSTupleType = vk;
  T.isTSType = zF;
  T.isTSTypeAliasDeclaration = Rk;
  T.isTSTypeAnnotation = eF;
  T.isTSTypeAssertion = $k;
  T.isTSTypeElement = JF;
  T.isTSTypeLiteral = Sk;
  T.isTSTypeOperator = Nk;
  T.isTSTypeParameter = nF;
  T.isTSTypeParameterDeclaration = rF;
  T.isTSTypeParameterInstantiation = tF;
  T.isTSTypePredicate = Ek;
  T.isTSTypeQuery = Tk;
  T.isTSTypeReference = bk;
  T.isTSUndefinedKeyword = fk;
  T.isTSUnionType = Dk;
  T.isTSUnknownKeyword = dk;
  T.isTSVoidKeyword = hk;
  T.isTaggedTemplateExpression = VN;
  T.isTemplateElement = $N;
  T.isTemplateLiteral = WN;
  T.isTerminatorless = pF;
  T.isThisExpression = fN;
  T.isThisTypeAnnotation = GB;
  T.isThrowStatement = dN;
  T.isTopicReference = $3;
  T.isTryStatement = hN;
  T.isTupleExpression = q3;
  T.isTupleTypeAnnotation = HB;
  T.isTypeAlias = JB;
  T.isTypeAnnotation = zB;
  T.isTypeCastExpression = XB;
  T.isTypeParameter = QB;
  T.isTypeParameterDeclaration = ZB;
  T.isTypeParameterInstantiation = e3;
  T.isTypeScript = YF;
  T.isTypeofTypeAnnotation = YB;
  T.isUnaryExpression = mN;
  T.isUnaryLike = NF;
  T.isUnionTypeAnnotation = t3;
  T.isUpdateExpression = yN;
  T.isUserWhitespacable = wF;
  T.isV8IntrinsicIdentifier = N3;
  T.isVariableDeclaration = gN;
  T.isVariableDeclarator = bN;
  T.isVariance = r3;
  T.isVoidTypeAnnotation = n3;
  T.isWhile = mF;
  T.isWhileStatement = EN;
  T.isWithStatement = TN;
  T.isYieldExpression = KN;
  var v = tl(), ba = ga();
  function PO(e, t) {
    return !e || e.type !== "ArrayExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(PO, "isArrayExpression");
  function AO(e, t) {
    return !e || e.type !== "AssignmentExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(AO, "isAssignmentExpression");
  function CO(e, t) {
    return !e || e.type !== "BinaryExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(CO, "isBinaryExpression");
  function DO(e, t) {
    return !e || e.type !== "InterpreterDirective" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(DO, "isInterpreterDirective");
  function wO(e, t) {
    return !e || e.type !== "Directive" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(wO, "isDirective");
  function IO(e, t) {
    return !e || e.type !== "DirectiveLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(IO, "isDirectiveLiteral");
  function _O(e, t) {
    return !e || e.type !== "BlockStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(_O, "isBlockStatement");
  function OO(e, t) {
    return !e || e.type !== "BreakStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(OO, "isBreakStatement");
  function NO(e, t) {
    return !e || e.type !== "CallExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(NO, "isCallExpression");
  function BO(e, t) {
    return !e || e.type !== "CatchClause" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(BO, "isCatchClause");
  function kO(e, t) {
    return !e || e.type !== "ConditionalExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(kO, "isConditionalExpression");
  function FO(e, t) {
    return !e || e.type !== "ContinueStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(FO, "isContinueStatement");
  function jO(e, t) {
    return !e || e.type !== "DebuggerStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(jO, "isDebuggerStatement");
  function LO(e, t) {
    return !e || e.type !== "DoWhileStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(LO, "isDoWhileStatement");
  function MO(e, t) {
    return !e || e.type !== "EmptyStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(MO, "isEmptyStatement");
  function RO(e, t) {
    return !e || e.type !== "ExpressionStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(RO, "isExpressionStatement");
  function qO(e, t) {
    return !e || e.type !== "File" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(qO, "isFile");
  function UO(e, t) {
    return !e || e.type !== "ForInStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(UO, "isForInStatement");
  function VO(e, t) {
    return !e || e.type !== "ForStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(VO, "isForStatement");
  function $O(e, t) {
    return !e || e.type !== "FunctionDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i($O, "isFunctionDeclaration");
  function WO(e, t) {
    return !e || e.type !== "FunctionExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(WO, "isFunctionExpression");
  function KO(e, t) {
    return !e || e.type !== "Identifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(KO, "isIdentifier");
  function GO(e, t) {
    return !e || e.type !== "IfStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(GO, "isIfStatement");
  function HO(e, t) {
    return !e || e.type !== "LabeledStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(HO, "isLabeledStatement");
  function YO(e, t) {
    return !e || e.type !== "StringLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(YO, "isStringLiteral");
  function JO(e, t) {
    return !e || e.type !== "NumericLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(JO, "isNumericLiteral");
  function zO(e, t) {
    return !e || e.type !== "NullLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(zO, "isNullLiteral");
  function XO(e, t) {
    return !e || e.type !== "BooleanLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(XO, "isBooleanLiteral");
  function QO(e, t) {
    return !e || e.type !== "RegExpLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(QO, "isRegExpLiteral");
  function ZO(e, t) {
    return !e || e.type !== "LogicalExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ZO, "isLogicalExpression");
  function eN(e, t) {
    return !e || e.type !== "MemberExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(eN, "isMemberExpression");
  function tN(e, t) {
    return !e || e.type !== "NewExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(tN, "isNewExpression");
  function rN(e, t) {
    return !e || e.type !== "Program" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(rN, "isProgram");
  function nN(e, t) {
    return !e || e.type !== "ObjectExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(nN, "isObjectExpression");
  function sN(e, t) {
    return !e || e.type !== "ObjectMethod" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(sN, "isObjectMethod");
  function iN(e, t) {
    return !e || e.type !== "ObjectProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(iN, "isObjectProperty");
  function aN(e, t) {
    return !e || e.type !== "RestElement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(aN, "isRestElement");
  function oN(e, t) {
    return !e || e.type !== "ReturnStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(oN, "isReturnStatement");
  function lN(e, t) {
    return !e || e.type !== "SequenceExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(lN, "isSequenceExpression");
  function uN(e, t) {
    return !e || e.type !== "ParenthesizedExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(uN, "isParenthesizedExpression");
  function cN(e, t) {
    return !e || e.type !== "SwitchCase" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(cN, "isSwitchCase");
  function pN(e, t) {
    return !e || e.type !== "SwitchStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(pN, "isSwitchStatement");
  function fN(e, t) {
    return !e || e.type !== "ThisExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(fN, "isThisExpression");
  function dN(e, t) {
    return !e || e.type !== "ThrowStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(dN, "isThrowStatement");
  function hN(e, t) {
    return !e || e.type !== "TryStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(hN, "isTryStatement");
  function mN(e, t) {
    return !e || e.type !== "UnaryExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(mN, "isUnaryExpression");
  function yN(e, t) {
    return !e || e.type !== "UpdateExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(yN, "isUpdateExpression");
  function gN(e, t) {
    return !e || e.type !== "VariableDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(gN, "isVariableDeclaration");
  function bN(e, t) {
    return !e || e.type !== "VariableDeclarator" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(bN, "isVariableDeclarator");
  function EN(e, t) {
    return !e || e.type !== "WhileStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(EN, "isWhileStatement");
  function TN(e, t) {
    return !e || e.type !== "WithStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(TN, "isWithStatement");
  function SN(e, t) {
    return !e || e.type !== "AssignmentPattern" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(SN, "isAssignmentPattern");
  function xN(e, t) {
    return !e || e.type !== "ArrayPattern" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(xN, "isArrayPattern");
  function vN(e, t) {
    return !e || e.type !== "ArrowFunctionExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(vN, "isArrowFunctionExpression");
  function PN(e, t) {
    return !e || e.type !== "ClassBody" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(PN, "isClassBody");
  function AN(e, t) {
    return !e || e.type !== "ClassExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(AN, "isClassExpression");
  function CN(e, t) {
    return !e || e.type !== "ClassDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(CN, "isClassDeclaration");
  function DN(e, t) {
    return !e || e.type !== "ExportAllDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(DN, "isExportAllDeclaration");
  function wN(e, t) {
    return !e || e.type !== "ExportDefaultDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(wN, "isExportDefaultDeclaration");
  function IN(e, t) {
    return !e || e.type !== "ExportNamedDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(IN, "isExportNamedDeclaration");
  function _N(e, t) {
    return !e || e.type !== "ExportSpecifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(_N, "isExportSpecifier");
  function ON(e, t) {
    return !e || e.type !== "ForOfStatement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ON, "isForOfStatement");
  function NN(e, t) {
    return !e || e.type !== "ImportDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(NN, "isImportDeclaration");
  function BN(e, t) {
    return !e || e.type !== "ImportDefaultSpecifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(BN, "isImportDefaultSpecifier");
  function kN(e, t) {
    return !e || e.type !== "ImportNamespaceSpecifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(kN, "isImportNamespaceSpecifier");
  function FN(e, t) {
    return !e || e.type !== "ImportSpecifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(FN, "isImportSpecifier");
  function jN(e, t) {
    return !e || e.type !== "ImportExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(jN, "isImportExpression");
  function LN(e, t) {
    return !e || e.type !== "MetaProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(LN, "isMetaProperty");
  function MN(e, t) {
    return !e || e.type !== "ClassMethod" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(MN, "isClassMethod");
  function RN(e, t) {
    return !e || e.type !== "ObjectPattern" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(RN, "isObjectPattern");
  function qN(e, t) {
    return !e || e.type !== "SpreadElement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(qN, "isSpreadElement");
  function UN(e, t) {
    return !e || e.type !== "Super" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(UN, "isSuper");
  function VN(e, t) {
    return !e || e.type !== "TaggedTemplateExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(VN, "isTaggedTemplateExpression");
  function $N(e, t) {
    return !e || e.type !== "TemplateElement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i($N, "isTemplateElement");
  function WN(e, t) {
    return !e || e.type !== "TemplateLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(WN, "isTemplateLiteral");
  function KN(e, t) {
    return !e || e.type !== "YieldExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(KN, "isYieldExpression");
  function GN(e, t) {
    return !e || e.type !== "AwaitExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(GN, "isAwaitExpression");
  function HN(e, t) {
    return !e || e.type !== "Import" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(HN, "isImport");
  function YN(e, t) {
    return !e || e.type !== "BigIntLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(YN, "isBigIntLiteral");
  function JN(e, t) {
    return !e || e.type !== "ExportNamespaceSpecifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(JN, "isExportNamespaceSpecifier");
  function zN(e, t) {
    return !e || e.type !== "OptionalMemberExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(zN, "isOptionalMemberExpression");
  function XN(e, t) {
    return !e || e.type !== "OptionalCallExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(XN, "isOptionalCallExpression");
  function QN(e, t) {
    return !e || e.type !== "ClassProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(QN, "isClassProperty");
  function ZN(e, t) {
    return !e || e.type !== "ClassAccessorProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ZN, "isClassAccessorProperty");
  function eB(e, t) {
    return !e || e.type !== "ClassPrivateProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(eB, "isClassPrivateProperty");
  function tB(e, t) {
    return !e || e.type !== "ClassPrivateMethod" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(tB, "isClassPrivateMethod");
  function rB(e, t) {
    return !e || e.type !== "PrivateName" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(rB, "isPrivateName");
  function nB(e, t) {
    return !e || e.type !== "StaticBlock" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(nB, "isStaticBlock");
  function sB(e, t) {
    return !e || e.type !== "AnyTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(sB, "isAnyTypeAnnotation");
  function iB(e, t) {
    return !e || e.type !== "ArrayTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(iB, "isArrayTypeAnnotation");
  function aB(e, t) {
    return !e || e.type !== "BooleanTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(aB, "isBooleanTypeAnnotation");
  function oB(e, t) {
    return !e || e.type !== "BooleanLiteralTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(oB, "isBooleanLiteralTypeAnnotation");
  function lB(e, t) {
    return !e || e.type !== "NullLiteralTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(lB, "isNullLiteralTypeAnnotation");
  function uB(e, t) {
    return !e || e.type !== "ClassImplements" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(uB, "isClassImplements");
  function cB(e, t) {
    return !e || e.type !== "DeclareClass" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(cB, "isDeclareClass");
  function pB(e, t) {
    return !e || e.type !== "DeclareFunction" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(pB, "isDeclareFunction");
  function fB(e, t) {
    return !e || e.type !== "DeclareInterface" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(fB, "isDeclareInterface");
  function dB(e, t) {
    return !e || e.type !== "DeclareModule" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(dB, "isDeclareModule");
  function hB(e, t) {
    return !e || e.type !== "DeclareModuleExports" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(hB, "isDeclareModuleExports");
  function mB(e, t) {
    return !e || e.type !== "DeclareTypeAlias" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(mB, "isDeclareTypeAlias");
  function yB(e, t) {
    return !e || e.type !== "DeclareOpaqueType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(yB, "isDeclareOpaqueType");
  function gB(e, t) {
    return !e || e.type !== "DeclareVariable" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(gB, "isDeclareVariable");
  function bB(e, t) {
    return !e || e.type !== "DeclareExportDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(bB, "isDeclareExportDeclaration");
  function EB(e, t) {
    return !e || e.type !== "DeclareExportAllDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(EB, "isDeclareExportAllDeclaration");
  function TB(e, t) {
    return !e || e.type !== "DeclaredPredicate" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(TB, "isDeclaredPredicate");
  function SB(e, t) {
    return !e || e.type !== "ExistsTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(SB, "isExistsTypeAnnotation");
  function xB(e, t) {
    return !e || e.type !== "FunctionTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(xB, "isFunctionTypeAnnotation");
  function vB(e, t) {
    return !e || e.type !== "FunctionTypeParam" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(vB, "isFunctionTypeParam");
  function PB(e, t) {
    return !e || e.type !== "GenericTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(PB, "isGenericTypeAnnotation");
  function AB(e, t) {
    return !e || e.type !== "InferredPredicate" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(AB, "isInferredPredicate");
  function CB(e, t) {
    return !e || e.type !== "InterfaceExtends" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(CB, "isInterfaceExtends");
  function DB(e, t) {
    return !e || e.type !== "InterfaceDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(DB, "isInterfaceDeclaration");
  function wB(e, t) {
    return !e || e.type !== "InterfaceTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(wB, "isInterfaceTypeAnnotation");
  function IB(e, t) {
    return !e || e.type !== "IntersectionTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(IB, "isIntersectionTypeAnnotation");
  function _B(e, t) {
    return !e || e.type !== "MixedTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(_B, "isMixedTypeAnnotation");
  function OB(e, t) {
    return !e || e.type !== "EmptyTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(OB, "isEmptyTypeAnnotation");
  function NB(e, t) {
    return !e || e.type !== "NullableTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(NB, "isNullableTypeAnnotation");
  function BB(e, t) {
    return !e || e.type !== "NumberLiteralTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(BB, "isNumberLiteralTypeAnnotation");
  function kB(e, t) {
    return !e || e.type !== "NumberTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(kB, "isNumberTypeAnnotation");
  function FB(e, t) {
    return !e || e.type !== "ObjectTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(FB, "isObjectTypeAnnotation");
  function jB(e, t) {
    return !e || e.type !== "ObjectTypeInternalSlot" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(jB, "isObjectTypeInternalSlot");
  function LB(e, t) {
    return !e || e.type !== "ObjectTypeCallProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(LB, "isObjectTypeCallProperty");
  function MB(e, t) {
    return !e || e.type !== "ObjectTypeIndexer" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(MB, "isObjectTypeIndexer");
  function RB(e, t) {
    return !e || e.type !== "ObjectTypeProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(RB, "isObjectTypeProperty");
  function qB(e, t) {
    return !e || e.type !== "ObjectTypeSpreadProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(qB, "isObjectTypeSpreadProperty");
  function UB(e, t) {
    return !e || e.type !== "OpaqueType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(UB, "isOpaqueType");
  function VB(e, t) {
    return !e || e.type !== "QualifiedTypeIdentifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(VB, "isQualifiedTypeIdentifier");
  function $B(e, t) {
    return !e || e.type !== "StringLiteralTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i($B, "isStringLiteralTypeAnnotation");
  function WB(e, t) {
    return !e || e.type !== "StringTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(WB, "isStringTypeAnnotation");
  function KB(e, t) {
    return !e || e.type !== "SymbolTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(KB, "isSymbolTypeAnnotation");
  function GB(e, t) {
    return !e || e.type !== "ThisTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(GB, "isThisTypeAnnotation");
  function HB(e, t) {
    return !e || e.type !== "TupleTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(HB, "isTupleTypeAnnotation");
  function YB(e, t) {
    return !e || e.type !== "TypeofTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(YB, "isTypeofTypeAnnotation");
  function JB(e, t) {
    return !e || e.type !== "TypeAlias" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(JB, "isTypeAlias");
  function zB(e, t) {
    return !e || e.type !== "TypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(zB, "isTypeAnnotation");
  function XB(e, t) {
    return !e || e.type !== "TypeCastExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(XB, "isTypeCastExpression");
  function QB(e, t) {
    return !e || e.type !== "TypeParameter" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(QB, "isTypeParameter");
  function ZB(e, t) {
    return !e || e.type !== "TypeParameterDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ZB, "isTypeParameterDeclaration");
  function e3(e, t) {
    return !e || e.type !== "TypeParameterInstantiation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(e3, "isTypeParameterInstantiation");
  function t3(e, t) {
    return !e || e.type !== "UnionTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(t3, "isUnionTypeAnnotation");
  function r3(e, t) {
    return !e || e.type !== "Variance" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(r3, "isVariance");
  function n3(e, t) {
    return !e || e.type !== "VoidTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(n3, "isVoidTypeAnnotation");
  function s3(e, t) {
    return !e || e.type !== "EnumDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(s3, "isEnumDeclaration");
  function i3(e, t) {
    return !e || e.type !== "EnumBooleanBody" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(i3, "isEnumBooleanBody");
  function a3(e, t) {
    return !e || e.type !== "EnumNumberBody" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(a3, "isEnumNumberBody");
  function o3(e, t) {
    return !e || e.type !== "EnumStringBody" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(o3, "isEnumStringBody");
  function l3(e, t) {
    return !e || e.type !== "EnumSymbolBody" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(l3, "isEnumSymbolBody");
  function u3(e, t) {
    return !e || e.type !== "EnumBooleanMember" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(u3, "isEnumBooleanMember");
  function c3(e, t) {
    return !e || e.type !== "EnumNumberMember" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(c3, "isEnumNumberMember");
  function p3(e, t) {
    return !e || e.type !== "EnumStringMember" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(p3, "isEnumStringMember");
  function f3(e, t) {
    return !e || e.type !== "EnumDefaultedMember" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(f3, "isEnumDefaultedMember");
  function d3(e, t) {
    return !e || e.type !== "IndexedAccessType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(d3, "isIndexedAccessType");
  function h3(e, t) {
    return !e || e.type !== "OptionalIndexedAccessType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(h3, "isOptionalIndexedAccessType");
  function m3(e, t) {
    return !e || e.type !== "JSXAttribute" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(m3, "isJSXAttribute");
  function y3(e, t) {
    return !e || e.type !== "JSXClosingElement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(y3, "isJSXClosingElement");
  function g3(e, t) {
    return !e || e.type !== "JSXElement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(g3, "isJSXElement");
  function b3(e, t) {
    return !e || e.type !== "JSXEmptyExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(b3, "isJSXEmptyExpression");
  function E3(e, t) {
    return !e || e.type !== "JSXExpressionContainer" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(E3, "isJSXExpressionContainer");
  function T3(e, t) {
    return !e || e.type !== "JSXSpreadChild" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(T3, "isJSXSpreadChild");
  function S3(e, t) {
    return !e || e.type !== "JSXIdentifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(S3, "isJSXIdentifier");
  function x3(e, t) {
    return !e || e.type !== "JSXMemberExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(x3, "isJSXMemberExpression");
  function v3(e, t) {
    return !e || e.type !== "JSXNamespacedName" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(v3, "isJSXNamespacedName");
  function P3(e, t) {
    return !e || e.type !== "JSXOpeningElement" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(P3, "isJSXOpeningElement");
  function A3(e, t) {
    return !e || e.type !== "JSXSpreadAttribute" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(A3, "isJSXSpreadAttribute");
  function C3(e, t) {
    return !e || e.type !== "JSXText" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(C3, "isJSXText");
  function D3(e, t) {
    return !e || e.type !== "JSXFragment" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(D3, "isJSXFragment");
  function w3(e, t) {
    return !e || e.type !== "JSXOpeningFragment" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(w3, "isJSXOpeningFragment");
  function I3(e, t) {
    return !e || e.type !== "JSXClosingFragment" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(I3, "isJSXClosingFragment");
  function _3(e, t) {
    return !e || e.type !== "Noop" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(_3, "isNoop");
  function O3(e, t) {
    return !e || e.type !== "Placeholder" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(O3, "isPlaceholder");
  function N3(e, t) {
    return !e || e.type !== "V8IntrinsicIdentifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(N3, "isV8IntrinsicIdentifier");
  function B3(e, t) {
    return !e || e.type !== "ArgumentPlaceholder" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(B3, "isArgumentPlaceholder");
  function k3(e, t) {
    return !e || e.type !== "BindExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(k3, "isBindExpression");
  function F3(e, t) {
    return !e || e.type !== "ImportAttribute" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(F3, "isImportAttribute");
  function j3(e, t) {
    return !e || e.type !== "Decorator" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(j3, "isDecorator");
  function L3(e, t) {
    return !e || e.type !== "DoExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(L3, "isDoExpression");
  function M3(e, t) {
    return !e || e.type !== "ExportDefaultSpecifier" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(M3, "isExportDefaultSpecifier");
  function R3(e, t) {
    return !e || e.type !== "RecordExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(R3, "isRecordExpression");
  function q3(e, t) {
    return !e || e.type !== "TupleExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(q3, "isTupleExpression");
  function U3(e, t) {
    return !e || e.type !== "DecimalLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(U3, "isDecimalLiteral");
  function V3(e, t) {
    return !e || e.type !== "ModuleExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(V3, "isModuleExpression");
  function $3(e, t) {
    return !e || e.type !== "TopicReference" ? !1 : t == null || (0, v.default)(e, t);
  }
  i($3, "isTopicReference");
  function W3(e, t) {
    return !e || e.type !== "PipelineTopicExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(W3, "isPipelineTopicExpression");
  function K3(e, t) {
    return !e || e.type !== "PipelineBareFunction" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(K3, "isPipelineBareFunction");
  function G3(e, t) {
    return !e || e.type !== "PipelinePrimaryTopicReference" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(G3, "isPipelinePrimaryTopicReference");
  function H3(e, t) {
    return !e || e.type !== "TSParameterProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(H3, "isTSParameterProperty");
  function Y3(e, t) {
    return !e || e.type !== "TSDeclareFunction" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Y3, "isTSDeclareFunction");
  function J3(e, t) {
    return !e || e.type !== "TSDeclareMethod" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(J3, "isTSDeclareMethod");
  function z3(e, t) {
    return !e || e.type !== "TSQualifiedName" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(z3, "isTSQualifiedName");
  function X3(e, t) {
    return !e || e.type !== "TSCallSignatureDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(X3, "isTSCallSignatureDeclaration");
  function Q3(e, t) {
    return !e || e.type !== "TSConstructSignatureDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Q3, "isTSConstructSignatureDeclaration");
  function Z3(e, t) {
    return !e || e.type !== "TSPropertySignature" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Z3, "isTSPropertySignature");
  function ek(e, t) {
    return !e || e.type !== "TSMethodSignature" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ek, "isTSMethodSignature");
  function tk(e, t) {
    return !e || e.type !== "TSIndexSignature" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(tk, "isTSIndexSignature");
  function rk(e, t) {
    return !e || e.type !== "TSAnyKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(rk, "isTSAnyKeyword");
  function nk(e, t) {
    return !e || e.type !== "TSBooleanKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(nk, "isTSBooleanKeyword");
  function sk(e, t) {
    return !e || e.type !== "TSBigIntKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(sk, "isTSBigIntKeyword");
  function ik(e, t) {
    return !e || e.type !== "TSIntrinsicKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ik, "isTSIntrinsicKeyword");
  function ak(e, t) {
    return !e || e.type !== "TSNeverKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ak, "isTSNeverKeyword");
  function ok(e, t) {
    return !e || e.type !== "TSNullKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ok, "isTSNullKeyword");
  function lk(e, t) {
    return !e || e.type !== "TSNumberKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(lk, "isTSNumberKeyword");
  function uk(e, t) {
    return !e || e.type !== "TSObjectKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(uk, "isTSObjectKeyword");
  function ck(e, t) {
    return !e || e.type !== "TSStringKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ck, "isTSStringKeyword");
  function pk(e, t) {
    return !e || e.type !== "TSSymbolKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(pk, "isTSSymbolKeyword");
  function fk(e, t) {
    return !e || e.type !== "TSUndefinedKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(fk, "isTSUndefinedKeyword");
  function dk(e, t) {
    return !e || e.type !== "TSUnknownKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(dk, "isTSUnknownKeyword");
  function hk(e, t) {
    return !e || e.type !== "TSVoidKeyword" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(hk, "isTSVoidKeyword");
  function mk(e, t) {
    return !e || e.type !== "TSThisType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(mk, "isTSThisType");
  function yk(e, t) {
    return !e || e.type !== "TSFunctionType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(yk, "isTSFunctionType");
  function gk(e, t) {
    return !e || e.type !== "TSConstructorType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(gk, "isTSConstructorType");
  function bk(e, t) {
    return !e || e.type !== "TSTypeReference" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(bk, "isTSTypeReference");
  function Ek(e, t) {
    return !e || e.type !== "TSTypePredicate" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Ek, "isTSTypePredicate");
  function Tk(e, t) {
    return !e || e.type !== "TSTypeQuery" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Tk, "isTSTypeQuery");
  function Sk(e, t) {
    return !e || e.type !== "TSTypeLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Sk, "isTSTypeLiteral");
  function xk(e, t) {
    return !e || e.type !== "TSArrayType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(xk, "isTSArrayType");
  function vk(e, t) {
    return !e || e.type !== "TSTupleType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(vk, "isTSTupleType");
  function Pk(e, t) {
    return !e || e.type !== "TSOptionalType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Pk, "isTSOptionalType");
  function Ak(e, t) {
    return !e || e.type !== "TSRestType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Ak, "isTSRestType");
  function Ck(e, t) {
    return !e || e.type !== "TSNamedTupleMember" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Ck, "isTSNamedTupleMember");
  function Dk(e, t) {
    return !e || e.type !== "TSUnionType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Dk, "isTSUnionType");
  function wk(e, t) {
    return !e || e.type !== "TSIntersectionType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(wk, "isTSIntersectionType");
  function Ik(e, t) {
    return !e || e.type !== "TSConditionalType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Ik, "isTSConditionalType");
  function _k(e, t) {
    return !e || e.type !== "TSInferType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(_k, "isTSInferType");
  function Ok(e, t) {
    return !e || e.type !== "TSParenthesizedType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Ok, "isTSParenthesizedType");
  function Nk(e, t) {
    return !e || e.type !== "TSTypeOperator" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Nk, "isTSTypeOperator");
  function Bk(e, t) {
    return !e || e.type !== "TSIndexedAccessType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Bk, "isTSIndexedAccessType");
  function kk(e, t) {
    return !e || e.type !== "TSMappedType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(kk, "isTSMappedType");
  function Fk(e, t) {
    return !e || e.type !== "TSLiteralType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Fk, "isTSLiteralType");
  function jk(e, t) {
    return !e || e.type !== "TSExpressionWithTypeArguments" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(jk, "isTSExpressionWithTypeArguments");
  function Lk(e, t) {
    return !e || e.type !== "TSInterfaceDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Lk, "isTSInterfaceDeclaration");
  function Mk(e, t) {
    return !e || e.type !== "TSInterfaceBody" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Mk, "isTSInterfaceBody");
  function Rk(e, t) {
    return !e || e.type !== "TSTypeAliasDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Rk, "isTSTypeAliasDeclaration");
  function qk(e, t) {
    return !e || e.type !== "TSInstantiationExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(qk, "isTSInstantiationExpression");
  function Uk(e, t) {
    return !e || e.type !== "TSAsExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Uk, "isTSAsExpression");
  function Vk(e, t) {
    return !e || e.type !== "TSSatisfiesExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Vk, "isTSSatisfiesExpression");
  function $k(e, t) {
    return !e || e.type !== "TSTypeAssertion" ? !1 : t == null || (0, v.default)(e, t);
  }
  i($k, "isTSTypeAssertion");
  function Wk(e, t) {
    return !e || e.type !== "TSEnumDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Wk, "isTSEnumDeclaration");
  function Kk(e, t) {
    return !e || e.type !== "TSEnumMember" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Kk, "isTSEnumMember");
  function Gk(e, t) {
    return !e || e.type !== "TSModuleDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Gk, "isTSModuleDeclaration");
  function Hk(e, t) {
    return !e || e.type !== "TSModuleBlock" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Hk, "isTSModuleBlock");
  function Yk(e, t) {
    return !e || e.type !== "TSImportType" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Yk, "isTSImportType");
  function Jk(e, t) {
    return !e || e.type !== "TSImportEqualsDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Jk, "isTSImportEqualsDeclaration");
  function zk(e, t) {
    return !e || e.type !== "TSExternalModuleReference" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(zk, "isTSExternalModuleReference");
  function Xk(e, t) {
    return !e || e.type !== "TSNonNullExpression" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Xk, "isTSNonNullExpression");
  function Qk(e, t) {
    return !e || e.type !== "TSExportAssignment" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Qk, "isTSExportAssignment");
  function Zk(e, t) {
    return !e || e.type !== "TSNamespaceExportDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(Zk, "isTSNamespaceExportDeclaration");
  function eF(e, t) {
    return !e || e.type !== "TSTypeAnnotation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(eF, "isTSTypeAnnotation");
  function tF(e, t) {
    return !e || e.type !== "TSTypeParameterInstantiation" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(tF, "isTSTypeParameterInstantiation");
  function rF(e, t) {
    return !e || e.type !== "TSTypeParameterDeclaration" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(rF, "isTSTypeParameterDeclaration");
  function nF(e, t) {
    return !e || e.type !== "TSTypeParameter" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(nF, "isTSTypeParameter");
  function sF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "InterpreterDirective":
      case "Directive":
      case "DirectiveLiteral":
      case "BlockStatement":
      case "BreakStatement":
      case "CallExpression":
      case "CatchClause":
      case "ConditionalExpression":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "File":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Identifier":
      case "IfStatement":
      case "LabeledStatement":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "Program":
      case "ObjectExpression":
      case "ObjectMethod":
      case "ObjectProperty":
      case "RestElement":
      case "ReturnStatement":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "SwitchCase":
      case "SwitchStatement":
      case "ThisExpression":
      case "ThrowStatement":
      case "TryStatement":
      case "UnaryExpression":
      case "UpdateExpression":
      case "VariableDeclaration":
      case "VariableDeclarator":
      case "WhileStatement":
      case "WithStatement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ArrowFunctionExpression":
      case "ClassBody":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ExportSpecifier":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ImportExpression":
      case "MetaProperty":
      case "ClassMethod":
      case "ObjectPattern":
      case "SpreadElement":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateElement":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "ExportNamespaceSpecifier":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
      case "StaticBlock":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Identifier":
          case "StringLiteral":
          case "BlockStatement":
          case "ClassBody":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(sF, "isStandardized");
  function iF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "CallExpression":
      case "ConditionalExpression":
      case "FunctionExpression":
      case "Identifier":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "ObjectExpression":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "ThisExpression":
      case "UnaryExpression":
      case "UpdateExpression":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ImportExpression":
      case "MetaProperty":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "TypeCastExpression":
      case "JSXElement":
      case "JSXFragment":
      case "BindExpression":
      case "DoExpression":
      case "RecordExpression":
      case "TupleExpression":
      case "DecimalLiteral":
      case "ModuleExpression":
      case "TopicReference":
      case "PipelineTopicExpression":
      case "PipelineBareFunction":
      case "PipelinePrimaryTopicReference":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Expression":
          case "Identifier":
          case "StringLiteral":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(iF, "isExpression");
  function aF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BinaryExpression":
      case "LogicalExpression":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(aF, "isBinary");
  function oF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (e.expectedNode === "BlockStatement") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(oF, "isScopable");
  function lF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (e.expectedNode === "BlockStatement") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(lF, "isBlockParent");
  function uF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "Program":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (e.expectedNode === "BlockStatement") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(uF, "isBlock");
  function cF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "IfStatement":
      case "LabeledStatement":
      case "ReturnStatement":
      case "SwitchStatement":
      case "ThrowStatement":
      case "TryStatement":
      case "VariableDeclaration":
      case "WhileStatement":
      case "WithStatement":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
      case "TSImportEqualsDeclaration":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Statement":
          case "Declaration":
          case "BlockStatement":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(cF, "isStatement");
  function pF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
      case "YieldExpression":
      case "AwaitExpression":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(pF, "isTerminatorless");
  function fF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(fF, "isCompletionStatement");
  function dF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ConditionalExpression":
      case "IfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(dF, "isConditional");
  function hF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "WhileStatement":
      case "ForOfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(hF, "isLoop");
  function mF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DoWhileStatement":
      case "WhileStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(mF, "isWhile");
  function yF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExpressionStatement":
      case "ParenthesizedExpression":
      case "TypeCastExpression":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(yF, "isExpressionWrapper");
  function gF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ForInStatement":
      case "ForStatement":
      case "ForOfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(gF, "isFor");
  function bF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ForInStatement":
      case "ForOfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(bF, "isForXStatement");
  function EF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(EF, "isFunction");
  function TF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(TF, "isFunctionParent");
  function SF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "ArrowFunctionExpression":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (e.expectedNode === "StringLiteral") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(SF, "isPureish");
  function xF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "VariableDeclaration":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
        break;
      case "Placeholder":
        if (e.expectedNode === "Declaration") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(xF, "isDeclaration");
  function vF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Identifier":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(vF, "isPatternLike");
  function PF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Identifier":
      case "MemberExpression":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSParameterProperty":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(PF, "isLVal");
  function AF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Identifier":
      case "TSQualifiedName":
        break;
      case "Placeholder":
        if (e.expectedNode === "Identifier") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(AF, "isTSEntityName");
  function CF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "TemplateLiteral":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (e.expectedNode === "StringLiteral") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(CF, "isLiteral");
  function DF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "BigIntLiteral":
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXOpeningElement":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (e.expectedNode === "StringLiteral") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(DF, "isImmutable");
  function wF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectMethod":
      case "ObjectProperty":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(wF, "isUserWhitespacable");
  function IF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectMethod":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(IF, "isMethod");
  function _F(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectMethod":
      case "ObjectProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(_F, "isObjectMember");
  function OF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectProperty":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(OF, "isProperty");
  function NF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "UnaryExpression":
      case "SpreadElement":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(NF, "isUnaryLike");
  function BF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
        break;
      case "Placeholder":
        if (e.expectedNode === "Pattern") break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(BF, "isPattern");
  function kF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ClassExpression":
      case "ClassDeclaration":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(kF, "isClass");
  function C1(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(C1, "isImportOrExportDeclaration");
  function FF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(FF, "isExportDeclaration");
  function jF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExportSpecifier":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(jF, "isModuleSpecifier");
  function LF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ClassAccessorProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(LF, "isAccessor");
  function MF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(MF, "isPrivate");
  function RF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ClassImplements":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "DeclaredPredicate":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "FunctionTypeParam":
      case "GenericTypeAnnotation":
      case "InferredPredicate":
      case "InterfaceExtends":
      case "InterfaceDeclaration":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
      case "OpaqueType":
      case "QualifiedTypeIdentifier":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "TypeAlias":
      case "TypeAnnotation":
      case "TypeCastExpression":
      case "TypeParameter":
      case "TypeParameterDeclaration":
      case "TypeParameterInstantiation":
      case "UnionTypeAnnotation":
      case "Variance":
      case "VoidTypeAnnotation":
      case "EnumDeclaration":
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(RF, "isFlow");
  function qF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "GenericTypeAnnotation":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "UnionTypeAnnotation":
      case "VoidTypeAnnotation":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(qF, "isFlowType");
  function UF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AnyTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NumberTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "VoidTypeAnnotation":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(UF, "isFlowBaseAnnotation");
  function VF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(VF, "isFlowDeclaration");
  function $F(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DeclaredPredicate":
      case "InferredPredicate":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i($F, "isFlowPredicate");
  function WF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(WF, "isEnumBody");
  function KF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(KF, "isEnumMember");
  function GF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXEmptyExpression":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXIdentifier":
      case "JSXMemberExpression":
      case "JSXNamespacedName":
      case "JSXOpeningElement":
      case "JSXSpreadAttribute":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(GF, "isJSX");
  function HF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Noop":
      case "Placeholder":
      case "V8IntrinsicIdentifier":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(HF, "isMiscellaneous");
  function YF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSParameterProperty":
      case "TSDeclareFunction":
      case "TSDeclareMethod":
      case "TSQualifiedName":
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSNamedTupleMember":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSInterfaceDeclaration":
      case "TSInterfaceBody":
      case "TSTypeAliasDeclaration":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSEnumDeclaration":
      case "TSEnumMember":
      case "TSModuleDeclaration":
      case "TSModuleBlock":
      case "TSImportType":
      case "TSImportEqualsDeclaration":
      case "TSExternalModuleReference":
      case "TSNonNullExpression":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
      case "TSTypeAnnotation":
      case "TSTypeParameterInstantiation":
      case "TSTypeParameterDeclaration":
      case "TSTypeParameter":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(YF, "isTypeScript");
  function JF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(JF, "isTSTypeElement");
  function zF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSImportType":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(zF, "isTSType");
  function XF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSLiteralType":
        break;
      default:
        return !1;
    }
    return t == null || (0, v.default)(e, t);
  }
  i(XF, "isTSBaseType");
  function QF(e, t) {
    return (0, ba.default)("isNumberLiteral", "isNumericLiteral"), !e || e.type !== "NumberLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(QF, "isNumberLiteral");
  function ZF(e, t) {
    return (0, ba.default)("isRegexLiteral", "isRegExpLiteral"), !e || e.type !== "RegexLiteral" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(ZF, "isRegexLiteral");
  function e4(e, t) {
    return (0, ba.default)("isRestProperty", "isRestElement"), !e || e.type !== "RestProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(e4, "isRestProperty");
  function t4(e, t) {
    return (0, ba.default)("isSpreadProperty", "isSpreadElement"), !e || e.type !== "SpreadProperty" ? !1 : t == null || (0, v.default)(e, t);
  }
  i(t4, "isSpreadProperty");
  function r4(e, t) {
    return (0, ba.default)("isModuleDeclaration", "isImportOrExportDeclaration"), C1(e, t);
  }
  i(r4, "isModuleDeclaration");
});

// ../node_modules/@babel/types/lib/validators/matchesPattern.js
var $p = A((Vp) => {
  "use strict";
  Object.defineProperty(Vp, "__esModule", {
    value: !0
  });
  Vp.default = n4;
  var Ea = St();
  function n4(e, t, r) {
    if (!(0, Ea.isMemberExpression)(e)) return !1;
    let n = Array.isArray(t) ? t : t.split("."), s = [], a;
    for (a = e; (0, Ea.isMemberExpression)(a); a = a.object)
      s.push(a.property);
    if (s.push(a), s.length < n.length || !r && s.length > n.length) return !1;
    for (let o = 0, l = s.length - 1; o < n.length; o++, l--) {
      let u = s[l], c;
      if ((0, Ea.isIdentifier)(u))
        c = u.name;
      else if ((0, Ea.isStringLiteral)(u))
        c = u.value;
      else if ((0, Ea.isThisExpression)(u))
        c = "this";
      else
        return !1;
      if (n[o] !== c) return !1;
    }
    return !0;
  }
  i(n4, "matchesPattern");
});

// ../node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js
var Kp = A((Wp) => {
  "use strict";
  Object.defineProperty(Wp, "__esModule", {
    value: !0
  });
  Wp.default = i4;
  var s4 = $p();
  function i4(e, t) {
    let r = e.split(".");
    return (n) => (0, s4.default)(n, r, t);
  }
  i(i4, "buildMatchMemberExpression");
});

// ../node_modules/@babel/types/lib/validators/react/isReactComponent.js
var D1 = A((rl) => {
  "use strict";
  Object.defineProperty(rl, "__esModule", {
    value: !0
  });
  rl.default = void 0;
  var a4 = Kp(), o4 = (0, a4.default)("React.Component"), Hbe = rl.default = o4;
});

// ../node_modules/@babel/types/lib/validators/react/isCompatTag.js
var w1 = A((Gp) => {
  "use strict";
  Object.defineProperty(Gp, "__esModule", {
    value: !0
  });
  Gp.default = l4;
  function l4(e) {
    return !!e && /^[a-z]/.test(e);
  }
  i(l4, "isCompatTag");
});

// ../node_modules/@babel/types/lib/validators/isType.js
var nl = A((Hp) => {
  "use strict";
  Object.defineProperty(Hp, "__esModule", {
    value: !0
  });
  Hp.default = u4;
  var I1 = xr();
  function u4(e, t) {
    if (e === t) return !0;
    if (e == null || I1.ALIAS_KEYS[t]) return !1;
    let r = I1.FLIPPED_ALIAS_KEYS[t];
    if (r) {
      if (r[0] === e) return !0;
      for (let n of r)
        if (e === n) return !0;
    }
    return !1;
  }
  i(u4, "isType");
});

// ../node_modules/@babel/types/lib/validators/isPlaceholderType.js
var Jp = A((Yp) => {
  "use strict";
  Object.defineProperty(Yp, "__esModule", {
    value: !0
  });
  Yp.default = p4;
  var c4 = xr();
  function p4(e, t) {
    if (e === t) return !0;
    let r = c4.PLACEHOLDERS_ALIAS[e];
    if (r) {
      for (let n of r)
        if (t === n) return !0;
    }
    return !1;
  }
  i(p4, "isPlaceholderType");
});

// ../node_modules/@babel/types/lib/validators/is.js
var fi = A((zp) => {
  "use strict";
  Object.defineProperty(zp, "__esModule", {
    value: !0
  });
  zp.default = y4;
  var f4 = tl(), d4 = nl(), h4 = Jp(), m4 = xr();
  function y4(e, t, r) {
    return t ? (0, d4.default)(t.type, e) ? r === void 0 ? !0 : (0, f4.default)(t, r) : !r && t.type === "Placeholder" && e in m4.FLIPPED_ALIAS_KEYS ?
    (0, h4.default)(t.expectedNode, e) : !1 : !1;
  }
  i(y4, "is");
});

// ../node_modules/@babel/helper-validator-identifier/lib/identifier.js
var k1 = A((Ta) => {
  "use strict";
  Object.defineProperty(Ta, "__esModule", {
    value: !0
  });
  Ta.isIdentifierChar = B1;
  Ta.isIdentifierName = T4;
  Ta.isIdentifierStart = N1;
  var Qp = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993\
-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\
\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\
\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\
\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\
\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01\
-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
  _1 = "\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\
\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\
\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6\
-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20\
-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65", g4 = new RegExp("[" + Qp + "]"), b4 = new RegExp("[" + Qp + _1 + "]");
  Qp = _1 = null;
  var O1 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157,
  19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5,
  3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7,
  2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17,
  47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64,
  6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45,
  52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2,
  1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29,
  113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071,
  18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12,
  65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991,
  84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30,
  2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3,
  0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2,
  2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153,
  7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], E4 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0,
  166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2,
  9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68,
  8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14,
  5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2,
  7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0,
  7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4,
  4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10,
  9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function Xp(e, t) {
    let r = 65536;
    for (let n = 0, s = t.length; n < s; n += 2) {
      if (r += t[n], r > e) return !1;
      if (r += t[n + 1], r >= e) return !0;
    }
    return !1;
  }
  i(Xp, "isInAstralSet");
  function N1(e) {
    return e < 65 ? e === 36 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && g4.test(String.fromCharCode(e)) :
    Xp(e, O1);
  }
  i(N1, "isIdentifierStart");
  function B1(e) {
    return e < 48 ? e === 36 : e < 58 ? !0 : e < 65 ? !1 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && b4.test(
    String.fromCharCode(e)) : Xp(e, O1) || Xp(e, E4);
  }
  i(B1, "isIdentifierChar");
  function T4(e) {
    let t = !0;
    for (let r = 0; r < e.length; r++) {
      let n = e.charCodeAt(r);
      if ((n & 64512) === 55296 && r + 1 < e.length) {
        let s = e.charCodeAt(++r);
        (s & 64512) === 56320 && (n = 65536 + ((n & 1023) << 10) + (s & 1023));
      }
      if (t) {
        if (t = !1, !N1(n))
          return !1;
      } else if (!B1(n))
        return !1;
    }
    return !t;
  }
  i(T4, "isIdentifierName");
});

// ../node_modules/@babel/helper-validator-identifier/lib/keyword.js
var M1 = A((ws) => {
  "use strict";
  Object.defineProperty(ws, "__esModule", {
    value: !0
  });
  ws.isKeyword = A4;
  ws.isReservedWord = F1;
  ws.isStrictBindOnlyReservedWord = L1;
  ws.isStrictBindReservedWord = P4;
  ws.isStrictReservedWord = j1;
  var Zp = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "swit\
ch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false",
    "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  }, S4 = new Set(Zp.keyword), x4 = new Set(Zp.strict), v4 = new Set(Zp.strictBind);
  function F1(e, t) {
    return t && e === "await" || e === "enum";
  }
  i(F1, "isReservedWord");
  function j1(e, t) {
    return F1(e, t) || x4.has(e);
  }
  i(j1, "isStrictReservedWord");
  function L1(e) {
    return v4.has(e);
  }
  i(L1, "isStrictBindOnlyReservedWord");
  function P4(e, t) {
    return j1(e, t) || L1(e);
  }
  i(P4, "isStrictBindReservedWord");
  function A4(e) {
    return S4.has(e);
  }
  i(A4, "isKeyword");
});

// ../node_modules/@babel/helper-validator-identifier/lib/index.js
var di = A((sn) => {
  "use strict";
  Object.defineProperty(sn, "__esModule", {
    value: !0
  });
  Object.defineProperty(sn, "isIdentifierChar", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return ef.isIdentifierChar;
    }, "get")
  });
  Object.defineProperty(sn, "isIdentifierName", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return ef.isIdentifierName;
    }, "get")
  });
  Object.defineProperty(sn, "isIdentifierStart", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return ef.isIdentifierStart;
    }, "get")
  });
  Object.defineProperty(sn, "isKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Sa.isKeyword;
    }, "get")
  });
  Object.defineProperty(sn, "isReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Sa.isReservedWord;
    }, "get")
  });
  Object.defineProperty(sn, "isStrictBindOnlyReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Sa.isStrictBindOnlyReservedWord;
    }, "get")
  });
  Object.defineProperty(sn, "isStrictBindReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Sa.isStrictBindReservedWord;
    }, "get")
  });
  Object.defineProperty(sn, "isStrictReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Sa.isStrictReservedWord;
    }, "get")
  });
  var ef = k1(), Sa = M1();
});

// ../node_modules/@babel/types/lib/validators/isValidIdentifier.js
var hi = A((rf) => {
  "use strict";
  Object.defineProperty(rf, "__esModule", {
    value: !0
  });
  rf.default = C4;
  var tf = di();
  function C4(e, t = !0) {
    return typeof e != "string" || t && ((0, tf.isKeyword)(e) || (0, tf.isStrictReservedWord)(e, !0)) ? !1 : (0, tf.isIdentifierName)(e);
  }
  i(C4, "isValidIdentifier");
});

// ../node_modules/@babel/helper-string-parser/lib/index.js
var V1 = A((xa) => {
  "use strict";
  Object.defineProperty(xa, "__esModule", {
    value: !0
  });
  xa.readCodePoint = U1;
  xa.readInt = q1;
  xa.readStringContents = w4;
  var D4 = /* @__PURE__ */ i(function(t) {
    return t >= 48 && t <= 57;
  }, "isDigit"), R1 = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  }, sl = {
    bin: /* @__PURE__ */ i((e) => e === 48 || e === 49, "bin"),
    oct: /* @__PURE__ */ i((e) => e >= 48 && e <= 55, "oct"),
    dec: /* @__PURE__ */ i((e) => e >= 48 && e <= 57, "dec"),
    hex: /* @__PURE__ */ i((e) => e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102, "hex")
  };
  function w4(e, t, r, n, s, a) {
    let o = r, l = n, u = s, c = "", p = null, f = r, {
      length: h
    } = t;
    for (; ; ) {
      if (r >= h) {
        a.unterminated(o, l, u), c += t.slice(f, r);
        break;
      }
      let g = t.charCodeAt(r);
      if (I4(e, g, t, r)) {
        c += t.slice(f, r);
        break;
      }
      if (g === 92) {
        c += t.slice(f, r);
        let P = _4(t, r, n, s, e === "template", a);
        P.ch === null && !p ? p = {
          pos: r,
          lineStart: n,
          curLine: s
        } : c += P.ch, {
          pos: r,
          lineStart: n,
          curLine: s
        } = P, f = r;
      } else g === 8232 || g === 8233 ? (++r, ++s, n = r) : g === 10 || g === 13 ? e === "template" ? (c += t.slice(f, r) + `
`, ++r, g === 13 && t.charCodeAt(r) === 10 && ++r, ++s, f = n = r) : a.unterminated(o, l, u) : ++r;
    }
    return {
      pos: r,
      str: c,
      firstInvalidLoc: p,
      lineStart: n,
      curLine: s,
      containsInvalid: !!p
    };
  }
  i(w4, "readStringContents");
  function I4(e, t, r, n) {
    return e === "template" ? t === 96 || t === 36 && r.charCodeAt(n + 1) === 123 : t === (e === "double" ? 34 : 39);
  }
  i(I4, "isStringEnd");
  function _4(e, t, r, n, s, a) {
    let o = !s;
    t++;
    let l = /* @__PURE__ */ i((c) => ({
      pos: t,
      ch: c,
      lineStart: r,
      curLine: n
    }), "res"), u = e.charCodeAt(t++);
    switch (u) {
      case 110:
        return l(`
`);
      case 114:
        return l("\r");
      case 120: {
        let c;
        return {
          code: c,
          pos: t
        } = nf(e, t, r, n, 2, !1, o, a), l(c === null ? null : String.fromCharCode(c));
      }
      case 117: {
        let c;
        return {
          code: c,
          pos: t
        } = U1(e, t, r, n, o, a), l(c === null ? null : String.fromCodePoint(c));
      }
      case 116:
        return l("	");
      case 98:
        return l("\b");
      case 118:
        return l("\v");
      case 102:
        return l("\f");
      case 13:
        e.charCodeAt(t) === 10 && ++t;
      case 10:
        r = t, ++n;
      case 8232:
      case 8233:
        return l("");
      case 56:
      case 57:
        if (s)
          return l(null);
        a.strictNumericEscape(t - 1, r, n);
      default:
        if (u >= 48 && u <= 55) {
          let c = t - 1, f = /^[0-7]+/.exec(e.slice(c, t + 2))[0], h = parseInt(f, 8);
          h > 255 && (f = f.slice(0, -1), h = parseInt(f, 8)), t += f.length - 1;
          let g = e.charCodeAt(t);
          if (f !== "0" || g === 56 || g === 57) {
            if (s)
              return l(null);
            a.strictNumericEscape(c, r, n);
          }
          return l(String.fromCharCode(h));
        }
        return l(String.fromCharCode(u));
    }
  }
  i(_4, "readEscapedChar");
  function nf(e, t, r, n, s, a, o, l) {
    let u = t, c;
    return {
      n: c,
      pos: t
    } = q1(e, t, r, n, 16, s, a, !1, l, !o), c === null && (o ? l.invalidEscapeSequence(u, r, n) : t = u - 1), {
      code: c,
      pos: t
    };
  }
  i(nf, "readHexChar");
  function q1(e, t, r, n, s, a, o, l, u, c) {
    let p = t, f = s === 16 ? R1.hex : R1.decBinOct, h = s === 16 ? sl.hex : s === 10 ? sl.dec : s === 8 ? sl.oct : sl.bin, g = !1, P = 0;
    for (let d = 0, y = a ?? 1 / 0; d < y; ++d) {
      let E = e.charCodeAt(t), _;
      if (E === 95 && l !== "bail") {
        let k = e.charCodeAt(t - 1), B = e.charCodeAt(t + 1);
        if (l) {
          if (Number.isNaN(B) || !h(B) || f.has(k) || f.has(B)) {
            if (c) return {
              n: null,
              pos: t
            };
            u.unexpectedNumericSeparator(t, r, n);
          }
        } else {
          if (c) return {
            n: null,
            pos: t
          };
          u.numericSeparatorInEscapeSequence(t, r, n);
        }
        ++t;
        continue;
      }
      if (E >= 97 ? _ = E - 97 + 10 : E >= 65 ? _ = E - 65 + 10 : D4(E) ? _ = E - 48 : _ = 1 / 0, _ >= s) {
        if (_ <= 9 && c)
          return {
            n: null,
            pos: t
          };
        if (_ <= 9 && u.invalidDigit(t, r, n, s))
          _ = 0;
        else if (o)
          _ = 0, g = !0;
        else
          break;
      }
      ++t, P = P * s + _;
    }
    return t === p || a != null && t - p !== a || g ? {
      n: null,
      pos: t
    } : {
      n: P,
      pos: t
    };
  }
  i(q1, "readInt");
  function U1(e, t, r, n, s, a) {
    let o = e.charCodeAt(t), l;
    if (o === 123) {
      if (++t, {
        code: l,
        pos: t
      } = nf(e, t, r, n, e.indexOf("}", t) - t, !0, s, a), ++t, l !== null && l > 1114111)
        if (s)
          a.invalidCodePoint(t, r, n);
        else
          return {
            code: null,
            pos: t
          };
    } else
      ({
        code: l,
        pos: t
      } = nf(e, t, r, n, 4, !1, s, a));
    return {
      code: l,
      pos: t
    };
  }
  i(U1, "readCodePoint");
});

// ../node_modules/@babel/types/lib/constants/index.js
var Xn = A((Me) => {
  "use strict";
  Object.defineProperty(Me, "__esModule", {
    value: !0
  });
  Me.UPDATE_OPERATORS = Me.UNARY_OPERATORS = Me.STRING_UNARY_OPERATORS = Me.STATEMENT_OR_BLOCK_KEYS = Me.NUMBER_UNARY_OPERATORS = Me.NUMBER_BINARY_OPERATORS =
  Me.NOT_LOCAL_BINDING = Me.LOGICAL_OPERATORS = Me.INHERIT_KEYS = Me.FOR_INIT_KEYS = Me.FLATTENABLE_KEYS = Me.EQUALITY_BINARY_OPERATORS = Me.
  COMPARISON_BINARY_OPERATORS = Me.COMMENT_KEYS = Me.BOOLEAN_UNARY_OPERATORS = Me.BOOLEAN_NUMBER_BINARY_OPERATORS = Me.BOOLEAN_BINARY_OPERATORS =
  Me.BLOCK_SCOPED_SYMBOL = Me.BINARY_OPERATORS = Me.ASSIGNMENT_OPERATORS = void 0;
  var d1e = Me.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"], h1e = Me.FLATTENABLE_KEYS = ["body", "expressions"], m1e = Me.
  FOR_INIT_KEYS = ["left", "init"], y1e = Me.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"], O4 = Me.LOGICAL_OPERATORS =
  ["||", "&&", "??"], g1e = Me.UPDATE_OPERATORS = ["++", "--"], N4 = Me.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="], B4 = Me.EQUALITY_BINARY_OPERATORS =
  ["==", "===", "!=", "!=="], k4 = Me.COMPARISON_BINARY_OPERATORS = [...B4, "in", "instanceof"], F4 = Me.BOOLEAN_BINARY_OPERATORS = [...k4, ...N4],
  $1 = Me.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"], b1e = Me.BINARY_OPERATORS = ["+", ...$1, ...F4,
  "|>"], E1e = Me.ASSIGNMENT_OPERATORS = ["=", "+=", ...$1.map((e) => e + "="), ...O4.map((e) => e + "=")], j4 = Me.BOOLEAN_UNARY_OPERATORS =
  ["delete", "!"], L4 = Me.NUMBER_UNARY_OPERATORS = ["+", "-", "~"], M4 = Me.STRING_UNARY_OPERATORS = ["typeof"], T1e = Me.UNARY_OPERATORS =
  ["void", "throw", ...j4, ...L4, ...M4], S1e = Me.INHERIT_KEYS = {
    optional: ["typeAnnotation", "typeParameters", "returnType"],
    force: ["start", "loc", "end"]
  }, x1e = Me.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped"), v1e = Me.NOT_LOCAL_BINDING = Symbol.for("should not be consid\
ered a local binding");
});

// ../node_modules/@babel/types/lib/definitions/utils.js
var an = A((Xe) => {
  "use strict";
  Object.defineProperty(Xe, "__esModule", {
    value: !0
  });
  Xe.VISITOR_KEYS = Xe.NODE_PARENT_VALIDATIONS = Xe.NODE_FIELDS = Xe.FLIPPED_ALIAS_KEYS = Xe.DEPRECATED_KEYS = Xe.BUILDER_KEYS = Xe.ALIAS_KEYS =
  void 0;
  Xe.arrayOf = K1;
  Xe.arrayOfType = G1;
  Xe.assertEach = H1;
  Xe.assertNodeOrValueType = z4;
  Xe.assertNodeType = ol;
  Xe.assertOneOf = J4;
  Xe.assertOptionalChainStart = Q4;
  Xe.assertShape = X4;
  Xe.assertValueType = lf;
  Xe.chain = Y1;
  Xe.default = J1;
  Xe.defineAliasedType = t8;
  Xe.validate = of;
  Xe.validateArrayOfType = Y4;
  Xe.validateOptional = G4;
  Xe.validateOptionalType = H4;
  Xe.validateType = K4;
  var W1 = fi(), al = ll(), R4 = Xe.VISITOR_KEYS = {}, q4 = Xe.ALIAS_KEYS = {}, sf = Xe.FLIPPED_ALIAS_KEYS = {}, U4 = Xe.NODE_FIELDS = {}, V4 = Xe.
  BUILDER_KEYS = {}, $4 = Xe.DEPRECATED_KEYS = {}, W4 = Xe.NODE_PARENT_VALIDATIONS = {};
  function il(e) {
    return Array.isArray(e) ? "array" : e === null ? "null" : typeof e;
  }
  i(il, "getType");
  function of(e) {
    return {
      validate: e
    };
  }
  i(of, "validate");
  function K4(...e) {
    return of(ol(...e));
  }
  i(K4, "validateType");
  function G4(e) {
    return {
      validate: e,
      optional: !0
    };
  }
  i(G4, "validateOptional");
  function H4(...e) {
    return {
      validate: ol(...e),
      optional: !0
    };
  }
  i(H4, "validateOptionalType");
  function K1(e) {
    return Y1(lf("array"), H1(e));
  }
  i(K1, "arrayOf");
  function G1(...e) {
    return K1(ol(...e));
  }
  i(G1, "arrayOfType");
  function Y4(...e) {
    return of(G1(...e));
  }
  i(Y4, "validateArrayOfType");
  function H1(e) {
    let t = process.env.BABEL_TYPES_8_BREAKING ? al.validateChild : () => {
    };
    function r(n, s, a) {
      if (Array.isArray(a))
        for (let o = 0; o < a.length; o++) {
          let l = `${s}[${o}]`, u = a[o];
          e(n, l, u), t(n, l, u);
        }
    }
    return i(r, "validator"), r.each = e, r;
  }
  i(H1, "assertEach");
  function J4(...e) {
    function t(r, n, s) {
      if (!e.includes(s))
        throw new TypeError(`Property ${n} expected value to be one of ${JSON.stringify(e)} but got ${JSON.stringify(s)}`);
    }
    return i(t, "validate"), t.oneOf = e, t;
  }
  i(J4, "assertOneOf");
  function ol(...e) {
    function t(r, n, s) {
      for (let a of e)
        if ((0, W1.default)(a, s)) {
          (0, al.validateChild)(r, n, s);
          return;
        }
      throw new TypeError(`Property ${n} of ${r.type} expected node to be of a type ${JSON.stringify(e)} but instead got ${JSON.stringify(s?.
      type)}`);
    }
    return i(t, "validate"), t.oneOfNodeTypes = e, t;
  }
  i(ol, "assertNodeType");
  function z4(...e) {
    function t(r, n, s) {
      for (let a of e)
        if (il(s) === a || (0, W1.default)(a, s)) {
          (0, al.validateChild)(r, n, s);
          return;
        }
      throw new TypeError(`Property ${n} of ${r.type} expected node to be of a type ${JSON.stringify(e)} but instead got ${JSON.stringify(s?.
      type)}`);
    }
    return i(t, "validate"), t.oneOfNodeOrValueTypes = e, t;
  }
  i(z4, "assertNodeOrValueType");
  function lf(e) {
    function t(r, n, s) {
      if (!(il(s) === e))
        throw new TypeError(`Property ${n} expected type of ${e} but got ${il(s)}`);
    }
    return i(t, "validate"), t.type = e, t;
  }
  i(lf, "assertValueType");
  function X4(e) {
    function t(r, n, s) {
      let a = [];
      for (let o of Object.keys(e))
        try {
          (0, al.validateField)(r, o, s[o], e[o]);
        } catch (l) {
          if (l instanceof TypeError) {
            a.push(l.message);
            continue;
          }
          throw l;
        }
      if (a.length)
        throw new TypeError(`Property ${n} of ${r.type} expected to have the following:
${a.join(`
`)}`);
    }
    return i(t, "validate"), t.shapeOf = e, t;
  }
  i(X4, "assertShape");
  function Q4() {
    function e(t) {
      var r;
      let n = t;
      for (; t; ) {
        let {
          type: s
        } = n;
        if (s === "OptionalCallExpression") {
          if (n.optional) return;
          n = n.callee;
          continue;
        }
        if (s === "OptionalMemberExpression") {
          if (n.optional) return;
          n = n.object;
          continue;
        }
        break;
      }
      throw new TypeError(`Non-optional ${t.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chai\
n from ${(r = n) == null ? void 0 : r.type}`);
    }
    return i(e, "validate"), e;
  }
  i(Q4, "assertOptionalChainStart");
  function Y1(...e) {
    function t(...r) {
      for (let n of e)
        n(...r);
    }
    if (i(t, "validate"), t.chainOf = e, e.length >= 2 && "type" in e[0] && e[0].type === "array" && !("each" in e[1]))
      throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
    return t;
  }
  i(Y1, "chain");
  var Z4 = /* @__PURE__ */ new Set(["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"]), e8 = /* @__PURE__ */ new Set(
  ["default", "optional", "deprecated", "validate"]), af = {};
  function t8(...e) {
    return (t, r = {}) => {
      let n = r.aliases;
      if (!n) {
        var s, a;
        r.inherits && (n = (s = af[r.inherits].aliases) == null ? void 0 : s.slice()), (a = n) != null || (n = []), r.aliases = n;
      }
      let o = e.filter((l) => !n.includes(l));
      n.unshift(...o), J1(t, r);
    };
  }
  i(t8, "defineAliasedType");
  function J1(e, t = {}) {
    let r = t.inherits && af[t.inherits] || {}, n = t.fields;
    if (!n && (n = {}, r.fields)) {
      let l = Object.getOwnPropertyNames(r.fields);
      for (let u of l) {
        let c = r.fields[u], p = c.default;
        if (Array.isArray(p) ? p.length > 0 : p && typeof p == "object")
          throw new Error("field defaults can only be primitives or empty arrays currently");
        n[u] = {
          default: Array.isArray(p) ? [] : p,
          optional: c.optional,
          deprecated: c.deprecated,
          validate: c.validate
        };
      }
    }
    let s = t.visitor || r.visitor || [], a = t.aliases || r.aliases || [], o = t.builder || r.builder || t.visitor || [];
    for (let l of Object.keys(t))
      if (!Z4.has(l))
        throw new Error(`Unknown type option "${l}" on ${e}`);
    t.deprecatedAlias && ($4[t.deprecatedAlias] = e);
    for (let l of s.concat(o))
      n[l] = n[l] || {};
    for (let l of Object.keys(n)) {
      let u = n[l];
      u.default !== void 0 && !o.includes(l) && (u.optional = !0), u.default === void 0 ? u.default = null : !u.validate && u.default != null &&
      (u.validate = lf(il(u.default)));
      for (let c of Object.keys(u))
        if (!e8.has(c))
          throw new Error(`Unknown field key "${c}" on ${e}.${l}`);
    }
    R4[e] = t.visitor = s, V4[e] = t.builder = o, U4[e] = t.fields = n, q4[e] = t.aliases = a, a.forEach((l) => {
      sf[l] = sf[l] || [], sf[l].push(e);
    }), t.validate && (W4[e] = t.validate), af[e] = t;
  }
  i(J1, "defineType");
});

// ../node_modules/@babel/types/lib/definitions/core.js
var Pa = A((Gt) => {
  "use strict";
  Object.defineProperty(Gt, "__esModule", {
    value: !0
  });
  Gt.patternLikeCommon = Gt.importAttributes = Gt.functionTypeAnnotationCommon = Gt.functionDeclarationCommon = Gt.functionCommon = Gt.classMethodOrPropertyCommon =
  Gt.classMethodOrDeclareMethodCommon = void 0;
  var Zt = fi(), r8 = hi(), z1 = di(), n8 = V1(), va = Xn(), D = an(), re = (0, D.defineAliasedType)("Standardized");
  re("ArrayExpression", {
    fields: {
      elements: {
        validate: (0, D.arrayOf)((0, D.assertNodeOrValueType)("null", "Expression", "SpreadElement")),
        default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  re("AssignmentExpression", {
    fields: {
      operator: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function() {
          let e = (0, D.assertOneOf)(...va.ASSIGNMENT_OPERATORS), t = (0, D.assertOneOf)("=");
          return function(r, n, s) {
            ((0, Zt.default)("Pattern", r.left) ? t : e)(r, n, s);
          };
        }(), {
          type: "string"
        }) : (0, D.assertValueType)("string")
      },
      left: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "\
ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, D.assertNodeType)(
        "LVal", "OptionalMemberExpression")
      },
      right: {
        validate: (0, D.assertNodeType)("Expression")
      }
    },
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Expression"]
  });
  re("BinaryExpression", {
    builder: ["operator", "left", "right"],
    fields: {
      operator: {
        validate: (0, D.assertOneOf)(...va.BINARY_OPERATORS)
      },
      left: {
        validate: function() {
          let e = (0, D.assertNodeType)("Expression"), t = (0, D.assertNodeType)("Expression", "PrivateName");
          return Object.assign(function(n, s, a) {
            (n.operator === "in" ? t : e)(n, s, a);
          }, {
            oneOfNodeTypes: ["Expression", "PrivateName"]
          });
        }()
      },
      right: {
        validate: (0, D.assertNodeType)("Expression")
      }
    },
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"]
  });
  re("InterpreterDirective", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, D.assertValueType)("string")
      }
    }
  });
  re("Directive", {
    visitor: ["value"],
    fields: {
      value: {
        validate: (0, D.assertNodeType)("DirectiveLiteral")
      }
    }
  });
  re("DirectiveLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, D.assertValueType)("string")
      }
    }
  });
  re("BlockStatement", {
    builder: ["body", "directives"],
    visitor: ["directives", "body"],
    fields: {
      directives: {
        validate: (0, D.arrayOfType)("Directive"),
        default: []
      },
      body: (0, D.validateArrayOfType)("Statement")
    },
    aliases: ["Scopable", "BlockParent", "Block", "Statement"]
  });
  re("BreakStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, D.assertNodeType)("Identifier"),
        optional: !0
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  re("CallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments"],
    aliases: ["Expression"],
    fields: Object.assign({
      callee: {
        validate: (0, D.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")
      },
      arguments: (0, D.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder")
    }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
      optional: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      }
    }, {
      typeArguments: {
        validate: (0, D.assertNodeType)("TypeParameterInstantiation"),
        optional: !0
      },
      typeParameters: {
        validate: (0, D.assertNodeType)("TSTypeParameterInstantiation"),
        optional: !0
      }
    })
  });
  re("CatchClause", {
    visitor: ["param", "body"],
    fields: {
      param: {
        validate: (0, D.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
        optional: !0
      },
      body: {
        validate: (0, D.assertNodeType)("BlockStatement")
      }
    },
    aliases: ["Scopable", "BlockParent"]
  });
  re("ConditionalExpression", {
    visitor: ["test", "consequent", "alternate"],
    fields: {
      test: {
        validate: (0, D.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, D.assertNodeType)("Expression")
      },
      alternate: {
        validate: (0, D.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression", "Conditional"]
  });
  re("ContinueStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, D.assertNodeType)("Identifier"),
        optional: !0
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  re("DebuggerStatement", {
    aliases: ["Statement"]
  });
  re("DoWhileStatement", {
    builder: ["test", "body"],
    visitor: ["body", "test"],
    fields: {
      test: {
        validate: (0, D.assertNodeType)("Expression")
      },
      body: {
        validate: (0, D.assertNodeType)("Statement")
      }
    },
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
  });
  re("EmptyStatement", {
    aliases: ["Statement"]
  });
  re("ExpressionStatement", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, D.assertNodeType)("Expression")
      }
    },
    aliases: ["Statement", "ExpressionWrapper"]
  });
  re("File", {
    builder: ["program", "comments", "tokens"],
    visitor: ["program"],
    fields: {
      program: {
        validate: (0, D.assertNodeType)("Program")
      },
      comments: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.assertEach)((0, D.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(
        () => {
        }, {
          each: {
            oneOfNodeTypes: ["CommentBlock", "CommentLine"]
          }
        }),
        optional: !0
      },
      tokens: {
        validate: (0, D.assertEach)(Object.assign(() => {
        }, {
          type: "any"
        })),
        optional: !0
      }
    }
  });
  re("ForInStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "Array\
Pattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, D.assertNodeType)("Var\
iableDeclaration", "LVal")
      },
      right: {
        validate: (0, D.assertNodeType)("Expression")
      },
      body: {
        validate: (0, D.assertNodeType)("Statement")
      }
    }
  });
  re("ForStatement", {
    visitor: ["init", "test", "update", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
    fields: {
      init: {
        validate: (0, D.assertNodeType)("VariableDeclaration", "Expression"),
        optional: !0
      },
      test: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      },
      update: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      },
      body: {
        validate: (0, D.assertNodeType)("Statement")
      }
    }
  });
  var mi = /* @__PURE__ */ i(() => ({
    params: (0, D.validateArrayOfType)("Identifier", "Pattern", "RestElement"),
    generator: {
      default: !1
    },
    async: {
      default: !1
    }
  }), "functionCommon");
  Gt.functionCommon = mi;
  var Is = /* @__PURE__ */ i(() => ({
    returnType: {
      validate: (0, D.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: !0
    },
    typeParameters: {
      validate: (0, D.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
      optional: !0
    }
  }), "functionTypeAnnotationCommon");
  Gt.functionTypeAnnotationCommon = Is;
  var X1 = /* @__PURE__ */ i(() => Object.assign({}, mi(), {
    declare: {
      validate: (0, D.assertValueType)("boolean"),
      optional: !0
    },
    id: {
      validate: (0, D.assertNodeType)("Identifier"),
      optional: !0
    }
  }), "functionDeclarationCommon");
  Gt.functionDeclarationCommon = X1;
  re("FunctionDeclaration", {
    builder: ["id", "params", "body", "generator", "async"],
    visitor: ["id", "typeParameters", "params", "returnType", "body"],
    fields: Object.assign({}, X1(), Is(), {
      body: {
        validate: (0, D.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, D.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: !0
      }
    }),
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
    validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
      let e = (0, D.assertNodeType)("Identifier");
      return function(t, r, n) {
        (0, Zt.default)("ExportDefaultDeclaration", t) || e(n, "id", n.id);
      };
    }() : void 0
  });
  re("FunctionExpression", {
    inherits: "FunctionDeclaration",
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, mi(), Is(), {
      id: {
        validate: (0, D.assertNodeType)("Identifier"),
        optional: !0
      },
      body: {
        validate: (0, D.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, D.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: !0
      }
    })
  });
  var yi = /* @__PURE__ */ i(() => ({
    typeAnnotation: {
      validate: (0, D.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: !0
    },
    optional: {
      validate: (0, D.assertValueType)("boolean"),
      optional: !0
    },
    decorators: {
      validate: (0, D.arrayOfType)("Decorator"),
      optional: !0
    }
  }), "patternLikeCommon");
  Gt.patternLikeCommon = yi;
  re("Identifier", {
    builder: ["name"],
    visitor: ["typeAnnotation", "decorators"],
    aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
    fields: Object.assign({}, yi(), {
      name: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertValueType)("string"), Object.assign(function(e, t, r) {
          if (!(0, r8.default)(r, !1))
            throw new TypeError(`"${r}" is not a valid identifier name`);
        }, {
          type: "string"
        })) : (0, D.assertValueType)("string")
      }
    }),
    validate: process.env.BABEL_TYPES_8_BREAKING ? function(e, t, r) {
      let n = /\.(\w+)$/.exec(t);
      if (!n) return;
      let [, s] = n, a = {
        computed: !1
      };
      if (s === "property") {
        if ((0, Zt.default)("MemberExpression", e, a) || (0, Zt.default)("OptionalMemberExpression", e, a)) return;
      } else if (s === "key") {
        if ((0, Zt.default)("Property", e, a) || (0, Zt.default)("Method", e, a)) return;
      } else if (s === "exported") {
        if ((0, Zt.default)("ExportSpecifier", e)) return;
      } else if (s === "imported") {
        if ((0, Zt.default)("ImportSpecifier", e, {
          imported: r
        })) return;
      } else if (s === "meta" && (0, Zt.default)("MetaProperty", e, {
        meta: r
      }))
        return;
      if (((0, z1.isKeyword)(r.name) || (0, z1.isReservedWord)(r.name, !1)) && r.name !== "this")
        throw new TypeError(`"${r.name}" is not a valid identifier`);
    } : void 0
  });
  re("IfStatement", {
    visitor: ["test", "consequent", "alternate"],
    aliases: ["Statement", "Conditional"],
    fields: {
      test: {
        validate: (0, D.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, D.assertNodeType)("Statement")
      },
      alternate: {
        optional: !0,
        validate: (0, D.assertNodeType)("Statement")
      }
    }
  });
  re("LabeledStatement", {
    visitor: ["label", "body"],
    aliases: ["Statement"],
    fields: {
      label: {
        validate: (0, D.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, D.assertNodeType)("Statement")
      }
    }
  });
  re("StringLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, D.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  re("NumericLiteral", {
    builder: ["value"],
    deprecatedAlias: "NumberLiteral",
    fields: {
      value: {
        validate: (0, D.chain)((0, D.assertValueType)("number"), Object.assign(function(e, t, r) {
          if (1 / r < 0 || !Number.isFinite(r)) {
            let n = new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${r}) instead.`);
          }
        }, {
          type: "number"
        }))
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  re("NullLiteral", {
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  re("BooleanLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, D.assertValueType)("boolean")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  re("RegExpLiteral", {
    builder: ["pattern", "flags"],
    deprecatedAlias: "RegexLiteral",
    aliases: ["Expression", "Pureish", "Literal"],
    fields: {
      pattern: {
        validate: (0, D.assertValueType)("string")
      },
      flags: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertValueType)("string"), Object.assign(function(e, t, r) {
          let n = /[^gimsuy]/.exec(r);
          if (n)
            throw new TypeError(`"${n[0]}" is not a valid RegExp flag`);
        }, {
          type: "string"
        })) : (0, D.assertValueType)("string"),
        default: ""
      }
    }
  });
  re("LogicalExpression", {
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"],
    fields: {
      operator: {
        validate: (0, D.assertOneOf)(...va.LOGICAL_OPERATORS)
      },
      left: {
        validate: (0, D.assertNodeType)("Expression")
      },
      right: {
        validate: (0, D.assertNodeType)("Expression")
      }
    }
  });
  re("MemberExpression", {
    builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]],
    visitor: ["object", "property"],
    aliases: ["Expression", "LVal"],
    fields: Object.assign({
      object: {
        validate: (0, D.assertNodeType)("Expression", "Super")
      },
      property: {
        validate: function() {
          let e = (0, D.assertNodeType)("Identifier", "PrivateName"), t = (0, D.assertNodeType)("Expression"), r = /* @__PURE__ */ i(function(n, s, a) {
            (n.computed ? t : e)(n, s, a);
          }, "validator");
          return r.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], r;
        }()
      },
      computed: {
        default: !1
      }
    }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
      optional: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      }
    })
  });
  re("NewExpression", {
    inherits: "CallExpression"
  });
  re("Program", {
    visitor: ["directives", "body"],
    builder: ["body", "directives", "sourceType", "interpreter"],
    fields: {
      sourceType: {
        validate: (0, D.assertOneOf)("script", "module"),
        default: "script"
      },
      interpreter: {
        validate: (0, D.assertNodeType)("InterpreterDirective"),
        default: null,
        optional: !0
      },
      directives: {
        validate: (0, D.arrayOfType)("Directive"),
        default: []
      },
      body: (0, D.validateArrayOfType)("Statement")
    },
    aliases: ["Scopable", "BlockParent", "Block"]
  });
  re("ObjectExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: (0, D.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement")
    }
  });
  re("ObjectMethod", {
    builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
    visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
    fields: Object.assign({}, mi(), Is(), {
      kind: Object.assign({
        validate: (0, D.assertOneOf)("method", "get", "set")
      }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
        default: "method"
      }),
      computed: {
        default: !1
      },
      key: {
        validate: function() {
          let e = (0, D.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), t = (0, D.assertNodeType)("Expres\
sion"), r = /* @__PURE__ */ i(function(n, s, a) {
            (n.computed ? t : e)(n, s, a);
          }, "validator");
          return r.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], r;
        }()
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      },
      body: {
        validate: (0, D.assertNodeType)("BlockStatement")
      }
    }),
    aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
  });
  re("ObjectProperty", {
    builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]],
    fields: {
      computed: {
        default: !1
      },
      key: {
        validate: function() {
          let e = (0, D.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), t = (0, D.
          assertNodeType)("Expression");
          return Object.assign(function(n, s, a) {
            (n.computed ? t : e)(n, s, a);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]
          });
        }()
      },
      value: {
        validate: (0, D.assertNodeType)("Expression", "PatternLike")
      },
      shorthand: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertValueType)("boolean"), Object.assign(function(e, t, r) {
          if (r) {
            if (e.computed)
              throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
            if (!(0, Zt.default)("Identifier", e.key))
              throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
          }
        }, {
          type: "boolean"
        })) : (0, D.assertValueType)("boolean"),
        default: !1
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      }
    },
    visitor: ["key", "value", "decorators"],
    aliases: ["UserWhitespacable", "Property", "ObjectMember"],
    validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
      let e = (0, D.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssert\
ion"), t = (0, D.assertNodeType)("Expression");
      return function(r, n, s) {
        ((0, Zt.default)("ObjectPattern", r) ? e : t)(s, "value", s.value);
      };
    }() : void 0
  });
  re("RestElement", {
    visitor: ["argument", "typeAnnotation"],
    builder: ["argument"],
    aliases: ["LVal", "PatternLike"],
    deprecatedAlias: "RestProperty",
    fields: Object.assign({}, yi(), {
      argument: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpressio\
n", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, D.assertNodeType)("LVal")
      }
    }),
    validate: process.env.BABEL_TYPES_8_BREAKING ? function(e, t) {
      let r = /(\w+)\[(\d+)\]/.exec(t);
      if (!r) throw new Error("Internal Babel error: malformed key.");
      let [, n, s] = r;
      if (e[n].length > +s + 1)
        throw new TypeError(`RestElement must be last element of ${n}`);
    } : void 0
  });
  re("ReturnStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      }
    }
  });
  re("SequenceExpression", {
    visitor: ["expressions"],
    fields: {
      expressions: (0, D.validateArrayOfType)("Expression")
    },
    aliases: ["Expression"]
  });
  re("ParenthesizedExpression", {
    visitor: ["expression"],
    aliases: ["Expression", "ExpressionWrapper"],
    fields: {
      expression: {
        validate: (0, D.assertNodeType)("Expression")
      }
    }
  });
  re("SwitchCase", {
    visitor: ["test", "consequent"],
    fields: {
      test: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      },
      consequent: (0, D.validateArrayOfType)("Statement")
    }
  });
  re("SwitchStatement", {
    visitor: ["discriminant", "cases"],
    aliases: ["Statement", "BlockParent", "Scopable"],
    fields: {
      discriminant: {
        validate: (0, D.assertNodeType)("Expression")
      },
      cases: (0, D.validateArrayOfType)("SwitchCase")
    }
  });
  re("ThisExpression", {
    aliases: ["Expression"]
  });
  re("ThrowStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, D.assertNodeType)("Expression")
      }
    }
  });
  re("TryStatement", {
    visitor: ["block", "handler", "finalizer"],
    aliases: ["Statement"],
    fields: {
      block: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertNodeType)("BlockStatement"), Object.assign(function(e) {
          if (!e.handler && !e.finalizer)
            throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }, {
          oneOfNodeTypes: ["BlockStatement"]
        })) : (0, D.assertNodeType)("BlockStatement")
      },
      handler: {
        optional: !0,
        validate: (0, D.assertNodeType)("CatchClause")
      },
      finalizer: {
        optional: !0,
        validate: (0, D.assertNodeType)("BlockStatement")
      }
    }
  });
  re("UnaryExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: !0
      },
      argument: {
        validate: (0, D.assertNodeType)("Expression")
      },
      operator: {
        validate: (0, D.assertOneOf)(...va.UNARY_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["UnaryLike", "Expression"]
  });
  re("UpdateExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: !1
      },
      argument: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.assertNodeType)("Identifier", "MemberExpression") : (0, D.assertNodeType)("Expr\
ession")
      },
      operator: {
        validate: (0, D.assertOneOf)(...va.UPDATE_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["Expression"]
  });
  re("VariableDeclaration", {
    builder: ["kind", "declarations"],
    visitor: ["declarations"],
    aliases: ["Statement", "Declaration"],
    fields: {
      declare: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      kind: {
        validate: (0, D.assertOneOf)("var", "let", "const", "using", "await using")
      },
      declarations: (0, D.validateArrayOfType)("VariableDeclarator")
    },
    validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
      let e = (0, D.assertNodeType)("Identifier");
      return function(t, r, n) {
        if ((0, Zt.default)("ForXStatement", t, {
          left: n
        })) {
          if (n.declarations.length !== 1)
            throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${t.type}`);
        } else
          n.declarations.forEach((s) => {
            s.init || e(s, "id", s.id);
          });
      };
    })() : void 0
  });
  re("VariableDeclarator", {
    visitor: ["id", "init"],
    fields: {
      id: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern") : (0, D.assertNodeType)(
        "LVal")
      },
      definite: {
        optional: !0,
        validate: (0, D.assertValueType)("boolean")
      },
      init: {
        optional: !0,
        validate: (0, D.assertNodeType)("Expression")
      }
    }
  });
  re("WhileStatement", {
    visitor: ["test", "body"],
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
    fields: {
      test: {
        validate: (0, D.assertNodeType)("Expression")
      },
      body: {
        validate: (0, D.assertNodeType)("Statement")
      }
    }
  });
  re("WithStatement", {
    visitor: ["object", "body"],
    aliases: ["Statement"],
    fields: {
      object: {
        validate: (0, D.assertNodeType)("Expression")
      },
      body: {
        validate: (0, D.assertNodeType)("Statement")
      }
    }
  });
  re("AssignmentPattern", {
    visitor: ["left", "right", "decorators"],
    builder: ["left", "right"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, yi(), {
      left: {
        validate: (0, D.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExp\
ression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, D.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      }
    })
  });
  re("ArrayPattern", {
    visitor: ["elements", "typeAnnotation"],
    builder: ["elements"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, yi(), {
      elements: {
        validate: (0, D.chain)((0, D.assertValueType)("array"), (0, D.assertEach)((0, D.assertNodeOrValueType)("null", "PatternLike", "LVal")))
      }
    })
  });
  re("ArrowFunctionExpression", {
    builder: ["params", "body", "async"],
    visitor: ["typeParameters", "params", "returnType", "body"],
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, mi(), Is(), {
      expression: {
        validate: (0, D.assertValueType)("boolean")
      },
      body: {
        validate: (0, D.assertNodeType)("BlockStatement", "Expression")
      },
      predicate: {
        validate: (0, D.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: !0
      }
    })
  });
  re("ClassBody", {
    visitor: ["body"],
    fields: {
      body: (0, D.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty",
      "TSDeclareMethod", "TSIndexSignature", "StaticBlock")
    }
  });
  re("ClassExpression", {
    builder: ["id", "superClass", "body", "decorators"],
    visitor: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body"],
    aliases: ["Scopable", "Class", "Expression"],
    fields: {
      id: {
        validate: (0, D.assertNodeType)("Identifier"),
        optional: !0
      },
      typeParameters: {
        validate: (0, D.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: !0
      },
      body: {
        validate: (0, D.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: !0,
        validate: (0, D.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, D.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      },
      implements: {
        validate: (0, D.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
        optional: !0
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      },
      mixins: {
        validate: (0, D.assertNodeType)("InterfaceExtends"),
        optional: !0
      }
    }
  });
  re("ClassDeclaration", {
    inherits: "ClassExpression",
    aliases: ["Scopable", "Class", "Statement", "Declaration"],
    fields: {
      id: {
        validate: (0, D.assertNodeType)("Identifier"),
        optional: !0
      },
      typeParameters: {
        validate: (0, D.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: !0
      },
      body: {
        validate: (0, D.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: !0,
        validate: (0, D.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, D.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      },
      implements: {
        validate: (0, D.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
        optional: !0
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      },
      mixins: {
        validate: (0, D.assertNodeType)("InterfaceExtends"),
        optional: !0
      },
      declare: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      abstract: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      }
    },
    validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
      let e = (0, D.assertNodeType)("Identifier");
      return function(t, r, n) {
        (0, Zt.default)("ExportDefaultDeclaration", t) || e(n, "id", n.id);
      };
    }() : void 0
  });
  var uf = Gt.importAttributes = {
    attributes: {
      optional: !0,
      validate: (0, D.arrayOfType)("ImportAttribute")
    },
    assertions: {
      deprecated: !0,
      optional: !0,
      validate: (0, D.arrayOfType)("ImportAttribute")
    }
  };
  re("ExportAllDeclaration", {
    builder: ["source"],
    visitor: ["source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: Object.assign({
      source: {
        validate: (0, D.assertNodeType)("StringLiteral")
      },
      exportKind: (0, D.validateOptional)((0, D.assertOneOf)("type", "value"))
    }, uf)
  });
  re("ExportDefaultDeclaration", {
    visitor: ["declaration"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: (0, D.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"),
      exportKind: (0, D.validateOptional)((0, D.assertOneOf)("value"))
    }
  });
  re("ExportNamedDeclaration", {
    builder: ["declaration", "specifiers", "source"],
    visitor: process.env ? ["declaration", "specifiers", "source", "attributes"] : ["declaration", "specifiers", "source", "attributes", "as\
sertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: Object.assign({
      declaration: {
        optional: !0,
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertNodeType)("Declaration"), Object.assign(function(e, t, r) {
          if (r && e.specifiers.length)
            throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
          if (r && e.source)
            throw new TypeError("Cannot export a declaration from a source");
        }, {
          oneOfNodeTypes: ["Declaration"]
        })) : (0, D.assertNodeType)("Declaration")
      }
    }, uf, {
      specifiers: {
        default: [],
        validate: (0, D.arrayOf)(function() {
          let e = (0, D.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), t = (0, D.assertNodeType)(
          "ExportSpecifier");
          return process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function(r, n, s) {
            (r.source ? e : t)(r, n, s);
          }, {
            oneOfNodeTypes: ["ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"]
          }) : e;
        }())
      },
      source: {
        validate: (0, D.assertNodeType)("StringLiteral"),
        optional: !0
      },
      exportKind: (0, D.validateOptional)((0, D.assertOneOf)("type", "value"))
    })
  });
  re("ExportSpecifier", {
    visitor: ["local", "exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, D.assertNodeType)("Identifier")
      },
      exported: {
        validate: (0, D.assertNodeType)("Identifier", "StringLiteral")
      },
      exportKind: {
        validate: (0, D.assertOneOf)("type", "value"),
        optional: !0
      }
    }
  });
  re("ForOfStatement", {
    visitor: ["left", "right", "body"],
    builder: ["left", "right", "body", "await"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, D.assertNodeType)("VariableDeclaration", "LVal");
          let e = (0, D.assertNodeType)("VariableDeclaration"), t = (0, D.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "\
ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return Object.assign(function(r, n, s) {
            (0, Zt.default)("VariableDeclaration", s) ? e(r, n, s) : t(r, n, s);
          }, {
            oneOfNodeTypes: ["VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TS\
SatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression"]
          });
        }()
      },
      right: {
        validate: (0, D.assertNodeType)("Expression")
      },
      body: {
        validate: (0, D.assertNodeType)("Statement")
      },
      await: {
        default: !1
      }
    }
  });
  re("ImportDeclaration", {
    builder: ["specifiers", "source"],
    visitor: ["specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],
    fields: Object.assign({}, uf, {
      module: {
        optional: !0,
        validate: (0, D.assertValueType)("boolean")
      },
      phase: {
        default: null,
        validate: (0, D.assertOneOf)("source", "defer")
      },
      specifiers: (0, D.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"),
      source: {
        validate: (0, D.assertNodeType)("StringLiteral")
      },
      importKind: {
        validate: (0, D.assertOneOf)("type", "typeof", "value"),
        optional: !0
      }
    })
  });
  re("ImportDefaultSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, D.assertNodeType)("Identifier")
      }
    }
  });
  re("ImportNamespaceSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, D.assertNodeType)("Identifier")
      }
    }
  });
  re("ImportSpecifier", {
    visitor: ["imported", "local"],
    builder: ["local", "imported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, D.assertNodeType)("Identifier")
      },
      imported: {
        validate: (0, D.assertNodeType)("Identifier", "StringLiteral")
      },
      importKind: {
        validate: (0, D.assertOneOf)("type", "typeof", "value"),
        optional: !0
      }
    }
  });
  re("ImportExpression", {
    visitor: ["source", "options"],
    aliases: ["Expression"],
    fields: {
      phase: {
        default: null,
        validate: (0, D.assertOneOf)("source", "defer")
      },
      source: {
        validate: (0, D.assertNodeType)("Expression")
      },
      options: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      }
    }
  });
  re("MetaProperty", {
    visitor: ["meta", "property"],
    aliases: ["Expression"],
    fields: {
      meta: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertNodeType)("Identifier"), Object.assign(function(e, t, r) {
          let n;
          switch (r.name) {
            case "function":
              n = "sent";
              break;
            case "new":
              n = "target";
              break;
            case "import":
              n = "meta";
              break;
          }
          if (!(0, Zt.default)("Identifier", e.property, {
            name: n
          }))
            throw new TypeError("Unrecognised MetaProperty");
        }, {
          oneOfNodeTypes: ["Identifier"]
        })) : (0, D.assertNodeType)("Identifier")
      },
      property: {
        validate: (0, D.assertNodeType)("Identifier")
      }
    }
  });
  var ul = /* @__PURE__ */ i(() => ({
    abstract: {
      validate: (0, D.assertValueType)("boolean"),
      optional: !0
    },
    accessibility: {
      validate: (0, D.assertOneOf)("public", "private", "protected"),
      optional: !0
    },
    static: {
      default: !1
    },
    override: {
      default: !1
    },
    computed: {
      default: !1
    },
    optional: {
      validate: (0, D.assertValueType)("boolean"),
      optional: !0
    },
    key: {
      validate: (0, D.chain)(function() {
        let e = (0, D.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), t = (0, D.assertNodeType)("Expressi\
on");
        return function(r, n, s) {
          (r.computed ? t : e)(r, n, s);
        };
      }(), (0, D.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))
    }
  }), "classMethodOrPropertyCommon");
  Gt.classMethodOrPropertyCommon = ul;
  var cf = /* @__PURE__ */ i(() => Object.assign({}, mi(), ul(), {
    params: (0, D.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"),
    kind: {
      validate: (0, D.assertOneOf)("get", "set", "method", "constructor"),
      default: "method"
    },
    access: {
      validate: (0, D.chain)((0, D.assertValueType)("string"), (0, D.assertOneOf)("public", "private", "protected")),
      optional: !0
    },
    decorators: {
      validate: (0, D.arrayOfType)("Decorator"),
      optional: !0
    }
  }), "classMethodOrDeclareMethodCommon");
  Gt.classMethodOrDeclareMethodCommon = cf;
  re("ClassMethod", {
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
    builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
    visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
    fields: Object.assign({}, cf(), Is(), {
      body: {
        validate: (0, D.assertNodeType)("BlockStatement")
      }
    })
  });
  re("ObjectPattern", {
    visitor: ["properties", "typeAnnotation", "decorators"],
    builder: ["properties"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, yi(), {
      properties: (0, D.validateArrayOfType)("RestElement", "ObjectProperty")
    })
  });
  re("SpreadElement", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    deprecatedAlias: "SpreadProperty",
    fields: {
      argument: {
        validate: (0, D.assertNodeType)("Expression")
      }
    }
  });
  re("Super", {
    aliases: ["Expression"]
  });
  re("TaggedTemplateExpression", {
    visitor: ["tag", "typeParameters", "quasi"],
    builder: ["tag", "quasi"],
    aliases: ["Expression"],
    fields: {
      tag: {
        validate: (0, D.assertNodeType)("Expression")
      },
      quasi: {
        validate: (0, D.assertNodeType)("TemplateLiteral")
      },
      typeParameters: {
        validate: (0, D.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      }
    }
  });
  re("TemplateElement", {
    builder: ["value", "tail"],
    fields: {
      value: {
        validate: (0, D.chain)((0, D.assertShape)({
          raw: {
            validate: (0, D.assertValueType)("string")
          },
          cooked: {
            validate: (0, D.assertValueType)("string"),
            optional: !0
          }
        }), /* @__PURE__ */ i(function(t) {
          let r = t.value.raw, n = !1, s = /* @__PURE__ */ i(() => {
            throw new Error("Internal @babel/types error.");
          }, "error"), {
            str: a,
            firstInvalidLoc: o
          } = (0, n8.readStringContents)("template", r, 0, 0, 0, {
            unterminated() {
              n = !0;
            },
            strictNumericEscape: s,
            invalidEscapeSequence: s,
            numericSeparatorInEscapeSequence: s,
            unexpectedNumericSeparator: s,
            invalidDigit: s,
            invalidCodePoint: s
          });
          if (!n) throw new Error("Invalid raw");
          t.value.cooked = o ? null : a;
        }, "templateElementCookedValidator"))
      },
      tail: {
        default: !1
      }
    }
  });
  re("TemplateLiteral", {
    visitor: ["quasis", "expressions"],
    aliases: ["Expression", "Literal"],
    fields: {
      quasis: (0, D.validateArrayOfType)("TemplateElement"),
      expressions: {
        validate: (0, D.chain)((0, D.assertValueType)("array"), (0, D.assertEach)((0, D.assertNodeType)("Expression", "TSType")), function(e, t, r) {
          if (e.quasis.length !== r.length + 1)
            throw new TypeError(`Number of ${e.type} quasis should be exactly one more than the number of expressions.
Expected ${r.length + 1} quasis but got ${e.quasis.length}`);
        })
      }
    }
  });
  re("YieldExpression", {
    builder: ["argument", "delegate"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      delegate: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertValueType)("boolean"), Object.assign(function(e, t, r) {
          if (r && !e.argument)
            throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }, {
          type: "boolean"
        })) : (0, D.assertValueType)("boolean"),
        default: !1
      },
      argument: {
        optional: !0,
        validate: (0, D.assertNodeType)("Expression")
      }
    }
  });
  re("AwaitExpression", {
    builder: ["argument"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      argument: {
        validate: (0, D.assertNodeType)("Expression")
      }
    }
  });
  re("Import", {
    aliases: ["Expression"]
  });
  re("BigIntLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, D.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  re("ExportNamespaceSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, D.assertNodeType)("Identifier")
      }
    }
  });
  re("OptionalMemberExpression", {
    builder: ["object", "property", "computed", "optional"],
    visitor: ["object", "property"],
    aliases: ["Expression"],
    fields: {
      object: {
        validate: (0, D.assertNodeType)("Expression")
      },
      property: {
        validate: function() {
          let e = (0, D.assertNodeType)("Identifier"), t = (0, D.assertNodeType)("Expression");
          return Object.assign(function(n, s, a) {
            (n.computed ? t : e)(n, s, a);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier"]
          });
        }()
      },
      computed: {
        default: !1
      },
      optional: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertValueType)("boolean"), (0, D.assertOptionalChainStart)()) : (0, D.
        assertValueType)("boolean")
      }
    }
  });
  re("OptionalCallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments", "optional"],
    aliases: ["Expression"],
    fields: {
      callee: {
        validate: (0, D.assertNodeType)("Expression")
      },
      arguments: (0, D.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
      optional: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, D.chain)((0, D.assertValueType)("boolean"), (0, D.assertOptionalChainStart)()) : (0, D.
        assertValueType)("boolean")
      },
      typeArguments: {
        validate: (0, D.assertNodeType)("TypeParameterInstantiation"),
        optional: !0
      },
      typeParameters: {
        validate: (0, D.assertNodeType)("TSTypeParameterInstantiation"),
        optional: !0
      }
    }
  });
  re("ClassProperty", {
    visitor: ["decorators", "key", "typeAnnotation", "value"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property"],
    fields: Object.assign({}, ul(), {
      value: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      },
      definite: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      typeAnnotation: {
        validate: (0, D.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: !0
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      },
      readonly: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      declare: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      variance: {
        validate: (0, D.assertNodeType)("Variance"),
        optional: !0
      }
    })
  });
  re("ClassAccessorProperty", {
    visitor: ["decorators", "key", "typeAnnotation", "value"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property", "Accessor"],
    fields: Object.assign({}, ul(), {
      key: {
        validate: (0, D.chain)(function() {
          let e = (0, D.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), t = (0, D.assertNodeType)(
          "Expression");
          return function(r, n, s) {
            (r.computed ? t : e)(r, n, s);
          };
        }(), (0, D.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))
      },
      value: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      },
      definite: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      typeAnnotation: {
        validate: (0, D.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: !0
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      },
      readonly: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      declare: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      variance: {
        validate: (0, D.assertNodeType)("Variance"),
        optional: !0
      }
    })
  });
  re("ClassPrivateProperty", {
    visitor: ["decorators", "key", "typeAnnotation", "value"],
    builder: ["key", "value", "decorators", "static"],
    aliases: ["Property", "Private"],
    fields: {
      key: {
        validate: (0, D.assertNodeType)("PrivateName")
      },
      value: {
        validate: (0, D.assertNodeType)("Expression"),
        optional: !0
      },
      typeAnnotation: {
        validate: (0, D.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: !0
      },
      decorators: {
        validate: (0, D.arrayOfType)("Decorator"),
        optional: !0
      },
      static: {
        validate: (0, D.assertValueType)("boolean"),
        default: !1
      },
      readonly: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      definite: {
        validate: (0, D.assertValueType)("boolean"),
        optional: !0
      },
      variance: {
        validate: (0, D.assertNodeType)("Variance"),
        optional: !0
      }
    }
  });
  re("ClassPrivateMethod", {
    builder: ["kind", "key", "params", "body", "static"],
    visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
    fields: Object.assign({}, cf(), Is(), {
      kind: {
        validate: (0, D.assertOneOf)("get", "set", "method"),
        default: "method"
      },
      key: {
        validate: (0, D.assertNodeType)("PrivateName")
      },
      body: {
        validate: (0, D.assertNodeType)("BlockStatement")
      }
    })
  });
  re("PrivateName", {
    visitor: ["id"],
    aliases: ["Private"],
    fields: {
      id: {
        validate: (0, D.assertNodeType)("Identifier")
      }
    }
  });
  re("StaticBlock", {
    visitor: ["body"],
    fields: {
      body: (0, D.validateArrayOfType)("Statement")
    },
    aliases: ["Scopable", "BlockParent", "FunctionParent"]
  });
});

// ../node_modules/@babel/types/lib/definitions/flow.js
var Z1 = A(() => {
  "use strict";
  var Q1 = Pa(), M = an(), ge = (0, M.defineAliasedType)("Flow"), pf = /* @__PURE__ */ i((e) => {
    let t = e === "DeclareClass";
    ge(e, {
      builder: ["id", "typeParameters", "extends", "body"],
      visitor: ["id", "typeParameters", "extends", ...t ? ["mixins", "implements"] : [], "body"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: Object.assign({
        id: (0, M.validateType)("Identifier"),
        typeParameters: (0, M.validateOptionalType)("TypeParameterDeclaration"),
        extends: (0, M.validateOptional)((0, M.arrayOfType)("InterfaceExtends"))
      }, t ? {
        mixins: (0, M.validateOptional)((0, M.arrayOfType)("InterfaceExtends")),
        implements: (0, M.validateOptional)((0, M.arrayOfType)("ClassImplements"))
      } : {}, {
        body: (0, M.validateType)("ObjectTypeAnnotation")
      })
    });
  }, "defineInterfaceishType");
  ge("AnyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("ArrayTypeAnnotation", {
    visitor: ["elementType"],
    aliases: ["FlowType"],
    fields: {
      elementType: (0, M.validateType)("FlowType")
    }
  });
  ge("BooleanTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("BooleanLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("NullLiteralTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("ClassImplements", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      typeParameters: (0, M.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  pf("DeclareClass");
  ge("DeclareFunction", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      predicate: (0, M.validateOptionalType)("DeclaredPredicate")
    }
  });
  pf("DeclareInterface");
  ge("DeclareModule", {
    builder: ["id", "body", "kind"],
    visitor: ["id", "body"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, M.validateType)("Identifier", "StringLiteral"),
      body: (0, M.validateType)("BlockStatement"),
      kind: (0, M.validateOptional)((0, M.assertOneOf)("CommonJS", "ES"))
    }
  });
  ge("DeclareModuleExports", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      typeAnnotation: (0, M.validateType)("TypeAnnotation")
    }
  });
  ge("DeclareTypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      typeParameters: (0, M.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, M.validateType)("FlowType")
    }
  });
  ge("DeclareOpaqueType", {
    visitor: ["id", "typeParameters", "supertype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      typeParameters: (0, M.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, M.validateOptionalType)("FlowType"),
      impltype: (0, M.validateOptionalType)("FlowType")
    }
  });
  ge("DeclareVariable", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, M.validateType)("Identifier")
    }
  });
  ge("DeclareExportDeclaration", {
    visitor: ["declaration", "specifiers", "source", "attributes"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: Object.assign({
      declaration: (0, M.validateOptionalType)("Flow"),
      specifiers: (0, M.validateOptional)((0, M.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")),
      source: (0, M.validateOptionalType)("StringLiteral"),
      default: (0, M.validateOptional)((0, M.assertValueType)("boolean"))
    }, Q1.importAttributes)
  });
  ge("DeclareExportAllDeclaration", {
    visitor: ["source", "attributes"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: Object.assign({
      source: (0, M.validateType)("StringLiteral"),
      exportKind: (0, M.validateOptional)((0, M.assertOneOf)("type", "value"))
    }, Q1.importAttributes)
  });
  ge("DeclaredPredicate", {
    visitor: ["value"],
    aliases: ["FlowPredicate"],
    fields: {
      value: (0, M.validateType)("Flow")
    }
  });
  ge("ExistsTypeAnnotation", {
    aliases: ["FlowType"]
  });
  ge("FunctionTypeAnnotation", {
    visitor: ["typeParameters", "params", "rest", "returnType"],
    aliases: ["FlowType"],
    fields: {
      typeParameters: (0, M.validateOptionalType)("TypeParameterDeclaration"),
      params: (0, M.validateArrayOfType)("FunctionTypeParam"),
      rest: (0, M.validateOptionalType)("FunctionTypeParam"),
      this: (0, M.validateOptionalType)("FunctionTypeParam"),
      returnType: (0, M.validateType)("FlowType")
    }
  });
  ge("FunctionTypeParam", {
    visitor: ["name", "typeAnnotation"],
    fields: {
      name: (0, M.validateOptionalType)("Identifier"),
      typeAnnotation: (0, M.validateType)("FlowType"),
      optional: (0, M.validateOptional)((0, M.assertValueType)("boolean"))
    }
  });
  ge("GenericTypeAnnotation", {
    visitor: ["id", "typeParameters"],
    aliases: ["FlowType"],
    fields: {
      id: (0, M.validateType)("Identifier", "QualifiedTypeIdentifier"),
      typeParameters: (0, M.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  ge("InferredPredicate", {
    aliases: ["FlowPredicate"]
  });
  ge("InterfaceExtends", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, M.validateType)("Identifier", "QualifiedTypeIdentifier"),
      typeParameters: (0, M.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  pf("InterfaceDeclaration");
  ge("InterfaceTypeAnnotation", {
    visitor: ["extends", "body"],
    aliases: ["FlowType"],
    fields: {
      extends: (0, M.validateOptional)((0, M.arrayOfType)("InterfaceExtends")),
      body: (0, M.validateType)("ObjectTypeAnnotation")
    }
  });
  ge("IntersectionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, M.validate)((0, M.arrayOfType)("FlowType"))
    }
  });
  ge("MixedTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("EmptyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("NullableTypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowType"],
    fields: {
      typeAnnotation: (0, M.validateType)("FlowType")
    }
  });
  ge("NumberLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, M.validate)((0, M.assertValueType)("number"))
    }
  });
  ge("NumberTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("ObjectTypeAnnotation", {
    visitor: ["properties", "indexers", "callProperties", "internalSlots"],
    aliases: ["FlowType"],
    builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
    fields: {
      properties: (0, M.validate)((0, M.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")),
      indexers: {
        validate: (0, M.arrayOfType)("ObjectTypeIndexer"),
        optional: !0,
        default: []
      },
      callProperties: {
        validate: (0, M.arrayOfType)("ObjectTypeCallProperty"),
        optional: !0,
        default: []
      },
      internalSlots: {
        validate: (0, M.arrayOfType)("ObjectTypeInternalSlot"),
        optional: !0,
        default: []
      },
      exact: {
        validate: (0, M.assertValueType)("boolean"),
        default: !1
      },
      inexact: (0, M.validateOptional)((0, M.assertValueType)("boolean"))
    }
  });
  ge("ObjectTypeInternalSlot", {
    visitor: ["id", "value"],
    builder: ["id", "value", "optional", "static", "method"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      value: (0, M.validateType)("FlowType"),
      optional: (0, M.validate)((0, M.assertValueType)("boolean")),
      static: (0, M.validate)((0, M.assertValueType)("boolean")),
      method: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("ObjectTypeCallProperty", {
    visitor: ["value"],
    aliases: ["UserWhitespacable"],
    fields: {
      value: (0, M.validateType)("FlowType"),
      static: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("ObjectTypeIndexer", {
    visitor: ["variance", "id", "key", "value"],
    builder: ["id", "key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, M.validateOptionalType)("Identifier"),
      key: (0, M.validateType)("FlowType"),
      value: (0, M.validateType)("FlowType"),
      static: (0, M.validate)((0, M.assertValueType)("boolean")),
      variance: (0, M.validateOptionalType)("Variance")
    }
  });
  ge("ObjectTypeProperty", {
    visitor: ["key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      key: (0, M.validateType)("Identifier", "StringLiteral"),
      value: (0, M.validateType)("FlowType"),
      kind: (0, M.validate)((0, M.assertOneOf)("init", "get", "set")),
      static: (0, M.validate)((0, M.assertValueType)("boolean")),
      proto: (0, M.validate)((0, M.assertValueType)("boolean")),
      optional: (0, M.validate)((0, M.assertValueType)("boolean")),
      variance: (0, M.validateOptionalType)("Variance"),
      method: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("ObjectTypeSpreadProperty", {
    visitor: ["argument"],
    aliases: ["UserWhitespacable"],
    fields: {
      argument: (0, M.validateType)("FlowType")
    }
  });
  ge("OpaqueType", {
    visitor: ["id", "typeParameters", "supertype", "impltype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      typeParameters: (0, M.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, M.validateOptionalType)("FlowType"),
      impltype: (0, M.validateType)("FlowType")
    }
  });
  ge("QualifiedTypeIdentifier", {
    visitor: ["qualification", "id"],
    builder: ["id", "qualification"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      qualification: (0, M.validateType)("Identifier", "QualifiedTypeIdentifier")
    }
  });
  ge("StringLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, M.validate)((0, M.assertValueType)("string"))
    }
  });
  ge("StringTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("SymbolTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("ThisTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("TupleTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, M.validate)((0, M.arrayOfType)("FlowType"))
    }
  });
  ge("TypeofTypeAnnotation", {
    visitor: ["argument"],
    aliases: ["FlowType"],
    fields: {
      argument: (0, M.validateType)("FlowType")
    }
  });
  ge("TypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      typeParameters: (0, M.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, M.validateType)("FlowType")
    }
  });
  ge("TypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, M.validateType)("FlowType")
    }
  });
  ge("TypeCastExpression", {
    visitor: ["expression", "typeAnnotation"],
    aliases: ["ExpressionWrapper", "Expression"],
    fields: {
      expression: (0, M.validateType)("Expression"),
      typeAnnotation: (0, M.validateType)("TypeAnnotation")
    }
  });
  ge("TypeParameter", {
    visitor: ["bound", "default", "variance"],
    fields: {
      name: (0, M.validate)((0, M.assertValueType)("string")),
      bound: (0, M.validateOptionalType)("TypeAnnotation"),
      default: (0, M.validateOptionalType)("FlowType"),
      variance: (0, M.validateOptionalType)("Variance")
    }
  });
  ge("TypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: (0, M.validate)((0, M.arrayOfType)("TypeParameter"))
    }
  });
  ge("TypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: (0, M.validate)((0, M.arrayOfType)("FlowType"))
    }
  });
  ge("UnionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, M.validate)((0, M.arrayOfType)("FlowType"))
    }
  });
  ge("Variance", {
    builder: ["kind"],
    fields: {
      kind: (0, M.validate)((0, M.assertOneOf)("minus", "plus"))
    }
  });
  ge("VoidTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  ge("EnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      body: (0, M.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody")
    }
  });
  ge("EnumBooleanBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, M.validate)((0, M.assertValueType)("boolean")),
      members: (0, M.validateArrayOfType)("EnumBooleanMember"),
      hasUnknownMembers: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("EnumNumberBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, M.validate)((0, M.assertValueType)("boolean")),
      members: (0, M.validateArrayOfType)("EnumNumberMember"),
      hasUnknownMembers: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("EnumStringBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, M.validate)((0, M.assertValueType)("boolean")),
      members: (0, M.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"),
      hasUnknownMembers: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("EnumSymbolBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      members: (0, M.validateArrayOfType)("EnumDefaultedMember"),
      hasUnknownMembers: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
  ge("EnumBooleanMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      init: (0, M.validateType)("BooleanLiteral")
    }
  });
  ge("EnumNumberMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      init: (0, M.validateType)("NumericLiteral")
    }
  });
  ge("EnumStringMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, M.validateType)("Identifier"),
      init: (0, M.validateType)("StringLiteral")
    }
  });
  ge("EnumDefaultedMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, M.validateType)("Identifier")
    }
  });
  ge("IndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, M.validateType)("FlowType"),
      indexType: (0, M.validateType)("FlowType")
    }
  });
  ge("OptionalIndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, M.validateType)("FlowType"),
      indexType: (0, M.validateType)("FlowType"),
      optional: (0, M.validate)((0, M.assertValueType)("boolean"))
    }
  });
});

// ../node_modules/@babel/types/lib/definitions/jsx.js
var eE = A(() => {
  "use strict";
  var yt = an(), er = (0, yt.defineAliasedType)("JSX");
  er("JSXAttribute", {
    visitor: ["name", "value"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, yt.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
      },
      value: {
        optional: !0,
        validate: (0, yt.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
      }
    }
  });
  er("JSXClosingElement", {
    visitor: ["name"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, yt.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      }
    }
  });
  er("JSXElement", {
    builder: ["openingElement", "closingElement", "children", "selfClosing"],
    visitor: ["openingElement", "children", "closingElement"],
    aliases: ["Immutable", "Expression"],
    fields: Object.assign({
      openingElement: {
        validate: (0, yt.assertNodeType)("JSXOpeningElement")
      },
      closingElement: {
        optional: !0,
        validate: (0, yt.assertNodeType)("JSXClosingElement")
      },
      children: (0, yt.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
    }, {
      selfClosing: {
        validate: (0, yt.assertValueType)("boolean"),
        optional: !0
      }
    })
  });
  er("JSXEmptyExpression", {});
  er("JSXExpressionContainer", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, yt.assertNodeType)("Expression", "JSXEmptyExpression")
      }
    }
  });
  er("JSXSpreadChild", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, yt.assertNodeType)("Expression")
      }
    }
  });
  er("JSXIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, yt.assertValueType)("string")
      }
    }
  });
  er("JSXMemberExpression", {
    visitor: ["object", "property"],
    fields: {
      object: {
        validate: (0, yt.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
      },
      property: {
        validate: (0, yt.assertNodeType)("JSXIdentifier")
      }
    }
  });
  er("JSXNamespacedName", {
    visitor: ["namespace", "name"],
    fields: {
      namespace: {
        validate: (0, yt.assertNodeType)("JSXIdentifier")
      },
      name: {
        validate: (0, yt.assertNodeType)("JSXIdentifier")
      }
    }
  });
  er("JSXOpeningElement", {
    builder: ["name", "attributes", "selfClosing"],
    visitor: ["name", "attributes"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, yt.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      },
      selfClosing: {
        default: !1
      },
      attributes: (0, yt.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"),
      typeParameters: {
        validate: (0, yt.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      }
    }
  });
  er("JSXSpreadAttribute", {
    visitor: ["argument"],
    fields: {
      argument: {
        validate: (0, yt.assertNodeType)("Expression")
      }
    }
  });
  er("JSXText", {
    aliases: ["Immutable"],
    builder: ["value"],
    fields: {
      value: {
        validate: (0, yt.assertValueType)("string")
      }
    }
  });
  er("JSXFragment", {
    builder: ["openingFragment", "closingFragment", "children"],
    visitor: ["openingFragment", "children", "closingFragment"],
    aliases: ["Immutable", "Expression"],
    fields: {
      openingFragment: {
        validate: (0, yt.assertNodeType)("JSXOpeningFragment")
      },
      closingFragment: {
        validate: (0, yt.assertNodeType)("JSXClosingFragment")
      },
      children: (0, yt.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
    }
  });
  er("JSXOpeningFragment", {
    aliases: ["Immutable"]
  });
  er("JSXClosingFragment", {
    aliases: ["Immutable"]
  });
});

// ../node_modules/@babel/types/lib/definitions/placeholders.js
var hf = A((Qn) => {
  "use strict";
  Object.defineProperty(Qn, "__esModule", {
    value: !0
  });
  Qn.PLACEHOLDERS_FLIPPED_ALIAS = Qn.PLACEHOLDERS_ALIAS = Qn.PLACEHOLDERS = void 0;
  var s8 = an(), i8 = Qn.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBo\
dy", "Pattern"], df = Qn.PLACEHOLDERS_ALIAS = {
    Declaration: ["Statement"],
    Pattern: ["PatternLike", "LVal"]
  };
  for (let e of i8) {
    let t = s8.ALIAS_KEYS[e];
    t != null && t.length && (df[e] = t);
  }
  var ff = Qn.PLACEHOLDERS_FLIPPED_ALIAS = {};
  Object.keys(df).forEach((e) => {
    df[e].forEach((t) => {
      hasOwnProperty.call(ff, t) || (ff[t] = []), ff[t].push(e);
    });
  });
});

// ../node_modules/@babel/types/lib/definitions/misc.js
var tE = A(() => {
  "use strict";
  var cl = an(), a8 = hf(), o8 = Pa(), mf = (0, cl.defineAliasedType)("Miscellaneous");
  mf("Noop", {
    visitor: []
  });
  mf("Placeholder", {
    visitor: [],
    builder: ["expectedNode", "name"],
    fields: Object.assign({
      name: {
        validate: (0, cl.assertNodeType)("Identifier")
      },
      expectedNode: {
        validate: (0, cl.assertOneOf)(...a8.PLACEHOLDERS)
      }
    }, (0, o8.patternLikeCommon)())
  });
  mf("V8IntrinsicIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, cl.assertValueType)("string")
      }
    }
  });
});

// ../node_modules/@babel/types/lib/definitions/experimental.js
var rE = A(() => {
  "use strict";
  var at = an();
  (0, at.default)("ArgumentPlaceholder", {});
  (0, at.default)("BindExpression", {
    visitor: ["object", "callee"],
    aliases: ["Expression"],
    fields: process.env.BABEL_TYPES_8_BREAKING ? {
      object: {
        validate: (0, at.assertNodeType)("Expression")
      },
      callee: {
        validate: (0, at.assertNodeType)("Expression")
      }
    } : {
      object: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      },
      callee: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      }
    }
  });
  (0, at.default)("ImportAttribute", {
    visitor: ["key", "value"],
    fields: {
      key: {
        validate: (0, at.assertNodeType)("Identifier", "StringLiteral")
      },
      value: {
        validate: (0, at.assertNodeType)("StringLiteral")
      }
    }
  });
  (0, at.default)("Decorator", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, at.assertNodeType)("Expression")
      }
    }
  });
  (0, at.default)("DoExpression", {
    visitor: ["body"],
    builder: ["body", "async"],
    aliases: ["Expression"],
    fields: {
      body: {
        validate: (0, at.assertNodeType)("BlockStatement")
      },
      async: {
        validate: (0, at.assertValueType)("boolean"),
        default: !1
      }
    }
  });
  (0, at.default)("ExportDefaultSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, at.assertNodeType)("Identifier")
      }
    }
  });
  (0, at.default)("RecordExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: (0, at.validateArrayOfType)("ObjectProperty", "SpreadElement")
    }
  });
  (0, at.default)("TupleExpression", {
    fields: {
      elements: {
        validate: (0, at.arrayOfType)("Expression", "SpreadElement"),
        default: []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  (0, at.default)("DecimalLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, at.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  (0, at.default)("ModuleExpression", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, at.assertNodeType)("Program")
      }
    },
    aliases: ["Expression"]
  });
  (0, at.default)("TopicReference", {
    aliases: ["Expression"]
  });
  (0, at.default)("PipelineTopicExpression", {
    builder: ["expression"],
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, at.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, at.default)("PipelineBareFunction", {
    builder: ["callee"],
    visitor: ["callee"],
    fields: {
      callee: {
        validate: (0, at.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, at.default)("PipelinePrimaryTopicReference", {
    aliases: ["Expression"]
  });
});

// ../node_modules/@babel/types/lib/definitions/typescript.js
var cE = A(() => {
  "use strict";
  var G = an(), nE = Pa(), l8 = fi(), De = (0, G.defineAliasedType)("TypeScript"), pr = (0, G.assertValueType)("boolean"), sE = /* @__PURE__ */ i(
  () => ({
    returnType: {
      validate: (0, G.assertNodeType)("TSTypeAnnotation", "Noop"),
      optional: !0
    },
    typeParameters: {
      validate: (0, G.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
      optional: !0
    }
  }), "tSFunctionTypeAnnotationCommon");
  De("TSParameterProperty", {
    aliases: ["LVal"],
    visitor: ["parameter"],
    fields: {
      accessibility: {
        validate: (0, G.assertOneOf)("public", "private", "protected"),
        optional: !0
      },
      readonly: {
        validate: (0, G.assertValueType)("boolean"),
        optional: !0
      },
      parameter: {
        validate: (0, G.assertNodeType)("Identifier", "AssignmentPattern")
      },
      override: {
        validate: (0, G.assertValueType)("boolean"),
        optional: !0
      },
      decorators: {
        validate: (0, G.arrayOfType)("Decorator"),
        optional: !0
      }
    }
  });
  De("TSDeclareFunction", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, nE.functionDeclarationCommon)(), sE())
  });
  De("TSDeclareMethod", {
    visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, nE.classMethodOrDeclareMethodCommon)(), sE())
  });
  De("TSQualifiedName", {
    aliases: ["TSEntityName"],
    visitor: ["left", "right"],
    fields: {
      left: (0, G.validateType)("TSEntityName"),
      right: (0, G.validateType)("Identifier")
    }
  });
  var pl = /* @__PURE__ */ i(() => ({
    typeParameters: (0, G.validateOptionalType)("TSTypeParameterDeclaration"),
    parameters: (0, G.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"),
    typeAnnotation: (0, G.validateOptionalType)("TSTypeAnnotation")
  }), "signatureDeclarationCommon"), iE = {
    aliases: ["TSTypeElement"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"],
    fields: pl()
  };
  De("TSCallSignatureDeclaration", iE);
  De("TSConstructSignatureDeclaration", iE);
  var aE = /* @__PURE__ */ i(() => ({
    key: (0, G.validateType)("Expression"),
    computed: {
      default: !1
    },
    optional: (0, G.validateOptional)(pr)
  }), "namedTypeElementCommon");
  De("TSPropertySignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeAnnotation"],
    fields: Object.assign({}, aE(), {
      readonly: (0, G.validateOptional)(pr),
      typeAnnotation: (0, G.validateOptionalType)("TSTypeAnnotation"),
      kind: {
        validate: (0, G.assertOneOf)("get", "set")
      }
    })
  });
  De("TSMethodSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
    fields: Object.assign({}, pl(), aE(), {
      kind: {
        validate: (0, G.assertOneOf)("method", "get", "set")
      }
    })
  });
  De("TSIndexSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["parameters", "typeAnnotation"],
    fields: {
      readonly: (0, G.validateOptional)(pr),
      static: (0, G.validateOptional)(pr),
      parameters: (0, G.validateArrayOfType)("Identifier"),
      typeAnnotation: (0, G.validateOptionalType)("TSTypeAnnotation")
    }
  });
  var u8 = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword",
  "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
  for (let e of u8)
    De(e, {
      aliases: ["TSType", "TSBaseType"],
      visitor: [],
      fields: {}
    });
  De("TSThisType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: [],
    fields: {}
  });
  var oE = {
    aliases: ["TSType"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"]
  };
  De("TSFunctionType", Object.assign({}, oE, {
    fields: pl()
  }));
  De("TSConstructorType", Object.assign({}, oE, {
    fields: Object.assign({}, pl(), {
      abstract: (0, G.validateOptional)(pr)
    })
  }));
  De("TSTypeReference", {
    aliases: ["TSType"],
    visitor: ["typeName", "typeParameters"],
    fields: {
      typeName: (0, G.validateType)("TSEntityName"),
      typeParameters: (0, G.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  De("TSTypePredicate", {
    aliases: ["TSType"],
    visitor: ["parameterName", "typeAnnotation"],
    builder: ["parameterName", "typeAnnotation", "asserts"],
    fields: {
      parameterName: (0, G.validateType)("Identifier", "TSThisType"),
      typeAnnotation: (0, G.validateOptionalType)("TSTypeAnnotation"),
      asserts: (0, G.validateOptional)(pr)
    }
  });
  De("TSTypeQuery", {
    aliases: ["TSType"],
    visitor: ["exprName", "typeParameters"],
    fields: {
      exprName: (0, G.validateType)("TSEntityName", "TSImportType"),
      typeParameters: (0, G.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  De("TSTypeLiteral", {
    aliases: ["TSType"],
    visitor: ["members"],
    fields: {
      members: (0, G.validateArrayOfType)("TSTypeElement")
    }
  });
  De("TSArrayType", {
    aliases: ["TSType"],
    visitor: ["elementType"],
    fields: {
      elementType: (0, G.validateType)("TSType")
    }
  });
  De("TSTupleType", {
    aliases: ["TSType"],
    visitor: ["elementTypes"],
    fields: {
      elementTypes: (0, G.validateArrayOfType)("TSType", "TSNamedTupleMember")
    }
  });
  De("TSOptionalType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, G.validateType)("TSType")
    }
  });
  De("TSRestType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, G.validateType)("TSType")
    }
  });
  De("TSNamedTupleMember", {
    visitor: ["label", "elementType"],
    builder: ["label", "elementType", "optional"],
    fields: {
      label: (0, G.validateType)("Identifier"),
      optional: {
        validate: pr,
        default: !1
      },
      elementType: (0, G.validateType)("TSType")
    }
  });
  var lE = {
    aliases: ["TSType"],
    visitor: ["types"],
    fields: {
      types: (0, G.validateArrayOfType)("TSType")
    }
  };
  De("TSUnionType", lE);
  De("TSIntersectionType", lE);
  De("TSConditionalType", {
    aliases: ["TSType"],
    visitor: ["checkType", "extendsType", "trueType", "falseType"],
    fields: {
      checkType: (0, G.validateType)("TSType"),
      extendsType: (0, G.validateType)("TSType"),
      trueType: (0, G.validateType)("TSType"),
      falseType: (0, G.validateType)("TSType")
    }
  });
  De("TSInferType", {
    aliases: ["TSType"],
    visitor: ["typeParameter"],
    fields: {
      typeParameter: (0, G.validateType)("TSTypeParameter")
    }
  });
  De("TSParenthesizedType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, G.validateType)("TSType")
    }
  });
  De("TSTypeOperator", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      operator: (0, G.validate)((0, G.assertValueType)("string")),
      typeAnnotation: (0, G.validateType)("TSType")
    }
  });
  De("TSIndexedAccessType", {
    aliases: ["TSType"],
    visitor: ["objectType", "indexType"],
    fields: {
      objectType: (0, G.validateType)("TSType"),
      indexType: (0, G.validateType)("TSType")
    }
  });
  De("TSMappedType", {
    aliases: ["TSType"],
    visitor: ["typeParameter", "nameType", "typeAnnotation"],
    builder: ["typeParameter", "typeAnnotation", "nameType"],
    fields: Object.assign({}, {
      typeParameter: (0, G.validateType)("TSTypeParameter")
    }, {
      readonly: (0, G.validateOptional)((0, G.assertOneOf)(!0, !1, "+", "-")),
      optional: (0, G.validateOptional)((0, G.assertOneOf)(!0, !1, "+", "-")),
      typeAnnotation: (0, G.validateOptionalType)("TSType"),
      nameType: (0, G.validateOptionalType)("TSType")
    })
  });
  De("TSLiteralType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: ["literal"],
    fields: {
      literal: {
        validate: function() {
          let e = (0, G.assertNodeType)("NumericLiteral", "BigIntLiteral"), t = (0, G.assertOneOf)("-"), r = (0, G.assertNodeType)("NumericL\
iteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function n(s, a, o) {
            (0, l8.default)("UnaryExpression", o) ? (t(o, "operator", o.operator), e(o, "argument", o.argument)) : r(s, a, o);
          }
          return i(n, "validator"), n.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiter\
al", "UnaryExpression"], n;
        }()
      }
    }
  });
  var c8 = {
    aliases: ["TSType"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, G.validateType)("TSEntityName"),
      typeParameters: (0, G.validateOptionalType)("TSTypeParameterInstantiation")
    }
  };
  De("TSExpressionWithTypeArguments", c8);
  De("TSInterfaceDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "extends", "body"],
    fields: {
      declare: (0, G.validateOptional)(pr),
      id: (0, G.validateType)("Identifier"),
      typeParameters: (0, G.validateOptionalType)("TSTypeParameterDeclaration"),
      extends: (0, G.validateOptional)((0, G.arrayOfType)("TSExpressionWithTypeArguments")),
      body: (0, G.validateType)("TSInterfaceBody")
    }
  });
  De("TSInterfaceBody", {
    visitor: ["body"],
    fields: {
      body: (0, G.validateArrayOfType)("TSTypeElement")
    }
  });
  De("TSTypeAliasDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "typeAnnotation"],
    fields: {
      declare: (0, G.validateOptional)(pr),
      id: (0, G.validateType)("Identifier"),
      typeParameters: (0, G.validateOptionalType)("TSTypeParameterDeclaration"),
      typeAnnotation: (0, G.validateType)("TSType")
    }
  });
  De("TSInstantiationExpression", {
    aliases: ["Expression"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, G.validateType)("Expression"),
      typeParameters: (0, G.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  var uE = {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression", "typeAnnotation"],
    fields: {
      expression: (0, G.validateType)("Expression"),
      typeAnnotation: (0, G.validateType)("TSType")
    }
  };
  De("TSAsExpression", uE);
  De("TSSatisfiesExpression", uE);
  De("TSTypeAssertion", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["typeAnnotation", "expression"],
    fields: {
      typeAnnotation: (0, G.validateType)("TSType"),
      expression: (0, G.validateType)("Expression")
    }
  });
  De("TSEnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "members"],
    fields: {
      declare: (0, G.validateOptional)(pr),
      const: (0, G.validateOptional)(pr),
      id: (0, G.validateType)("Identifier"),
      members: (0, G.validateArrayOfType)("TSEnumMember"),
      initializer: (0, G.validateOptionalType)("Expression")
    }
  });
  De("TSEnumMember", {
    visitor: ["id", "initializer"],
    fields: {
      id: (0, G.validateType)("Identifier", "StringLiteral"),
      initializer: (0, G.validateOptionalType)("Expression")
    }
  });
  De("TSModuleDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: Object.assign({
      kind: {
        validate: (0, G.assertOneOf)("global", "module", "namespace")
      },
      declare: (0, G.validateOptional)(pr)
    }, {
      global: (0, G.validateOptional)(pr)
    }, {
      id: (0, G.validateType)("Identifier", "StringLiteral"),
      body: (0, G.validateType)("TSModuleBlock", "TSModuleDeclaration")
    })
  });
  De("TSModuleBlock", {
    aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
    visitor: ["body"],
    fields: {
      body: (0, G.validateArrayOfType)("Statement")
    }
  });
  De("TSImportType", {
    aliases: ["TSType"],
    visitor: ["argument", "qualifier", "typeParameters"],
    fields: {
      argument: (0, G.validateType)("StringLiteral"),
      qualifier: (0, G.validateOptionalType)("TSEntityName"),
      typeParameters: (0, G.validateOptionalType)("TSTypeParameterInstantiation"),
      options: {
        validate: (0, G.assertNodeType)("Expression"),
        optional: !0
      }
    }
  });
  De("TSImportEqualsDeclaration", {
    aliases: ["Statement"],
    visitor: ["id", "moduleReference"],
    fields: {
      isExport: (0, G.validate)(pr),
      id: (0, G.validateType)("Identifier"),
      moduleReference: (0, G.validateType)("TSEntityName", "TSExternalModuleReference"),
      importKind: {
        validate: (0, G.assertOneOf)("type", "value"),
        optional: !0
      }
    }
  });
  De("TSExternalModuleReference", {
    visitor: ["expression"],
    fields: {
      expression: (0, G.validateType)("StringLiteral")
    }
  });
  De("TSNonNullExpression", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression"],
    fields: {
      expression: (0, G.validateType)("Expression")
    }
  });
  De("TSExportAssignment", {
    aliases: ["Statement"],
    visitor: ["expression"],
    fields: {
      expression: (0, G.validateType)("Expression")
    }
  });
  De("TSNamespaceExportDeclaration", {
    aliases: ["Statement"],
    visitor: ["id"],
    fields: {
      id: (0, G.validateType)("Identifier")
    }
  });
  De("TSTypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: {
        validate: (0, G.assertNodeType)("TSType")
      }
    }
  });
  De("TSTypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: (0, G.validateArrayOfType)("TSType")
    }
  });
  De("TSTypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: (0, G.validateArrayOfType)("TSTypeParameter")
    }
  });
  De("TSTypeParameter", {
    builder: ["constraint", "default", "name"],
    visitor: ["constraint", "default"],
    fields: {
      name: {
        validate: (0, G.assertValueType)("string")
      },
      in: {
        validate: (0, G.assertValueType)("boolean"),
        optional: !0
      },
      out: {
        validate: (0, G.assertValueType)("boolean"),
        optional: !0
      },
      const: {
        validate: (0, G.assertValueType)("boolean"),
        optional: !0
      },
      constraint: {
        validate: (0, G.assertNodeType)("TSType"),
        optional: !0
      },
      default: {
        validate: (0, G.assertNodeType)("TSType"),
        optional: !0
      }
    }
  });
});

// ../node_modules/@babel/types/lib/definitions/deprecated-aliases.js
var pE = A((fl) => {
  "use strict";
  Object.defineProperty(fl, "__esModule", {
    value: !0
  });
  fl.DEPRECATED_ALIASES = void 0;
  var V1e = fl.DEPRECATED_ALIASES = {
    ModuleDeclaration: "ImportOrExportDeclaration"
  };
});

// ../node_modules/@babel/types/lib/definitions/index.js
var xr = A((tr) => {
  "use strict";
  Object.defineProperty(tr, "__esModule", {
    value: !0
  });
  Object.defineProperty(tr, "ALIAS_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vr.ALIAS_KEYS;
    }, "get")
  });
  Object.defineProperty(tr, "BUILDER_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vr.BUILDER_KEYS;
    }, "get")
  });
  Object.defineProperty(tr, "DEPRECATED_ALIASES", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return yf.DEPRECATED_ALIASES;
    }, "get")
  });
  Object.defineProperty(tr, "DEPRECATED_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vr.DEPRECATED_KEYS;
    }, "get")
  });
  Object.defineProperty(tr, "FLIPPED_ALIAS_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vr.FLIPPED_ALIAS_KEYS;
    }, "get")
  });
  Object.defineProperty(tr, "NODE_FIELDS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vr.NODE_FIELDS;
    }, "get")
  });
  Object.defineProperty(tr, "NODE_PARENT_VALIDATIONS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vr.NODE_PARENT_VALIDATIONS;
    }, "get")
  });
  Object.defineProperty(tr, "PLACEHOLDERS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return gf.PLACEHOLDERS;
    }, "get")
  });
  Object.defineProperty(tr, "PLACEHOLDERS_ALIAS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return gf.PLACEHOLDERS_ALIAS;
    }, "get")
  });
  Object.defineProperty(tr, "PLACEHOLDERS_FLIPPED_ALIAS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return gf.PLACEHOLDERS_FLIPPED_ALIAS;
    }, "get")
  });
  tr.TYPES = void 0;
  Object.defineProperty(tr, "VISITOR_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vr.VISITOR_KEYS;
    }, "get")
  });
  Pa();
  Z1();
  eE();
  tE();
  rE();
  cE();
  var vr = an(), gf = hf(), yf = pE();
  Object.keys(yf.DEPRECATED_ALIASES).forEach((e) => {
    vr.FLIPPED_ALIAS_KEYS[e] = vr.FLIPPED_ALIAS_KEYS[yf.DEPRECATED_ALIASES[e]];
  });
  var W1e = tr.TYPES = [].concat(Object.keys(vr.VISITOR_KEYS), Object.keys(vr.FLIPPED_ALIAS_KEYS), Object.keys(vr.DEPRECATED_KEYS));
});

// ../node_modules/@babel/types/lib/validators/validate.js
var ll = A((gi) => {
  "use strict";
  Object.defineProperty(gi, "__esModule", {
    value: !0
  });
  gi.default = p8;
  gi.validateChild = dE;
  gi.validateField = fE;
  gi.validateInternal = f8;
  var Aa = xr();
  function p8(e, t, r) {
    if (!e) return;
    let n = Aa.NODE_FIELDS[e.type];
    if (!n) return;
    let s = n[t];
    fE(e, t, r, s), dE(e, t, r);
  }
  i(p8, "validate");
  function f8(e, t, r, n, s) {
    if (e != null && e.validate && !(e.optional && n == null) && (e.validate(t, r, n), s)) {
      var a;
      let o = n.type;
      if (o == null) return;
      (a = Aa.NODE_PARENT_VALIDATIONS[o]) == null || a.call(Aa.NODE_PARENT_VALIDATIONS, t, r, n);
    }
  }
  i(f8, "validateInternal");
  function fE(e, t, r, n) {
    n != null && n.validate && (n.optional && r == null || n.validate(e, t, r));
  }
  i(fE, "validateField");
  function dE(e, t, r) {
    var n;
    let s = r?.type;
    s != null && ((n = Aa.NODE_PARENT_VALIDATIONS[s]) == null || n.call(Aa.NODE_PARENT_VALIDATIONS, e, t, r));
  }
  i(dE, "validateChild");
});

// ../node_modules/@babel/types/lib/builders/generated/index.js
var rr = A((b) => {
  "use strict";
  Object.defineProperty(b, "__esModule", {
    value: !0
  });
  b.anyTypeAnnotation = K6;
  b.argumentPlaceholder = TL;
  b.arrayExpression = m8;
  b.arrayPattern = c6;
  b.arrayTypeAnnotation = G6;
  b.arrowFunctionExpression = p6;
  b.assignmentExpression = y8;
  b.assignmentPattern = u6;
  b.awaitExpression = B6;
  b.bigIntLiteral = F6;
  b.binaryExpression = g8;
  b.bindExpression = SL;
  b.blockStatement = S8;
  b.booleanLiteral = U8;
  b.booleanLiteralTypeAnnotation = Y6;
  b.booleanTypeAnnotation = H6;
  b.breakStatement = x8;
  b.callExpression = v8;
  b.catchClause = P8;
  b.classAccessorProperty = q6;
  b.classBody = f6;
  b.classDeclaration = h6;
  b.classExpression = d6;
  b.classImplements = z6;
  b.classMethod = C6;
  b.classPrivateMethod = V6;
  b.classPrivateProperty = U6;
  b.classProperty = R6;
  b.conditionalExpression = A8;
  b.continueStatement = C8;
  b.debuggerStatement = D8;
  b.decimalLiteral = wL;
  b.declareClass = X6;
  b.declareExportAllDeclaration = aj;
  b.declareExportDeclaration = ij;
  b.declareFunction = Q6;
  b.declareInterface = Z6;
  b.declareModule = ej;
  b.declareModuleExports = tj;
  b.declareOpaqueType = nj;
  b.declareTypeAlias = rj;
  b.declareVariable = sj;
  b.declaredPredicate = oj;
  b.decorator = vL;
  b.directive = E8;
  b.directiveLiteral = T8;
  b.doExpression = PL;
  b.doWhileStatement = w8;
  b.emptyStatement = I8;
  b.emptyTypeAnnotation = bj;
  b.enumBooleanBody = Gj;
  b.enumBooleanMember = zj;
  b.enumDeclaration = Kj;
  b.enumDefaultedMember = Zj;
  b.enumNumberBody = Hj;
  b.enumNumberMember = Xj;
  b.enumStringBody = Yj;
  b.enumStringMember = Qj;
  b.enumSymbolBody = Jj;
  b.existsTypeAnnotation = lj;
  b.exportAllDeclaration = m6;
  b.exportDefaultDeclaration = y6;
  b.exportDefaultSpecifier = AL;
  b.exportNamedDeclaration = g6;
  b.exportNamespaceSpecifier = j6;
  b.exportSpecifier = b6;
  b.expressionStatement = _8;
  b.file = O8;
  b.forInStatement = N8;
  b.forOfStatement = E6;
  b.forStatement = B8;
  b.functionDeclaration = k8;
  b.functionExpression = F8;
  b.functionTypeAnnotation = uj;
  b.functionTypeParam = cj;
  b.genericTypeAnnotation = pj;
  b.identifier = j8;
  b.ifStatement = L8;
  b.import = k6;
  b.importAttribute = xL;
  b.importDeclaration = T6;
  b.importDefaultSpecifier = S6;
  b.importExpression = P6;
  b.importNamespaceSpecifier = x6;
  b.importSpecifier = v6;
  b.indexedAccessType = eL;
  b.inferredPredicate = fj;
  b.interfaceDeclaration = hj;
  b.interfaceExtends = dj;
  b.interfaceTypeAnnotation = mj;
  b.interpreterDirective = b8;
  b.intersectionTypeAnnotation = yj;
  b.jSXAttribute = b.jsxAttribute = rL;
  b.jSXClosingElement = b.jsxClosingElement = nL;
  b.jSXClosingFragment = b.jsxClosingFragment = yL;
  b.jSXElement = b.jsxElement = sL;
  b.jSXEmptyExpression = b.jsxEmptyExpression = iL;
  b.jSXExpressionContainer = b.jsxExpressionContainer = aL;
  b.jSXFragment = b.jsxFragment = hL;
  b.jSXIdentifier = b.jsxIdentifier = lL;
  b.jSXMemberExpression = b.jsxMemberExpression = uL;
  b.jSXNamespacedName = b.jsxNamespacedName = cL;
  b.jSXOpeningElement = b.jsxOpeningElement = pL;
  b.jSXOpeningFragment = b.jsxOpeningFragment = mL;
  b.jSXSpreadAttribute = b.jsxSpreadAttribute = fL;
  b.jSXSpreadChild = b.jsxSpreadChild = oL;
  b.jSXText = b.jsxText = dL;
  b.labeledStatement = M8;
  b.logicalExpression = V8;
  b.memberExpression = $8;
  b.metaProperty = A6;
  b.mixedTypeAnnotation = gj;
  b.moduleExpression = IL;
  b.newExpression = W8;
  b.noop = gL;
  b.nullLiteral = q8;
  b.nullLiteralTypeAnnotation = J6;
  b.nullableTypeAnnotation = Ej;
  b.numberLiteral = KM;
  b.numberLiteralTypeAnnotation = Tj;
  b.numberTypeAnnotation = Sj;
  b.numericLiteral = hE;
  b.objectExpression = G8;
  b.objectMethod = H8;
  b.objectPattern = D6;
  b.objectProperty = Y8;
  b.objectTypeAnnotation = xj;
  b.objectTypeCallProperty = Pj;
  b.objectTypeIndexer = Aj;
  b.objectTypeInternalSlot = vj;
  b.objectTypeProperty = Cj;
  b.objectTypeSpreadProperty = Dj;
  b.opaqueType = wj;
  b.optionalCallExpression = M6;
  b.optionalIndexedAccessType = tL;
  b.optionalMemberExpression = L6;
  b.parenthesizedExpression = X8;
  b.pipelineBareFunction = NL;
  b.pipelinePrimaryTopicReference = BL;
  b.pipelineTopicExpression = OL;
  b.placeholder = bL;
  b.privateName = $6;
  b.program = K8;
  b.qualifiedTypeIdentifier = Ij;
  b.recordExpression = CL;
  b.regExpLiteral = mE;
  b.regexLiteral = GM;
  b.restElement = yE;
  b.restProperty = HM;
  b.returnStatement = J8;
  b.sequenceExpression = z8;
  b.spreadElement = gE;
  b.spreadProperty = YM;
  b.staticBlock = W6;
  b.stringLiteral = R8;
  b.stringLiteralTypeAnnotation = _j;
  b.stringTypeAnnotation = Oj;
  b.super = w6;
  b.switchCase = Q8;
  b.switchStatement = Z8;
  b.symbolTypeAnnotation = Nj;
  b.taggedTemplateExpression = I6;
  b.templateElement = _6;
  b.templateLiteral = O6;
  b.thisExpression = e6;
  b.thisTypeAnnotation = Bj;
  b.throwStatement = t6;
  b.topicReference = _L;
  b.tryStatement = r6;
  b.tSAnyKeyword = b.tsAnyKeyword = $L;
  b.tSArrayType = b.tsArrayType = uM;
  b.tSAsExpression = b.tsAsExpression = wM;
  b.tSBigIntKeyword = b.tsBigIntKeyword = KL;
  b.tSBooleanKeyword = b.tsBooleanKeyword = WL;
  b.tSCallSignatureDeclaration = b.tsCallSignatureDeclaration = ML;
  b.tSConditionalType = b.tsConditionalType = yM;
  b.tSConstructSignatureDeclaration = b.tsConstructSignatureDeclaration = RL;
  b.tSConstructorType = b.tsConstructorType = sM;
  b.tSDeclareFunction = b.tsDeclareFunction = FL;
  b.tSDeclareMethod = b.tsDeclareMethod = jL;
  b.tSEnumDeclaration = b.tsEnumDeclaration = OM;
  b.tSEnumMember = b.tsEnumMember = NM;
  b.tSExportAssignment = b.tsExportAssignment = RM;
  b.tSExpressionWithTypeArguments = b.tsExpressionWithTypeArguments = vM;
  b.tSExternalModuleReference = b.tsExternalModuleReference = LM;
  b.tSFunctionType = b.tsFunctionType = nM;
  b.tSImportEqualsDeclaration = b.tsImportEqualsDeclaration = jM;
  b.tSImportType = b.tsImportType = FM;
  b.tSIndexSignature = b.tsIndexSignature = VL;
  b.tSIndexedAccessType = b.tsIndexedAccessType = TM;
  b.tSInferType = b.tsInferType = gM;
  b.tSInstantiationExpression = b.tsInstantiationExpression = DM;
  b.tSInterfaceBody = b.tsInterfaceBody = AM;
  b.tSInterfaceDeclaration = b.tsInterfaceDeclaration = PM;
  b.tSIntersectionType = b.tsIntersectionType = mM;
  b.tSIntrinsicKeyword = b.tsIntrinsicKeyword = GL;
  b.tSLiteralType = b.tsLiteralType = xM;
  b.tSMappedType = b.tsMappedType = SM;
  b.tSMethodSignature = b.tsMethodSignature = UL;
  b.tSModuleBlock = b.tsModuleBlock = kM;
  b.tSModuleDeclaration = b.tsModuleDeclaration = BM;
  b.tSNamedTupleMember = b.tsNamedTupleMember = dM;
  b.tSNamespaceExportDeclaration = b.tsNamespaceExportDeclaration = qM;
  b.tSNeverKeyword = b.tsNeverKeyword = HL;
  b.tSNonNullExpression = b.tsNonNullExpression = MM;
  b.tSNullKeyword = b.tsNullKeyword = YL;
  b.tSNumberKeyword = b.tsNumberKeyword = JL;
  b.tSObjectKeyword = b.tsObjectKeyword = zL;
  b.tSOptionalType = b.tsOptionalType = pM;
  b.tSParameterProperty = b.tsParameterProperty = kL;
  b.tSParenthesizedType = b.tsParenthesizedType = bM;
  b.tSPropertySignature = b.tsPropertySignature = qL;
  b.tSQualifiedName = b.tsQualifiedName = LL;
  b.tSRestType = b.tsRestType = fM;
  b.tSSatisfiesExpression = b.tsSatisfiesExpression = IM;
  b.tSStringKeyword = b.tsStringKeyword = XL;
  b.tSSymbolKeyword = b.tsSymbolKeyword = QL;
  b.tSThisType = b.tsThisType = rM;
  b.tSTupleType = b.tsTupleType = cM;
  b.tSTypeAliasDeclaration = b.tsTypeAliasDeclaration = CM;
  b.tSTypeAnnotation = b.tsTypeAnnotation = UM;
  b.tSTypeAssertion = b.tsTypeAssertion = _M;
  b.tSTypeLiteral = b.tsTypeLiteral = lM;
  b.tSTypeOperator = b.tsTypeOperator = EM;
  b.tSTypeParameter = b.tsTypeParameter = WM;
  b.tSTypeParameterDeclaration = b.tsTypeParameterDeclaration = $M;
  b.tSTypeParameterInstantiation = b.tsTypeParameterInstantiation = VM;
  b.tSTypePredicate = b.tsTypePredicate = aM;
  b.tSTypeQuery = b.tsTypeQuery = oM;
  b.tSTypeReference = b.tsTypeReference = iM;
  b.tSUndefinedKeyword = b.tsUndefinedKeyword = ZL;
  b.tSUnionType = b.tsUnionType = hM;
  b.tSUnknownKeyword = b.tsUnknownKeyword = eM;
  b.tSVoidKeyword = b.tsVoidKeyword = tM;
  b.tupleExpression = DL;
  b.tupleTypeAnnotation = kj;
  b.typeAlias = jj;
  b.typeAnnotation = Lj;
  b.typeCastExpression = Mj;
  b.typeParameter = Rj;
  b.typeParameterDeclaration = qj;
  b.typeParameterInstantiation = Uj;
  b.typeofTypeAnnotation = Fj;
  b.unaryExpression = n6;
  b.unionTypeAnnotation = Vj;
  b.updateExpression = s6;
  b.v8IntrinsicIdentifier = EL;
  b.variableDeclaration = i6;
  b.variableDeclarator = a6;
  b.variance = $j;
  b.voidTypeAnnotation = Wj;
  b.whileStatement = o6;
  b.withStatement = l6;
  b.yieldExpression = N6;
  var d8 = ll(), dl = ga(), h8 = an(), {
    validateInternal: m
  } = d8, {
    NODE_FIELDS: N
  } = h8;
  function m8(e = []) {
    let t = {
      type: "ArrayExpression",
      elements: e
    }, r = N.ArrayExpression;
    return m(r.elements, t, "elements", e, 1), t;
  }
  i(m8, "arrayExpression");
  function y8(e, t, r) {
    let n = {
      type: "AssignmentExpression",
      operator: e,
      left: t,
      right: r
    }, s = N.AssignmentExpression;
    return m(s.operator, n, "operator", e), m(s.left, n, "left", t, 1), m(s.right, n, "right", r, 1), n;
  }
  i(y8, "assignmentExpression");
  function g8(e, t, r) {
    let n = {
      type: "BinaryExpression",
      operator: e,
      left: t,
      right: r
    }, s = N.BinaryExpression;
    return m(s.operator, n, "operator", e), m(s.left, n, "left", t, 1), m(s.right, n, "right", r, 1), n;
  }
  i(g8, "binaryExpression");
  function b8(e) {
    let t = {
      type: "InterpreterDirective",
      value: e
    }, r = N.InterpreterDirective;
    return m(r.value, t, "value", e), t;
  }
  i(b8, "interpreterDirective");
  function E8(e) {
    let t = {
      type: "Directive",
      value: e
    }, r = N.Directive;
    return m(r.value, t, "value", e, 1), t;
  }
  i(E8, "directive");
  function T8(e) {
    let t = {
      type: "DirectiveLiteral",
      value: e
    }, r = N.DirectiveLiteral;
    return m(r.value, t, "value", e), t;
  }
  i(T8, "directiveLiteral");
  function S8(e, t = []) {
    let r = {
      type: "BlockStatement",
      body: e,
      directives: t
    }, n = N.BlockStatement;
    return m(n.body, r, "body", e, 1), m(n.directives, r, "directives", t, 1), r;
  }
  i(S8, "blockStatement");
  function x8(e = null) {
    let t = {
      type: "BreakStatement",
      label: e
    }, r = N.BreakStatement;
    return m(r.label, t, "label", e, 1), t;
  }
  i(x8, "breakStatement");
  function v8(e, t) {
    let r = {
      type: "CallExpression",
      callee: e,
      arguments: t
    }, n = N.CallExpression;
    return m(n.callee, r, "callee", e, 1), m(n.arguments, r, "arguments", t, 1), r;
  }
  i(v8, "callExpression");
  function P8(e = null, t) {
    let r = {
      type: "CatchClause",
      param: e,
      body: t
    }, n = N.CatchClause;
    return m(n.param, r, "param", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(P8, "catchClause");
  function A8(e, t, r) {
    let n = {
      type: "ConditionalExpression",
      test: e,
      consequent: t,
      alternate: r
    }, s = N.ConditionalExpression;
    return m(s.test, n, "test", e, 1), m(s.consequent, n, "consequent", t, 1), m(s.alternate, n, "alternate", r, 1), n;
  }
  i(A8, "conditionalExpression");
  function C8(e = null) {
    let t = {
      type: "ContinueStatement",
      label: e
    }, r = N.ContinueStatement;
    return m(r.label, t, "label", e, 1), t;
  }
  i(C8, "continueStatement");
  function D8() {
    return {
      type: "DebuggerStatement"
    };
  }
  i(D8, "debuggerStatement");
  function w8(e, t) {
    let r = {
      type: "DoWhileStatement",
      test: e,
      body: t
    }, n = N.DoWhileStatement;
    return m(n.test, r, "test", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(w8, "doWhileStatement");
  function I8() {
    return {
      type: "EmptyStatement"
    };
  }
  i(I8, "emptyStatement");
  function _8(e) {
    let t = {
      type: "ExpressionStatement",
      expression: e
    }, r = N.ExpressionStatement;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(_8, "expressionStatement");
  function O8(e, t = null, r = null) {
    let n = {
      type: "File",
      program: e,
      comments: t,
      tokens: r
    }, s = N.File;
    return m(s.program, n, "program", e, 1), m(s.comments, n, "comments", t, 1), m(s.tokens, n, "tokens", r), n;
  }
  i(O8, "file");
  function N8(e, t, r) {
    let n = {
      type: "ForInStatement",
      left: e,
      right: t,
      body: r
    }, s = N.ForInStatement;
    return m(s.left, n, "left", e, 1), m(s.right, n, "right", t, 1), m(s.body, n, "body", r, 1), n;
  }
  i(N8, "forInStatement");
  function B8(e = null, t = null, r = null, n) {
    let s = {
      type: "ForStatement",
      init: e,
      test: t,
      update: r,
      body: n
    }, a = N.ForStatement;
    return m(a.init, s, "init", e, 1), m(a.test, s, "test", t, 1), m(a.update, s, "update", r, 1), m(a.body, s, "body", n, 1), s;
  }
  i(B8, "forStatement");
  function k8(e = null, t, r, n = !1, s = !1) {
    let a = {
      type: "FunctionDeclaration",
      id: e,
      params: t,
      body: r,
      generator: n,
      async: s
    }, o = N.FunctionDeclaration;
    return m(o.id, a, "id", e, 1), m(o.params, a, "params", t, 1), m(o.body, a, "body", r, 1), m(o.generator, a, "generator", n), m(o.async,
    a, "async", s), a;
  }
  i(k8, "functionDeclaration");
  function F8(e = null, t, r, n = !1, s = !1) {
    let a = {
      type: "FunctionExpression",
      id: e,
      params: t,
      body: r,
      generator: n,
      async: s
    }, o = N.FunctionExpression;
    return m(o.id, a, "id", e, 1), m(o.params, a, "params", t, 1), m(o.body, a, "body", r, 1), m(o.generator, a, "generator", n), m(o.async,
    a, "async", s), a;
  }
  i(F8, "functionExpression");
  function j8(e) {
    let t = {
      type: "Identifier",
      name: e
    }, r = N.Identifier;
    return m(r.name, t, "name", e), t;
  }
  i(j8, "identifier");
  function L8(e, t, r = null) {
    let n = {
      type: "IfStatement",
      test: e,
      consequent: t,
      alternate: r
    }, s = N.IfStatement;
    return m(s.test, n, "test", e, 1), m(s.consequent, n, "consequent", t, 1), m(s.alternate, n, "alternate", r, 1), n;
  }
  i(L8, "ifStatement");
  function M8(e, t) {
    let r = {
      type: "LabeledStatement",
      label: e,
      body: t
    }, n = N.LabeledStatement;
    return m(n.label, r, "label", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(M8, "labeledStatement");
  function R8(e) {
    let t = {
      type: "StringLiteral",
      value: e
    }, r = N.StringLiteral;
    return m(r.value, t, "value", e), t;
  }
  i(R8, "stringLiteral");
  function hE(e) {
    let t = {
      type: "NumericLiteral",
      value: e
    }, r = N.NumericLiteral;
    return m(r.value, t, "value", e), t;
  }
  i(hE, "numericLiteral");
  function q8() {
    return {
      type: "NullLiteral"
    };
  }
  i(q8, "nullLiteral");
  function U8(e) {
    let t = {
      type: "BooleanLiteral",
      value: e
    }, r = N.BooleanLiteral;
    return m(r.value, t, "value", e), t;
  }
  i(U8, "booleanLiteral");
  function mE(e, t = "") {
    let r = {
      type: "RegExpLiteral",
      pattern: e,
      flags: t
    }, n = N.RegExpLiteral;
    return m(n.pattern, r, "pattern", e), m(n.flags, r, "flags", t), r;
  }
  i(mE, "regExpLiteral");
  function V8(e, t, r) {
    let n = {
      type: "LogicalExpression",
      operator: e,
      left: t,
      right: r
    }, s = N.LogicalExpression;
    return m(s.operator, n, "operator", e), m(s.left, n, "left", t, 1), m(s.right, n, "right", r, 1), n;
  }
  i(V8, "logicalExpression");
  function $8(e, t, r = !1, n = null) {
    let s = {
      type: "MemberExpression",
      object: e,
      property: t,
      computed: r,
      optional: n
    }, a = N.MemberExpression;
    return m(a.object, s, "object", e, 1), m(a.property, s, "property", t, 1), m(a.computed, s, "computed", r), m(a.optional, s, "optional",
    n), s;
  }
  i($8, "memberExpression");
  function W8(e, t) {
    let r = {
      type: "NewExpression",
      callee: e,
      arguments: t
    }, n = N.NewExpression;
    return m(n.callee, r, "callee", e, 1), m(n.arguments, r, "arguments", t, 1), r;
  }
  i(W8, "newExpression");
  function K8(e, t = [], r = "script", n = null) {
    let s = {
      type: "Program",
      body: e,
      directives: t,
      sourceType: r,
      interpreter: n
    }, a = N.Program;
    return m(a.body, s, "body", e, 1), m(a.directives, s, "directives", t, 1), m(a.sourceType, s, "sourceType", r), m(a.interpreter, s, "int\
erpreter", n, 1), s;
  }
  i(K8, "program");
  function G8(e) {
    let t = {
      type: "ObjectExpression",
      properties: e
    }, r = N.ObjectExpression;
    return m(r.properties, t, "properties", e, 1), t;
  }
  i(G8, "objectExpression");
  function H8(e = "method", t, r, n, s = !1, a = !1, o = !1) {
    let l = {
      type: "ObjectMethod",
      kind: e,
      key: t,
      params: r,
      body: n,
      computed: s,
      generator: a,
      async: o
    }, u = N.ObjectMethod;
    return m(u.kind, l, "kind", e), m(u.key, l, "key", t, 1), m(u.params, l, "params", r, 1), m(u.body, l, "body", n, 1), m(u.computed, l, "\
computed", s), m(u.generator, l, "generator", a), m(u.async, l, "async", o), l;
  }
  i(H8, "objectMethod");
  function Y8(e, t, r = !1, n = !1, s = null) {
    let a = {
      type: "ObjectProperty",
      key: e,
      value: t,
      computed: r,
      shorthand: n,
      decorators: s
    }, o = N.ObjectProperty;
    return m(o.key, a, "key", e, 1), m(o.value, a, "value", t, 1), m(o.computed, a, "computed", r), m(o.shorthand, a, "shorthand", n), m(o.decorators,
    a, "decorators", s, 1), a;
  }
  i(Y8, "objectProperty");
  function yE(e) {
    let t = {
      type: "RestElement",
      argument: e
    }, r = N.RestElement;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(yE, "restElement");
  function J8(e = null) {
    let t = {
      type: "ReturnStatement",
      argument: e
    }, r = N.ReturnStatement;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(J8, "returnStatement");
  function z8(e) {
    let t = {
      type: "SequenceExpression",
      expressions: e
    }, r = N.SequenceExpression;
    return m(r.expressions, t, "expressions", e, 1), t;
  }
  i(z8, "sequenceExpression");
  function X8(e) {
    let t = {
      type: "ParenthesizedExpression",
      expression: e
    }, r = N.ParenthesizedExpression;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(X8, "parenthesizedExpression");
  function Q8(e = null, t) {
    let r = {
      type: "SwitchCase",
      test: e,
      consequent: t
    }, n = N.SwitchCase;
    return m(n.test, r, "test", e, 1), m(n.consequent, r, "consequent", t, 1), r;
  }
  i(Q8, "switchCase");
  function Z8(e, t) {
    let r = {
      type: "SwitchStatement",
      discriminant: e,
      cases: t
    }, n = N.SwitchStatement;
    return m(n.discriminant, r, "discriminant", e, 1), m(n.cases, r, "cases", t, 1), r;
  }
  i(Z8, "switchStatement");
  function e6() {
    return {
      type: "ThisExpression"
    };
  }
  i(e6, "thisExpression");
  function t6(e) {
    let t = {
      type: "ThrowStatement",
      argument: e
    }, r = N.ThrowStatement;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(t6, "throwStatement");
  function r6(e, t = null, r = null) {
    let n = {
      type: "TryStatement",
      block: e,
      handler: t,
      finalizer: r
    }, s = N.TryStatement;
    return m(s.block, n, "block", e, 1), m(s.handler, n, "handler", t, 1), m(s.finalizer, n, "finalizer", r, 1), n;
  }
  i(r6, "tryStatement");
  function n6(e, t, r = !0) {
    let n = {
      type: "UnaryExpression",
      operator: e,
      argument: t,
      prefix: r
    }, s = N.UnaryExpression;
    return m(s.operator, n, "operator", e), m(s.argument, n, "argument", t, 1), m(s.prefix, n, "prefix", r), n;
  }
  i(n6, "unaryExpression");
  function s6(e, t, r = !1) {
    let n = {
      type: "UpdateExpression",
      operator: e,
      argument: t,
      prefix: r
    }, s = N.UpdateExpression;
    return m(s.operator, n, "operator", e), m(s.argument, n, "argument", t, 1), m(s.prefix, n, "prefix", r), n;
  }
  i(s6, "updateExpression");
  function i6(e, t) {
    let r = {
      type: "VariableDeclaration",
      kind: e,
      declarations: t
    }, n = N.VariableDeclaration;
    return m(n.kind, r, "kind", e), m(n.declarations, r, "declarations", t, 1), r;
  }
  i(i6, "variableDeclaration");
  function a6(e, t = null) {
    let r = {
      type: "VariableDeclarator",
      id: e,
      init: t
    }, n = N.VariableDeclarator;
    return m(n.id, r, "id", e, 1), m(n.init, r, "init", t, 1), r;
  }
  i(a6, "variableDeclarator");
  function o6(e, t) {
    let r = {
      type: "WhileStatement",
      test: e,
      body: t
    }, n = N.WhileStatement;
    return m(n.test, r, "test", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(o6, "whileStatement");
  function l6(e, t) {
    let r = {
      type: "WithStatement",
      object: e,
      body: t
    }, n = N.WithStatement;
    return m(n.object, r, "object", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(l6, "withStatement");
  function u6(e, t) {
    let r = {
      type: "AssignmentPattern",
      left: e,
      right: t
    }, n = N.AssignmentPattern;
    return m(n.left, r, "left", e, 1), m(n.right, r, "right", t, 1), r;
  }
  i(u6, "assignmentPattern");
  function c6(e) {
    let t = {
      type: "ArrayPattern",
      elements: e
    }, r = N.ArrayPattern;
    return m(r.elements, t, "elements", e, 1), t;
  }
  i(c6, "arrayPattern");
  function p6(e, t, r = !1) {
    let n = {
      type: "ArrowFunctionExpression",
      params: e,
      body: t,
      async: r,
      expression: null
    }, s = N.ArrowFunctionExpression;
    return m(s.params, n, "params", e, 1), m(s.body, n, "body", t, 1), m(s.async, n, "async", r), n;
  }
  i(p6, "arrowFunctionExpression");
  function f6(e) {
    let t = {
      type: "ClassBody",
      body: e
    }, r = N.ClassBody;
    return m(r.body, t, "body", e, 1), t;
  }
  i(f6, "classBody");
  function d6(e = null, t = null, r, n = null) {
    let s = {
      type: "ClassExpression",
      id: e,
      superClass: t,
      body: r,
      decorators: n
    }, a = N.ClassExpression;
    return m(a.id, s, "id", e, 1), m(a.superClass, s, "superClass", t, 1), m(a.body, s, "body", r, 1), m(a.decorators, s, "decorators", n, 1),
    s;
  }
  i(d6, "classExpression");
  function h6(e = null, t = null, r, n = null) {
    let s = {
      type: "ClassDeclaration",
      id: e,
      superClass: t,
      body: r,
      decorators: n
    }, a = N.ClassDeclaration;
    return m(a.id, s, "id", e, 1), m(a.superClass, s, "superClass", t, 1), m(a.body, s, "body", r, 1), m(a.decorators, s, "decorators", n, 1),
    s;
  }
  i(h6, "classDeclaration");
  function m6(e) {
    let t = {
      type: "ExportAllDeclaration",
      source: e
    }, r = N.ExportAllDeclaration;
    return m(r.source, t, "source", e, 1), t;
  }
  i(m6, "exportAllDeclaration");
  function y6(e) {
    let t = {
      type: "ExportDefaultDeclaration",
      declaration: e
    }, r = N.ExportDefaultDeclaration;
    return m(r.declaration, t, "declaration", e, 1), t;
  }
  i(y6, "exportDefaultDeclaration");
  function g6(e = null, t = [], r = null) {
    let n = {
      type: "ExportNamedDeclaration",
      declaration: e,
      specifiers: t,
      source: r
    }, s = N.ExportNamedDeclaration;
    return m(s.declaration, n, "declaration", e, 1), m(s.specifiers, n, "specifiers", t, 1), m(s.source, n, "source", r, 1), n;
  }
  i(g6, "exportNamedDeclaration");
  function b6(e, t) {
    let r = {
      type: "ExportSpecifier",
      local: e,
      exported: t
    }, n = N.ExportSpecifier;
    return m(n.local, r, "local", e, 1), m(n.exported, r, "exported", t, 1), r;
  }
  i(b6, "exportSpecifier");
  function E6(e, t, r, n = !1) {
    let s = {
      type: "ForOfStatement",
      left: e,
      right: t,
      body: r,
      await: n
    }, a = N.ForOfStatement;
    return m(a.left, s, "left", e, 1), m(a.right, s, "right", t, 1), m(a.body, s, "body", r, 1), m(a.await, s, "await", n), s;
  }
  i(E6, "forOfStatement");
  function T6(e, t) {
    let r = {
      type: "ImportDeclaration",
      specifiers: e,
      source: t
    }, n = N.ImportDeclaration;
    return m(n.specifiers, r, "specifiers", e, 1), m(n.source, r, "source", t, 1), r;
  }
  i(T6, "importDeclaration");
  function S6(e) {
    let t = {
      type: "ImportDefaultSpecifier",
      local: e
    }, r = N.ImportDefaultSpecifier;
    return m(r.local, t, "local", e, 1), t;
  }
  i(S6, "importDefaultSpecifier");
  function x6(e) {
    let t = {
      type: "ImportNamespaceSpecifier",
      local: e
    }, r = N.ImportNamespaceSpecifier;
    return m(r.local, t, "local", e, 1), t;
  }
  i(x6, "importNamespaceSpecifier");
  function v6(e, t) {
    let r = {
      type: "ImportSpecifier",
      local: e,
      imported: t
    }, n = N.ImportSpecifier;
    return m(n.local, r, "local", e, 1), m(n.imported, r, "imported", t, 1), r;
  }
  i(v6, "importSpecifier");
  function P6(e, t = null) {
    let r = {
      type: "ImportExpression",
      source: e,
      options: t
    }, n = N.ImportExpression;
    return m(n.source, r, "source", e, 1), m(n.options, r, "options", t, 1), r;
  }
  i(P6, "importExpression");
  function A6(e, t) {
    let r = {
      type: "MetaProperty",
      meta: e,
      property: t
    }, n = N.MetaProperty;
    return m(n.meta, r, "meta", e, 1), m(n.property, r, "property", t, 1), r;
  }
  i(A6, "metaProperty");
  function C6(e = "method", t, r, n, s = !1, a = !1, o = !1, l = !1) {
    let u = {
      type: "ClassMethod",
      kind: e,
      key: t,
      params: r,
      body: n,
      computed: s,
      static: a,
      generator: o,
      async: l
    }, c = N.ClassMethod;
    return m(c.kind, u, "kind", e), m(c.key, u, "key", t, 1), m(c.params, u, "params", r, 1), m(c.body, u, "body", n, 1), m(c.computed, u, "\
computed", s), m(c.static, u, "static", a), m(c.generator, u, "generator", o), m(c.async, u, "async", l), u;
  }
  i(C6, "classMethod");
  function D6(e) {
    let t = {
      type: "ObjectPattern",
      properties: e
    }, r = N.ObjectPattern;
    return m(r.properties, t, "properties", e, 1), t;
  }
  i(D6, "objectPattern");
  function gE(e) {
    let t = {
      type: "SpreadElement",
      argument: e
    }, r = N.SpreadElement;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(gE, "spreadElement");
  function w6() {
    return {
      type: "Super"
    };
  }
  i(w6, "_super");
  function I6(e, t) {
    let r = {
      type: "TaggedTemplateExpression",
      tag: e,
      quasi: t
    }, n = N.TaggedTemplateExpression;
    return m(n.tag, r, "tag", e, 1), m(n.quasi, r, "quasi", t, 1), r;
  }
  i(I6, "taggedTemplateExpression");
  function _6(e, t = !1) {
    let r = {
      type: "TemplateElement",
      value: e,
      tail: t
    }, n = N.TemplateElement;
    return m(n.value, r, "value", e), m(n.tail, r, "tail", t), r;
  }
  i(_6, "templateElement");
  function O6(e, t) {
    let r = {
      type: "TemplateLiteral",
      quasis: e,
      expressions: t
    }, n = N.TemplateLiteral;
    return m(n.quasis, r, "quasis", e, 1), m(n.expressions, r, "expressions", t, 1), r;
  }
  i(O6, "templateLiteral");
  function N6(e = null, t = !1) {
    let r = {
      type: "YieldExpression",
      argument: e,
      delegate: t
    }, n = N.YieldExpression;
    return m(n.argument, r, "argument", e, 1), m(n.delegate, r, "delegate", t), r;
  }
  i(N6, "yieldExpression");
  function B6(e) {
    let t = {
      type: "AwaitExpression",
      argument: e
    }, r = N.AwaitExpression;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(B6, "awaitExpression");
  function k6() {
    return {
      type: "Import"
    };
  }
  i(k6, "_import");
  function F6(e) {
    let t = {
      type: "BigIntLiteral",
      value: e
    }, r = N.BigIntLiteral;
    return m(r.value, t, "value", e), t;
  }
  i(F6, "bigIntLiteral");
  function j6(e) {
    let t = {
      type: "ExportNamespaceSpecifier",
      exported: e
    }, r = N.ExportNamespaceSpecifier;
    return m(r.exported, t, "exported", e, 1), t;
  }
  i(j6, "exportNamespaceSpecifier");
  function L6(e, t, r = !1, n) {
    let s = {
      type: "OptionalMemberExpression",
      object: e,
      property: t,
      computed: r,
      optional: n
    }, a = N.OptionalMemberExpression;
    return m(a.object, s, "object", e, 1), m(a.property, s, "property", t, 1), m(a.computed, s, "computed", r), m(a.optional, s, "optional",
    n), s;
  }
  i(L6, "optionalMemberExpression");
  function M6(e, t, r) {
    let n = {
      type: "OptionalCallExpression",
      callee: e,
      arguments: t,
      optional: r
    }, s = N.OptionalCallExpression;
    return m(s.callee, n, "callee", e, 1), m(s.arguments, n, "arguments", t, 1), m(s.optional, n, "optional", r), n;
  }
  i(M6, "optionalCallExpression");
  function R6(e, t = null, r = null, n = null, s = !1, a = !1) {
    let o = {
      type: "ClassProperty",
      key: e,
      value: t,
      typeAnnotation: r,
      decorators: n,
      computed: s,
      static: a
    }, l = N.ClassProperty;
    return m(l.key, o, "key", e, 1), m(l.value, o, "value", t, 1), m(l.typeAnnotation, o, "typeAnnotation", r, 1), m(l.decorators, o, "decor\
ators", n, 1), m(l.computed, o, "computed", s), m(l.static, o, "static", a), o;
  }
  i(R6, "classProperty");
  function q6(e, t = null, r = null, n = null, s = !1, a = !1) {
    let o = {
      type: "ClassAccessorProperty",
      key: e,
      value: t,
      typeAnnotation: r,
      decorators: n,
      computed: s,
      static: a
    }, l = N.ClassAccessorProperty;
    return m(l.key, o, "key", e, 1), m(l.value, o, "value", t, 1), m(l.typeAnnotation, o, "typeAnnotation", r, 1), m(l.decorators, o, "decor\
ators", n, 1), m(l.computed, o, "computed", s), m(l.static, o, "static", a), o;
  }
  i(q6, "classAccessorProperty");
  function U6(e, t = null, r = null, n = !1) {
    let s = {
      type: "ClassPrivateProperty",
      key: e,
      value: t,
      decorators: r,
      static: n
    }, a = N.ClassPrivateProperty;
    return m(a.key, s, "key", e, 1), m(a.value, s, "value", t, 1), m(a.decorators, s, "decorators", r, 1), m(a.static, s, "static", n), s;
  }
  i(U6, "classPrivateProperty");
  function V6(e = "method", t, r, n, s = !1) {
    let a = {
      type: "ClassPrivateMethod",
      kind: e,
      key: t,
      params: r,
      body: n,
      static: s
    }, o = N.ClassPrivateMethod;
    return m(o.kind, a, "kind", e), m(o.key, a, "key", t, 1), m(o.params, a, "params", r, 1), m(o.body, a, "body", n, 1), m(o.static, a, "st\
atic", s), a;
  }
  i(V6, "classPrivateMethod");
  function $6(e) {
    let t = {
      type: "PrivateName",
      id: e
    }, r = N.PrivateName;
    return m(r.id, t, "id", e, 1), t;
  }
  i($6, "privateName");
  function W6(e) {
    let t = {
      type: "StaticBlock",
      body: e
    }, r = N.StaticBlock;
    return m(r.body, t, "body", e, 1), t;
  }
  i(W6, "staticBlock");
  function K6() {
    return {
      type: "AnyTypeAnnotation"
    };
  }
  i(K6, "anyTypeAnnotation");
  function G6(e) {
    let t = {
      type: "ArrayTypeAnnotation",
      elementType: e
    }, r = N.ArrayTypeAnnotation;
    return m(r.elementType, t, "elementType", e, 1), t;
  }
  i(G6, "arrayTypeAnnotation");
  function H6() {
    return {
      type: "BooleanTypeAnnotation"
    };
  }
  i(H6, "booleanTypeAnnotation");
  function Y6(e) {
    let t = {
      type: "BooleanLiteralTypeAnnotation",
      value: e
    }, r = N.BooleanLiteralTypeAnnotation;
    return m(r.value, t, "value", e), t;
  }
  i(Y6, "booleanLiteralTypeAnnotation");
  function J6() {
    return {
      type: "NullLiteralTypeAnnotation"
    };
  }
  i(J6, "nullLiteralTypeAnnotation");
  function z6(e, t = null) {
    let r = {
      type: "ClassImplements",
      id: e,
      typeParameters: t
    }, n = N.ClassImplements;
    return m(n.id, r, "id", e, 1), m(n.typeParameters, r, "typeParameters", t, 1), r;
  }
  i(z6, "classImplements");
  function X6(e, t = null, r = null, n) {
    let s = {
      type: "DeclareClass",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    }, a = N.DeclareClass;
    return m(a.id, s, "id", e, 1), m(a.typeParameters, s, "typeParameters", t, 1), m(a.extends, s, "extends", r, 1), m(a.body, s, "body", n,
    1), s;
  }
  i(X6, "declareClass");
  function Q6(e) {
    let t = {
      type: "DeclareFunction",
      id: e
    }, r = N.DeclareFunction;
    return m(r.id, t, "id", e, 1), t;
  }
  i(Q6, "declareFunction");
  function Z6(e, t = null, r = null, n) {
    let s = {
      type: "DeclareInterface",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    }, a = N.DeclareInterface;
    return m(a.id, s, "id", e, 1), m(a.typeParameters, s, "typeParameters", t, 1), m(a.extends, s, "extends", r, 1), m(a.body, s, "body", n,
    1), s;
  }
  i(Z6, "declareInterface");
  function ej(e, t, r = null) {
    let n = {
      type: "DeclareModule",
      id: e,
      body: t,
      kind: r
    }, s = N.DeclareModule;
    return m(s.id, n, "id", e, 1), m(s.body, n, "body", t, 1), m(s.kind, n, "kind", r), n;
  }
  i(ej, "declareModule");
  function tj(e) {
    let t = {
      type: "DeclareModuleExports",
      typeAnnotation: e
    }, r = N.DeclareModuleExports;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(tj, "declareModuleExports");
  function rj(e, t = null, r) {
    let n = {
      type: "DeclareTypeAlias",
      id: e,
      typeParameters: t,
      right: r
    }, s = N.DeclareTypeAlias;
    return m(s.id, n, "id", e, 1), m(s.typeParameters, n, "typeParameters", t, 1), m(s.right, n, "right", r, 1), n;
  }
  i(rj, "declareTypeAlias");
  function nj(e, t = null, r = null) {
    let n = {
      type: "DeclareOpaqueType",
      id: e,
      typeParameters: t,
      supertype: r
    }, s = N.DeclareOpaqueType;
    return m(s.id, n, "id", e, 1), m(s.typeParameters, n, "typeParameters", t, 1), m(s.supertype, n, "supertype", r, 1), n;
  }
  i(nj, "declareOpaqueType");
  function sj(e) {
    let t = {
      type: "DeclareVariable",
      id: e
    }, r = N.DeclareVariable;
    return m(r.id, t, "id", e, 1), t;
  }
  i(sj, "declareVariable");
  function ij(e = null, t = null, r = null, n = null) {
    let s = {
      type: "DeclareExportDeclaration",
      declaration: e,
      specifiers: t,
      source: r,
      attributes: n
    }, a = N.DeclareExportDeclaration;
    return m(a.declaration, s, "declaration", e, 1), m(a.specifiers, s, "specifiers", t, 1), m(a.source, s, "source", r, 1), m(a.attributes,
    s, "attributes", n, 1), s;
  }
  i(ij, "declareExportDeclaration");
  function aj(e, t = null) {
    let r = {
      type: "DeclareExportAllDeclaration",
      source: e,
      attributes: t
    }, n = N.DeclareExportAllDeclaration;
    return m(n.source, r, "source", e, 1), m(n.attributes, r, "attributes", t, 1), r;
  }
  i(aj, "declareExportAllDeclaration");
  function oj(e) {
    let t = {
      type: "DeclaredPredicate",
      value: e
    }, r = N.DeclaredPredicate;
    return m(r.value, t, "value", e, 1), t;
  }
  i(oj, "declaredPredicate");
  function lj() {
    return {
      type: "ExistsTypeAnnotation"
    };
  }
  i(lj, "existsTypeAnnotation");
  function uj(e = null, t, r = null, n) {
    let s = {
      type: "FunctionTypeAnnotation",
      typeParameters: e,
      params: t,
      rest: r,
      returnType: n
    }, a = N.FunctionTypeAnnotation;
    return m(a.typeParameters, s, "typeParameters", e, 1), m(a.params, s, "params", t, 1), m(a.rest, s, "rest", r, 1), m(a.returnType, s, "r\
eturnType", n, 1), s;
  }
  i(uj, "functionTypeAnnotation");
  function cj(e = null, t) {
    let r = {
      type: "FunctionTypeParam",
      name: e,
      typeAnnotation: t
    }, n = N.FunctionTypeParam;
    return m(n.name, r, "name", e, 1), m(n.typeAnnotation, r, "typeAnnotation", t, 1), r;
  }
  i(cj, "functionTypeParam");
  function pj(e, t = null) {
    let r = {
      type: "GenericTypeAnnotation",
      id: e,
      typeParameters: t
    }, n = N.GenericTypeAnnotation;
    return m(n.id, r, "id", e, 1), m(n.typeParameters, r, "typeParameters", t, 1), r;
  }
  i(pj, "genericTypeAnnotation");
  function fj() {
    return {
      type: "InferredPredicate"
    };
  }
  i(fj, "inferredPredicate");
  function dj(e, t = null) {
    let r = {
      type: "InterfaceExtends",
      id: e,
      typeParameters: t
    }, n = N.InterfaceExtends;
    return m(n.id, r, "id", e, 1), m(n.typeParameters, r, "typeParameters", t, 1), r;
  }
  i(dj, "interfaceExtends");
  function hj(e, t = null, r = null, n) {
    let s = {
      type: "InterfaceDeclaration",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    }, a = N.InterfaceDeclaration;
    return m(a.id, s, "id", e, 1), m(a.typeParameters, s, "typeParameters", t, 1), m(a.extends, s, "extends", r, 1), m(a.body, s, "body", n,
    1), s;
  }
  i(hj, "interfaceDeclaration");
  function mj(e = null, t) {
    let r = {
      type: "InterfaceTypeAnnotation",
      extends: e,
      body: t
    }, n = N.InterfaceTypeAnnotation;
    return m(n.extends, r, "extends", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(mj, "interfaceTypeAnnotation");
  function yj(e) {
    let t = {
      type: "IntersectionTypeAnnotation",
      types: e
    }, r = N.IntersectionTypeAnnotation;
    return m(r.types, t, "types", e, 1), t;
  }
  i(yj, "intersectionTypeAnnotation");
  function gj() {
    return {
      type: "MixedTypeAnnotation"
    };
  }
  i(gj, "mixedTypeAnnotation");
  function bj() {
    return {
      type: "EmptyTypeAnnotation"
    };
  }
  i(bj, "emptyTypeAnnotation");
  function Ej(e) {
    let t = {
      type: "NullableTypeAnnotation",
      typeAnnotation: e
    }, r = N.NullableTypeAnnotation;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(Ej, "nullableTypeAnnotation");
  function Tj(e) {
    let t = {
      type: "NumberLiteralTypeAnnotation",
      value: e
    }, r = N.NumberLiteralTypeAnnotation;
    return m(r.value, t, "value", e), t;
  }
  i(Tj, "numberLiteralTypeAnnotation");
  function Sj() {
    return {
      type: "NumberTypeAnnotation"
    };
  }
  i(Sj, "numberTypeAnnotation");
  function xj(e, t = [], r = [], n = [], s = !1) {
    let a = {
      type: "ObjectTypeAnnotation",
      properties: e,
      indexers: t,
      callProperties: r,
      internalSlots: n,
      exact: s
    }, o = N.ObjectTypeAnnotation;
    return m(o.properties, a, "properties", e, 1), m(o.indexers, a, "indexers", t, 1), m(o.callProperties, a, "callProperties", r, 1), m(o.internalSlots,
    a, "internalSlots", n, 1), m(o.exact, a, "exact", s), a;
  }
  i(xj, "objectTypeAnnotation");
  function vj(e, t, r, n, s) {
    let a = {
      type: "ObjectTypeInternalSlot",
      id: e,
      value: t,
      optional: r,
      static: n,
      method: s
    }, o = N.ObjectTypeInternalSlot;
    return m(o.id, a, "id", e, 1), m(o.value, a, "value", t, 1), m(o.optional, a, "optional", r), m(o.static, a, "static", n), m(o.method, a,
    "method", s), a;
  }
  i(vj, "objectTypeInternalSlot");
  function Pj(e) {
    let t = {
      type: "ObjectTypeCallProperty",
      value: e,
      static: null
    }, r = N.ObjectTypeCallProperty;
    return m(r.value, t, "value", e, 1), t;
  }
  i(Pj, "objectTypeCallProperty");
  function Aj(e = null, t, r, n = null) {
    let s = {
      type: "ObjectTypeIndexer",
      id: e,
      key: t,
      value: r,
      variance: n,
      static: null
    }, a = N.ObjectTypeIndexer;
    return m(a.id, s, "id", e, 1), m(a.key, s, "key", t, 1), m(a.value, s, "value", r, 1), m(a.variance, s, "variance", n, 1), s;
  }
  i(Aj, "objectTypeIndexer");
  function Cj(e, t, r = null) {
    let n = {
      type: "ObjectTypeProperty",
      key: e,
      value: t,
      variance: r,
      kind: null,
      method: null,
      optional: null,
      proto: null,
      static: null
    }, s = N.ObjectTypeProperty;
    return m(s.key, n, "key", e, 1), m(s.value, n, "value", t, 1), m(s.variance, n, "variance", r, 1), n;
  }
  i(Cj, "objectTypeProperty");
  function Dj(e) {
    let t = {
      type: "ObjectTypeSpreadProperty",
      argument: e
    }, r = N.ObjectTypeSpreadProperty;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(Dj, "objectTypeSpreadProperty");
  function wj(e, t = null, r = null, n) {
    let s = {
      type: "OpaqueType",
      id: e,
      typeParameters: t,
      supertype: r,
      impltype: n
    }, a = N.OpaqueType;
    return m(a.id, s, "id", e, 1), m(a.typeParameters, s, "typeParameters", t, 1), m(a.supertype, s, "supertype", r, 1), m(a.impltype, s, "i\
mpltype", n, 1), s;
  }
  i(wj, "opaqueType");
  function Ij(e, t) {
    let r = {
      type: "QualifiedTypeIdentifier",
      id: e,
      qualification: t
    }, n = N.QualifiedTypeIdentifier;
    return m(n.id, r, "id", e, 1), m(n.qualification, r, "qualification", t, 1), r;
  }
  i(Ij, "qualifiedTypeIdentifier");
  function _j(e) {
    let t = {
      type: "StringLiteralTypeAnnotation",
      value: e
    }, r = N.StringLiteralTypeAnnotation;
    return m(r.value, t, "value", e), t;
  }
  i(_j, "stringLiteralTypeAnnotation");
  function Oj() {
    return {
      type: "StringTypeAnnotation"
    };
  }
  i(Oj, "stringTypeAnnotation");
  function Nj() {
    return {
      type: "SymbolTypeAnnotation"
    };
  }
  i(Nj, "symbolTypeAnnotation");
  function Bj() {
    return {
      type: "ThisTypeAnnotation"
    };
  }
  i(Bj, "thisTypeAnnotation");
  function kj(e) {
    let t = {
      type: "TupleTypeAnnotation",
      types: e
    }, r = N.TupleTypeAnnotation;
    return m(r.types, t, "types", e, 1), t;
  }
  i(kj, "tupleTypeAnnotation");
  function Fj(e) {
    let t = {
      type: "TypeofTypeAnnotation",
      argument: e
    }, r = N.TypeofTypeAnnotation;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(Fj, "typeofTypeAnnotation");
  function jj(e, t = null, r) {
    let n = {
      type: "TypeAlias",
      id: e,
      typeParameters: t,
      right: r
    }, s = N.TypeAlias;
    return m(s.id, n, "id", e, 1), m(s.typeParameters, n, "typeParameters", t, 1), m(s.right, n, "right", r, 1), n;
  }
  i(jj, "typeAlias");
  function Lj(e) {
    let t = {
      type: "TypeAnnotation",
      typeAnnotation: e
    }, r = N.TypeAnnotation;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(Lj, "typeAnnotation");
  function Mj(e, t) {
    let r = {
      type: "TypeCastExpression",
      expression: e,
      typeAnnotation: t
    }, n = N.TypeCastExpression;
    return m(n.expression, r, "expression", e, 1), m(n.typeAnnotation, r, "typeAnnotation", t, 1), r;
  }
  i(Mj, "typeCastExpression");
  function Rj(e = null, t = null, r = null) {
    let n = {
      type: "TypeParameter",
      bound: e,
      default: t,
      variance: r,
      name: null
    }, s = N.TypeParameter;
    return m(s.bound, n, "bound", e, 1), m(s.default, n, "default", t, 1), m(s.variance, n, "variance", r, 1), n;
  }
  i(Rj, "typeParameter");
  function qj(e) {
    let t = {
      type: "TypeParameterDeclaration",
      params: e
    }, r = N.TypeParameterDeclaration;
    return m(r.params, t, "params", e, 1), t;
  }
  i(qj, "typeParameterDeclaration");
  function Uj(e) {
    let t = {
      type: "TypeParameterInstantiation",
      params: e
    }, r = N.TypeParameterInstantiation;
    return m(r.params, t, "params", e, 1), t;
  }
  i(Uj, "typeParameterInstantiation");
  function Vj(e) {
    let t = {
      type: "UnionTypeAnnotation",
      types: e
    }, r = N.UnionTypeAnnotation;
    return m(r.types, t, "types", e, 1), t;
  }
  i(Vj, "unionTypeAnnotation");
  function $j(e) {
    let t = {
      type: "Variance",
      kind: e
    }, r = N.Variance;
    return m(r.kind, t, "kind", e), t;
  }
  i($j, "variance");
  function Wj() {
    return {
      type: "VoidTypeAnnotation"
    };
  }
  i(Wj, "voidTypeAnnotation");
  function Kj(e, t) {
    let r = {
      type: "EnumDeclaration",
      id: e,
      body: t
    }, n = N.EnumDeclaration;
    return m(n.id, r, "id", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(Kj, "enumDeclaration");
  function Gj(e) {
    let t = {
      type: "EnumBooleanBody",
      members: e,
      explicitType: null,
      hasUnknownMembers: null
    }, r = N.EnumBooleanBody;
    return m(r.members, t, "members", e, 1), t;
  }
  i(Gj, "enumBooleanBody");
  function Hj(e) {
    let t = {
      type: "EnumNumberBody",
      members: e,
      explicitType: null,
      hasUnknownMembers: null
    }, r = N.EnumNumberBody;
    return m(r.members, t, "members", e, 1), t;
  }
  i(Hj, "enumNumberBody");
  function Yj(e) {
    let t = {
      type: "EnumStringBody",
      members: e,
      explicitType: null,
      hasUnknownMembers: null
    }, r = N.EnumStringBody;
    return m(r.members, t, "members", e, 1), t;
  }
  i(Yj, "enumStringBody");
  function Jj(e) {
    let t = {
      type: "EnumSymbolBody",
      members: e,
      hasUnknownMembers: null
    }, r = N.EnumSymbolBody;
    return m(r.members, t, "members", e, 1), t;
  }
  i(Jj, "enumSymbolBody");
  function zj(e) {
    let t = {
      type: "EnumBooleanMember",
      id: e,
      init: null
    }, r = N.EnumBooleanMember;
    return m(r.id, t, "id", e, 1), t;
  }
  i(zj, "enumBooleanMember");
  function Xj(e, t) {
    let r = {
      type: "EnumNumberMember",
      id: e,
      init: t
    }, n = N.EnumNumberMember;
    return m(n.id, r, "id", e, 1), m(n.init, r, "init", t, 1), r;
  }
  i(Xj, "enumNumberMember");
  function Qj(e, t) {
    let r = {
      type: "EnumStringMember",
      id: e,
      init: t
    }, n = N.EnumStringMember;
    return m(n.id, r, "id", e, 1), m(n.init, r, "init", t, 1), r;
  }
  i(Qj, "enumStringMember");
  function Zj(e) {
    let t = {
      type: "EnumDefaultedMember",
      id: e
    }, r = N.EnumDefaultedMember;
    return m(r.id, t, "id", e, 1), t;
  }
  i(Zj, "enumDefaultedMember");
  function eL(e, t) {
    let r = {
      type: "IndexedAccessType",
      objectType: e,
      indexType: t
    }, n = N.IndexedAccessType;
    return m(n.objectType, r, "objectType", e, 1), m(n.indexType, r, "indexType", t, 1), r;
  }
  i(eL, "indexedAccessType");
  function tL(e, t) {
    let r = {
      type: "OptionalIndexedAccessType",
      objectType: e,
      indexType: t,
      optional: null
    }, n = N.OptionalIndexedAccessType;
    return m(n.objectType, r, "objectType", e, 1), m(n.indexType, r, "indexType", t, 1), r;
  }
  i(tL, "optionalIndexedAccessType");
  function rL(e, t = null) {
    let r = {
      type: "JSXAttribute",
      name: e,
      value: t
    }, n = N.JSXAttribute;
    return m(n.name, r, "name", e, 1), m(n.value, r, "value", t, 1), r;
  }
  i(rL, "jsxAttribute");
  function nL(e) {
    let t = {
      type: "JSXClosingElement",
      name: e
    }, r = N.JSXClosingElement;
    return m(r.name, t, "name", e, 1), t;
  }
  i(nL, "jsxClosingElement");
  function sL(e, t = null, r, n = null) {
    let s = {
      type: "JSXElement",
      openingElement: e,
      closingElement: t,
      children: r,
      selfClosing: n
    }, a = N.JSXElement;
    return m(a.openingElement, s, "openingElement", e, 1), m(a.closingElement, s, "closingElement", t, 1), m(a.children, s, "children", r, 1),
    m(a.selfClosing, s, "selfClosing", n), s;
  }
  i(sL, "jsxElement");
  function iL() {
    return {
      type: "JSXEmptyExpression"
    };
  }
  i(iL, "jsxEmptyExpression");
  function aL(e) {
    let t = {
      type: "JSXExpressionContainer",
      expression: e
    }, r = N.JSXExpressionContainer;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(aL, "jsxExpressionContainer");
  function oL(e) {
    let t = {
      type: "JSXSpreadChild",
      expression: e
    }, r = N.JSXSpreadChild;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(oL, "jsxSpreadChild");
  function lL(e) {
    let t = {
      type: "JSXIdentifier",
      name: e
    }, r = N.JSXIdentifier;
    return m(r.name, t, "name", e), t;
  }
  i(lL, "jsxIdentifier");
  function uL(e, t) {
    let r = {
      type: "JSXMemberExpression",
      object: e,
      property: t
    }, n = N.JSXMemberExpression;
    return m(n.object, r, "object", e, 1), m(n.property, r, "property", t, 1), r;
  }
  i(uL, "jsxMemberExpression");
  function cL(e, t) {
    let r = {
      type: "JSXNamespacedName",
      namespace: e,
      name: t
    }, n = N.JSXNamespacedName;
    return m(n.namespace, r, "namespace", e, 1), m(n.name, r, "name", t, 1), r;
  }
  i(cL, "jsxNamespacedName");
  function pL(e, t, r = !1) {
    let n = {
      type: "JSXOpeningElement",
      name: e,
      attributes: t,
      selfClosing: r
    }, s = N.JSXOpeningElement;
    return m(s.name, n, "name", e, 1), m(s.attributes, n, "attributes", t, 1), m(s.selfClosing, n, "selfClosing", r), n;
  }
  i(pL, "jsxOpeningElement");
  function fL(e) {
    let t = {
      type: "JSXSpreadAttribute",
      argument: e
    }, r = N.JSXSpreadAttribute;
    return m(r.argument, t, "argument", e, 1), t;
  }
  i(fL, "jsxSpreadAttribute");
  function dL(e) {
    let t = {
      type: "JSXText",
      value: e
    }, r = N.JSXText;
    return m(r.value, t, "value", e), t;
  }
  i(dL, "jsxText");
  function hL(e, t, r) {
    let n = {
      type: "JSXFragment",
      openingFragment: e,
      closingFragment: t,
      children: r
    }, s = N.JSXFragment;
    return m(s.openingFragment, n, "openingFragment", e, 1), m(s.closingFragment, n, "closingFragment", t, 1), m(s.children, n, "children", r,
    1), n;
  }
  i(hL, "jsxFragment");
  function mL() {
    return {
      type: "JSXOpeningFragment"
    };
  }
  i(mL, "jsxOpeningFragment");
  function yL() {
    return {
      type: "JSXClosingFragment"
    };
  }
  i(yL, "jsxClosingFragment");
  function gL() {
    return {
      type: "Noop"
    };
  }
  i(gL, "noop");
  function bL(e, t) {
    let r = {
      type: "Placeholder",
      expectedNode: e,
      name: t
    }, n = N.Placeholder;
    return m(n.expectedNode, r, "expectedNode", e), m(n.name, r, "name", t, 1), r;
  }
  i(bL, "placeholder");
  function EL(e) {
    let t = {
      type: "V8IntrinsicIdentifier",
      name: e
    }, r = N.V8IntrinsicIdentifier;
    return m(r.name, t, "name", e), t;
  }
  i(EL, "v8IntrinsicIdentifier");
  function TL() {
    return {
      type: "ArgumentPlaceholder"
    };
  }
  i(TL, "argumentPlaceholder");
  function SL(e, t) {
    let r = {
      type: "BindExpression",
      object: e,
      callee: t
    }, n = N.BindExpression;
    return m(n.object, r, "object", e, 1), m(n.callee, r, "callee", t, 1), r;
  }
  i(SL, "bindExpression");
  function xL(e, t) {
    let r = {
      type: "ImportAttribute",
      key: e,
      value: t
    }, n = N.ImportAttribute;
    return m(n.key, r, "key", e, 1), m(n.value, r, "value", t, 1), r;
  }
  i(xL, "importAttribute");
  function vL(e) {
    let t = {
      type: "Decorator",
      expression: e
    }, r = N.Decorator;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(vL, "decorator");
  function PL(e, t = !1) {
    let r = {
      type: "DoExpression",
      body: e,
      async: t
    }, n = N.DoExpression;
    return m(n.body, r, "body", e, 1), m(n.async, r, "async", t), r;
  }
  i(PL, "doExpression");
  function AL(e) {
    let t = {
      type: "ExportDefaultSpecifier",
      exported: e
    }, r = N.ExportDefaultSpecifier;
    return m(r.exported, t, "exported", e, 1), t;
  }
  i(AL, "exportDefaultSpecifier");
  function CL(e) {
    let t = {
      type: "RecordExpression",
      properties: e
    }, r = N.RecordExpression;
    return m(r.properties, t, "properties", e, 1), t;
  }
  i(CL, "recordExpression");
  function DL(e = []) {
    let t = {
      type: "TupleExpression",
      elements: e
    }, r = N.TupleExpression;
    return m(r.elements, t, "elements", e, 1), t;
  }
  i(DL, "tupleExpression");
  function wL(e) {
    let t = {
      type: "DecimalLiteral",
      value: e
    }, r = N.DecimalLiteral;
    return m(r.value, t, "value", e), t;
  }
  i(wL, "decimalLiteral");
  function IL(e) {
    let t = {
      type: "ModuleExpression",
      body: e
    }, r = N.ModuleExpression;
    return m(r.body, t, "body", e, 1), t;
  }
  i(IL, "moduleExpression");
  function _L() {
    return {
      type: "TopicReference"
    };
  }
  i(_L, "topicReference");
  function OL(e) {
    let t = {
      type: "PipelineTopicExpression",
      expression: e
    }, r = N.PipelineTopicExpression;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(OL, "pipelineTopicExpression");
  function NL(e) {
    let t = {
      type: "PipelineBareFunction",
      callee: e
    }, r = N.PipelineBareFunction;
    return m(r.callee, t, "callee", e, 1), t;
  }
  i(NL, "pipelineBareFunction");
  function BL() {
    return {
      type: "PipelinePrimaryTopicReference"
    };
  }
  i(BL, "pipelinePrimaryTopicReference");
  function kL(e) {
    let t = {
      type: "TSParameterProperty",
      parameter: e
    }, r = N.TSParameterProperty;
    return m(r.parameter, t, "parameter", e, 1), t;
  }
  i(kL, "tsParameterProperty");
  function FL(e = null, t = null, r, n = null) {
    let s = {
      type: "TSDeclareFunction",
      id: e,
      typeParameters: t,
      params: r,
      returnType: n
    }, a = N.TSDeclareFunction;
    return m(a.id, s, "id", e, 1), m(a.typeParameters, s, "typeParameters", t, 1), m(a.params, s, "params", r, 1), m(a.returnType, s, "retur\
nType", n, 1), s;
  }
  i(FL, "tsDeclareFunction");
  function jL(e = null, t, r = null, n, s = null) {
    let a = {
      type: "TSDeclareMethod",
      decorators: e,
      key: t,
      typeParameters: r,
      params: n,
      returnType: s
    }, o = N.TSDeclareMethod;
    return m(o.decorators, a, "decorators", e, 1), m(o.key, a, "key", t, 1), m(o.typeParameters, a, "typeParameters", r, 1), m(o.params, a, "\
params", n, 1), m(o.returnType, a, "returnType", s, 1), a;
  }
  i(jL, "tsDeclareMethod");
  function LL(e, t) {
    let r = {
      type: "TSQualifiedName",
      left: e,
      right: t
    }, n = N.TSQualifiedName;
    return m(n.left, r, "left", e, 1), m(n.right, r, "right", t, 1), r;
  }
  i(LL, "tsQualifiedName");
  function ML(e = null, t, r = null) {
    let n = {
      type: "TSCallSignatureDeclaration",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    }, s = N.TSCallSignatureDeclaration;
    return m(s.typeParameters, n, "typeParameters", e, 1), m(s.parameters, n, "parameters", t, 1), m(s.typeAnnotation, n, "typeAnnotation", r,
    1), n;
  }
  i(ML, "tsCallSignatureDeclaration");
  function RL(e = null, t, r = null) {
    let n = {
      type: "TSConstructSignatureDeclaration",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    }, s = N.TSConstructSignatureDeclaration;
    return m(s.typeParameters, n, "typeParameters", e, 1), m(s.parameters, n, "parameters", t, 1), m(s.typeAnnotation, n, "typeAnnotation", r,
    1), n;
  }
  i(RL, "tsConstructSignatureDeclaration");
  function qL(e, t = null) {
    let r = {
      type: "TSPropertySignature",
      key: e,
      typeAnnotation: t,
      kind: null
    }, n = N.TSPropertySignature;
    return m(n.key, r, "key", e, 1), m(n.typeAnnotation, r, "typeAnnotation", t, 1), r;
  }
  i(qL, "tsPropertySignature");
  function UL(e, t = null, r, n = null) {
    let s = {
      type: "TSMethodSignature",
      key: e,
      typeParameters: t,
      parameters: r,
      typeAnnotation: n,
      kind: null
    }, a = N.TSMethodSignature;
    return m(a.key, s, "key", e, 1), m(a.typeParameters, s, "typeParameters", t, 1), m(a.parameters, s, "parameters", r, 1), m(a.typeAnnotation,
    s, "typeAnnotation", n, 1), s;
  }
  i(UL, "tsMethodSignature");
  function VL(e, t = null) {
    let r = {
      type: "TSIndexSignature",
      parameters: e,
      typeAnnotation: t
    }, n = N.TSIndexSignature;
    return m(n.parameters, r, "parameters", e, 1), m(n.typeAnnotation, r, "typeAnnotation", t, 1), r;
  }
  i(VL, "tsIndexSignature");
  function $L() {
    return {
      type: "TSAnyKeyword"
    };
  }
  i($L, "tsAnyKeyword");
  function WL() {
    return {
      type: "TSBooleanKeyword"
    };
  }
  i(WL, "tsBooleanKeyword");
  function KL() {
    return {
      type: "TSBigIntKeyword"
    };
  }
  i(KL, "tsBigIntKeyword");
  function GL() {
    return {
      type: "TSIntrinsicKeyword"
    };
  }
  i(GL, "tsIntrinsicKeyword");
  function HL() {
    return {
      type: "TSNeverKeyword"
    };
  }
  i(HL, "tsNeverKeyword");
  function YL() {
    return {
      type: "TSNullKeyword"
    };
  }
  i(YL, "tsNullKeyword");
  function JL() {
    return {
      type: "TSNumberKeyword"
    };
  }
  i(JL, "tsNumberKeyword");
  function zL() {
    return {
      type: "TSObjectKeyword"
    };
  }
  i(zL, "tsObjectKeyword");
  function XL() {
    return {
      type: "TSStringKeyword"
    };
  }
  i(XL, "tsStringKeyword");
  function QL() {
    return {
      type: "TSSymbolKeyword"
    };
  }
  i(QL, "tsSymbolKeyword");
  function ZL() {
    return {
      type: "TSUndefinedKeyword"
    };
  }
  i(ZL, "tsUndefinedKeyword");
  function eM() {
    return {
      type: "TSUnknownKeyword"
    };
  }
  i(eM, "tsUnknownKeyword");
  function tM() {
    return {
      type: "TSVoidKeyword"
    };
  }
  i(tM, "tsVoidKeyword");
  function rM() {
    return {
      type: "TSThisType"
    };
  }
  i(rM, "tsThisType");
  function nM(e = null, t, r = null) {
    let n = {
      type: "TSFunctionType",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    }, s = N.TSFunctionType;
    return m(s.typeParameters, n, "typeParameters", e, 1), m(s.parameters, n, "parameters", t, 1), m(s.typeAnnotation, n, "typeAnnotation", r,
    1), n;
  }
  i(nM, "tsFunctionType");
  function sM(e = null, t, r = null) {
    let n = {
      type: "TSConstructorType",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    }, s = N.TSConstructorType;
    return m(s.typeParameters, n, "typeParameters", e, 1), m(s.parameters, n, "parameters", t, 1), m(s.typeAnnotation, n, "typeAnnotation", r,
    1), n;
  }
  i(sM, "tsConstructorType");
  function iM(e, t = null) {
    let r = {
      type: "TSTypeReference",
      typeName: e,
      typeParameters: t
    }, n = N.TSTypeReference;
    return m(n.typeName, r, "typeName", e, 1), m(n.typeParameters, r, "typeParameters", t, 1), r;
  }
  i(iM, "tsTypeReference");
  function aM(e, t = null, r = null) {
    let n = {
      type: "TSTypePredicate",
      parameterName: e,
      typeAnnotation: t,
      asserts: r
    }, s = N.TSTypePredicate;
    return m(s.parameterName, n, "parameterName", e, 1), m(s.typeAnnotation, n, "typeAnnotation", t, 1), m(s.asserts, n, "asserts", r), n;
  }
  i(aM, "tsTypePredicate");
  function oM(e, t = null) {
    let r = {
      type: "TSTypeQuery",
      exprName: e,
      typeParameters: t
    }, n = N.TSTypeQuery;
    return m(n.exprName, r, "exprName", e, 1), m(n.typeParameters, r, "typeParameters", t, 1), r;
  }
  i(oM, "tsTypeQuery");
  function lM(e) {
    let t = {
      type: "TSTypeLiteral",
      members: e
    }, r = N.TSTypeLiteral;
    return m(r.members, t, "members", e, 1), t;
  }
  i(lM, "tsTypeLiteral");
  function uM(e) {
    let t = {
      type: "TSArrayType",
      elementType: e
    }, r = N.TSArrayType;
    return m(r.elementType, t, "elementType", e, 1), t;
  }
  i(uM, "tsArrayType");
  function cM(e) {
    let t = {
      type: "TSTupleType",
      elementTypes: e
    }, r = N.TSTupleType;
    return m(r.elementTypes, t, "elementTypes", e, 1), t;
  }
  i(cM, "tsTupleType");
  function pM(e) {
    let t = {
      type: "TSOptionalType",
      typeAnnotation: e
    }, r = N.TSOptionalType;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(pM, "tsOptionalType");
  function fM(e) {
    let t = {
      type: "TSRestType",
      typeAnnotation: e
    }, r = N.TSRestType;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(fM, "tsRestType");
  function dM(e, t, r = !1) {
    let n = {
      type: "TSNamedTupleMember",
      label: e,
      elementType: t,
      optional: r
    }, s = N.TSNamedTupleMember;
    return m(s.label, n, "label", e, 1), m(s.elementType, n, "elementType", t, 1), m(s.optional, n, "optional", r), n;
  }
  i(dM, "tsNamedTupleMember");
  function hM(e) {
    let t = {
      type: "TSUnionType",
      types: e
    }, r = N.TSUnionType;
    return m(r.types, t, "types", e, 1), t;
  }
  i(hM, "tsUnionType");
  function mM(e) {
    let t = {
      type: "TSIntersectionType",
      types: e
    }, r = N.TSIntersectionType;
    return m(r.types, t, "types", e, 1), t;
  }
  i(mM, "tsIntersectionType");
  function yM(e, t, r, n) {
    let s = {
      type: "TSConditionalType",
      checkType: e,
      extendsType: t,
      trueType: r,
      falseType: n
    }, a = N.TSConditionalType;
    return m(a.checkType, s, "checkType", e, 1), m(a.extendsType, s, "extendsType", t, 1), m(a.trueType, s, "trueType", r, 1), m(a.falseType,
    s, "falseType", n, 1), s;
  }
  i(yM, "tsConditionalType");
  function gM(e) {
    let t = {
      type: "TSInferType",
      typeParameter: e
    }, r = N.TSInferType;
    return m(r.typeParameter, t, "typeParameter", e, 1), t;
  }
  i(gM, "tsInferType");
  function bM(e) {
    let t = {
      type: "TSParenthesizedType",
      typeAnnotation: e
    }, r = N.TSParenthesizedType;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(bM, "tsParenthesizedType");
  function EM(e) {
    let t = {
      type: "TSTypeOperator",
      typeAnnotation: e,
      operator: null
    }, r = N.TSTypeOperator;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(EM, "tsTypeOperator");
  function TM(e, t) {
    let r = {
      type: "TSIndexedAccessType",
      objectType: e,
      indexType: t
    }, n = N.TSIndexedAccessType;
    return m(n.objectType, r, "objectType", e, 1), m(n.indexType, r, "indexType", t, 1), r;
  }
  i(TM, "tsIndexedAccessType");
  function SM(e, t = null, r = null) {
    let n = {
      type: "TSMappedType",
      typeParameter: e,
      typeAnnotation: t,
      nameType: r
    }, s = N.TSMappedType;
    return m(s.typeParameter, n, "typeParameter", e, 1), m(s.typeAnnotation, n, "typeAnnotation", t, 1), m(s.nameType, n, "nameType", r, 1),
    n;
  }
  i(SM, "tsMappedType");
  function xM(e) {
    let t = {
      type: "TSLiteralType",
      literal: e
    }, r = N.TSLiteralType;
    return m(r.literal, t, "literal", e, 1), t;
  }
  i(xM, "tsLiteralType");
  function vM(e, t = null) {
    let r = {
      type: "TSExpressionWithTypeArguments",
      expression: e,
      typeParameters: t
    }, n = N.TSExpressionWithTypeArguments;
    return m(n.expression, r, "expression", e, 1), m(n.typeParameters, r, "typeParameters", t, 1), r;
  }
  i(vM, "tsExpressionWithTypeArguments");
  function PM(e, t = null, r = null, n) {
    let s = {
      type: "TSInterfaceDeclaration",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    }, a = N.TSInterfaceDeclaration;
    return m(a.id, s, "id", e, 1), m(a.typeParameters, s, "typeParameters", t, 1), m(a.extends, s, "extends", r, 1), m(a.body, s, "body", n,
    1), s;
  }
  i(PM, "tsInterfaceDeclaration");
  function AM(e) {
    let t = {
      type: "TSInterfaceBody",
      body: e
    }, r = N.TSInterfaceBody;
    return m(r.body, t, "body", e, 1), t;
  }
  i(AM, "tsInterfaceBody");
  function CM(e, t = null, r) {
    let n = {
      type: "TSTypeAliasDeclaration",
      id: e,
      typeParameters: t,
      typeAnnotation: r
    }, s = N.TSTypeAliasDeclaration;
    return m(s.id, n, "id", e, 1), m(s.typeParameters, n, "typeParameters", t, 1), m(s.typeAnnotation, n, "typeAnnotation", r, 1), n;
  }
  i(CM, "tsTypeAliasDeclaration");
  function DM(e, t = null) {
    let r = {
      type: "TSInstantiationExpression",
      expression: e,
      typeParameters: t
    }, n = N.TSInstantiationExpression;
    return m(n.expression, r, "expression", e, 1), m(n.typeParameters, r, "typeParameters", t, 1), r;
  }
  i(DM, "tsInstantiationExpression");
  function wM(e, t) {
    let r = {
      type: "TSAsExpression",
      expression: e,
      typeAnnotation: t
    }, n = N.TSAsExpression;
    return m(n.expression, r, "expression", e, 1), m(n.typeAnnotation, r, "typeAnnotation", t, 1), r;
  }
  i(wM, "tsAsExpression");
  function IM(e, t) {
    let r = {
      type: "TSSatisfiesExpression",
      expression: e,
      typeAnnotation: t
    }, n = N.TSSatisfiesExpression;
    return m(n.expression, r, "expression", e, 1), m(n.typeAnnotation, r, "typeAnnotation", t, 1), r;
  }
  i(IM, "tsSatisfiesExpression");
  function _M(e, t) {
    let r = {
      type: "TSTypeAssertion",
      typeAnnotation: e,
      expression: t
    }, n = N.TSTypeAssertion;
    return m(n.typeAnnotation, r, "typeAnnotation", e, 1), m(n.expression, r, "expression", t, 1), r;
  }
  i(_M, "tsTypeAssertion");
  function OM(e, t) {
    let r = {
      type: "TSEnumDeclaration",
      id: e,
      members: t
    }, n = N.TSEnumDeclaration;
    return m(n.id, r, "id", e, 1), m(n.members, r, "members", t, 1), r;
  }
  i(OM, "tsEnumDeclaration");
  function NM(e, t = null) {
    let r = {
      type: "TSEnumMember",
      id: e,
      initializer: t
    }, n = N.TSEnumMember;
    return m(n.id, r, "id", e, 1), m(n.initializer, r, "initializer", t, 1), r;
  }
  i(NM, "tsEnumMember");
  function BM(e, t) {
    let r = {
      type: "TSModuleDeclaration",
      id: e,
      body: t,
      kind: null
    }, n = N.TSModuleDeclaration;
    return m(n.id, r, "id", e, 1), m(n.body, r, "body", t, 1), r;
  }
  i(BM, "tsModuleDeclaration");
  function kM(e) {
    let t = {
      type: "TSModuleBlock",
      body: e
    }, r = N.TSModuleBlock;
    return m(r.body, t, "body", e, 1), t;
  }
  i(kM, "tsModuleBlock");
  function FM(e, t = null, r = null) {
    let n = {
      type: "TSImportType",
      argument: e,
      qualifier: t,
      typeParameters: r
    }, s = N.TSImportType;
    return m(s.argument, n, "argument", e, 1), m(s.qualifier, n, "qualifier", t, 1), m(s.typeParameters, n, "typeParameters", r, 1), n;
  }
  i(FM, "tsImportType");
  function jM(e, t) {
    let r = {
      type: "TSImportEqualsDeclaration",
      id: e,
      moduleReference: t,
      isExport: null
    }, n = N.TSImportEqualsDeclaration;
    return m(n.id, r, "id", e, 1), m(n.moduleReference, r, "moduleReference", t, 1), r;
  }
  i(jM, "tsImportEqualsDeclaration");
  function LM(e) {
    let t = {
      type: "TSExternalModuleReference",
      expression: e
    }, r = N.TSExternalModuleReference;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(LM, "tsExternalModuleReference");
  function MM(e) {
    let t = {
      type: "TSNonNullExpression",
      expression: e
    }, r = N.TSNonNullExpression;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(MM, "tsNonNullExpression");
  function RM(e) {
    let t = {
      type: "TSExportAssignment",
      expression: e
    }, r = N.TSExportAssignment;
    return m(r.expression, t, "expression", e, 1), t;
  }
  i(RM, "tsExportAssignment");
  function qM(e) {
    let t = {
      type: "TSNamespaceExportDeclaration",
      id: e
    }, r = N.TSNamespaceExportDeclaration;
    return m(r.id, t, "id", e, 1), t;
  }
  i(qM, "tsNamespaceExportDeclaration");
  function UM(e) {
    let t = {
      type: "TSTypeAnnotation",
      typeAnnotation: e
    }, r = N.TSTypeAnnotation;
    return m(r.typeAnnotation, t, "typeAnnotation", e, 1), t;
  }
  i(UM, "tsTypeAnnotation");
  function VM(e) {
    let t = {
      type: "TSTypeParameterInstantiation",
      params: e
    }, r = N.TSTypeParameterInstantiation;
    return m(r.params, t, "params", e, 1), t;
  }
  i(VM, "tsTypeParameterInstantiation");
  function $M(e) {
    let t = {
      type: "TSTypeParameterDeclaration",
      params: e
    }, r = N.TSTypeParameterDeclaration;
    return m(r.params, t, "params", e, 1), t;
  }
  i($M, "tsTypeParameterDeclaration");
  function WM(e = null, t = null, r) {
    let n = {
      type: "TSTypeParameter",
      constraint: e,
      default: t,
      name: r
    }, s = N.TSTypeParameter;
    return m(s.constraint, n, "constraint", e, 1), m(s.default, n, "default", t, 1), m(s.name, n, "name", r), n;
  }
  i(WM, "tsTypeParameter");
  function KM(e) {
    return (0, dl.default)("NumberLiteral", "NumericLiteral", "The node type "), hE(e);
  }
  i(KM, "NumberLiteral");
  function GM(e, t = "") {
    return (0, dl.default)("RegexLiteral", "RegExpLiteral", "The node type "), mE(e, t);
  }
  i(GM, "RegexLiteral");
  function HM(e) {
    return (0, dl.default)("RestProperty", "RestElement", "The node type "), yE(e);
  }
  i(HM, "RestProperty");
  function YM(e) {
    return (0, dl.default)("SpreadProperty", "SpreadElement", "The node type "), gE(e);
  }
  i(YM, "SpreadProperty");
});

// ../node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js
var bE = A((bf) => {
  "use strict";
  Object.defineProperty(bf, "__esModule", {
    value: !0
  });
  bf.default = XM;
  var JM = rr(), zM = Pe();
  function XM(e, t) {
    let r = e.value.split(/\r\n|\n|\r/), n = 0;
    for (let a = 0; a < r.length; a++)
      /[^ \t]/.exec(r[a]) && (n = a);
    let s = "";
    for (let a = 0; a < r.length; a++) {
      let o = r[a], l = a === 0, u = a === r.length - 1, c = a === n, p = o.replace(/\t/g, " ");
      l || (p = p.replace(/^ +/, "")), u || (p = p.replace(/ +$/, "")), p && (c || (p += " "), s += p);
    }
    s && t.push((0, zM.inherits)((0, JM.stringLiteral)(s), e));
  }
  i(XM, "cleanJSXElementLiteralChild");
});

// ../node_modules/@babel/types/lib/builders/react/buildChildren.js
var EE = A((Tf) => {
  "use strict";
  Object.defineProperty(Tf, "__esModule", {
    value: !0
  });
  Tf.default = ZM;
  var Ef = St(), QM = bE();
  function ZM(e) {
    let t = [];
    for (let r = 0; r < e.children.length; r++) {
      let n = e.children[r];
      if ((0, Ef.isJSXText)(n)) {
        (0, QM.default)(n, t);
        continue;
      }
      (0, Ef.isJSXExpressionContainer)(n) && (n = n.expression), !(0, Ef.isJSXEmptyExpression)(n) && t.push(n);
    }
    return t;
  }
  i(ZM, "buildChildren");
});

// ../node_modules/@babel/types/lib/validators/isNode.js
var xf = A((Sf) => {
  "use strict";
  Object.defineProperty(Sf, "__esModule", {
    value: !0
  });
  Sf.default = t5;
  var e5 = xr();
  function t5(e) {
    return !!(e && e5.VISITOR_KEYS[e.type]);
  }
  i(t5, "isNode");
});

// ../node_modules/@babel/types/lib/asserts/assertNode.js
var TE = A((vf) => {
  "use strict";
  Object.defineProperty(vf, "__esModule", {
    value: !0
  });
  vf.default = n5;
  var r5 = xf();
  function n5(e) {
    if (!(0, r5.default)(e)) {
      var t;
      let r = (t = e?.type) != null ? t : JSON.stringify(e);
      throw new TypeError(`Not a valid node of type "${r}"`);
    }
  }
  i(n5, "assertNode");
});

// ../node_modules/@babel/types/lib/asserts/generated/index.js
var SE = A((S) => {
  "use strict";
  Object.defineProperty(S, "__esModule", {
    value: !0
  });
  S.assertAccessor = EU;
  S.assertAnyTypeAnnotation = RR;
  S.assertArgumentPlaceholder = h7;
  S.assertArrayExpression = i5;
  S.assertArrayPattern = nR;
  S.assertArrayTypeAnnotation = qR;
  S.assertArrowFunctionExpression = sR;
  S.assertAssignmentExpression = a5;
  S.assertAssignmentPattern = rR;
  S.assertAwaitExpression = DR;
  S.assertBigIntLiteral = IR;
  S.assertBinary = Uq;
  S.assertBinaryExpression = o5;
  S.assertBindExpression = m7;
  S.assertBlock = Wq;
  S.assertBlockParent = $q;
  S.assertBlockStatement = p5;
  S.assertBooleanLiteral = N5;
  S.assertBooleanLiteralTypeAnnotation = VR;
  S.assertBooleanTypeAnnotation = UR;
  S.assertBreakStatement = f5;
  S.assertCallExpression = d5;
  S.assertCatchClause = h5;
  S.assertClass = mU;
  S.assertClassAccessorProperty = kR;
  S.assertClassBody = iR;
  S.assertClassDeclaration = oR;
  S.assertClassExpression = aR;
  S.assertClassImplements = WR;
  S.assertClassMethod = ER;
  S.assertClassPrivateMethod = jR;
  S.assertClassPrivateProperty = FR;
  S.assertClassProperty = BR;
  S.assertCompletionStatement = Hq;
  S.assertConditional = Yq;
  S.assertConditionalExpression = m5;
  S.assertContinueStatement = y5;
  S.assertDebuggerStatement = g5;
  S.assertDecimalLiteral = x7;
  S.assertDeclaration = nU;
  S.assertDeclareClass = KR;
  S.assertDeclareExportAllDeclaration = e9;
  S.assertDeclareExportDeclaration = ZR;
  S.assertDeclareFunction = GR;
  S.assertDeclareInterface = HR;
  S.assertDeclareModule = YR;
  S.assertDeclareModuleExports = JR;
  S.assertDeclareOpaqueType = XR;
  S.assertDeclareTypeAlias = zR;
  S.assertDeclareVariable = QR;
  S.assertDeclaredPredicate = t9;
  S.assertDecorator = g7;
  S.assertDirective = u5;
  S.assertDirectiveLiteral = c5;
  S.assertDoExpression = b7;
  S.assertDoWhileStatement = b5;
  S.assertEmptyStatement = E5;
  S.assertEmptyTypeAnnotation = f9;
  S.assertEnumBody = CU;
  S.assertEnumBooleanBody = q9;
  S.assertEnumBooleanMember = W9;
  S.assertEnumDeclaration = R9;
  S.assertEnumDefaultedMember = H9;
  S.assertEnumMember = DU;
  S.assertEnumNumberBody = U9;
  S.assertEnumNumberMember = K9;
  S.assertEnumStringBody = V9;
  S.assertEnumStringMember = G9;
  S.assertEnumSymbolBody = $9;
  S.assertExistsTypeAnnotation = r9;
  S.assertExportAllDeclaration = lR;
  S.assertExportDeclaration = gU;
  S.assertExportDefaultDeclaration = uR;
  S.assertExportDefaultSpecifier = E7;
  S.assertExportNamedDeclaration = cR;
  S.assertExportNamespaceSpecifier = _R;
  S.assertExportSpecifier = pR;
  S.assertExpression = qq;
  S.assertExpressionStatement = T5;
  S.assertExpressionWrapper = Xq;
  S.assertFile = S5;
  S.assertFlow = SU;
  S.assertFlowBaseAnnotation = vU;
  S.assertFlowDeclaration = PU;
  S.assertFlowPredicate = AU;
  S.assertFlowType = xU;
  S.assertFor = Qq;
  S.assertForInStatement = x5;
  S.assertForOfStatement = fR;
  S.assertForStatement = v5;
  S.assertForXStatement = Zq;
  S.assertFunction = eU;
  S.assertFunctionDeclaration = P5;
  S.assertFunctionExpression = A5;
  S.assertFunctionParent = tU;
  S.assertFunctionTypeAnnotation = n9;
  S.assertFunctionTypeParam = s9;
  S.assertGenericTypeAnnotation = i9;
  S.assertIdentifier = C5;
  S.assertIfStatement = D5;
  S.assertImmutable = lU;
  S.assertImport = wR;
  S.assertImportAttribute = y7;
  S.assertImportDeclaration = dR;
  S.assertImportDefaultSpecifier = hR;
  S.assertImportExpression = gR;
  S.assertImportNamespaceSpecifier = mR;
  S.assertImportOrExportDeclaration = yU;
  S.assertImportSpecifier = yR;
  S.assertIndexedAccessType = Y9;
  S.assertInferredPredicate = a9;
  S.assertInterfaceDeclaration = l9;
  S.assertInterfaceExtends = o9;
  S.assertInterfaceTypeAnnotation = u9;
  S.assertInterpreterDirective = l5;
  S.assertIntersectionTypeAnnotation = c9;
  S.assertJSX = wU;
  S.assertJSXAttribute = z9;
  S.assertJSXClosingElement = X9;
  S.assertJSXClosingFragment = c7;
  S.assertJSXElement = Q9;
  S.assertJSXEmptyExpression = Z9;
  S.assertJSXExpressionContainer = e7;
  S.assertJSXFragment = l7;
  S.assertJSXIdentifier = r7;
  S.assertJSXMemberExpression = n7;
  S.assertJSXNamespacedName = s7;
  S.assertJSXOpeningElement = i7;
  S.assertJSXOpeningFragment = u7;
  S.assertJSXSpreadAttribute = a7;
  S.assertJSXSpreadChild = t7;
  S.assertJSXText = o7;
  S.assertLVal = iU;
  S.assertLabeledStatement = w5;
  S.assertLiteral = oU;
  S.assertLogicalExpression = k5;
  S.assertLoop = Jq;
  S.assertMemberExpression = F5;
  S.assertMetaProperty = bR;
  S.assertMethod = cU;
  S.assertMiscellaneous = IU;
  S.assertMixedTypeAnnotation = p9;
  S.assertModuleDeclaration = MU;
  S.assertModuleExpression = v7;
  S.assertModuleSpecifier = bU;
  S.assertNewExpression = j5;
  S.assertNoop = p7;
  S.assertNullLiteral = O5;
  S.assertNullLiteralTypeAnnotation = $R;
  S.assertNullableTypeAnnotation = d9;
  S.assertNumberLiteral = kU;
  S.assertNumberLiteralTypeAnnotation = h9;
  S.assertNumberTypeAnnotation = m9;
  S.assertNumericLiteral = _5;
  S.assertObjectExpression = M5;
  S.assertObjectMember = pU;
  S.assertObjectMethod = R5;
  S.assertObjectPattern = TR;
  S.assertObjectProperty = q5;
  S.assertObjectTypeAnnotation = y9;
  S.assertObjectTypeCallProperty = b9;
  S.assertObjectTypeIndexer = E9;
  S.assertObjectTypeInternalSlot = g9;
  S.assertObjectTypeProperty = T9;
  S.assertObjectTypeSpreadProperty = S9;
  S.assertOpaqueType = x9;
  S.assertOptionalCallExpression = NR;
  S.assertOptionalIndexedAccessType = J9;
  S.assertOptionalMemberExpression = OR;
  S.assertParenthesizedExpression = W5;
  S.assertPattern = hU;
  S.assertPatternLike = sU;
  S.assertPipelineBareFunction = C7;
  S.assertPipelinePrimaryTopicReference = D7;
  S.assertPipelineTopicExpression = A7;
  S.assertPlaceholder = f7;
  S.assertPrivate = TU;
  S.assertPrivateName = LR;
  S.assertProgram = L5;
  S.assertProperty = fU;
  S.assertPureish = rU;
  S.assertQualifiedTypeIdentifier = v9;
  S.assertRecordExpression = T7;
  S.assertRegExpLiteral = B5;
  S.assertRegexLiteral = FU;
  S.assertRestElement = U5;
  S.assertRestProperty = jU;
  S.assertReturnStatement = V5;
  S.assertScopable = Vq;
  S.assertSequenceExpression = $5;
  S.assertSpreadElement = SR;
  S.assertSpreadProperty = LU;
  S.assertStandardized = Rq;
  S.assertStatement = Kq;
  S.assertStaticBlock = MR;
  S.assertStringLiteral = I5;
  S.assertStringLiteralTypeAnnotation = P9;
  S.assertStringTypeAnnotation = A9;
  S.assertSuper = xR;
  S.assertSwitchCase = K5;
  S.assertSwitchStatement = G5;
  S.assertSymbolTypeAnnotation = C9;
  S.assertTSAnyKeyword = L7;
  S.assertTSArrayType = nq;
  S.assertTSAsExpression = xq;
  S.assertTSBaseType = BU;
  S.assertTSBigIntKeyword = R7;
  S.assertTSBooleanKeyword = M7;
  S.assertTSCallSignatureDeclaration = N7;
  S.assertTSConditionalType = cq;
  S.assertTSConstructSignatureDeclaration = B7;
  S.assertTSConstructorType = Q7;
  S.assertTSDeclareFunction = I7;
  S.assertTSDeclareMethod = _7;
  S.assertTSEntityName = aU;
  S.assertTSEnumDeclaration = Aq;
  S.assertTSEnumMember = Cq;
  S.assertTSExportAssignment = Bq;
  S.assertTSExpressionWithTypeArguments = gq;
  S.assertTSExternalModuleReference = Oq;
  S.assertTSFunctionType = X7;
  S.assertTSImportEqualsDeclaration = _q;
  S.assertTSImportType = Iq;
  S.assertTSIndexSignature = j7;
  S.assertTSIndexedAccessType = hq;
  S.assertTSInferType = pq;
  S.assertTSInstantiationExpression = Sq;
  S.assertTSInterfaceBody = Eq;
  S.assertTSInterfaceDeclaration = bq;
  S.assertTSIntersectionType = uq;
  S.assertTSIntrinsicKeyword = q7;
  S.assertTSLiteralType = yq;
  S.assertTSMappedType = mq;
  S.assertTSMethodSignature = F7;
  S.assertTSModuleBlock = wq;
  S.assertTSModuleDeclaration = Dq;
  S.assertTSNamedTupleMember = oq;
  S.assertTSNamespaceExportDeclaration = kq;
  S.assertTSNeverKeyword = U7;
  S.assertTSNonNullExpression = Nq;
  S.assertTSNullKeyword = V7;
  S.assertTSNumberKeyword = $7;
  S.assertTSObjectKeyword = W7;
  S.assertTSOptionalType = iq;
  S.assertTSParameterProperty = w7;
  S.assertTSParenthesizedType = fq;
  S.assertTSPropertySignature = k7;
  S.assertTSQualifiedName = O7;
  S.assertTSRestType = aq;
  S.assertTSSatisfiesExpression = vq;
  S.assertTSStringKeyword = K7;
  S.assertTSSymbolKeyword = G7;
  S.assertTSThisType = z7;
  S.assertTSTupleType = sq;
  S.assertTSType = NU;
  S.assertTSTypeAliasDeclaration = Tq;
  S.assertTSTypeAnnotation = Fq;
  S.assertTSTypeAssertion = Pq;
  S.assertTSTypeElement = OU;
  S.assertTSTypeLiteral = rq;
  S.assertTSTypeOperator = dq;
  S.assertTSTypeParameter = Mq;
  S.assertTSTypeParameterDeclaration = Lq;
  S.assertTSTypeParameterInstantiation = jq;
  S.assertTSTypePredicate = eq;
  S.assertTSTypeQuery = tq;
  S.assertTSTypeReference = Z7;
  S.assertTSUndefinedKeyword = H7;
  S.assertTSUnionType = lq;
  S.assertTSUnknownKeyword = Y7;
  S.assertTSVoidKeyword = J7;
  S.assertTaggedTemplateExpression = vR;
  S.assertTemplateElement = PR;
  S.assertTemplateLiteral = AR;
  S.assertTerminatorless = Gq;
  S.assertThisExpression = H5;
  S.assertThisTypeAnnotation = D9;
  S.assertThrowStatement = Y5;
  S.assertTopicReference = P7;
  S.assertTryStatement = J5;
  S.assertTupleExpression = S7;
  S.assertTupleTypeAnnotation = w9;
  S.assertTypeAlias = _9;
  S.assertTypeAnnotation = O9;
  S.assertTypeCastExpression = N9;
  S.assertTypeParameter = B9;
  S.assertTypeParameterDeclaration = k9;
  S.assertTypeParameterInstantiation = F9;
  S.assertTypeScript = _U;
  S.assertTypeofTypeAnnotation = I9;
  S.assertUnaryExpression = z5;
  S.assertUnaryLike = dU;
  S.assertUnionTypeAnnotation = j9;
  S.assertUpdateExpression = X5;
  S.assertUserWhitespacable = uU;
  S.assertV8IntrinsicIdentifier = d7;
  S.assertVariableDeclaration = Q5;
  S.assertVariableDeclarator = Z5;
  S.assertVariance = L9;
  S.assertVoidTypeAnnotation = M9;
  S.assertWhile = zq;
  S.assertWhileStatement = eR;
  S.assertWithStatement = tR;
  S.assertYieldExpression = CR;
  var s5 = fi(), Ca = ga();
  function x(e, t, r) {
    if (!(0, s5.default)(e, t, r))
      throw new Error(`Expected type "${e}" with option ${JSON.stringify(r)}, but instead got "${t.type}".`);
  }
  i(x, "assert");
  function i5(e, t) {
    x("ArrayExpression", e, t);
  }
  i(i5, "assertArrayExpression");
  function a5(e, t) {
    x("AssignmentExpression", e, t);
  }
  i(a5, "assertAssignmentExpression");
  function o5(e, t) {
    x("BinaryExpression", e, t);
  }
  i(o5, "assertBinaryExpression");
  function l5(e, t) {
    x("InterpreterDirective", e, t);
  }
  i(l5, "assertInterpreterDirective");
  function u5(e, t) {
    x("Directive", e, t);
  }
  i(u5, "assertDirective");
  function c5(e, t) {
    x("DirectiveLiteral", e, t);
  }
  i(c5, "assertDirectiveLiteral");
  function p5(e, t) {
    x("BlockStatement", e, t);
  }
  i(p5, "assertBlockStatement");
  function f5(e, t) {
    x("BreakStatement", e, t);
  }
  i(f5, "assertBreakStatement");
  function d5(e, t) {
    x("CallExpression", e, t);
  }
  i(d5, "assertCallExpression");
  function h5(e, t) {
    x("CatchClause", e, t);
  }
  i(h5, "assertCatchClause");
  function m5(e, t) {
    x("ConditionalExpression", e, t);
  }
  i(m5, "assertConditionalExpression");
  function y5(e, t) {
    x("ContinueStatement", e, t);
  }
  i(y5, "assertContinueStatement");
  function g5(e, t) {
    x("DebuggerStatement", e, t);
  }
  i(g5, "assertDebuggerStatement");
  function b5(e, t) {
    x("DoWhileStatement", e, t);
  }
  i(b5, "assertDoWhileStatement");
  function E5(e, t) {
    x("EmptyStatement", e, t);
  }
  i(E5, "assertEmptyStatement");
  function T5(e, t) {
    x("ExpressionStatement", e, t);
  }
  i(T5, "assertExpressionStatement");
  function S5(e, t) {
    x("File", e, t);
  }
  i(S5, "assertFile");
  function x5(e, t) {
    x("ForInStatement", e, t);
  }
  i(x5, "assertForInStatement");
  function v5(e, t) {
    x("ForStatement", e, t);
  }
  i(v5, "assertForStatement");
  function P5(e, t) {
    x("FunctionDeclaration", e, t);
  }
  i(P5, "assertFunctionDeclaration");
  function A5(e, t) {
    x("FunctionExpression", e, t);
  }
  i(A5, "assertFunctionExpression");
  function C5(e, t) {
    x("Identifier", e, t);
  }
  i(C5, "assertIdentifier");
  function D5(e, t) {
    x("IfStatement", e, t);
  }
  i(D5, "assertIfStatement");
  function w5(e, t) {
    x("LabeledStatement", e, t);
  }
  i(w5, "assertLabeledStatement");
  function I5(e, t) {
    x("StringLiteral", e, t);
  }
  i(I5, "assertStringLiteral");
  function _5(e, t) {
    x("NumericLiteral", e, t);
  }
  i(_5, "assertNumericLiteral");
  function O5(e, t) {
    x("NullLiteral", e, t);
  }
  i(O5, "assertNullLiteral");
  function N5(e, t) {
    x("BooleanLiteral", e, t);
  }
  i(N5, "assertBooleanLiteral");
  function B5(e, t) {
    x("RegExpLiteral", e, t);
  }
  i(B5, "assertRegExpLiteral");
  function k5(e, t) {
    x("LogicalExpression", e, t);
  }
  i(k5, "assertLogicalExpression");
  function F5(e, t) {
    x("MemberExpression", e, t);
  }
  i(F5, "assertMemberExpression");
  function j5(e, t) {
    x("NewExpression", e, t);
  }
  i(j5, "assertNewExpression");
  function L5(e, t) {
    x("Program", e, t);
  }
  i(L5, "assertProgram");
  function M5(e, t) {
    x("ObjectExpression", e, t);
  }
  i(M5, "assertObjectExpression");
  function R5(e, t) {
    x("ObjectMethod", e, t);
  }
  i(R5, "assertObjectMethod");
  function q5(e, t) {
    x("ObjectProperty", e, t);
  }
  i(q5, "assertObjectProperty");
  function U5(e, t) {
    x("RestElement", e, t);
  }
  i(U5, "assertRestElement");
  function V5(e, t) {
    x("ReturnStatement", e, t);
  }
  i(V5, "assertReturnStatement");
  function $5(e, t) {
    x("SequenceExpression", e, t);
  }
  i($5, "assertSequenceExpression");
  function W5(e, t) {
    x("ParenthesizedExpression", e, t);
  }
  i(W5, "assertParenthesizedExpression");
  function K5(e, t) {
    x("SwitchCase", e, t);
  }
  i(K5, "assertSwitchCase");
  function G5(e, t) {
    x("SwitchStatement", e, t);
  }
  i(G5, "assertSwitchStatement");
  function H5(e, t) {
    x("ThisExpression", e, t);
  }
  i(H5, "assertThisExpression");
  function Y5(e, t) {
    x("ThrowStatement", e, t);
  }
  i(Y5, "assertThrowStatement");
  function J5(e, t) {
    x("TryStatement", e, t);
  }
  i(J5, "assertTryStatement");
  function z5(e, t) {
    x("UnaryExpression", e, t);
  }
  i(z5, "assertUnaryExpression");
  function X5(e, t) {
    x("UpdateExpression", e, t);
  }
  i(X5, "assertUpdateExpression");
  function Q5(e, t) {
    x("VariableDeclaration", e, t);
  }
  i(Q5, "assertVariableDeclaration");
  function Z5(e, t) {
    x("VariableDeclarator", e, t);
  }
  i(Z5, "assertVariableDeclarator");
  function eR(e, t) {
    x("WhileStatement", e, t);
  }
  i(eR, "assertWhileStatement");
  function tR(e, t) {
    x("WithStatement", e, t);
  }
  i(tR, "assertWithStatement");
  function rR(e, t) {
    x("AssignmentPattern", e, t);
  }
  i(rR, "assertAssignmentPattern");
  function nR(e, t) {
    x("ArrayPattern", e, t);
  }
  i(nR, "assertArrayPattern");
  function sR(e, t) {
    x("ArrowFunctionExpression", e, t);
  }
  i(sR, "assertArrowFunctionExpression");
  function iR(e, t) {
    x("ClassBody", e, t);
  }
  i(iR, "assertClassBody");
  function aR(e, t) {
    x("ClassExpression", e, t);
  }
  i(aR, "assertClassExpression");
  function oR(e, t) {
    x("ClassDeclaration", e, t);
  }
  i(oR, "assertClassDeclaration");
  function lR(e, t) {
    x("ExportAllDeclaration", e, t);
  }
  i(lR, "assertExportAllDeclaration");
  function uR(e, t) {
    x("ExportDefaultDeclaration", e, t);
  }
  i(uR, "assertExportDefaultDeclaration");
  function cR(e, t) {
    x("ExportNamedDeclaration", e, t);
  }
  i(cR, "assertExportNamedDeclaration");
  function pR(e, t) {
    x("ExportSpecifier", e, t);
  }
  i(pR, "assertExportSpecifier");
  function fR(e, t) {
    x("ForOfStatement", e, t);
  }
  i(fR, "assertForOfStatement");
  function dR(e, t) {
    x("ImportDeclaration", e, t);
  }
  i(dR, "assertImportDeclaration");
  function hR(e, t) {
    x("ImportDefaultSpecifier", e, t);
  }
  i(hR, "assertImportDefaultSpecifier");
  function mR(e, t) {
    x("ImportNamespaceSpecifier", e, t);
  }
  i(mR, "assertImportNamespaceSpecifier");
  function yR(e, t) {
    x("ImportSpecifier", e, t);
  }
  i(yR, "assertImportSpecifier");
  function gR(e, t) {
    x("ImportExpression", e, t);
  }
  i(gR, "assertImportExpression");
  function bR(e, t) {
    x("MetaProperty", e, t);
  }
  i(bR, "assertMetaProperty");
  function ER(e, t) {
    x("ClassMethod", e, t);
  }
  i(ER, "assertClassMethod");
  function TR(e, t) {
    x("ObjectPattern", e, t);
  }
  i(TR, "assertObjectPattern");
  function SR(e, t) {
    x("SpreadElement", e, t);
  }
  i(SR, "assertSpreadElement");
  function xR(e, t) {
    x("Super", e, t);
  }
  i(xR, "assertSuper");
  function vR(e, t) {
    x("TaggedTemplateExpression", e, t);
  }
  i(vR, "assertTaggedTemplateExpression");
  function PR(e, t) {
    x("TemplateElement", e, t);
  }
  i(PR, "assertTemplateElement");
  function AR(e, t) {
    x("TemplateLiteral", e, t);
  }
  i(AR, "assertTemplateLiteral");
  function CR(e, t) {
    x("YieldExpression", e, t);
  }
  i(CR, "assertYieldExpression");
  function DR(e, t) {
    x("AwaitExpression", e, t);
  }
  i(DR, "assertAwaitExpression");
  function wR(e, t) {
    x("Import", e, t);
  }
  i(wR, "assertImport");
  function IR(e, t) {
    x("BigIntLiteral", e, t);
  }
  i(IR, "assertBigIntLiteral");
  function _R(e, t) {
    x("ExportNamespaceSpecifier", e, t);
  }
  i(_R, "assertExportNamespaceSpecifier");
  function OR(e, t) {
    x("OptionalMemberExpression", e, t);
  }
  i(OR, "assertOptionalMemberExpression");
  function NR(e, t) {
    x("OptionalCallExpression", e, t);
  }
  i(NR, "assertOptionalCallExpression");
  function BR(e, t) {
    x("ClassProperty", e, t);
  }
  i(BR, "assertClassProperty");
  function kR(e, t) {
    x("ClassAccessorProperty", e, t);
  }
  i(kR, "assertClassAccessorProperty");
  function FR(e, t) {
    x("ClassPrivateProperty", e, t);
  }
  i(FR, "assertClassPrivateProperty");
  function jR(e, t) {
    x("ClassPrivateMethod", e, t);
  }
  i(jR, "assertClassPrivateMethod");
  function LR(e, t) {
    x("PrivateName", e, t);
  }
  i(LR, "assertPrivateName");
  function MR(e, t) {
    x("StaticBlock", e, t);
  }
  i(MR, "assertStaticBlock");
  function RR(e, t) {
    x("AnyTypeAnnotation", e, t);
  }
  i(RR, "assertAnyTypeAnnotation");
  function qR(e, t) {
    x("ArrayTypeAnnotation", e, t);
  }
  i(qR, "assertArrayTypeAnnotation");
  function UR(e, t) {
    x("BooleanTypeAnnotation", e, t);
  }
  i(UR, "assertBooleanTypeAnnotation");
  function VR(e, t) {
    x("BooleanLiteralTypeAnnotation", e, t);
  }
  i(VR, "assertBooleanLiteralTypeAnnotation");
  function $R(e, t) {
    x("NullLiteralTypeAnnotation", e, t);
  }
  i($R, "assertNullLiteralTypeAnnotation");
  function WR(e, t) {
    x("ClassImplements", e, t);
  }
  i(WR, "assertClassImplements");
  function KR(e, t) {
    x("DeclareClass", e, t);
  }
  i(KR, "assertDeclareClass");
  function GR(e, t) {
    x("DeclareFunction", e, t);
  }
  i(GR, "assertDeclareFunction");
  function HR(e, t) {
    x("DeclareInterface", e, t);
  }
  i(HR, "assertDeclareInterface");
  function YR(e, t) {
    x("DeclareModule", e, t);
  }
  i(YR, "assertDeclareModule");
  function JR(e, t) {
    x("DeclareModuleExports", e, t);
  }
  i(JR, "assertDeclareModuleExports");
  function zR(e, t) {
    x("DeclareTypeAlias", e, t);
  }
  i(zR, "assertDeclareTypeAlias");
  function XR(e, t) {
    x("DeclareOpaqueType", e, t);
  }
  i(XR, "assertDeclareOpaqueType");
  function QR(e, t) {
    x("DeclareVariable", e, t);
  }
  i(QR, "assertDeclareVariable");
  function ZR(e, t) {
    x("DeclareExportDeclaration", e, t);
  }
  i(ZR, "assertDeclareExportDeclaration");
  function e9(e, t) {
    x("DeclareExportAllDeclaration", e, t);
  }
  i(e9, "assertDeclareExportAllDeclaration");
  function t9(e, t) {
    x("DeclaredPredicate", e, t);
  }
  i(t9, "assertDeclaredPredicate");
  function r9(e, t) {
    x("ExistsTypeAnnotation", e, t);
  }
  i(r9, "assertExistsTypeAnnotation");
  function n9(e, t) {
    x("FunctionTypeAnnotation", e, t);
  }
  i(n9, "assertFunctionTypeAnnotation");
  function s9(e, t) {
    x("FunctionTypeParam", e, t);
  }
  i(s9, "assertFunctionTypeParam");
  function i9(e, t) {
    x("GenericTypeAnnotation", e, t);
  }
  i(i9, "assertGenericTypeAnnotation");
  function a9(e, t) {
    x("InferredPredicate", e, t);
  }
  i(a9, "assertInferredPredicate");
  function o9(e, t) {
    x("InterfaceExtends", e, t);
  }
  i(o9, "assertInterfaceExtends");
  function l9(e, t) {
    x("InterfaceDeclaration", e, t);
  }
  i(l9, "assertInterfaceDeclaration");
  function u9(e, t) {
    x("InterfaceTypeAnnotation", e, t);
  }
  i(u9, "assertInterfaceTypeAnnotation");
  function c9(e, t) {
    x("IntersectionTypeAnnotation", e, t);
  }
  i(c9, "assertIntersectionTypeAnnotation");
  function p9(e, t) {
    x("MixedTypeAnnotation", e, t);
  }
  i(p9, "assertMixedTypeAnnotation");
  function f9(e, t) {
    x("EmptyTypeAnnotation", e, t);
  }
  i(f9, "assertEmptyTypeAnnotation");
  function d9(e, t) {
    x("NullableTypeAnnotation", e, t);
  }
  i(d9, "assertNullableTypeAnnotation");
  function h9(e, t) {
    x("NumberLiteralTypeAnnotation", e, t);
  }
  i(h9, "assertNumberLiteralTypeAnnotation");
  function m9(e, t) {
    x("NumberTypeAnnotation", e, t);
  }
  i(m9, "assertNumberTypeAnnotation");
  function y9(e, t) {
    x("ObjectTypeAnnotation", e, t);
  }
  i(y9, "assertObjectTypeAnnotation");
  function g9(e, t) {
    x("ObjectTypeInternalSlot", e, t);
  }
  i(g9, "assertObjectTypeInternalSlot");
  function b9(e, t) {
    x("ObjectTypeCallProperty", e, t);
  }
  i(b9, "assertObjectTypeCallProperty");
  function E9(e, t) {
    x("ObjectTypeIndexer", e, t);
  }
  i(E9, "assertObjectTypeIndexer");
  function T9(e, t) {
    x("ObjectTypeProperty", e, t);
  }
  i(T9, "assertObjectTypeProperty");
  function S9(e, t) {
    x("ObjectTypeSpreadProperty", e, t);
  }
  i(S9, "assertObjectTypeSpreadProperty");
  function x9(e, t) {
    x("OpaqueType", e, t);
  }
  i(x9, "assertOpaqueType");
  function v9(e, t) {
    x("QualifiedTypeIdentifier", e, t);
  }
  i(v9, "assertQualifiedTypeIdentifier");
  function P9(e, t) {
    x("StringLiteralTypeAnnotation", e, t);
  }
  i(P9, "assertStringLiteralTypeAnnotation");
  function A9(e, t) {
    x("StringTypeAnnotation", e, t);
  }
  i(A9, "assertStringTypeAnnotation");
  function C9(e, t) {
    x("SymbolTypeAnnotation", e, t);
  }
  i(C9, "assertSymbolTypeAnnotation");
  function D9(e, t) {
    x("ThisTypeAnnotation", e, t);
  }
  i(D9, "assertThisTypeAnnotation");
  function w9(e, t) {
    x("TupleTypeAnnotation", e, t);
  }
  i(w9, "assertTupleTypeAnnotation");
  function I9(e, t) {
    x("TypeofTypeAnnotation", e, t);
  }
  i(I9, "assertTypeofTypeAnnotation");
  function _9(e, t) {
    x("TypeAlias", e, t);
  }
  i(_9, "assertTypeAlias");
  function O9(e, t) {
    x("TypeAnnotation", e, t);
  }
  i(O9, "assertTypeAnnotation");
  function N9(e, t) {
    x("TypeCastExpression", e, t);
  }
  i(N9, "assertTypeCastExpression");
  function B9(e, t) {
    x("TypeParameter", e, t);
  }
  i(B9, "assertTypeParameter");
  function k9(e, t) {
    x("TypeParameterDeclaration", e, t);
  }
  i(k9, "assertTypeParameterDeclaration");
  function F9(e, t) {
    x("TypeParameterInstantiation", e, t);
  }
  i(F9, "assertTypeParameterInstantiation");
  function j9(e, t) {
    x("UnionTypeAnnotation", e, t);
  }
  i(j9, "assertUnionTypeAnnotation");
  function L9(e, t) {
    x("Variance", e, t);
  }
  i(L9, "assertVariance");
  function M9(e, t) {
    x("VoidTypeAnnotation", e, t);
  }
  i(M9, "assertVoidTypeAnnotation");
  function R9(e, t) {
    x("EnumDeclaration", e, t);
  }
  i(R9, "assertEnumDeclaration");
  function q9(e, t) {
    x("EnumBooleanBody", e, t);
  }
  i(q9, "assertEnumBooleanBody");
  function U9(e, t) {
    x("EnumNumberBody", e, t);
  }
  i(U9, "assertEnumNumberBody");
  function V9(e, t) {
    x("EnumStringBody", e, t);
  }
  i(V9, "assertEnumStringBody");
  function $9(e, t) {
    x("EnumSymbolBody", e, t);
  }
  i($9, "assertEnumSymbolBody");
  function W9(e, t) {
    x("EnumBooleanMember", e, t);
  }
  i(W9, "assertEnumBooleanMember");
  function K9(e, t) {
    x("EnumNumberMember", e, t);
  }
  i(K9, "assertEnumNumberMember");
  function G9(e, t) {
    x("EnumStringMember", e, t);
  }
  i(G9, "assertEnumStringMember");
  function H9(e, t) {
    x("EnumDefaultedMember", e, t);
  }
  i(H9, "assertEnumDefaultedMember");
  function Y9(e, t) {
    x("IndexedAccessType", e, t);
  }
  i(Y9, "assertIndexedAccessType");
  function J9(e, t) {
    x("OptionalIndexedAccessType", e, t);
  }
  i(J9, "assertOptionalIndexedAccessType");
  function z9(e, t) {
    x("JSXAttribute", e, t);
  }
  i(z9, "assertJSXAttribute");
  function X9(e, t) {
    x("JSXClosingElement", e, t);
  }
  i(X9, "assertJSXClosingElement");
  function Q9(e, t) {
    x("JSXElement", e, t);
  }
  i(Q9, "assertJSXElement");
  function Z9(e, t) {
    x("JSXEmptyExpression", e, t);
  }
  i(Z9, "assertJSXEmptyExpression");
  function e7(e, t) {
    x("JSXExpressionContainer", e, t);
  }
  i(e7, "assertJSXExpressionContainer");
  function t7(e, t) {
    x("JSXSpreadChild", e, t);
  }
  i(t7, "assertJSXSpreadChild");
  function r7(e, t) {
    x("JSXIdentifier", e, t);
  }
  i(r7, "assertJSXIdentifier");
  function n7(e, t) {
    x("JSXMemberExpression", e, t);
  }
  i(n7, "assertJSXMemberExpression");
  function s7(e, t) {
    x("JSXNamespacedName", e, t);
  }
  i(s7, "assertJSXNamespacedName");
  function i7(e, t) {
    x("JSXOpeningElement", e, t);
  }
  i(i7, "assertJSXOpeningElement");
  function a7(e, t) {
    x("JSXSpreadAttribute", e, t);
  }
  i(a7, "assertJSXSpreadAttribute");
  function o7(e, t) {
    x("JSXText", e, t);
  }
  i(o7, "assertJSXText");
  function l7(e, t) {
    x("JSXFragment", e, t);
  }
  i(l7, "assertJSXFragment");
  function u7(e, t) {
    x("JSXOpeningFragment", e, t);
  }
  i(u7, "assertJSXOpeningFragment");
  function c7(e, t) {
    x("JSXClosingFragment", e, t);
  }
  i(c7, "assertJSXClosingFragment");
  function p7(e, t) {
    x("Noop", e, t);
  }
  i(p7, "assertNoop");
  function f7(e, t) {
    x("Placeholder", e, t);
  }
  i(f7, "assertPlaceholder");
  function d7(e, t) {
    x("V8IntrinsicIdentifier", e, t);
  }
  i(d7, "assertV8IntrinsicIdentifier");
  function h7(e, t) {
    x("ArgumentPlaceholder", e, t);
  }
  i(h7, "assertArgumentPlaceholder");
  function m7(e, t) {
    x("BindExpression", e, t);
  }
  i(m7, "assertBindExpression");
  function y7(e, t) {
    x("ImportAttribute", e, t);
  }
  i(y7, "assertImportAttribute");
  function g7(e, t) {
    x("Decorator", e, t);
  }
  i(g7, "assertDecorator");
  function b7(e, t) {
    x("DoExpression", e, t);
  }
  i(b7, "assertDoExpression");
  function E7(e, t) {
    x("ExportDefaultSpecifier", e, t);
  }
  i(E7, "assertExportDefaultSpecifier");
  function T7(e, t) {
    x("RecordExpression", e, t);
  }
  i(T7, "assertRecordExpression");
  function S7(e, t) {
    x("TupleExpression", e, t);
  }
  i(S7, "assertTupleExpression");
  function x7(e, t) {
    x("DecimalLiteral", e, t);
  }
  i(x7, "assertDecimalLiteral");
  function v7(e, t) {
    x("ModuleExpression", e, t);
  }
  i(v7, "assertModuleExpression");
  function P7(e, t) {
    x("TopicReference", e, t);
  }
  i(P7, "assertTopicReference");
  function A7(e, t) {
    x("PipelineTopicExpression", e, t);
  }
  i(A7, "assertPipelineTopicExpression");
  function C7(e, t) {
    x("PipelineBareFunction", e, t);
  }
  i(C7, "assertPipelineBareFunction");
  function D7(e, t) {
    x("PipelinePrimaryTopicReference", e, t);
  }
  i(D7, "assertPipelinePrimaryTopicReference");
  function w7(e, t) {
    x("TSParameterProperty", e, t);
  }
  i(w7, "assertTSParameterProperty");
  function I7(e, t) {
    x("TSDeclareFunction", e, t);
  }
  i(I7, "assertTSDeclareFunction");
  function _7(e, t) {
    x("TSDeclareMethod", e, t);
  }
  i(_7, "assertTSDeclareMethod");
  function O7(e, t) {
    x("TSQualifiedName", e, t);
  }
  i(O7, "assertTSQualifiedName");
  function N7(e, t) {
    x("TSCallSignatureDeclaration", e, t);
  }
  i(N7, "assertTSCallSignatureDeclaration");
  function B7(e, t) {
    x("TSConstructSignatureDeclaration", e, t);
  }
  i(B7, "assertTSConstructSignatureDeclaration");
  function k7(e, t) {
    x("TSPropertySignature", e, t);
  }
  i(k7, "assertTSPropertySignature");
  function F7(e, t) {
    x("TSMethodSignature", e, t);
  }
  i(F7, "assertTSMethodSignature");
  function j7(e, t) {
    x("TSIndexSignature", e, t);
  }
  i(j7, "assertTSIndexSignature");
  function L7(e, t) {
    x("TSAnyKeyword", e, t);
  }
  i(L7, "assertTSAnyKeyword");
  function M7(e, t) {
    x("TSBooleanKeyword", e, t);
  }
  i(M7, "assertTSBooleanKeyword");
  function R7(e, t) {
    x("TSBigIntKeyword", e, t);
  }
  i(R7, "assertTSBigIntKeyword");
  function q7(e, t) {
    x("TSIntrinsicKeyword", e, t);
  }
  i(q7, "assertTSIntrinsicKeyword");
  function U7(e, t) {
    x("TSNeverKeyword", e, t);
  }
  i(U7, "assertTSNeverKeyword");
  function V7(e, t) {
    x("TSNullKeyword", e, t);
  }
  i(V7, "assertTSNullKeyword");
  function $7(e, t) {
    x("TSNumberKeyword", e, t);
  }
  i($7, "assertTSNumberKeyword");
  function W7(e, t) {
    x("TSObjectKeyword", e, t);
  }
  i(W7, "assertTSObjectKeyword");
  function K7(e, t) {
    x("TSStringKeyword", e, t);
  }
  i(K7, "assertTSStringKeyword");
  function G7(e, t) {
    x("TSSymbolKeyword", e, t);
  }
  i(G7, "assertTSSymbolKeyword");
  function H7(e, t) {
    x("TSUndefinedKeyword", e, t);
  }
  i(H7, "assertTSUndefinedKeyword");
  function Y7(e, t) {
    x("TSUnknownKeyword", e, t);
  }
  i(Y7, "assertTSUnknownKeyword");
  function J7(e, t) {
    x("TSVoidKeyword", e, t);
  }
  i(J7, "assertTSVoidKeyword");
  function z7(e, t) {
    x("TSThisType", e, t);
  }
  i(z7, "assertTSThisType");
  function X7(e, t) {
    x("TSFunctionType", e, t);
  }
  i(X7, "assertTSFunctionType");
  function Q7(e, t) {
    x("TSConstructorType", e, t);
  }
  i(Q7, "assertTSConstructorType");
  function Z7(e, t) {
    x("TSTypeReference", e, t);
  }
  i(Z7, "assertTSTypeReference");
  function eq(e, t) {
    x("TSTypePredicate", e, t);
  }
  i(eq, "assertTSTypePredicate");
  function tq(e, t) {
    x("TSTypeQuery", e, t);
  }
  i(tq, "assertTSTypeQuery");
  function rq(e, t) {
    x("TSTypeLiteral", e, t);
  }
  i(rq, "assertTSTypeLiteral");
  function nq(e, t) {
    x("TSArrayType", e, t);
  }
  i(nq, "assertTSArrayType");
  function sq(e, t) {
    x("TSTupleType", e, t);
  }
  i(sq, "assertTSTupleType");
  function iq(e, t) {
    x("TSOptionalType", e, t);
  }
  i(iq, "assertTSOptionalType");
  function aq(e, t) {
    x("TSRestType", e, t);
  }
  i(aq, "assertTSRestType");
  function oq(e, t) {
    x("TSNamedTupleMember", e, t);
  }
  i(oq, "assertTSNamedTupleMember");
  function lq(e, t) {
    x("TSUnionType", e, t);
  }
  i(lq, "assertTSUnionType");
  function uq(e, t) {
    x("TSIntersectionType", e, t);
  }
  i(uq, "assertTSIntersectionType");
  function cq(e, t) {
    x("TSConditionalType", e, t);
  }
  i(cq, "assertTSConditionalType");
  function pq(e, t) {
    x("TSInferType", e, t);
  }
  i(pq, "assertTSInferType");
  function fq(e, t) {
    x("TSParenthesizedType", e, t);
  }
  i(fq, "assertTSParenthesizedType");
  function dq(e, t) {
    x("TSTypeOperator", e, t);
  }
  i(dq, "assertTSTypeOperator");
  function hq(e, t) {
    x("TSIndexedAccessType", e, t);
  }
  i(hq, "assertTSIndexedAccessType");
  function mq(e, t) {
    x("TSMappedType", e, t);
  }
  i(mq, "assertTSMappedType");
  function yq(e, t) {
    x("TSLiteralType", e, t);
  }
  i(yq, "assertTSLiteralType");
  function gq(e, t) {
    x("TSExpressionWithTypeArguments", e, t);
  }
  i(gq, "assertTSExpressionWithTypeArguments");
  function bq(e, t) {
    x("TSInterfaceDeclaration", e, t);
  }
  i(bq, "assertTSInterfaceDeclaration");
  function Eq(e, t) {
    x("TSInterfaceBody", e, t);
  }
  i(Eq, "assertTSInterfaceBody");
  function Tq(e, t) {
    x("TSTypeAliasDeclaration", e, t);
  }
  i(Tq, "assertTSTypeAliasDeclaration");
  function Sq(e, t) {
    x("TSInstantiationExpression", e, t);
  }
  i(Sq, "assertTSInstantiationExpression");
  function xq(e, t) {
    x("TSAsExpression", e, t);
  }
  i(xq, "assertTSAsExpression");
  function vq(e, t) {
    x("TSSatisfiesExpression", e, t);
  }
  i(vq, "assertTSSatisfiesExpression");
  function Pq(e, t) {
    x("TSTypeAssertion", e, t);
  }
  i(Pq, "assertTSTypeAssertion");
  function Aq(e, t) {
    x("TSEnumDeclaration", e, t);
  }
  i(Aq, "assertTSEnumDeclaration");
  function Cq(e, t) {
    x("TSEnumMember", e, t);
  }
  i(Cq, "assertTSEnumMember");
  function Dq(e, t) {
    x("TSModuleDeclaration", e, t);
  }
  i(Dq, "assertTSModuleDeclaration");
  function wq(e, t) {
    x("TSModuleBlock", e, t);
  }
  i(wq, "assertTSModuleBlock");
  function Iq(e, t) {
    x("TSImportType", e, t);
  }
  i(Iq, "assertTSImportType");
  function _q(e, t) {
    x("TSImportEqualsDeclaration", e, t);
  }
  i(_q, "assertTSImportEqualsDeclaration");
  function Oq(e, t) {
    x("TSExternalModuleReference", e, t);
  }
  i(Oq, "assertTSExternalModuleReference");
  function Nq(e, t) {
    x("TSNonNullExpression", e, t);
  }
  i(Nq, "assertTSNonNullExpression");
  function Bq(e, t) {
    x("TSExportAssignment", e, t);
  }
  i(Bq, "assertTSExportAssignment");
  function kq(e, t) {
    x("TSNamespaceExportDeclaration", e, t);
  }
  i(kq, "assertTSNamespaceExportDeclaration");
  function Fq(e, t) {
    x("TSTypeAnnotation", e, t);
  }
  i(Fq, "assertTSTypeAnnotation");
  function jq(e, t) {
    x("TSTypeParameterInstantiation", e, t);
  }
  i(jq, "assertTSTypeParameterInstantiation");
  function Lq(e, t) {
    x("TSTypeParameterDeclaration", e, t);
  }
  i(Lq, "assertTSTypeParameterDeclaration");
  function Mq(e, t) {
    x("TSTypeParameter", e, t);
  }
  i(Mq, "assertTSTypeParameter");
  function Rq(e, t) {
    x("Standardized", e, t);
  }
  i(Rq, "assertStandardized");
  function qq(e, t) {
    x("Expression", e, t);
  }
  i(qq, "assertExpression");
  function Uq(e, t) {
    x("Binary", e, t);
  }
  i(Uq, "assertBinary");
  function Vq(e, t) {
    x("Scopable", e, t);
  }
  i(Vq, "assertScopable");
  function $q(e, t) {
    x("BlockParent", e, t);
  }
  i($q, "assertBlockParent");
  function Wq(e, t) {
    x("Block", e, t);
  }
  i(Wq, "assertBlock");
  function Kq(e, t) {
    x("Statement", e, t);
  }
  i(Kq, "assertStatement");
  function Gq(e, t) {
    x("Terminatorless", e, t);
  }
  i(Gq, "assertTerminatorless");
  function Hq(e, t) {
    x("CompletionStatement", e, t);
  }
  i(Hq, "assertCompletionStatement");
  function Yq(e, t) {
    x("Conditional", e, t);
  }
  i(Yq, "assertConditional");
  function Jq(e, t) {
    x("Loop", e, t);
  }
  i(Jq, "assertLoop");
  function zq(e, t) {
    x("While", e, t);
  }
  i(zq, "assertWhile");
  function Xq(e, t) {
    x("ExpressionWrapper", e, t);
  }
  i(Xq, "assertExpressionWrapper");
  function Qq(e, t) {
    x("For", e, t);
  }
  i(Qq, "assertFor");
  function Zq(e, t) {
    x("ForXStatement", e, t);
  }
  i(Zq, "assertForXStatement");
  function eU(e, t) {
    x("Function", e, t);
  }
  i(eU, "assertFunction");
  function tU(e, t) {
    x("FunctionParent", e, t);
  }
  i(tU, "assertFunctionParent");
  function rU(e, t) {
    x("Pureish", e, t);
  }
  i(rU, "assertPureish");
  function nU(e, t) {
    x("Declaration", e, t);
  }
  i(nU, "assertDeclaration");
  function sU(e, t) {
    x("PatternLike", e, t);
  }
  i(sU, "assertPatternLike");
  function iU(e, t) {
    x("LVal", e, t);
  }
  i(iU, "assertLVal");
  function aU(e, t) {
    x("TSEntityName", e, t);
  }
  i(aU, "assertTSEntityName");
  function oU(e, t) {
    x("Literal", e, t);
  }
  i(oU, "assertLiteral");
  function lU(e, t) {
    x("Immutable", e, t);
  }
  i(lU, "assertImmutable");
  function uU(e, t) {
    x("UserWhitespacable", e, t);
  }
  i(uU, "assertUserWhitespacable");
  function cU(e, t) {
    x("Method", e, t);
  }
  i(cU, "assertMethod");
  function pU(e, t) {
    x("ObjectMember", e, t);
  }
  i(pU, "assertObjectMember");
  function fU(e, t) {
    x("Property", e, t);
  }
  i(fU, "assertProperty");
  function dU(e, t) {
    x("UnaryLike", e, t);
  }
  i(dU, "assertUnaryLike");
  function hU(e, t) {
    x("Pattern", e, t);
  }
  i(hU, "assertPattern");
  function mU(e, t) {
    x("Class", e, t);
  }
  i(mU, "assertClass");
  function yU(e, t) {
    x("ImportOrExportDeclaration", e, t);
  }
  i(yU, "assertImportOrExportDeclaration");
  function gU(e, t) {
    x("ExportDeclaration", e, t);
  }
  i(gU, "assertExportDeclaration");
  function bU(e, t) {
    x("ModuleSpecifier", e, t);
  }
  i(bU, "assertModuleSpecifier");
  function EU(e, t) {
    x("Accessor", e, t);
  }
  i(EU, "assertAccessor");
  function TU(e, t) {
    x("Private", e, t);
  }
  i(TU, "assertPrivate");
  function SU(e, t) {
    x("Flow", e, t);
  }
  i(SU, "assertFlow");
  function xU(e, t) {
    x("FlowType", e, t);
  }
  i(xU, "assertFlowType");
  function vU(e, t) {
    x("FlowBaseAnnotation", e, t);
  }
  i(vU, "assertFlowBaseAnnotation");
  function PU(e, t) {
    x("FlowDeclaration", e, t);
  }
  i(PU, "assertFlowDeclaration");
  function AU(e, t) {
    x("FlowPredicate", e, t);
  }
  i(AU, "assertFlowPredicate");
  function CU(e, t) {
    x("EnumBody", e, t);
  }
  i(CU, "assertEnumBody");
  function DU(e, t) {
    x("EnumMember", e, t);
  }
  i(DU, "assertEnumMember");
  function wU(e, t) {
    x("JSX", e, t);
  }
  i(wU, "assertJSX");
  function IU(e, t) {
    x("Miscellaneous", e, t);
  }
  i(IU, "assertMiscellaneous");
  function _U(e, t) {
    x("TypeScript", e, t);
  }
  i(_U, "assertTypeScript");
  function OU(e, t) {
    x("TSTypeElement", e, t);
  }
  i(OU, "assertTSTypeElement");
  function NU(e, t) {
    x("TSType", e, t);
  }
  i(NU, "assertTSType");
  function BU(e, t) {
    x("TSBaseType", e, t);
  }
  i(BU, "assertTSBaseType");
  function kU(e, t) {
    (0, Ca.default)("assertNumberLiteral", "assertNumericLiteral"), x("NumberLiteral", e, t);
  }
  i(kU, "assertNumberLiteral");
  function FU(e, t) {
    (0, Ca.default)("assertRegexLiteral", "assertRegExpLiteral"), x("RegexLiteral", e, t);
  }
  i(FU, "assertRegexLiteral");
  function jU(e, t) {
    (0, Ca.default)("assertRestProperty", "assertRestElement"), x("RestProperty", e, t);
  }
  i(jU, "assertRestProperty");
  function LU(e, t) {
    (0, Ca.default)("assertSpreadProperty", "assertSpreadElement"), x("SpreadProperty", e, t);
  }
  i(LU, "assertSpreadProperty");
  function MU(e, t) {
    (0, Ca.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), x("ModuleDeclaration", e, t);
  }
  i(MU, "assertModuleDeclaration");
});

// ../node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js
var xE = A((hl) => {
  "use strict";
  Object.defineProperty(hl, "__esModule", {
    value: !0
  });
  hl.default = void 0;
  var Ur = rr(), oEe = hl.default = RU;
  function RU(e) {
    switch (e) {
      case "string":
        return (0, Ur.stringTypeAnnotation)();
      case "number":
        return (0, Ur.numberTypeAnnotation)();
      case "undefined":
        return (0, Ur.voidTypeAnnotation)();
      case "boolean":
        return (0, Ur.booleanTypeAnnotation)();
      case "function":
        return (0, Ur.genericTypeAnnotation)((0, Ur.identifier)("Function"));
      case "object":
        return (0, Ur.genericTypeAnnotation)((0, Ur.identifier)("Object"));
      case "symbol":
        return (0, Ur.genericTypeAnnotation)((0, Ur.identifier)("Symbol"));
      case "bigint":
        return (0, Ur.anyTypeAnnotation)();
    }
    throw new Error("Invalid typeof value: " + e);
  }
  i(RU, "createTypeAnnotationBasedOnTypeof");
});

// ../node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js
var Af = A((Pf) => {
  "use strict";
  Object.defineProperty(Pf, "__esModule", {
    value: !0
  });
  Pf.default = PE;
  var Da = St();
  function vE(e) {
    return (0, Da.isIdentifier)(e) ? e.name : `${e.id.name}.${vE(e.qualification)}`;
  }
  i(vE, "getQualifiedName");
  function PE(e) {
    let t = Array.from(e), r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set(), a = [];
    for (let o = 0; o < t.length; o++) {
      let l = t[o];
      if (l && !a.includes(l)) {
        if ((0, Da.isAnyTypeAnnotation)(l))
          return [l];
        if ((0, Da.isFlowBaseAnnotation)(l)) {
          n.set(l.type, l);
          continue;
        }
        if ((0, Da.isUnionTypeAnnotation)(l)) {
          s.has(l.types) || (t.push(...l.types), s.add(l.types));
          continue;
        }
        if ((0, Da.isGenericTypeAnnotation)(l)) {
          let u = vE(l.id);
          if (r.has(u)) {
            let c = r.get(u);
            c.typeParameters ? l.typeParameters && (c.typeParameters.params.push(...l.typeParameters.params), c.typeParameters.params = PE(c.
            typeParameters.params)) : c = l.typeParameters;
          } else
            r.set(u, l);
          continue;
        }
        a.push(l);
      }
    }
    for (let [, o] of n)
      a.push(o);
    for (let [, o] of r)
      a.push(o);
    return a;
  }
  i(PE, "removeTypeDuplicates");
});

// ../node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js
var AE = A((Cf) => {
  "use strict";
  Object.defineProperty(Cf, "__esModule", {
    value: !0
  });
  Cf.default = VU;
  var qU = rr(), UU = Af();
  function VU(e) {
    let t = (0, UU.default)(e);
    return t.length === 1 ? t[0] : (0, qU.unionTypeAnnotation)(t);
  }
  i(VU, "createFlowUnionType");
});

// ../node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js
var wE = A((Df) => {
  "use strict";
  Object.defineProperty(Df, "__esModule", {
    value: !0
  });
  Df.default = DE;
  var wa = St();
  function CE(e) {
    return (0, wa.isIdentifier)(e) ? e.name : `${e.right.name}.${CE(e.left)}`;
  }
  i(CE, "getQualifiedName");
  function DE(e) {
    let t = Array.from(e), r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set(), a = [];
    for (let o = 0; o < t.length; o++) {
      let l = t[o];
      if (l && !a.includes(l)) {
        if ((0, wa.isTSAnyKeyword)(l))
          return [l];
        if ((0, wa.isTSBaseType)(l)) {
          n.set(l.type, l);
          continue;
        }
        if ((0, wa.isTSUnionType)(l)) {
          s.has(l.types) || (t.push(...l.types), s.add(l.types));
          continue;
        }
        if ((0, wa.isTSTypeReference)(l) && l.typeParameters) {
          let u = CE(l.typeName);
          if (r.has(u)) {
            let c = r.get(u);
            c.typeParameters ? l.typeParameters && (c.typeParameters.params.push(...l.typeParameters.params), c.typeParameters.params = DE(c.
            typeParameters.params)) : c = l.typeParameters;
          } else
            r.set(u, l);
          continue;
        }
        a.push(l);
      }
    }
    for (let [, o] of n)
      a.push(o);
    for (let [, o] of r)
      a.push(o);
    return a;
  }
  i(DE, "removeTypeDuplicates");
});

// ../node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js
var IE = A((wf) => {
  "use strict";
  Object.defineProperty(wf, "__esModule", {
    value: !0
  });
  wf.default = GU;
  var $U = rr(), WU = wE(), KU = St();
  function GU(e) {
    let t = e.map((n) => (0, KU.isTSTypeAnnotation)(n) ? n.typeAnnotation : n), r = (0, WU.default)(t);
    return r.length === 1 ? r[0] : (0, $U.tsUnionType)(r);
  }
  i(GU, "createTSUnionType");
});

// ../node_modules/@babel/types/lib/builders/generated/uppercase.js
var _E = A((w) => {
  "use strict";
  Object.defineProperty(w, "__esModule", {
    value: !0
  });
  Object.defineProperty(w, "AnyTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.anyTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ArgumentPlaceholder", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.argumentPlaceholder;
    }, "get")
  });
  Object.defineProperty(w, "ArrayExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.arrayExpression;
    }, "get")
  });
  Object.defineProperty(w, "ArrayPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.arrayPattern;
    }, "get")
  });
  Object.defineProperty(w, "ArrayTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.arrayTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ArrowFunctionExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.arrowFunctionExpression;
    }, "get")
  });
  Object.defineProperty(w, "AssignmentExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.assignmentExpression;
    }, "get")
  });
  Object.defineProperty(w, "AssignmentPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.assignmentPattern;
    }, "get")
  });
  Object.defineProperty(w, "AwaitExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.awaitExpression;
    }, "get")
  });
  Object.defineProperty(w, "BigIntLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.bigIntLiteral;
    }, "get")
  });
  Object.defineProperty(w, "BinaryExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.binaryExpression;
    }, "get")
  });
  Object.defineProperty(w, "BindExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.bindExpression;
    }, "get")
  });
  Object.defineProperty(w, "BlockStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.blockStatement;
    }, "get")
  });
  Object.defineProperty(w, "BooleanLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.booleanLiteral;
    }, "get")
  });
  Object.defineProperty(w, "BooleanLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.booleanLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "BooleanTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.booleanTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "BreakStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.breakStatement;
    }, "get")
  });
  Object.defineProperty(w, "CallExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.callExpression;
    }, "get")
  });
  Object.defineProperty(w, "CatchClause", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.catchClause;
    }, "get")
  });
  Object.defineProperty(w, "ClassAccessorProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classAccessorProperty;
    }, "get")
  });
  Object.defineProperty(w, "ClassBody", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classBody;
    }, "get")
  });
  Object.defineProperty(w, "ClassDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ClassExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classExpression;
    }, "get")
  });
  Object.defineProperty(w, "ClassImplements", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classImplements;
    }, "get")
  });
  Object.defineProperty(w, "ClassMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classMethod;
    }, "get")
  });
  Object.defineProperty(w, "ClassPrivateMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classPrivateMethod;
    }, "get")
  });
  Object.defineProperty(w, "ClassPrivateProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classPrivateProperty;
    }, "get")
  });
  Object.defineProperty(w, "ClassProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.classProperty;
    }, "get")
  });
  Object.defineProperty(w, "ConditionalExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.conditionalExpression;
    }, "get")
  });
  Object.defineProperty(w, "ContinueStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.continueStatement;
    }, "get")
  });
  Object.defineProperty(w, "DebuggerStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.debuggerStatement;
    }, "get")
  });
  Object.defineProperty(w, "DecimalLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.decimalLiteral;
    }, "get")
  });
  Object.defineProperty(w, "DeclareClass", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareClass;
    }, "get")
  });
  Object.defineProperty(w, "DeclareExportAllDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareExportAllDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "DeclareExportDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareExportDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "DeclareFunction", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareFunction;
    }, "get")
  });
  Object.defineProperty(w, "DeclareInterface", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareInterface;
    }, "get")
  });
  Object.defineProperty(w, "DeclareModule", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareModule;
    }, "get")
  });
  Object.defineProperty(w, "DeclareModuleExports", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareModuleExports;
    }, "get")
  });
  Object.defineProperty(w, "DeclareOpaqueType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareOpaqueType;
    }, "get")
  });
  Object.defineProperty(w, "DeclareTypeAlias", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareTypeAlias;
    }, "get")
  });
  Object.defineProperty(w, "DeclareVariable", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declareVariable;
    }, "get")
  });
  Object.defineProperty(w, "DeclaredPredicate", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.declaredPredicate;
    }, "get")
  });
  Object.defineProperty(w, "Decorator", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.decorator;
    }, "get")
  });
  Object.defineProperty(w, "Directive", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.directive;
    }, "get")
  });
  Object.defineProperty(w, "DirectiveLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.directiveLiteral;
    }, "get")
  });
  Object.defineProperty(w, "DoExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.doExpression;
    }, "get")
  });
  Object.defineProperty(w, "DoWhileStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.doWhileStatement;
    }, "get")
  });
  Object.defineProperty(w, "EmptyStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.emptyStatement;
    }, "get")
  });
  Object.defineProperty(w, "EmptyTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.emptyTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "EnumBooleanBody", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumBooleanBody;
    }, "get")
  });
  Object.defineProperty(w, "EnumBooleanMember", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumBooleanMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "EnumDefaultedMember", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumDefaultedMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumNumberBody", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumNumberBody;
    }, "get")
  });
  Object.defineProperty(w, "EnumNumberMember", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumNumberMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumStringBody", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumStringBody;
    }, "get")
  });
  Object.defineProperty(w, "EnumStringMember", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumStringMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumSymbolBody", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.enumSymbolBody;
    }, "get")
  });
  Object.defineProperty(w, "ExistsTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.existsTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ExportAllDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.exportAllDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ExportDefaultDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.exportDefaultDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ExportDefaultSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.exportDefaultSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ExportNamedDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.exportNamedDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ExportNamespaceSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.exportNamespaceSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ExportSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.exportSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ExpressionStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.expressionStatement;
    }, "get")
  });
  Object.defineProperty(w, "File", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.file;
    }, "get")
  });
  Object.defineProperty(w, "ForInStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.forInStatement;
    }, "get")
  });
  Object.defineProperty(w, "ForOfStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.forOfStatement;
    }, "get")
  });
  Object.defineProperty(w, "ForStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.forStatement;
    }, "get")
  });
  Object.defineProperty(w, "FunctionDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.functionDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "FunctionExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.functionExpression;
    }, "get")
  });
  Object.defineProperty(w, "FunctionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.functionTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "FunctionTypeParam", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.functionTypeParam;
    }, "get")
  });
  Object.defineProperty(w, "GenericTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.genericTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "Identifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.identifier;
    }, "get")
  });
  Object.defineProperty(w, "IfStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.ifStatement;
    }, "get")
  });
  Object.defineProperty(w, "Import", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.import;
    }, "get")
  });
  Object.defineProperty(w, "ImportAttribute", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.importAttribute;
    }, "get")
  });
  Object.defineProperty(w, "ImportDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.importDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ImportDefaultSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.importDefaultSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ImportExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.importExpression;
    }, "get")
  });
  Object.defineProperty(w, "ImportNamespaceSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.importNamespaceSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ImportSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.importSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "IndexedAccessType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.indexedAccessType;
    }, "get")
  });
  Object.defineProperty(w, "InferredPredicate", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.inferredPredicate;
    }, "get")
  });
  Object.defineProperty(w, "InterfaceDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.interfaceDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "InterfaceExtends", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.interfaceExtends;
    }, "get")
  });
  Object.defineProperty(w, "InterfaceTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.interfaceTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "InterpreterDirective", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.interpreterDirective;
    }, "get")
  });
  Object.defineProperty(w, "IntersectionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.intersectionTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "JSXAttribute", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxAttribute;
    }, "get")
  });
  Object.defineProperty(w, "JSXClosingElement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxClosingElement;
    }, "get")
  });
  Object.defineProperty(w, "JSXClosingFragment", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxClosingFragment;
    }, "get")
  });
  Object.defineProperty(w, "JSXElement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxElement;
    }, "get")
  });
  Object.defineProperty(w, "JSXEmptyExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxEmptyExpression;
    }, "get")
  });
  Object.defineProperty(w, "JSXExpressionContainer", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxExpressionContainer;
    }, "get")
  });
  Object.defineProperty(w, "JSXFragment", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxFragment;
    }, "get")
  });
  Object.defineProperty(w, "JSXIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxIdentifier;
    }, "get")
  });
  Object.defineProperty(w, "JSXMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxMemberExpression;
    }, "get")
  });
  Object.defineProperty(w, "JSXNamespacedName", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxNamespacedName;
    }, "get")
  });
  Object.defineProperty(w, "JSXOpeningElement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxOpeningElement;
    }, "get")
  });
  Object.defineProperty(w, "JSXOpeningFragment", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxOpeningFragment;
    }, "get")
  });
  Object.defineProperty(w, "JSXSpreadAttribute", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxSpreadAttribute;
    }, "get")
  });
  Object.defineProperty(w, "JSXSpreadChild", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxSpreadChild;
    }, "get")
  });
  Object.defineProperty(w, "JSXText", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.jsxText;
    }, "get")
  });
  Object.defineProperty(w, "LabeledStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.labeledStatement;
    }, "get")
  });
  Object.defineProperty(w, "LogicalExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.logicalExpression;
    }, "get")
  });
  Object.defineProperty(w, "MemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.memberExpression;
    }, "get")
  });
  Object.defineProperty(w, "MetaProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.metaProperty;
    }, "get")
  });
  Object.defineProperty(w, "MixedTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.mixedTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ModuleExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.moduleExpression;
    }, "get")
  });
  Object.defineProperty(w, "NewExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.newExpression;
    }, "get")
  });
  Object.defineProperty(w, "Noop", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.noop;
    }, "get")
  });
  Object.defineProperty(w, "NullLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.nullLiteral;
    }, "get")
  });
  Object.defineProperty(w, "NullLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.nullLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NullableTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.nullableTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NumberLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.numberLiteral;
    }, "get")
  });
  Object.defineProperty(w, "NumberLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.numberLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NumberTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.numberTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NumericLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.numericLiteral;
    }, "get")
  });
  Object.defineProperty(w, "ObjectExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectExpression;
    }, "get")
  });
  Object.defineProperty(w, "ObjectMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectMethod;
    }, "get")
  });
  Object.defineProperty(w, "ObjectPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectPattern;
    }, "get")
  });
  Object.defineProperty(w, "ObjectProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectProperty;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeCallProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectTypeCallProperty;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeIndexer", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectTypeIndexer;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeInternalSlot", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectTypeInternalSlot;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectTypeProperty;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeSpreadProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.objectTypeSpreadProperty;
    }, "get")
  });
  Object.defineProperty(w, "OpaqueType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.opaqueType;
    }, "get")
  });
  Object.defineProperty(w, "OptionalCallExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.optionalCallExpression;
    }, "get")
  });
  Object.defineProperty(w, "OptionalIndexedAccessType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.optionalIndexedAccessType;
    }, "get")
  });
  Object.defineProperty(w, "OptionalMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.optionalMemberExpression;
    }, "get")
  });
  Object.defineProperty(w, "ParenthesizedExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.parenthesizedExpression;
    }, "get")
  });
  Object.defineProperty(w, "PipelineBareFunction", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.pipelineBareFunction;
    }, "get")
  });
  Object.defineProperty(w, "PipelinePrimaryTopicReference", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.pipelinePrimaryTopicReference;
    }, "get")
  });
  Object.defineProperty(w, "PipelineTopicExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.pipelineTopicExpression;
    }, "get")
  });
  Object.defineProperty(w, "Placeholder", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.placeholder;
    }, "get")
  });
  Object.defineProperty(w, "PrivateName", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.privateName;
    }, "get")
  });
  Object.defineProperty(w, "Program", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.program;
    }, "get")
  });
  Object.defineProperty(w, "QualifiedTypeIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.qualifiedTypeIdentifier;
    }, "get")
  });
  Object.defineProperty(w, "RecordExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.recordExpression;
    }, "get")
  });
  Object.defineProperty(w, "RegExpLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.regExpLiteral;
    }, "get")
  });
  Object.defineProperty(w, "RegexLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.regexLiteral;
    }, "get")
  });
  Object.defineProperty(w, "RestElement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.restElement;
    }, "get")
  });
  Object.defineProperty(w, "RestProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.restProperty;
    }, "get")
  });
  Object.defineProperty(w, "ReturnStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.returnStatement;
    }, "get")
  });
  Object.defineProperty(w, "SequenceExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.sequenceExpression;
    }, "get")
  });
  Object.defineProperty(w, "SpreadElement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.spreadElement;
    }, "get")
  });
  Object.defineProperty(w, "SpreadProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.spreadProperty;
    }, "get")
  });
  Object.defineProperty(w, "StaticBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.staticBlock;
    }, "get")
  });
  Object.defineProperty(w, "StringLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.stringLiteral;
    }, "get")
  });
  Object.defineProperty(w, "StringLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.stringLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "StringTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.stringTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "Super", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.super;
    }, "get")
  });
  Object.defineProperty(w, "SwitchCase", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.switchCase;
    }, "get")
  });
  Object.defineProperty(w, "SwitchStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.switchStatement;
    }, "get")
  });
  Object.defineProperty(w, "SymbolTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.symbolTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TSAnyKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsAnyKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSArrayType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsArrayType;
    }, "get")
  });
  Object.defineProperty(w, "TSAsExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsAsExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSBigIntKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsBigIntKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSBooleanKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsBooleanKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSCallSignatureDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsCallSignatureDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSConditionalType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsConditionalType;
    }, "get")
  });
  Object.defineProperty(w, "TSConstructSignatureDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsConstructSignatureDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSConstructorType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsConstructorType;
    }, "get")
  });
  Object.defineProperty(w, "TSDeclareFunction", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsDeclareFunction;
    }, "get")
  });
  Object.defineProperty(w, "TSDeclareMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsDeclareMethod;
    }, "get")
  });
  Object.defineProperty(w, "TSEnumDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsEnumDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSEnumMember", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsEnumMember;
    }, "get")
  });
  Object.defineProperty(w, "TSExportAssignment", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsExportAssignment;
    }, "get")
  });
  Object.defineProperty(w, "TSExpressionWithTypeArguments", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsExpressionWithTypeArguments;
    }, "get")
  });
  Object.defineProperty(w, "TSExternalModuleReference", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsExternalModuleReference;
    }, "get")
  });
  Object.defineProperty(w, "TSFunctionType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsFunctionType;
    }, "get")
  });
  Object.defineProperty(w, "TSImportEqualsDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsImportEqualsDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSImportType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsImportType;
    }, "get")
  });
  Object.defineProperty(w, "TSIndexSignature", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsIndexSignature;
    }, "get")
  });
  Object.defineProperty(w, "TSIndexedAccessType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsIndexedAccessType;
    }, "get")
  });
  Object.defineProperty(w, "TSInferType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsInferType;
    }, "get")
  });
  Object.defineProperty(w, "TSInstantiationExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsInstantiationExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSInterfaceBody", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsInterfaceBody;
    }, "get")
  });
  Object.defineProperty(w, "TSInterfaceDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsInterfaceDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSIntersectionType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsIntersectionType;
    }, "get")
  });
  Object.defineProperty(w, "TSIntrinsicKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsIntrinsicKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSLiteralType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsLiteralType;
    }, "get")
  });
  Object.defineProperty(w, "TSMappedType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsMappedType;
    }, "get")
  });
  Object.defineProperty(w, "TSMethodSignature", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsMethodSignature;
    }, "get")
  });
  Object.defineProperty(w, "TSModuleBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsModuleBlock;
    }, "get")
  });
  Object.defineProperty(w, "TSModuleDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsModuleDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSNamedTupleMember", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsNamedTupleMember;
    }, "get")
  });
  Object.defineProperty(w, "TSNamespaceExportDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsNamespaceExportDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSNeverKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsNeverKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSNonNullExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsNonNullExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSNullKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsNullKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSNumberKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsNumberKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSObjectKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsObjectKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSOptionalType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsOptionalType;
    }, "get")
  });
  Object.defineProperty(w, "TSParameterProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsParameterProperty;
    }, "get")
  });
  Object.defineProperty(w, "TSParenthesizedType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsParenthesizedType;
    }, "get")
  });
  Object.defineProperty(w, "TSPropertySignature", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsPropertySignature;
    }, "get")
  });
  Object.defineProperty(w, "TSQualifiedName", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsQualifiedName;
    }, "get")
  });
  Object.defineProperty(w, "TSRestType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsRestType;
    }, "get")
  });
  Object.defineProperty(w, "TSSatisfiesExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsSatisfiesExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSStringKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsStringKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSSymbolKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsSymbolKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSThisType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsThisType;
    }, "get")
  });
  Object.defineProperty(w, "TSTupleType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTupleType;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeAliasDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeAliasDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeAssertion", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeAssertion;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeLiteral;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeOperator", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeOperator;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeParameter", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeParameter;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeParameterDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeParameterDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeParameterInstantiation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeParameterInstantiation;
    }, "get")
  });
  Object.defineProperty(w, "TSTypePredicate", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypePredicate;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeQuery", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeQuery;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeReference", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsTypeReference;
    }, "get")
  });
  Object.defineProperty(w, "TSUndefinedKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsUndefinedKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSUnionType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsUnionType;
    }, "get")
  });
  Object.defineProperty(w, "TSUnknownKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsUnknownKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSVoidKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tsVoidKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TaggedTemplateExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.taggedTemplateExpression;
    }, "get")
  });
  Object.defineProperty(w, "TemplateElement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.templateElement;
    }, "get")
  });
  Object.defineProperty(w, "TemplateLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.templateLiteral;
    }, "get")
  });
  Object.defineProperty(w, "ThisExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.thisExpression;
    }, "get")
  });
  Object.defineProperty(w, "ThisTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.thisTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ThrowStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.throwStatement;
    }, "get")
  });
  Object.defineProperty(w, "TopicReference", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.topicReference;
    }, "get")
  });
  Object.defineProperty(w, "TryStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tryStatement;
    }, "get")
  });
  Object.defineProperty(w, "TupleExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tupleExpression;
    }, "get")
  });
  Object.defineProperty(w, "TupleTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.tupleTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TypeAlias", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.typeAlias;
    }, "get")
  });
  Object.defineProperty(w, "TypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.typeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TypeCastExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.typeCastExpression;
    }, "get")
  });
  Object.defineProperty(w, "TypeParameter", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.typeParameter;
    }, "get")
  });
  Object.defineProperty(w, "TypeParameterDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.typeParameterDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TypeParameterInstantiation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.typeParameterInstantiation;
    }, "get")
  });
  Object.defineProperty(w, "TypeofTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.typeofTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "UnaryExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.unaryExpression;
    }, "get")
  });
  Object.defineProperty(w, "UnionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.unionTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "UpdateExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.updateExpression;
    }, "get")
  });
  Object.defineProperty(w, "V8IntrinsicIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.v8IntrinsicIdentifier;
    }, "get")
  });
  Object.defineProperty(w, "VariableDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.variableDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "VariableDeclarator", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.variableDeclarator;
    }, "get")
  });
  Object.defineProperty(w, "Variance", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.variance;
    }, "get")
  });
  Object.defineProperty(w, "VoidTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.voidTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "WhileStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.whileStatement;
    }, "get")
  });
  Object.defineProperty(w, "WithStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.withStatement;
    }, "get")
  });
  Object.defineProperty(w, "YieldExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return I.yieldExpression;
    }, "get")
  });
  var I = rr();
});

// ../node_modules/@babel/types/lib/builders/productions.js
var _f = A((If) => {
  "use strict";
  Object.defineProperty(If, "__esModule", {
    value: !0
  });
  If.buildUndefinedNode = HU;
  var OE = rr();
  function HU() {
    return (0, OE.unaryExpression)("void", (0, OE.numericLiteral)(0), !0);
  }
  i(HU, "buildUndefinedNode");
});

// ../node_modules/@babel/types/lib/clone/cloneNode.js
var Zn = A((Nf) => {
  "use strict";
  Object.defineProperty(Nf, "__esModule", {
    value: !0
  });
  Nf.default = YU;
  var NE = xr(), BE = St(), {
    hasOwn: on
  } = {
    hasOwn: Function.call.bind(Object.prototype.hasOwnProperty)
  };
  function kE(e, t, r, n) {
    return e && typeof e.type == "string" ? FE(e, t, r, n) : e;
  }
  i(kE, "cloneIfNode");
  function Of(e, t, r, n) {
    return Array.isArray(e) ? e.map((s) => kE(s, t, r, n)) : kE(e, t, r, n);
  }
  i(Of, "cloneIfNodeOrArray");
  function YU(e, t = !0, r = !1) {
    return FE(e, t, r, /* @__PURE__ */ new Map());
  }
  i(YU, "cloneNode");
  function FE(e, t = !0, r = !1, n) {
    if (!e) return e;
    let {
      type: s
    } = e, a = {
      type: e.type
    };
    if ((0, BE.isIdentifier)(e))
      a.name = e.name, on(e, "optional") && typeof e.optional == "boolean" && (a.optional = e.optional), on(e, "typeAnnotation") && (a.typeAnnotation =
      t ? Of(e.typeAnnotation, !0, r, n) : e.typeAnnotation), on(e, "decorators") && (a.decorators = t ? Of(e.decorators, !0, r, n) : e.decorators);
    else if (on(NE.NODE_FIELDS, s))
      for (let o of Object.keys(NE.NODE_FIELDS[s]))
        on(e, o) && (t ? a[o] = (0, BE.isFile)(e) && o === "comments" ? ml(e.comments, t, r, n) : Of(e[o], !0, r, n) : a[o] = e[o]);
    else
      throw new Error(`Unknown node type: "${s}"`);
    return on(e, "loc") && (r ? a.loc = null : a.loc = e.loc), on(e, "leadingComments") && (a.leadingComments = ml(e.leadingComments, t, r, n)),
    on(e, "innerComments") && (a.innerComments = ml(e.innerComments, t, r, n)), on(e, "trailingComments") && (a.trailingComments = ml(e.trailingComments,
    t, r, n)), on(e, "extra") && (a.extra = Object.assign({}, e.extra)), a;
  }
  i(FE, "cloneNodeInternal");
  function ml(e, t, r, n) {
    return !e || !t ? e : e.map((s) => {
      let a = n.get(s);
      if (a) return a;
      let {
        type: o,
        value: l,
        loc: u
      } = s, c = {
        type: o,
        value: l,
        loc: u
      };
      return r && (c.loc = null), n.set(s, c), c;
    });
  }
  i(ml, "maybeCloneComments");
});

// ../node_modules/@babel/types/lib/clone/clone.js
var jE = A((Bf) => {
  "use strict";
  Object.defineProperty(Bf, "__esModule", {
    value: !0
  });
  Bf.default = zU;
  var JU = Zn();
  function zU(e) {
    return (0, JU.default)(e, !1);
  }
  i(zU, "clone");
});

// ../node_modules/@babel/types/lib/clone/cloneDeep.js
var LE = A((kf) => {
  "use strict";
  Object.defineProperty(kf, "__esModule", {
    value: !0
  });
  kf.default = QU;
  var XU = Zn();
  function QU(e) {
    return (0, XU.default)(e);
  }
  i(QU, "cloneDeep");
});

// ../node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js
var ME = A((Ff) => {
  "use strict";
  Object.defineProperty(Ff, "__esModule", {
    value: !0
  });
  Ff.default = eV;
  var ZU = Zn();
  function eV(e) {
    return (0, ZU.default)(e, !0, !0);
  }
  i(eV, "cloneDeepWithoutLoc");
});

// ../node_modules/@babel/types/lib/clone/cloneWithoutLoc.js
var RE = A((jf) => {
  "use strict";
  Object.defineProperty(jf, "__esModule", {
    value: !0
  });
  jf.default = rV;
  var tV = Zn();
  function rV(e) {
    return (0, tV.default)(e, !1, !0);
  }
  i(rV, "cloneWithoutLoc");
});

// ../node_modules/@babel/types/lib/comments/addComments.js
var Mf = A((Lf) => {
  "use strict";
  Object.defineProperty(Lf, "__esModule", {
    value: !0
  });
  Lf.default = nV;
  function nV(e, t, r) {
    if (!r || !e) return e;
    let n = `${t}Comments`;
    return e[n] ? t === "leading" ? e[n] = r.concat(e[n]) : e[n].push(...r) : e[n] = r, e;
  }
  i(nV, "addComments");
});

// ../node_modules/@babel/types/lib/comments/addComment.js
var qE = A((Rf) => {
  "use strict";
  Object.defineProperty(Rf, "__esModule", {
    value: !0
  });
  Rf.default = iV;
  var sV = Mf();
  function iV(e, t, r, n) {
    return (0, sV.default)(e, t, [{
      type: n ? "CommentLine" : "CommentBlock",
      value: r
    }]);
  }
  i(iV, "addComment");
});

// ../node_modules/@babel/types/lib/utils/inherit.js
var yl = A((qf) => {
  "use strict";
  Object.defineProperty(qf, "__esModule", {
    value: !0
  });
  qf.default = aV;
  function aV(e, t, r) {
    t && r && (t[e] = Array.from(new Set([].concat(t[e], r[e]).filter(Boolean))));
  }
  i(aV, "inherit");
});

// ../node_modules/@babel/types/lib/comments/inheritInnerComments.js
var Vf = A((Uf) => {
  "use strict";
  Object.defineProperty(Uf, "__esModule", {
    value: !0
  });
  Uf.default = lV;
  var oV = yl();
  function lV(e, t) {
    (0, oV.default)("innerComments", e, t);
  }
  i(lV, "inheritInnerComments");
});

// ../node_modules/@babel/types/lib/comments/inheritLeadingComments.js
var Wf = A(($f) => {
  "use strict";
  Object.defineProperty($f, "__esModule", {
    value: !0
  });
  $f.default = cV;
  var uV = yl();
  function cV(e, t) {
    (0, uV.default)("leadingComments", e, t);
  }
  i(cV, "inheritLeadingComments");
});

// ../node_modules/@babel/types/lib/comments/inheritTrailingComments.js
var Gf = A((Kf) => {
  "use strict";
  Object.defineProperty(Kf, "__esModule", {
    value: !0
  });
  Kf.default = fV;
  var pV = yl();
  function fV(e, t) {
    (0, pV.default)("trailingComments", e, t);
  }
  i(fV, "inheritTrailingComments");
});

// ../node_modules/@babel/types/lib/comments/inheritsComments.js
var Yf = A((Hf) => {
  "use strict";
  Object.defineProperty(Hf, "__esModule", {
    value: !0
  });
  Hf.default = yV;
  var dV = Gf(), hV = Wf(), mV = Vf();
  function yV(e, t) {
    return (0, dV.default)(e, t), (0, hV.default)(e, t), (0, mV.default)(e, t), e;
  }
  i(yV, "inheritsComments");
});

// ../node_modules/@babel/types/lib/comments/removeComments.js
var UE = A((Jf) => {
  "use strict";
  Object.defineProperty(Jf, "__esModule", {
    value: !0
  });
  Jf.default = bV;
  var gV = Xn();
  function bV(e) {
    return gV.COMMENT_KEYS.forEach((t) => {
      e[t] = null;
    }), e;
  }
  i(bV, "removeComments");
});

// ../node_modules/@babel/types/lib/constants/generated/index.js
var VE = A((z) => {
  "use strict";
  Object.defineProperty(z, "__esModule", {
    value: !0
  });
  z.WHILE_TYPES = z.USERWHITESPACABLE_TYPES = z.UNARYLIKE_TYPES = z.TYPESCRIPT_TYPES = z.TSTYPE_TYPES = z.TSTYPEELEMENT_TYPES = z.TSENTITYNAME_TYPES =
  z.TSBASETYPE_TYPES = z.TERMINATORLESS_TYPES = z.STATEMENT_TYPES = z.STANDARDIZED_TYPES = z.SCOPABLE_TYPES = z.PUREISH_TYPES = z.PROPERTY_TYPES =
  z.PRIVATE_TYPES = z.PATTERN_TYPES = z.PATTERNLIKE_TYPES = z.OBJECTMEMBER_TYPES = z.MODULESPECIFIER_TYPES = z.MODULEDECLARATION_TYPES = z.MISCELLANEOUS_TYPES =
  z.METHOD_TYPES = z.LVAL_TYPES = z.LOOP_TYPES = z.LITERAL_TYPES = z.JSX_TYPES = z.IMPORTOREXPORTDECLARATION_TYPES = z.IMMUTABLE_TYPES = z.FUNCTION_TYPES =
  z.FUNCTIONPARENT_TYPES = z.FOR_TYPES = z.FORXSTATEMENT_TYPES = z.FLOW_TYPES = z.FLOWTYPE_TYPES = z.FLOWPREDICATE_TYPES = z.FLOWDECLARATION_TYPES =
  z.FLOWBASEANNOTATION_TYPES = z.EXPRESSION_TYPES = z.EXPRESSIONWRAPPER_TYPES = z.EXPORTDECLARATION_TYPES = z.ENUMMEMBER_TYPES = z.ENUMBODY_TYPES =
  z.DECLARATION_TYPES = z.CONDITIONAL_TYPES = z.COMPLETIONSTATEMENT_TYPES = z.CLASS_TYPES = z.BLOCK_TYPES = z.BLOCKPARENT_TYPES = z.BINARY_TYPES =
  z.ACCESSOR_TYPES = void 0;
  var Oe = xr(), YEe = z.STANDARDIZED_TYPES = Oe.FLIPPED_ALIAS_KEYS.Standardized, JEe = z.EXPRESSION_TYPES = Oe.FLIPPED_ALIAS_KEYS.Expression,
  zEe = z.BINARY_TYPES = Oe.FLIPPED_ALIAS_KEYS.Binary, XEe = z.SCOPABLE_TYPES = Oe.FLIPPED_ALIAS_KEYS.Scopable, QEe = z.BLOCKPARENT_TYPES = Oe.
  FLIPPED_ALIAS_KEYS.BlockParent, ZEe = z.BLOCK_TYPES = Oe.FLIPPED_ALIAS_KEYS.Block, eTe = z.STATEMENT_TYPES = Oe.FLIPPED_ALIAS_KEYS.Statement,
  tTe = z.TERMINATORLESS_TYPES = Oe.FLIPPED_ALIAS_KEYS.Terminatorless, rTe = z.COMPLETIONSTATEMENT_TYPES = Oe.FLIPPED_ALIAS_KEYS.CompletionStatement,
  nTe = z.CONDITIONAL_TYPES = Oe.FLIPPED_ALIAS_KEYS.Conditional, sTe = z.LOOP_TYPES = Oe.FLIPPED_ALIAS_KEYS.Loop, iTe = z.WHILE_TYPES = Oe.FLIPPED_ALIAS_KEYS.
  While, aTe = z.EXPRESSIONWRAPPER_TYPES = Oe.FLIPPED_ALIAS_KEYS.ExpressionWrapper, oTe = z.FOR_TYPES = Oe.FLIPPED_ALIAS_KEYS.For, lTe = z.FORXSTATEMENT_TYPES =
  Oe.FLIPPED_ALIAS_KEYS.ForXStatement, uTe = z.FUNCTION_TYPES = Oe.FLIPPED_ALIAS_KEYS.Function, cTe = z.FUNCTIONPARENT_TYPES = Oe.FLIPPED_ALIAS_KEYS.
  FunctionParent, pTe = z.PUREISH_TYPES = Oe.FLIPPED_ALIAS_KEYS.Pureish, fTe = z.DECLARATION_TYPES = Oe.FLIPPED_ALIAS_KEYS.Declaration, dTe = z.
  PATTERNLIKE_TYPES = Oe.FLIPPED_ALIAS_KEYS.PatternLike, hTe = z.LVAL_TYPES = Oe.FLIPPED_ALIAS_KEYS.LVal, mTe = z.TSENTITYNAME_TYPES = Oe.FLIPPED_ALIAS_KEYS.
  TSEntityName, yTe = z.LITERAL_TYPES = Oe.FLIPPED_ALIAS_KEYS.Literal, gTe = z.IMMUTABLE_TYPES = Oe.FLIPPED_ALIAS_KEYS.Immutable, bTe = z.USERWHITESPACABLE_TYPES =
  Oe.FLIPPED_ALIAS_KEYS.UserWhitespacable, ETe = z.METHOD_TYPES = Oe.FLIPPED_ALIAS_KEYS.Method, TTe = z.OBJECTMEMBER_TYPES = Oe.FLIPPED_ALIAS_KEYS.
  ObjectMember, STe = z.PROPERTY_TYPES = Oe.FLIPPED_ALIAS_KEYS.Property, xTe = z.UNARYLIKE_TYPES = Oe.FLIPPED_ALIAS_KEYS.UnaryLike, vTe = z.
  PATTERN_TYPES = Oe.FLIPPED_ALIAS_KEYS.Pattern, PTe = z.CLASS_TYPES = Oe.FLIPPED_ALIAS_KEYS.Class, EV = z.IMPORTOREXPORTDECLARATION_TYPES =
  Oe.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration, ATe = z.EXPORTDECLARATION_TYPES = Oe.FLIPPED_ALIAS_KEYS.ExportDeclaration, CTe = z.MODULESPECIFIER_TYPES =
  Oe.FLIPPED_ALIAS_KEYS.ModuleSpecifier, DTe = z.ACCESSOR_TYPES = Oe.FLIPPED_ALIAS_KEYS.Accessor, wTe = z.PRIVATE_TYPES = Oe.FLIPPED_ALIAS_KEYS.
  Private, ITe = z.FLOW_TYPES = Oe.FLIPPED_ALIAS_KEYS.Flow, _Te = z.FLOWTYPE_TYPES = Oe.FLIPPED_ALIAS_KEYS.FlowType, OTe = z.FLOWBASEANNOTATION_TYPES =
  Oe.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation, NTe = z.FLOWDECLARATION_TYPES = Oe.FLIPPED_ALIAS_KEYS.FlowDeclaration, BTe = z.FLOWPREDICATE_TYPES =
  Oe.FLIPPED_ALIAS_KEYS.FlowPredicate, kTe = z.ENUMBODY_TYPES = Oe.FLIPPED_ALIAS_KEYS.EnumBody, FTe = z.ENUMMEMBER_TYPES = Oe.FLIPPED_ALIAS_KEYS.
  EnumMember, jTe = z.JSX_TYPES = Oe.FLIPPED_ALIAS_KEYS.JSX, LTe = z.MISCELLANEOUS_TYPES = Oe.FLIPPED_ALIAS_KEYS.Miscellaneous, MTe = z.TYPESCRIPT_TYPES =
  Oe.FLIPPED_ALIAS_KEYS.TypeScript, RTe = z.TSTYPEELEMENT_TYPES = Oe.FLIPPED_ALIAS_KEYS.TSTypeElement, qTe = z.TSTYPE_TYPES = Oe.FLIPPED_ALIAS_KEYS.
  TSType, UTe = z.TSBASETYPE_TYPES = Oe.FLIPPED_ALIAS_KEYS.TSBaseType, VTe = z.MODULEDECLARATION_TYPES = EV;
});

// ../node_modules/@babel/types/lib/converters/toBlock.js
var Qf = A((Xf) => {
  "use strict";
  Object.defineProperty(Xf, "__esModule", {
    value: !0
  });
  Xf.default = TV;
  var gl = St(), zf = rr();
  function TV(e, t) {
    if ((0, gl.isBlockStatement)(e))
      return e;
    let r = [];
    return (0, gl.isEmptyStatement)(e) ? r = [] : ((0, gl.isStatement)(e) || ((0, gl.isFunction)(t) ? e = (0, zf.returnStatement)(e) : e = (0, zf.
    expressionStatement)(e)), r = [e]), (0, zf.blockStatement)(r);
  }
  i(TV, "toBlock");
});

// ../node_modules/@babel/types/lib/converters/ensureBlock.js
var $E = A((Zf) => {
  "use strict";
  Object.defineProperty(Zf, "__esModule", {
    value: !0
  });
  Zf.default = xV;
  var SV = Qf();
  function xV(e, t = "body") {
    let r = (0, SV.default)(e[t], e);
    return e[t] = r, r;
  }
  i(xV, "ensureBlock");
});

// ../node_modules/@babel/types/lib/converters/toIdentifier.js
var td = A((ed) => {
  "use strict";
  Object.defineProperty(ed, "__esModule", {
    value: !0
  });
  ed.default = AV;
  var vV = hi(), PV = di();
  function AV(e) {
    e = e + "";
    let t = "";
    for (let r of e)
      t += (0, PV.isIdentifierChar)(r.codePointAt(0)) ? r : "-";
    return t = t.replace(/^[-0-9]+/, ""), t = t.replace(/[-\s]+(.)?/g, function(r, n) {
      return n ? n.toUpperCase() : "";
    }), (0, vV.default)(t) || (t = `_${t}`), t || "_";
  }
  i(AV, "toIdentifier");
});

// ../node_modules/@babel/types/lib/converters/toBindingIdentifierName.js
var WE = A((rd) => {
  "use strict";
  Object.defineProperty(rd, "__esModule", {
    value: !0
  });
  rd.default = DV;
  var CV = td();
  function DV(e) {
    return e = (0, CV.default)(e), (e === "eval" || e === "arguments") && (e = "_" + e), e;
  }
  i(DV, "toBindingIdentifierName");
});

// ../node_modules/@babel/types/lib/converters/toComputedKey.js
var KE = A((nd) => {
  "use strict";
  Object.defineProperty(nd, "__esModule", {
    value: !0
  });
  nd.default = _V;
  var wV = St(), IV = rr();
  function _V(e, t = e.key || e.property) {
    return !e.computed && (0, wV.isIdentifier)(t) && (t = (0, IV.stringLiteral)(t.name)), t;
  }
  i(_V, "toComputedKey");
});

// ../node_modules/@babel/types/lib/converters/toExpression.js
var GE = A((bl) => {
  "use strict";
  Object.defineProperty(bl, "__esModule", {
    value: !0
  });
  bl.default = void 0;
  var Ia = St(), eSe = bl.default = OV;
  function OV(e) {
    if ((0, Ia.isExpressionStatement)(e) && (e = e.expression), (0, Ia.isExpression)(e))
      return e;
    if ((0, Ia.isClass)(e) ? e.type = "ClassExpression" : (0, Ia.isFunction)(e) && (e.type = "FunctionExpression"), !(0, Ia.isExpression)(e))
      throw new Error(`cannot turn ${e.type} to an expression`);
    return e;
  }
  i(OV, "toExpression");
});

// ../node_modules/@babel/types/lib/traverse/traverseFast.js
var ad = A((id) => {
  "use strict";
  Object.defineProperty(id, "__esModule", {
    value: !0
  });
  id.default = sd;
  var NV = xr();
  function sd(e, t, r) {
    if (!e) return;
    let n = NV.VISITOR_KEYS[e.type];
    if (n) {
      r = r || {}, t(e, r);
      for (let s of n) {
        let a = e[s];
        if (Array.isArray(a))
          for (let o of a)
            sd(o, t, r);
        else
          sd(a, t, r);
      }
    }
  }
  i(sd, "traverseFast");
});

// ../node_modules/@babel/types/lib/modifications/removeProperties.js
var ld = A((od) => {
  "use strict";
  Object.defineProperty(od, "__esModule", {
    value: !0
  });
  od.default = FV;
  var BV = Xn(), HE = ["tokens", "start", "end", "loc", "raw", "rawValue"], kV = [...BV.COMMENT_KEYS, "comments", ...HE];
  function FV(e, t = {}) {
    let r = t.preserveComments ? HE : kV;
    for (let s of r)
      e[s] != null && (e[s] = void 0);
    for (let s of Object.keys(e))
      s[0] === "_" && e[s] != null && (e[s] = void 0);
    let n = Object.getOwnPropertySymbols(e);
    for (let s of n)
      e[s] = null;
  }
  i(FV, "removeProperties");
});

// ../node_modules/@babel/types/lib/modifications/removePropertiesDeep.js
var cd = A((ud) => {
  "use strict";
  Object.defineProperty(ud, "__esModule", {
    value: !0
  });
  ud.default = MV;
  var jV = ad(), LV = ld();
  function MV(e, t) {
    return (0, jV.default)(e, LV.default, t), e;
  }
  i(MV, "removePropertiesDeep");
});

// ../node_modules/@babel/types/lib/converters/toKeyAlias.js
var JE = A((pd) => {
  "use strict";
  Object.defineProperty(pd, "__esModule", {
    value: !0
  });
  pd.default = _s;
  var YE = St(), RV = Zn(), qV = cd();
  function _s(e, t = e.key) {
    let r;
    return e.kind === "method" ? _s.increment() + "" : ((0, YE.isIdentifier)(t) ? r = t.name : (0, YE.isStringLiteral)(t) ? r = JSON.stringify(
    t.value) : r = JSON.stringify((0, qV.default)((0, RV.default)(t))), e.computed && (r = `[${r}]`), e.static && (r = `static:${r}`), r);
  }
  i(_s, "toKeyAlias");
  _s.uid = 0;
  _s.increment = function() {
    return _s.uid >= Number.MAX_SAFE_INTEGER ? _s.uid = 0 : _s.uid++;
  };
});

// ../node_modules/@babel/types/lib/converters/toStatement.js
var zE = A((Tl) => {
  "use strict";
  Object.defineProperty(Tl, "__esModule", {
    value: !0
  });
  Tl.default = void 0;
  var El = St(), UV = rr(), pSe = Tl.default = VV;
  function VV(e, t) {
    if ((0, El.isStatement)(e))
      return e;
    let r = !1, n;
    if ((0, El.isClass)(e))
      r = !0, n = "ClassDeclaration";
    else if ((0, El.isFunction)(e))
      r = !0, n = "FunctionDeclaration";
    else if ((0, El.isAssignmentExpression)(e))
      return (0, UV.expressionStatement)(e);
    if (r && !e.id && (n = !1), !n) {
      if (t)
        return !1;
      throw new Error(`cannot turn ${e.type} to a statement`);
    }
    return e.type = n, e;
  }
  i(VV, "toStatement");
});

// ../node_modules/@babel/types/lib/converters/valueToNode.js
var XE = A((Sl) => {
  "use strict";
  Object.defineProperty(Sl, "__esModule", {
    value: !0
  });
  Sl.default = void 0;
  var $V = hi(), Ht = rr(), hSe = Sl.default = fd, WV = Function.call.bind(Object.prototype.toString);
  function KV(e) {
    return WV(e) === "[object RegExp]";
  }
  i(KV, "isRegExp");
  function GV(e) {
    if (typeof e != "object" || e === null || Object.prototype.toString.call(e) !== "[object Object]")
      return !1;
    let t = Object.getPrototypeOf(e);
    return t === null || Object.getPrototypeOf(t) === null;
  }
  i(GV, "isPlainObject");
  function fd(e) {
    if (e === void 0)
      return (0, Ht.identifier)("undefined");
    if (e === !0 || e === !1)
      return (0, Ht.booleanLiteral)(e);
    if (e === null)
      return (0, Ht.nullLiteral)();
    if (typeof e == "string")
      return (0, Ht.stringLiteral)(e);
    if (typeof e == "number") {
      let t;
      if (Number.isFinite(e))
        t = (0, Ht.numericLiteral)(Math.abs(e));
      else {
        let r;
        Number.isNaN(e) ? r = (0, Ht.numericLiteral)(0) : r = (0, Ht.numericLiteral)(1), t = (0, Ht.binaryExpression)("/", r, (0, Ht.numericLiteral)(
        0));
      }
      return (e < 0 || Object.is(e, -0)) && (t = (0, Ht.unaryExpression)("-", t)), t;
    }
    if (KV(e)) {
      let t = e.source, r = /\/([a-z]*)$/.exec(e.toString())[1];
      return (0, Ht.regExpLiteral)(t, r);
    }
    if (Array.isArray(e))
      return (0, Ht.arrayExpression)(e.map(fd));
    if (GV(e)) {
      let t = [];
      for (let r of Object.keys(e)) {
        let n;
        (0, $V.default)(r) ? n = (0, Ht.identifier)(r) : n = (0, Ht.stringLiteral)(r), t.push((0, Ht.objectProperty)(n, fd(e[r])));
      }
      return (0, Ht.objectExpression)(t);
    }
    throw new Error("don't know how to turn this value into a node");
  }
  i(fd, "valueToNode");
});

// ../node_modules/@babel/types/lib/modifications/appendToMemberExpression.js
var QE = A((dd) => {
  "use strict";
  Object.defineProperty(dd, "__esModule", {
    value: !0
  });
  dd.default = YV;
  var HV = rr();
  function YV(e, t, r = !1) {
    return e.object = (0, HV.memberExpression)(e.object, e.property, e.computed), e.property = t, e.computed = !!r, e;
  }
  i(YV, "appendToMemberExpression");
});

// ../node_modules/@babel/types/lib/modifications/inherits.js
var eT = A((hd) => {
  "use strict";
  Object.defineProperty(hd, "__esModule", {
    value: !0
  });
  hd.default = zV;
  var ZE = Xn(), JV = Yf();
  function zV(e, t) {
    if (!e || !t) return e;
    for (let r of ZE.INHERIT_KEYS.optional)
      e[r] == null && (e[r] = t[r]);
    for (let r of Object.keys(t))
      r[0] === "_" && r !== "__clone" && (e[r] = t[r]);
    for (let r of ZE.INHERIT_KEYS.force)
      e[r] = t[r];
    return (0, JV.default)(e, t), e;
  }
  i(zV, "inherits");
});

// ../node_modules/@babel/types/lib/modifications/prependToMemberExpression.js
var tT = A((md) => {
  "use strict";
  Object.defineProperty(md, "__esModule", {
    value: !0
  });
  md.default = ZV;
  var XV = rr(), QV = Pe();
  function ZV(e, t) {
    if ((0, QV.isSuper)(e.object))
      throw new Error("Cannot prepend node to super property access (`super.foo`).");
    return e.object = (0, XV.memberExpression)(t, e.object), e;
  }
  i(ZV, "prependToMemberExpression");
});

// ../node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js
var rT = A((yd) => {
  "use strict";
  Object.defineProperty(yd, "__esModule", {
    value: !0
  });
  yd.default = e$;
  function e$(e) {
    let t = [].concat(e), r = /* @__PURE__ */ Object.create(null);
    for (; t.length; ) {
      let n = t.pop();
      if (n)
        switch (n.type) {
          case "ArrayPattern":
            t.push(...n.elements);
            break;
          case "AssignmentExpression":
          case "AssignmentPattern":
          case "ForInStatement":
          case "ForOfStatement":
            t.push(n.left);
            break;
          case "ObjectPattern":
            t.push(...n.properties);
            break;
          case "ObjectProperty":
            t.push(n.value);
            break;
          case "RestElement":
          case "UpdateExpression":
            t.push(n.argument);
            break;
          case "UnaryExpression":
            n.operator === "delete" && t.push(n.argument);
            break;
          case "Identifier":
            r[n.name] = n;
            break;
          default:
            break;
        }
    }
    return r;
  }
  i(e$, "getAssignmentIdentifiers");
});

// ../node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js
var _a = A((bd) => {
  "use strict";
  Object.defineProperty(bd, "__esModule", {
    value: !0
  });
  bd.default = gd;
  var Sn = St();
  function gd(e, t, r, n) {
    let s = [].concat(e), a = /* @__PURE__ */ Object.create(null);
    for (; s.length; ) {
      let o = s.shift();
      if (!o || n && ((0, Sn.isAssignmentExpression)(o) || (0, Sn.isUnaryExpression)(o) || (0, Sn.isUpdateExpression)(o)))
        continue;
      if ((0, Sn.isIdentifier)(o)) {
        t ? (a[o.name] = a[o.name] || []).push(o) : a[o.name] = o;
        continue;
      }
      if ((0, Sn.isExportDeclaration)(o) && !(0, Sn.isExportAllDeclaration)(o)) {
        (0, Sn.isDeclaration)(o.declaration) && s.push(o.declaration);
        continue;
      }
      if (r) {
        if ((0, Sn.isFunctionDeclaration)(o)) {
          s.push(o.id);
          continue;
        }
        if ((0, Sn.isFunctionExpression)(o))
          continue;
      }
      let l = gd.keys[o.type];
      if (l)
        for (let u = 0; u < l.length; u++) {
          let c = l[u], p = o[c];
          p && (Array.isArray(p) ? s.push(...p) : s.push(p));
        }
    }
    return a;
  }
  i(gd, "getBindingIdentifiers");
  var t$ = {
    DeclareClass: ["id"],
    DeclareFunction: ["id"],
    DeclareModule: ["id"],
    DeclareVariable: ["id"],
    DeclareInterface: ["id"],
    DeclareTypeAlias: ["id"],
    DeclareOpaqueType: ["id"],
    InterfaceDeclaration: ["id"],
    TypeAlias: ["id"],
    OpaqueType: ["id"],
    CatchClause: ["param"],
    LabeledStatement: ["label"],
    UnaryExpression: ["argument"],
    AssignmentExpression: ["left"],
    ImportSpecifier: ["local"],
    ImportNamespaceSpecifier: ["local"],
    ImportDefaultSpecifier: ["local"],
    ImportDeclaration: ["specifiers"],
    ExportSpecifier: ["exported"],
    ExportNamespaceSpecifier: ["exported"],
    ExportDefaultSpecifier: ["exported"],
    FunctionDeclaration: ["id", "params"],
    FunctionExpression: ["id", "params"],
    ArrowFunctionExpression: ["params"],
    ObjectMethod: ["params"],
    ClassMethod: ["params"],
    ClassPrivateMethod: ["params"],
    ForInStatement: ["left"],
    ForOfStatement: ["left"],
    ClassDeclaration: ["id"],
    ClassExpression: ["id"],
    RestElement: ["argument"],
    UpdateExpression: ["argument"],
    ObjectProperty: ["value"],
    AssignmentPattern: ["left"],
    ArrayPattern: ["elements"],
    ObjectPattern: ["properties"],
    VariableDeclaration: ["declarations"],
    VariableDeclarator: ["id"]
  };
  gd.keys = t$;
});

// ../node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js
var nT = A((xl) => {
  "use strict";
  Object.defineProperty(xl, "__esModule", {
    value: !0
  });
  xl.default = void 0;
  var r$ = _a(), DSe = xl.default = n$;
  function n$(e, t) {
    return (0, r$.default)(e, t, !0);
  }
  i(n$, "getOuterBindingIdentifiers");
});

// ../node_modules/@babel/types/lib/retrievers/getFunctionName.js
var iT = A((Ed) => {
  "use strict";
  Object.defineProperty(Ed, "__esModule", {
    value: !0
  });
  Ed.default = i$;
  var Pr = St();
  function s$(e) {
    return (0, Pr.isNullLiteral)(e) ? "null" : (0, Pr.isRegExpLiteral)(e) ? `/${e.pattern}/${e.flags}` : (0, Pr.isTemplateLiteral)(e) ? e.quasis.
    map((t) => t.value.raw).join("") : e.value !== void 0 ? String(e.value) : null;
  }
  i(s$, "getNameFromLiteralId");
  function sT(e) {
    if (!e.computed || (0, Pr.isLiteral)(e.key))
      return e.key;
  }
  i(sT, "getObjectMemberKey");
  function i$(e, t) {
    if ("id" in e && e.id)
      return {
        name: e.id.name,
        originalNode: e.id
      };
    let r = "", n;
    if ((0, Pr.isObjectProperty)(t, {
      value: e
    }) ? n = sT(t) : (0, Pr.isObjectMethod)(e) || (0, Pr.isClassMethod)(e) ? (n = sT(e), e.kind === "get" ? r = "get " : e.kind === "set" &&
    (r = "set ")) : (0, Pr.isVariableDeclarator)(t, {
      init: e
    }) ? n = t.id : (0, Pr.isAssignmentExpression)(t, {
      operator: "=",
      right: e
    }) && (n = t.left), !n) return null;
    let s = (0, Pr.isLiteral)(n) ? s$(n) : (0, Pr.isIdentifier)(n) ? n.name : (0, Pr.isPrivateName)(n) ? n.id.name : null;
    return s == null ? null : {
      name: r + s,
      originalNode: n
    };
  }
  i(i$, "getFunctionName");
});

// ../node_modules/@babel/types/lib/traverse/traverse.js
var aT = A((Sd) => {
  "use strict";
  Object.defineProperty(Sd, "__esModule", {
    value: !0
  });
  Sd.default = o$;
  var a$ = xr();
  function o$(e, t, r) {
    typeof t == "function" && (t = {
      enter: t
    });
    let {
      enter: n,
      exit: s
    } = t;
    Td(e, n, s, r, []);
  }
  i(o$, "traverse");
  function Td(e, t, r, n, s) {
    let a = a$.VISITOR_KEYS[e.type];
    if (a) {
      t && t(e, s, n);
      for (let o of a) {
        let l = e[o];
        if (Array.isArray(l))
          for (let u = 0; u < l.length; u++) {
            let c = l[u];
            c && (s.push({
              node: e,
              key: o,
              index: u
            }), Td(c, t, r, n, s), s.pop());
          }
        else l && (s.push({
          node: e,
          key: o
        }), Td(l, t, r, n, s), s.pop());
      }
      r && r(e, s, n);
    }
  }
  i(Td, "traverseSimpleImpl");
});

// ../node_modules/@babel/types/lib/validators/isBinding.js
var oT = A((xd) => {
  "use strict";
  Object.defineProperty(xd, "__esModule", {
    value: !0
  });
  xd.default = u$;
  var l$ = _a();
  function u$(e, t, r) {
    if (r && e.type === "Identifier" && t.type === "ObjectProperty" && r.type === "ObjectExpression")
      return !1;
    let n = l$.default.keys[t.type];
    if (n)
      for (let s = 0; s < n.length; s++) {
        let a = n[s], o = t[a];
        if (Array.isArray(o)) {
          if (o.includes(e)) return !0;
        } else if (o === e) return !0;
      }
    return !1;
  }
  i(u$, "isBinding");
});

// ../node_modules/@babel/types/lib/validators/isLet.js
var Pd = A((vd) => {
  "use strict";
  Object.defineProperty(vd, "__esModule", {
    value: !0
  });
  vd.default = f$;
  var c$ = St(), p$ = Xn();
  function f$(e) {
    return (0, c$.isVariableDeclaration)(e) && (e.kind !== "var" || e[p$.BLOCK_SCOPED_SYMBOL]);
  }
  i(f$, "isLet");
});

// ../node_modules/@babel/types/lib/validators/isBlockScoped.js
var uT = A((Ad) => {
  "use strict";
  Object.defineProperty(Ad, "__esModule", {
    value: !0
  });
  Ad.default = h$;
  var lT = St(), d$ = Pd();
  function h$(e) {
    return (0, lT.isFunctionDeclaration)(e) || (0, lT.isClassDeclaration)(e) || (0, d$.default)(e);
  }
  i(h$, "isBlockScoped");
});

// ../node_modules/@babel/types/lib/validators/isImmutable.js
var cT = A((Cd) => {
  "use strict";
  Object.defineProperty(Cd, "__esModule", {
    value: !0
  });
  Cd.default = g$;
  var m$ = nl(), y$ = St();
  function g$(e) {
    return (0, m$.default)(e.type, "Immutable") ? !0 : (0, y$.isIdentifier)(e) ? e.name === "undefined" : !1;
  }
  i(g$, "isImmutable");
});

// ../node_modules/@babel/types/lib/validators/isNodesEquivalent.js
var fT = A((wd) => {
  "use strict";
  Object.defineProperty(wd, "__esModule", {
    value: !0
  });
  wd.default = Dd;
  var pT = xr();
  function Dd(e, t) {
    if (typeof e != "object" || typeof t != "object" || e == null || t == null)
      return e === t;
    if (e.type !== t.type)
      return !1;
    let r = Object.keys(pT.NODE_FIELDS[e.type] || e.type), n = pT.VISITOR_KEYS[e.type];
    for (let s of r) {
      let a = e[s], o = t[s];
      if (typeof a != typeof o)
        return !1;
      if (!(a == null && o == null)) {
        if (a == null || o == null)
          return !1;
        if (Array.isArray(a)) {
          if (!Array.isArray(o) || a.length !== o.length)
            return !1;
          for (let l = 0; l < a.length; l++)
            if (!Dd(a[l], o[l]))
              return !1;
          continue;
        }
        if (typeof a == "object" && !(n != null && n.includes(s))) {
          for (let l of Object.keys(a))
            if (a[l] !== o[l])
              return !1;
          continue;
        }
        if (!Dd(a, o))
          return !1;
      }
    }
    return !0;
  }
  i(Dd, "isNodesEquivalent");
});

// ../node_modules/@babel/types/lib/validators/isReferenced.js
var dT = A((Id) => {
  "use strict";
  Object.defineProperty(Id, "__esModule", {
    value: !0
  });
  Id.default = b$;
  function b$(e, t, r) {
    switch (t.type) {
      case "MemberExpression":
      case "OptionalMemberExpression":
        return t.property === e ? !!t.computed : t.object === e;
      case "JSXMemberExpression":
        return t.object === e;
      case "VariableDeclarator":
        return t.init === e;
      case "ArrowFunctionExpression":
        return t.body === e;
      case "PrivateName":
        return !1;
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "ObjectMethod":
        return t.key === e ? !!t.computed : !1;
      case "ObjectProperty":
        return t.key === e ? !!t.computed : !r || r.type !== "ObjectPattern";
      case "ClassProperty":
      case "ClassAccessorProperty":
        return t.key === e ? !!t.computed : !0;
      case "ClassPrivateProperty":
        return t.key !== e;
      case "ClassDeclaration":
      case "ClassExpression":
        return t.superClass === e;
      case "AssignmentExpression":
        return t.right === e;
      case "AssignmentPattern":
        return t.right === e;
      case "LabeledStatement":
        return !1;
      case "CatchClause":
        return !1;
      case "RestElement":
        return !1;
      case "BreakStatement":
      case "ContinueStatement":
        return !1;
      case "FunctionDeclaration":
      case "FunctionExpression":
        return !1;
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        return !1;
      case "ExportSpecifier":
        return r != null && r.source ? !1 : t.local === e;
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
        return !1;
      case "ImportAttribute":
        return !1;
      case "JSXAttribute":
        return !1;
      case "ObjectPattern":
      case "ArrayPattern":
        return !1;
      case "MetaProperty":
        return !1;
      case "ObjectTypeProperty":
        return t.key !== e;
      case "TSEnumMember":
        return t.id !== e;
      case "TSPropertySignature":
        return t.key === e ? !!t.computed : !0;
    }
    return !0;
  }
  i(b$, "isReferenced");
});

// ../node_modules/@babel/types/lib/validators/isScope.js
var hT = A((_d) => {
  "use strict";
  Object.defineProperty(_d, "__esModule", {
    value: !0
  });
  _d.default = E$;
  var Os = St();
  function E$(e, t) {
    return (0, Os.isBlockStatement)(e) && ((0, Os.isFunction)(t) || (0, Os.isCatchClause)(t)) ? !1 : (0, Os.isPattern)(e) && ((0, Os.isFunction)(
    t) || (0, Os.isCatchClause)(t)) ? !0 : (0, Os.isScopable)(e);
  }
  i(E$, "isScope");
});

// ../node_modules/@babel/types/lib/validators/isSpecifierDefault.js
var yT = A((Od) => {
  "use strict";
  Object.defineProperty(Od, "__esModule", {
    value: !0
  });
  Od.default = T$;
  var mT = St();
  function T$(e) {
    return (0, mT.isImportDefaultSpecifier)(e) || (0, mT.isIdentifier)(e.imported || e.exported, {
      name: "default"
    });
  }
  i(T$, "isSpecifierDefault");
});

// ../node_modules/@babel/types/lib/validators/isValidES3Identifier.js
var gT = A((Nd) => {
  "use strict";
  Object.defineProperty(Nd, "__esModule", {
    value: !0
  });
  Nd.default = v$;
  var S$ = hi(), x$ = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implement\
s", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transie\
nt", "volatile"]);
  function v$(e) {
    return (0, S$.default)(e) && !x$.has(e);
  }
  i(v$, "isValidES3Identifier");
});

// ../node_modules/@babel/types/lib/validators/isVar.js
var bT = A((Bd) => {
  "use strict";
  Object.defineProperty(Bd, "__esModule", {
    value: !0
  });
  Bd.default = C$;
  var P$ = St(), A$ = Xn();
  function C$(e) {
    return (0, P$.isVariableDeclaration)(e, {
      kind: "var"
    }) && !e[A$.BLOCK_SCOPED_SYMBOL];
  }
  i(C$, "isVar");
});

// ../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js
var ET = A((jd) => {
  "use strict";
  Object.defineProperty(jd, "__esModule", {
    value: !0
  });
  jd.default = vl;
  var D$ = _a(), Ns = St(), kd = rr(), Fd = _f(), w$ = Zn();
  function vl(e, t) {
    let r = [], n = !0;
    for (let s of e)
      if ((0, Ns.isEmptyStatement)(s) || (n = !1), (0, Ns.isExpression)(s))
        r.push(s);
      else if ((0, Ns.isExpressionStatement)(s))
        r.push(s.expression);
      else if ((0, Ns.isVariableDeclaration)(s)) {
        if (s.kind !== "var") return;
        for (let a of s.declarations) {
          let o = (0, D$.default)(a);
          for (let l of Object.keys(o))
            t.push({
              kind: s.kind,
              id: (0, w$.default)(o[l])
            });
          a.init && r.push((0, kd.assignmentExpression)("=", a.id, a.init));
        }
        n = !0;
      } else if ((0, Ns.isIfStatement)(s)) {
        let a = s.consequent ? vl([s.consequent], t) : (0, Fd.buildUndefinedNode)(), o = s.alternate ? vl([s.alternate], t) : (0, Fd.buildUndefinedNode)();
        if (!a || !o) return;
        r.push((0, kd.conditionalExpression)(s.test, a, o));
      } else if ((0, Ns.isBlockStatement)(s)) {
        let a = vl(s.body, t);
        if (!a) return;
        r.push(a);
      } else if ((0, Ns.isEmptyStatement)(s))
        e.indexOf(s) === 0 && (n = !0);
      else
        return;
    return n && r.push((0, Fd.buildUndefinedNode)()), r.length === 1 ? r[0] : (0, kd.sequenceExpression)(r);
  }
  i(vl, "gatherSequenceExpressions");
});

// ../node_modules/@babel/types/lib/converters/toSequenceExpression.js
var TT = A((Ld) => {
  "use strict";
  Object.defineProperty(Ld, "__esModule", {
    value: !0
  });
  Ld.default = _$;
  var I$ = ET();
  function _$(e, t) {
    if (!(e != null && e.length)) return;
    let r = [], n = (0, I$.default)(e, r);
    if (n) {
      for (let s of r)
        t.push(s);
      return n;
    }
  }
  i(_$, "toSequenceExpression");
});

// ../node_modules/@babel/types/lib/index.js
var Pe = A((te) => {
  "use strict";
  Object.defineProperty(te, "__esModule", {
    value: !0
  });
  var xn = {
    react: !0,
    assertNode: !0,
    createTypeAnnotationBasedOnTypeof: !0,
    createUnionTypeAnnotation: !0,
    createFlowUnionType: !0,
    createTSUnionType: !0,
    cloneNode: !0,
    clone: !0,
    cloneDeep: !0,
    cloneDeepWithoutLoc: !0,
    cloneWithoutLoc: !0,
    addComment: !0,
    addComments: !0,
    inheritInnerComments: !0,
    inheritLeadingComments: !0,
    inheritsComments: !0,
    inheritTrailingComments: !0,
    removeComments: !0,
    ensureBlock: !0,
    toBindingIdentifierName: !0,
    toBlock: !0,
    toComputedKey: !0,
    toExpression: !0,
    toIdentifier: !0,
    toKeyAlias: !0,
    toStatement: !0,
    valueToNode: !0,
    appendToMemberExpression: !0,
    inherits: !0,
    prependToMemberExpression: !0,
    removeProperties: !0,
    removePropertiesDeep: !0,
    removeTypeDuplicates: !0,
    getAssignmentIdentifiers: !0,
    getBindingIdentifiers: !0,
    getOuterBindingIdentifiers: !0,
    getFunctionName: !0,
    traverse: !0,
    traverseFast: !0,
    shallowEqual: !0,
    is: !0,
    isBinding: !0,
    isBlockScoped: !0,
    isImmutable: !0,
    isLet: !0,
    isNode: !0,
    isNodesEquivalent: !0,
    isPlaceholderType: !0,
    isReferenced: !0,
    isScope: !0,
    isSpecifierDefault: !0,
    isType: !0,
    isValidES3Identifier: !0,
    isValidIdentifier: !0,
    isVar: !0,
    matchesPattern: !0,
    validate: !0,
    buildMatchMemberExpression: !0,
    __internal__deprecationWarning: !0
  };
  Object.defineProperty(te, "__internal__deprecationWarning", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return kW.default;
    }, "get")
  });
  Object.defineProperty(te, "addComment", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return V$.default;
    }, "get")
  });
  Object.defineProperty(te, "addComments", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return $$.default;
    }, "get")
  });
  Object.defineProperty(te, "appendToMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return sW.default;
    }, "get")
  });
  Object.defineProperty(te, "assertNode", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return k$.default;
    }, "get")
  });
  Object.defineProperty(te, "buildMatchMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return BW.default;
    }, "get")
  });
  Object.defineProperty(te, "clone", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return M$.default;
    }, "get")
  });
  Object.defineProperty(te, "cloneDeep", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return R$.default;
    }, "get")
  });
  Object.defineProperty(te, "cloneDeepWithoutLoc", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return q$.default;
    }, "get")
  });
  Object.defineProperty(te, "cloneNode", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return L$.default;
    }, "get")
  });
  Object.defineProperty(te, "cloneWithoutLoc", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return U$.default;
    }, "get")
  });
  Object.defineProperty(te, "createFlowUnionType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return ST.default;
    }, "get")
  });
  Object.defineProperty(te, "createTSUnionType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return j$.default;
    }, "get")
  });
  Object.defineProperty(te, "createTypeAnnotationBasedOnTypeof", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return F$.default;
    }, "get")
  });
  Object.defineProperty(te, "createUnionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return ST.default;
    }, "get")
  });
  Object.defineProperty(te, "ensureBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return J$.default;
    }, "get")
  });
  Object.defineProperty(te, "getAssignmentIdentifiers", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return cW.default;
    }, "get")
  });
  Object.defineProperty(te, "getBindingIdentifiers", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pW.default;
    }, "get")
  });
  Object.defineProperty(te, "getFunctionName", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return dW.default;
    }, "get")
  });
  Object.defineProperty(te, "getOuterBindingIdentifiers", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return fW.default;
    }, "get")
  });
  Object.defineProperty(te, "inheritInnerComments", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return W$.default;
    }, "get")
  });
  Object.defineProperty(te, "inheritLeadingComments", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return K$.default;
    }, "get")
  });
  Object.defineProperty(te, "inheritTrailingComments", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return H$.default;
    }, "get")
  });
  Object.defineProperty(te, "inherits", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return iW.default;
    }, "get")
  });
  Object.defineProperty(te, "inheritsComments", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return G$.default;
    }, "get")
  });
  Object.defineProperty(te, "is", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return yW.default;
    }, "get")
  });
  Object.defineProperty(te, "isBinding", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return gW.default;
    }, "get")
  });
  Object.defineProperty(te, "isBlockScoped", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bW.default;
    }, "get")
  });
  Object.defineProperty(te, "isImmutable", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return EW.default;
    }, "get")
  });
  Object.defineProperty(te, "isLet", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return TW.default;
    }, "get")
  });
  Object.defineProperty(te, "isNode", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return SW.default;
    }, "get")
  });
  Object.defineProperty(te, "isNodesEquivalent", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return xW.default;
    }, "get")
  });
  Object.defineProperty(te, "isPlaceholderType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return vW.default;
    }, "get")
  });
  Object.defineProperty(te, "isReferenced", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return PW.default;
    }, "get")
  });
  Object.defineProperty(te, "isScope", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return AW.default;
    }, "get")
  });
  Object.defineProperty(te, "isSpecifierDefault", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return CW.default;
    }, "get")
  });
  Object.defineProperty(te, "isType", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return DW.default;
    }, "get")
  });
  Object.defineProperty(te, "isValidES3Identifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return wW.default;
    }, "get")
  });
  Object.defineProperty(te, "isValidIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return IW.default;
    }, "get")
  });
  Object.defineProperty(te, "isVar", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return _W.default;
    }, "get")
  });
  Object.defineProperty(te, "matchesPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return OW.default;
    }, "get")
  });
  Object.defineProperty(te, "prependToMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return aW.default;
    }, "get")
  });
  te.react = void 0;
  Object.defineProperty(te, "removeComments", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Y$.default;
    }, "get")
  });
  Object.defineProperty(te, "removeProperties", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return oW.default;
    }, "get")
  });
  Object.defineProperty(te, "removePropertiesDeep", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return lW.default;
    }, "get")
  });
  Object.defineProperty(te, "removeTypeDuplicates", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return uW.default;
    }, "get")
  });
  Object.defineProperty(te, "shallowEqual", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return mW.default;
    }, "get")
  });
  Object.defineProperty(te, "toBindingIdentifierName", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return z$.default;
    }, "get")
  });
  Object.defineProperty(te, "toBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return X$.default;
    }, "get")
  });
  Object.defineProperty(te, "toComputedKey", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Q$.default;
    }, "get")
  });
  Object.defineProperty(te, "toExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Z$.default;
    }, "get")
  });
  Object.defineProperty(te, "toIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return eW.default;
    }, "get")
  });
  Object.defineProperty(te, "toKeyAlias", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return tW.default;
    }, "get")
  });
  Object.defineProperty(te, "toStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return rW.default;
    }, "get")
  });
  Object.defineProperty(te, "traverse", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Pl.default;
    }, "get")
  });
  Object.defineProperty(te, "traverseFast", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return hW.default;
    }, "get")
  });
  Object.defineProperty(te, "validate", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return NW.default;
    }, "get")
  });
  Object.defineProperty(te, "valueToNode", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return nW.default;
    }, "get")
  });
  var O$ = D1(), N$ = w1(), B$ = EE(), k$ = TE(), Md = SE();
  Object.keys(Md).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === Md[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Md[e];
      }, "get")
    });
  });
  var F$ = xE(), ST = AE(), j$ = IE(), Rd = rr();
  Object.keys(Rd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === Rd[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Rd[e];
      }, "get")
    });
  });
  var qd = _E();
  Object.keys(qd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === qd[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return qd[e];
      }, "get")
    });
  });
  var Ud = _f();
  Object.keys(Ud).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === Ud[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Ud[e];
      }, "get")
    });
  });
  var L$ = Zn(), M$ = jE(), R$ = LE(), q$ = ME(), U$ = RE(), V$ = qE(), $$ = Mf(), W$ = Vf(), K$ = Wf(), G$ = Yf(), H$ = Gf(), Y$ = UE(), Vd = VE();
  Object.keys(Vd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === Vd[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Vd[e];
      }, "get")
    });
  });
  var $d = Xn();
  Object.keys($d).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === $d[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return $d[e];
      }, "get")
    });
  });
  var J$ = $E(), z$ = WE(), X$ = Qf(), Q$ = KE(), Z$ = GE(), eW = td(), tW = JE(), rW = zE(), nW = XE(), Wd = xr();
  Object.keys(Wd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === Wd[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Wd[e];
      }, "get")
    });
  });
  var sW = QE(), iW = eT(), aW = tT(), oW = ld(), lW = cd(), uW = Af(), cW = rT(), pW = _a(), fW = nT(), dW = iT(), Pl = aT();
  Object.keys(Pl).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === Pl[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Pl[e];
      }, "get")
    });
  });
  var hW = ad(), mW = tl(), yW = fi(), gW = oT(), bW = uT(), EW = cT(), TW = Pd(), SW = xf(), xW = fT(), vW = Jp(), PW = dT(), AW = hT(), CW = yT(),
  DW = nl(), wW = gT(), IW = hi(), _W = bT(), OW = $p(), NW = ll(), BW = Kp(), Kd = St();
  Object.keys(Kd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(xn, e) || e in te && te[e] === Kd[e] || Object.defineProperty(
    te, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Kd[e];
      }, "get")
    });
  });
  var kW = ga(), sxe = te.react = {
    isReactComponent: O$.default,
    isCompatTag: N$.default,
    buildChildren: B$.default
  };
  te.toSequenceExpression = TT().default;
  process.env.BABEL_TYPES_8_BREAKING && console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-releas\
e instead!");
});

// ../node_modules/@babel/template/lib/formatters.js
var xT = A((Ar) => {
  "use strict";
  Object.defineProperty(Ar, "__esModule", {
    value: !0
  });
  Ar.statements = Ar.statement = Ar.smart = Ar.program = Ar.expression = void 0;
  var FW = Pe(), {
    assertExpressionStatement: jW
  } = FW;
  function Gd(e) {
    return {
      code: /* @__PURE__ */ i((t) => `/* @babel/template */;
${t}`, "code"),
      validate: /* @__PURE__ */ i(() => {
      }, "validate"),
      unwrap: /* @__PURE__ */ i((t) => e(t.program.body.slice(1)), "unwrap")
    };
  }
  i(Gd, "makeStatementFormatter");
  var oxe = Ar.smart = Gd((e) => e.length > 1 ? e : e[0]), lxe = Ar.statements = Gd((e) => e), uxe = Ar.statement = Gd((e) => {
    if (e.length === 0)
      throw new Error("Found nothing to return.");
    if (e.length > 1)
      throw new Error("Found multiple statements but wanted one");
    return e[0];
  }), LW = Ar.expression = {
    code: /* @__PURE__ */ i((e) => `(
${e}
)`, "code"),
    validate: /* @__PURE__ */ i((e) => {
      if (e.program.body.length > 1)
        throw new Error("Found multiple statements but wanted one");
      if (LW.unwrap(e).start === 0)
        throw new Error("Parse result included parens.");
    }, "validate"),
    unwrap: /* @__PURE__ */ i(({
      program: e
    }) => {
      let [t] = e.body;
      return jW(t), t.expression;
    }, "unwrap")
  }, cxe = Ar.program = {
    code: /* @__PURE__ */ i((e) => e, "code"),
    validate: /* @__PURE__ */ i(() => {
    }, "validate"),
    unwrap: /* @__PURE__ */ i((e) => e.program, "unwrap")
  };
});

// ../node_modules/@babel/template/lib/options.js
var Al = A((Oa) => {
  "use strict";
  Object.defineProperty(Oa, "__esModule", {
    value: !0
  });
  Oa.merge = qW;
  Oa.normalizeReplacements = VW;
  Oa.validate = UW;
  var MW = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
  function RW(e, t) {
    if (e == null) return {};
    var r = {};
    for (var n in e) if ({}.hasOwnProperty.call(e, n)) {
      if (t.includes(n)) continue;
      r[n] = e[n];
    }
    return r;
  }
  i(RW, "_objectWithoutPropertiesLoose");
  function qW(e, t) {
    let {
      placeholderWhitelist: r = e.placeholderWhitelist,
      placeholderPattern: n = e.placeholderPattern,
      preserveComments: s = e.preserveComments,
      syntacticPlaceholders: a = e.syntacticPlaceholders
    } = t;
    return {
      parser: Object.assign({}, e.parser, t.parser),
      placeholderWhitelist: r,
      placeholderPattern: n,
      preserveComments: s,
      syntacticPlaceholders: a
    };
  }
  i(qW, "merge");
  function UW(e) {
    if (e != null && typeof e != "object")
      throw new Error("Unknown template options.");
    let t = e || {}, {
      placeholderWhitelist: r,
      placeholderPattern: n,
      preserveComments: s,
      syntacticPlaceholders: a
    } = t, o = RW(t, MW);
    if (r != null && !(r instanceof Set))
      throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
    if (n != null && !(n instanceof RegExp) && n !== !1)
      throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
    if (s != null && typeof s != "boolean")
      throw new Error("'.preserveComments' must be a boolean, null, or undefined");
    if (a != null && typeof a != "boolean")
      throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
    if (a === !0 && (r != null || n != null))
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    return {
      parser: o,
      placeholderWhitelist: r || void 0,
      placeholderPattern: n ?? void 0,
      preserveComments: s ?? void 0,
      syntacticPlaceholders: a ?? void 0
    };
  }
  i(UW, "validate");
  function VW(e) {
    if (Array.isArray(e))
      return e.reduce((t, r, n) => (t["$" + n] = r, t), {});
    if (typeof e == "object" || e == null)
      return e || void 0;
    throw new Error("Template replacements must be an array, object, null, or undefined");
  }
  i(VW, "normalizeReplacements");
});

// ../node_modules/@babel/parser/lib/index.js
var Fs = A((Ua) => {
  "use strict";
  Object.defineProperty(Ua, "__esModule", {
    value: !0
  });
  function $W(e, t) {
    if (e == null) return {};
    var r = {};
    for (var n in e) if ({}.hasOwnProperty.call(e, n)) {
      if (t.includes(n)) continue;
      r[n] = e[n];
    }
    return r;
  }
  i($W, "_objectWithoutPropertiesLoose");
  var un = class {
    static {
      i(this, "Position");
    }
    constructor(t, r, n) {
      this.line = void 0, this.column = void 0, this.index = void 0, this.line = t, this.column = r, this.index = n;
    }
  }, xi = class {
    static {
      i(this, "SourceLocation");
    }
    constructor(t, r) {
      this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = t, this.end = r;
    }
  };
  function sr(e, t) {
    let {
      line: r,
      column: n,
      index: s
    } = e;
    return new un(r, n + t, s + t);
  }
  i(sr, "createPositionWithColumnOffset");
  var vT = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED", WW = {
    ImportMetaOutsideModule: {
      message: `import.meta may appear only with 'sourceType: "module"'`,
      code: vT
    },
    ImportOutsideModule: {
      message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
      code: vT
    }
  }, PT = {
    ArrayPattern: "array destructuring pattern",
    AssignmentExpression: "assignment expression",
    AssignmentPattern: "assignment expression",
    ArrowFunctionExpression: "arrow function expression",
    ConditionalExpression: "conditional expression",
    CatchClause: "catch clause",
    ForOfStatement: "for-of statement",
    ForInStatement: "for-in statement",
    ForStatement: "for-loop",
    FormalParameters: "function parameter list",
    Identifier: "identifier",
    ImportSpecifier: "import specifier",
    ImportDefaultSpecifier: "import default specifier",
    ImportNamespaceSpecifier: "import namespace specifier",
    ObjectPattern: "object destructuring pattern",
    ParenthesizedExpression: "parenthesized expression",
    RestElement: "rest element",
    UpdateExpression: {
      true: "prefix operation",
      false: "postfix operation"
    },
    VariableDeclarator: "variable declaration",
    YieldExpression: "yield expression"
  }, wl = /* @__PURE__ */ i((e) => e.type === "UpdateExpression" ? PT.UpdateExpression[`${e.prefix}`] : PT[e.type], "toNodeDescription"), KW = {
    AccessorIsGenerator: /* @__PURE__ */ i(({
      kind: e
    }) => `A ${e}ter cannot be a generator.`, "AccessorIsGenerator"),
    ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
    AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
    AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
    AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
    AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
    AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
    BadGetterArity: "A 'get' accessor must not have any formal parameters.",
    BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
    BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
    ConstructorClassField: "Classes may not have a field named 'constructor'.",
    ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
    ConstructorIsAccessor: "Class constructor may not be an accessor.",
    ConstructorIsAsync: "Constructor can't be an async function.",
    ConstructorIsGenerator: "Constructor can't be a generator.",
    DeclarationMissingInitializer: /* @__PURE__ */ i(({
      kind: e
    }) => `Missing initializer in ${e} declaration.`, "DeclarationMissingInitializer"),
    DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(deco\
rator)(args)'.",
    DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use\
 the 'export @decorator class {}' syntax.",
    DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the s\
ame time.",
    DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
    DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use \
the '@decorator export class {}' syntax.",
    DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
    DecoratorStaticBlock: "Decorators can't be used with a static block.",
    DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
    DeletePrivateField: "Deleting a private field is not allowed.",
    DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
    DuplicateConstructor: "Duplicate constructor in the same class.",
    DuplicateDefaultExport: "Only one default export allowed per module.",
    DuplicateExport: /* @__PURE__ */ i(({
      exportName: e
    }) => `\`${e}\` has already been exported. Exported identifiers must be unique.`, "DuplicateExport"),
    DuplicateProto: "Redefinition of __proto__ property.",
    DuplicateRegExpFlags: "Duplicate regular expression flag.",
    DynamicImportPhaseRequiresImportExpressions: /* @__PURE__ */ i(({
      phase: e
    }) => `'import.${e}(...)' can only be parsed when using the 'createImportExpressions' option.`, "DynamicImportPhaseRequiresImportExpress\
ions"),
    ElementAfterRest: "Rest element must be last element.",
    EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
    ExportBindingIsString: /* @__PURE__ */ i(({
      localName: e,
      exportName: t
    }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${e}' as '${t}' } from 'some-module'\`?`, "ExportBindingIsString"),
    ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
    ForInOfLoopInitializer: /* @__PURE__ */ i(({
      type: e
    }) => `'${e === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, "ForInOfLoopInitialize\
r"),
    ForInUsing: "For-in loop may not start with 'using' declaration.",
    ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
    ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
    GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
    IllegalBreakContinue: /* @__PURE__ */ i(({
      type: e
    }) => `Unsyntactic ${e === "BreakStatement" ? "break" : "continue"}.`, "IllegalBreakContinue"),
    IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
    IllegalReturn: "'return' outside of function.",
    ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You \
can enable the `deprecatedImportAssert` parser plugin to suppress this error.",
    ImportBindingIsString: /* @__PURE__ */ i(({
      importName: e
    }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${e}" as foo }\`?`, "ImportBindingIsString"),
    ImportCallArity: "`import()` requires exactly one or two arguments.",
    ImportCallNotNewExpression: "Cannot use new with import(...).",
    ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
    ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
    ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
    ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
    IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
    InvalidBigIntLiteral: "Invalid BigIntLiteral.",
    InvalidCodePoint: "Code point out of bounds.",
    InvalidCoverInitializedName: "Invalid shorthand property initializer.",
    InvalidDecimal: "Invalid decimal.",
    InvalidDigit: /* @__PURE__ */ i(({
      radix: e
    }) => `Expected number in radix ${e}.`, "InvalidDigit"),
    InvalidEscapeSequence: "Bad character escape sequence.",
    InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
    InvalidEscapedReservedWord: /* @__PURE__ */ i(({
      reservedWord: e
    }) => `Escape sequence in keyword ${e}.`, "InvalidEscapedReservedWord"),
    InvalidIdentifier: /* @__PURE__ */ i(({
      identifierName: e
    }) => `Invalid identifier ${e}.`, "InvalidIdentifier"),
    InvalidLhs: /* @__PURE__ */ i(({
      ancestor: e
    }) => `Invalid left-hand side in ${wl(e)}.`, "InvalidLhs"),
    InvalidLhsBinding: /* @__PURE__ */ i(({
      ancestor: e
    }) => `Binding invalid left-hand side in ${wl(e)}.`, "InvalidLhsBinding"),
    InvalidLhsOptionalChaining: /* @__PURE__ */ i(({
      ancestor: e
    }) => `Invalid optional chaining in the left-hand side of ${wl(e)}.`, "InvalidLhsOptionalChaining"),
    InvalidNumber: "Invalid number.",
    InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
    InvalidOrUnexpectedToken: /* @__PURE__ */ i(({
      unexpected: e
    }) => `Unexpected character '${e}'.`, "InvalidOrUnexpectedToken"),
    InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
    InvalidPrivateFieldResolution: /* @__PURE__ */ i(({
      identifierName: e
    }) => `Private name #${e} is not defined.`, "InvalidPrivateFieldResolution"),
    InvalidPropertyBindingPattern: "Binding member expression.",
    InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
    InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
    LabelRedeclaration: /* @__PURE__ */ i(({
      labelName: e
    }) => `Label '${e}' is already declared.`, "LabelRedeclaration"),
    LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
    LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
    MalformedRegExpFlags: "Invalid regular expression flag.",
    MissingClassName: "A class name is required.",
    MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
    MissingSemicolon: "Missing semicolon.",
    MissingPlugin: /* @__PURE__ */ i(({
      missingPlugin: e
    }) => `This experimental syntax requires enabling the parser plugin: ${e.map((t) => JSON.stringify(t)).join(", ")}.`, "MissingPlugin"),
    MissingOneOfPlugins: /* @__PURE__ */ i(({
      missingPlugin: e
    }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${e.map((t) => JSON.stringify(t)).join(", ")}.`,
    "MissingOneOfPlugins"),
    MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
    MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
    ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
    ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
    ModuleAttributesWithDuplicateKeys: /* @__PURE__ */ i(({
      key: e
    }) => `Duplicate key "${e}" is not allowed in module attributes.`, "ModuleAttributesWithDuplicateKeys"),
    ModuleExportNameHasLoneSurrogate: /* @__PURE__ */ i(({
      surrogateCharCode: e
    }) => `An export name cannot include a lone surrogate, found '\\u${e.toString(16)}'.`, "ModuleExportNameHasLoneSurrogate"),
    ModuleExportUndefined: /* @__PURE__ */ i(({
      localName: e
    }) => `Export '${e}' is not defined.`, "ModuleExportUndefined"),
    MultipleDefaultsInSwitch: "Multiple default clauses.",
    NewlineAfterThrow: "Illegal newline after throw.",
    NoCatchOrFinally: "Missing catch or finally clause.",
    NumberIdentifier: "Identifier directly after number.",
    NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
    ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
    OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
    OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
    OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
    ParamDupe: "Argument name clash.",
    PatternHasAccessor: "Object pattern can't contain getter or setter.",
    PatternHasMethod: "Object pattern can't contain methods.",
    PrivateInExpectedIn: /* @__PURE__ */ i(({
      identifierName: e
    }) => `Private names are only allowed in property accesses (\`obj.#${e}\`) or in \`in\` expressions (\`#${e} in obj\`).`, "PrivateInExpe\
ctedIn"),
    PrivateNameRedeclaration: /* @__PURE__ */ i(({
      identifierName: e
    }) => `Duplicate private name #${e}.`, "PrivateNameRedeclaration"),
    RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 're\
cordAndTuple' plugin is set to 'bar'.",
    RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the\
 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of th\
e 'recordAndTuple' plugin is set to 'hash'.",
    RecordNoProto: "'__proto__' is not allowed in Record expressions.",
    RestTrailingComma: "Unexpected trailing comma after rest element.",
    SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
    SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if sta\
tement.",
    SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
    StaticPrototype: "Classes may not have static property named prototype.",
    SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or n\
ot extending another class?",
    SuperPrivateField: "Private fields can't be accessed on super.",
    TrailingDecorator: "Decorators must be attached to a class element.",
    TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'reco\
rdAndTuple' plugin is set to 'bar'.",
    TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the '\
recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the \
'recordAndTuple' plugin is set to 'hash'.",
    UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
    UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
    UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
    UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
    UnexpectedKeyword: /* @__PURE__ */ i(({
      keyword: e
    }) => `Unexpected keyword '${e}'.`, "UnexpectedKeyword"),
    UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
    UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
    UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
    UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
    UnexpectedPrivateField: "Unexpected private name.",
    UnexpectedReservedWord: /* @__PURE__ */ i(({
      reservedWord: e
    }) => `Unexpected reserved word '${e}'.`, "UnexpectedReservedWord"),
    UnexpectedSuper: "'super' is only allowed in object methods and classes.",
    UnexpectedToken: /* @__PURE__ */ i(({
      expected: e,
      unexpected: t
    }) => `Unexpected token${t ? ` '${t}'.` : ""}${e ? `, expected "${e}"` : ""}`, "UnexpectedToken"),
    UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
    UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
    UnsupportedBind: "Binding should be performed on object property.",
    UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
    UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
    UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
    UnsupportedMetaProperty: /* @__PURE__ */ i(({
      target: e,
      onlyValidPropertyName: t
    }) => `The only valid meta property for ${e} is ${e}.${t}.`, "UnsupportedMetaProperty"),
    UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
    UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
    UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
    UnterminatedComment: "Unterminated comment.",
    UnterminatedRegExp: "Unterminated regular expression.",
    UnterminatedString: "Unterminated string constant.",
    UnterminatedTemplate: "Unterminated template.",
    UsingDeclarationExport: "Using declaration cannot be exported.",
    UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
    VarRedeclaration: /* @__PURE__ */ i(({
      identifierName: e
    }) => `Identifier '${e}' has already been declared.`, "VarRedeclaration"),
    YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
    YieldInParameter: "Yield expression is not allowed in formal parameters.",
    ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
  }, GW = {
    StrictDelete: "Deleting local variable in strict mode.",
    StrictEvalArguments: /* @__PURE__ */ i(({
      referenceName: e
    }) => `Assigning to '${e}' in strict mode.`, "StrictEvalArguments"),
    StrictEvalArgumentsBinding: /* @__PURE__ */ i(({
      bindingName: e
    }) => `Binding '${e}' in strict mode.`, "StrictEvalArgumentsBinding"),
    StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
    StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
    StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
    StrictWith: "'with' in strict mode."
  }, HW = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]), YW = {
    PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due \
to its loose operator precedence.",
    PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" opt\
ion.',
    PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
    PipeTopicUnconfiguredToken: /* @__PURE__ */ i(({
      token: e
    }) => `Invalid topic token ${e}. In order to use ${e} as a topic reference, the pipelineOperator plugin must be configured with { "propo\
sal": "hack", "topicToken": "${e}" }.`, "PipeTopicUnconfiguredToken"),
    PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
    PipeUnparenthesizedBody: /* @__PURE__ */ i(({
      type: e
    }) => `Hack-style pipe body cannot be an unparenthesized ${wl({
      type: e
    })}; please wrap it in parentheses.`, "PipeUnparenthesizedBody"),
    PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
    PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
    PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
    PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
    PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
    PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "sma\
rt" option.'
  }, JW = ["message"];
  function AT(e, t, r) {
    Object.defineProperty(e, t, {
      enumerable: !1,
      configurable: !0,
      value: r
    });
  }
  i(AT, "defineHidden");
  function zW({
    toMessage: e,
    code: t,
    reasonCode: r,
    syntaxPlugin: n
  }) {
    let s = r === "MissingPlugin" || r === "MissingOneOfPlugins";
    {
      let a = {
        AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter",
        AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters",
        ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumRefer\
ence",
        SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter",
        SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter",
        SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType"
      };
      a[r] && (r = a[r]);
    }
    return /* @__PURE__ */ i(function a(o, l) {
      let u = new SyntaxError();
      return u.code = t, u.reasonCode = r, u.loc = o, u.pos = o.index, u.syntaxPlugin = n, s && (u.missingPlugin = l.missingPlugin), AT(u, "\
clone", /* @__PURE__ */ i(function(p = {}) {
        var f;
        let {
          line: h,
          column: g,
          index: P
        } = (f = p.loc) != null ? f : o;
        return a(new un(h, g, P), Object.assign({}, l, p.details));
      }, "clone")), AT(u, "details", l), Object.defineProperty(u, "message", {
        configurable: !0,
        get() {
          let c = `${e(l)} (${o.line}:${o.column})`;
          return this.message = c, c;
        },
        set(c) {
          Object.defineProperty(this, "message", {
            value: c,
            writable: !0
          });
        }
      }), u;
    }, "constructor");
  }
  i(zW, "toParseErrorConstructor");
  function Cn(e, t) {
    if (Array.isArray(e))
      return (n) => Cn(n, e[0]);
    let r = {};
    for (let n of Object.keys(e)) {
      let s = e[n], a = typeof s == "string" ? {
        message: /* @__PURE__ */ i(() => s, "message")
      } : typeof s == "function" ? {
        message: s
      } : s, {
        message: o
      } = a, l = $W(a, JW), u = typeof o == "string" ? () => o : o;
      r[n] = zW(Object.assign({
        code: "BABEL_PARSER_SYNTAX_ERROR",
        reasonCode: n,
        toMessage: u
      }, t ? {
        syntaxPlugin: t
      } : {}, l));
    }
    return r;
  }
  i(Cn, "ParseErrorEnum");
  var O = Object.assign({}, Cn(WW), Cn(KW), Cn(GW), Cn`pipelineOperator`(YW)), {
    defineProperty: XW
  } = Object, CT = /* @__PURE__ */ i((e, t) => {
    e && XW(e, t, {
      enumerable: !1,
      value: e[t]
    });
  }, "toUnenumerable");
  function Na(e) {
    return CT(e.loc.start, "index"), CT(e.loc.end, "index"), e;
  }
  i(Na, "toESTreeLocation");
  var QW = /* @__PURE__ */ i((e) => class extends e {
    static {
      i(this, "ESTreeParserMixin");
    }
    parse() {
      let r = Na(super.parse());
      return this.options.tokens && (r.tokens = r.tokens.map(Na)), r;
    }
    parseRegExpLiteral({
      pattern: r,
      flags: n
    }) {
      let s = null;
      try {
        s = new RegExp(r, n);
      } catch {
      }
      let a = this.estreeParseLiteral(s);
      return a.regex = {
        pattern: r,
        flags: n
      }, a;
    }
    parseBigIntLiteral(r) {
      let n;
      try {
        n = BigInt(r);
      } catch {
        n = null;
      }
      let s = this.estreeParseLiteral(n);
      return s.bigint = String(s.value || r), s;
    }
    parseDecimalLiteral(r) {
      let s = this.estreeParseLiteral(null);
      return s.decimal = String(s.value || r), s;
    }
    estreeParseLiteral(r) {
      return this.parseLiteral(r, "Literal");
    }
    parseStringLiteral(r) {
      return this.estreeParseLiteral(r);
    }
    parseNumericLiteral(r) {
      return this.estreeParseLiteral(r);
    }
    parseNullLiteral() {
      return this.estreeParseLiteral(null);
    }
    parseBooleanLiteral(r) {
      return this.estreeParseLiteral(r);
    }
    directiveToStmt(r) {
      let n = r.value;
      delete r.value, n.type = "Literal", n.raw = n.extra.raw, n.value = n.extra.expressionValue;
      let s = r;
      return s.type = "ExpressionStatement", s.expression = n, s.directive = n.extra.rawValue, delete n.extra, s;
    }
    initFunction(r, n) {
      super.initFunction(r, n), r.expression = !1;
    }
    checkDeclaration(r) {
      r != null && this.isObjectProperty(r) ? this.checkDeclaration(r.value) : super.checkDeclaration(r);
    }
    getObjectOrClassMethodParams(r) {
      return r.value.params;
    }
    isValidDirective(r) {
      var n;
      return r.type === "ExpressionStatement" && r.expression.type === "Literal" && typeof r.expression.value == "string" && !((n = r.expression.
      extra) != null && n.parenthesized);
    }
    parseBlockBody(r, n, s, a, o) {
      super.parseBlockBody(r, n, s, a, o);
      let l = r.directives.map((u) => this.directiveToStmt(u));
      r.body = l.concat(r.body), delete r.directives;
    }
    pushClassMethod(r, n, s, a, o, l) {
      this.parseMethod(n, s, a, o, l, "ClassMethod", !0), n.typeParameters && (n.value.typeParameters = n.typeParameters, delete n.typeParameters),
      r.body.push(n);
    }
    parsePrivateName() {
      let r = super.parsePrivateName();
      return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(r) : r;
    }
    convertPrivateNameToPrivateIdentifier(r) {
      let n = super.getPrivateNameSV(r);
      return r = r, delete r.id, r.name = n, r.type = "PrivateIdentifier", r;
    }
    isPrivateName(r) {
      return this.getPluginOption("estree", "classFeatures") ? r.type === "PrivateIdentifier" : super.isPrivateName(r);
    }
    getPrivateNameSV(r) {
      return this.getPluginOption("estree", "classFeatures") ? r.name : super.getPrivateNameSV(r);
    }
    parseLiteral(r, n) {
      let s = super.parseLiteral(r, n);
      return s.raw = s.extra.raw, delete s.extra, s;
    }
    parseFunctionBody(r, n, s = !1) {
      super.parseFunctionBody(r, n, s), r.expression = r.body.type !== "BlockStatement";
    }
    parseMethod(r, n, s, a, o, l, u = !1) {
      let c = this.startNode();
      return c.kind = r.kind, c = super.parseMethod(c, n, s, a, o, l, u), c.type = "FunctionExpression", delete c.kind, r.value = c, l === "\
ClassPrivateMethod" && (r.computed = !1), this.finishNode(r, "MethodDefinition");
    }
    nameIsConstructor(r) {
      return r.type === "Literal" ? r.value === "constructor" : super.nameIsConstructor(r);
    }
    parseClassProperty(...r) {
      let n = super.parseClassProperty(...r);
      return this.getPluginOption("estree", "classFeatures") && (n.type = "PropertyDefinition"), n;
    }
    parseClassPrivateProperty(...r) {
      let n = super.parseClassPrivateProperty(...r);
      return this.getPluginOption("estree", "classFeatures") && (n.type = "PropertyDefinition", n.computed = !1), n;
    }
    parseObjectMethod(r, n, s, a, o) {
      let l = super.parseObjectMethod(r, n, s, a, o);
      return l && (l.type = "Property", l.kind === "method" && (l.kind = "init"), l.shorthand = !1), l;
    }
    parseObjectProperty(r, n, s, a) {
      let o = super.parseObjectProperty(r, n, s, a);
      return o && (o.kind = "init", o.type = "Property"), o;
    }
    isValidLVal(r, n, s) {
      return r === "Property" ? "value" : super.isValidLVal(r, n, s);
    }
    isAssignable(r, n) {
      return r != null && this.isObjectProperty(r) ? this.isAssignable(r.value, n) : super.isAssignable(r, n);
    }
    toAssignable(r, n = !1) {
      if (r != null && this.isObjectProperty(r)) {
        let {
          key: s,
          value: a
        } = r;
        this.isPrivateName(s) && this.classScope.usePrivateName(this.getPrivateNameSV(s), s.loc.start), this.toAssignable(a, n);
      } else
        super.toAssignable(r, n);
    }
    toAssignableObjectExpressionProp(r, n, s) {
      r.type === "Property" && (r.kind === "get" || r.kind === "set") ? this.raise(O.PatternHasAccessor, r.key) : r.type === "Property" && r.
      method ? this.raise(O.PatternHasMethod, r.key) : super.toAssignableObjectExpressionProp(r, n, s);
    }
    finishCallExpression(r, n) {
      let s = super.finishCallExpression(r, n);
      if (s.callee.type === "Import") {
        var a, o;
        s.type = "ImportExpression", s.source = s.arguments[0], s.options = (a = s.arguments[1]) != null ? a : null, s.attributes = (o = s.arguments[1]) !=
        null ? o : null, delete s.arguments, delete s.callee;
      }
      return s;
    }
    toReferencedArguments(r) {
      r.type !== "ImportExpression" && super.toReferencedArguments(r);
    }
    parseExport(r, n) {
      let s = this.state.lastTokStartLoc, a = super.parseExport(r, n);
      switch (a.type) {
        case "ExportAllDeclaration":
          a.exported = null;
          break;
        case "ExportNamedDeclaration":
          a.specifiers.length === 1 && a.specifiers[0].type === "ExportNamespaceSpecifier" && (a.type = "ExportAllDeclaration", a.exported =
          a.specifiers[0].exported, delete a.specifiers);
        case "ExportDefaultDeclaration":
          {
            var o;
            let {
              declaration: l
            } = a;
            l?.type === "ClassDeclaration" && ((o = l.decorators) == null ? void 0 : o.length) > 0 && l.start === a.start && this.resetStartLocation(
            a, s);
          }
          break;
      }
      return a;
    }
    parseSubscript(r, n, s, a) {
      let o = super.parseSubscript(r, n, s, a);
      if (a.optionalChainMember) {
        if ((o.type === "OptionalMemberExpression" || o.type === "OptionalCallExpression") && (o.type = o.type.substring(8)), a.stop) {
          let l = this.startNodeAtNode(o);
          return l.expression = o, this.finishNode(l, "ChainExpression");
        }
      } else (o.type === "MemberExpression" || o.type === "CallExpression") && (o.optional = !1);
      return o;
    }
    isOptionalMemberExpression(r) {
      return r.type === "ChainExpression" ? r.expression.type === "MemberExpression" : super.isOptionalMemberExpression(r);
    }
    hasPropertyAsPrivateName(r) {
      return r.type === "ChainExpression" && (r = r.expression), super.hasPropertyAsPrivateName(r);
    }
    isObjectProperty(r) {
      return r.type === "Property" && r.kind === "init" && !r.method;
    }
    isObjectMethod(r) {
      return r.type === "Property" && (r.method || r.kind === "get" || r.kind === "set");
    }
    finishNodeAt(r, n, s) {
      return Na(super.finishNodeAt(r, n, s));
    }
    resetStartLocation(r, n) {
      super.resetStartLocation(r, n), Na(r);
    }
    resetEndLocation(r, n = this.state.lastTokEndLoc) {
      super.resetEndLocation(r, n), Na(r);
    }
  }, "estree"), ks = class {
    static {
      i(this, "TokContext");
    }
    constructor(t, r) {
      this.token = void 0, this.preserveSpace = void 0, this.token = t, this.preserveSpace = !!r;
    }
  }, st = {
    brace: new ks("{"),
    j_oTag: new ks("<tag"),
    j_cTag: new ks("</tag"),
    j_expr: new ks("<tag>...</tag>", !0)
  };
  st.template = new ks("`", !0);
  var Ve = !0, ie = !0, Hd = !0, Ba = !0, es = !0, ZW = !0, Ol = class {
    static {
      i(this, "ExportedTokenType");
    }
    constructor(t, r = {}) {
      this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop =
      void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = t, this.keyword = r.keyword,
      this.beforeExpr = !!r.beforeExpr, this.startsExpr = !!r.startsExpr, this.rightAssociative = !!r.rightAssociative, this.isLoop = !!r.isLoop,
      this.isAssign = !!r.isAssign, this.prefix = !!r.prefix, this.postfix = !!r.postfix, this.binop = r.binop != null ? r.binop : null, this.
      updateContext = null;
    }
  }, bh = /* @__PURE__ */ new Map();
  function Ye(e, t = {}) {
    t.keyword = e;
    let r = xe(e, t);
    return bh.set(e, r), r;
  }
  i(Ye, "createKeyword");
  function nr(e, t) {
    return xe(e, {
      beforeExpr: Ve,
      binop: t
    });
  }
  i(nr, "createBinop");
  var La = -1, Pn = [], Eh = [], Th = [], Sh = [], xh = [], vh = [];
  function xe(e, t = {}) {
    var r, n, s, a;
    return ++La, Eh.push(e), Th.push((r = t.binop) != null ? r : -1), Sh.push((n = t.beforeExpr) != null ? n : !1), xh.push((s = t.startsExpr) !=
    null ? s : !1), vh.push((a = t.prefix) != null ? a : !1), Pn.push(new Ol(e, t)), La;
  }
  i(xe, "createToken");
  function Ue(e, t = {}) {
    var r, n, s, a;
    return ++La, bh.set(e, La), Eh.push(e), Th.push((r = t.binop) != null ? r : -1), Sh.push((n = t.beforeExpr) != null ? n : !1), xh.push((s =
    t.startsExpr) != null ? s : !1), vh.push((a = t.prefix) != null ? a : !1), Pn.push(new Ol("name", t)), La;
  }
  i(Ue, "createKeywordLike");
  var eK = {
    bracketL: xe("[", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    bracketHashL: xe("#[", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    bracketBarL: xe("[|", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    bracketR: xe("]"),
    bracketBarR: xe("|]"),
    braceL: xe("{", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    braceBarL: xe("{|", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    braceHashL: xe("#{", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    braceR: xe("}"),
    braceBarR: xe("|}"),
    parenL: xe("(", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    parenR: xe(")"),
    comma: xe(",", {
      beforeExpr: Ve
    }),
    semi: xe(";", {
      beforeExpr: Ve
    }),
    colon: xe(":", {
      beforeExpr: Ve
    }),
    doubleColon: xe("::", {
      beforeExpr: Ve
    }),
    dot: xe("."),
    question: xe("?", {
      beforeExpr: Ve
    }),
    questionDot: xe("?."),
    arrow: xe("=>", {
      beforeExpr: Ve
    }),
    template: xe("template"),
    ellipsis: xe("...", {
      beforeExpr: Ve
    }),
    backQuote: xe("`", {
      startsExpr: ie
    }),
    dollarBraceL: xe("${", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    templateTail: xe("...`", {
      startsExpr: ie
    }),
    templateNonTail: xe("...${", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    at: xe("@"),
    hash: xe("#", {
      startsExpr: ie
    }),
    interpreterDirective: xe("#!..."),
    eq: xe("=", {
      beforeExpr: Ve,
      isAssign: Ba
    }),
    assign: xe("_=", {
      beforeExpr: Ve,
      isAssign: Ba
    }),
    slashAssign: xe("_=", {
      beforeExpr: Ve,
      isAssign: Ba
    }),
    xorAssign: xe("_=", {
      beforeExpr: Ve,
      isAssign: Ba
    }),
    moduloAssign: xe("_=", {
      beforeExpr: Ve,
      isAssign: Ba
    }),
    incDec: xe("++/--", {
      prefix: es,
      postfix: ZW,
      startsExpr: ie
    }),
    bang: xe("!", {
      beforeExpr: Ve,
      prefix: es,
      startsExpr: ie
    }),
    tilde: xe("~", {
      beforeExpr: Ve,
      prefix: es,
      startsExpr: ie
    }),
    doubleCaret: xe("^^", {
      startsExpr: ie
    }),
    doubleAt: xe("@@", {
      startsExpr: ie
    }),
    pipeline: nr("|>", 0),
    nullishCoalescing: nr("??", 1),
    logicalOR: nr("||", 1),
    logicalAND: nr("&&", 2),
    bitwiseOR: nr("|", 3),
    bitwiseXOR: nr("^", 4),
    bitwiseAND: nr("&", 5),
    equality: nr("==/!=/===/!==", 6),
    lt: nr("</>/<=/>=", 7),
    gt: nr("</>/<=/>=", 7),
    relational: nr("</>/<=/>=", 7),
    bitShift: nr("<</>>/>>>", 8),
    bitShiftL: nr("<</>>/>>>", 8),
    bitShiftR: nr("<</>>/>>>", 8),
    plusMin: xe("+/-", {
      beforeExpr: Ve,
      binop: 9,
      prefix: es,
      startsExpr: ie
    }),
    modulo: xe("%", {
      binop: 10,
      startsExpr: ie
    }),
    star: xe("*", {
      binop: 10
    }),
    slash: nr("/", 10),
    exponent: xe("**", {
      beforeExpr: Ve,
      binop: 11,
      rightAssociative: !0
    }),
    _in: Ye("in", {
      beforeExpr: Ve,
      binop: 7
    }),
    _instanceof: Ye("instanceof", {
      beforeExpr: Ve,
      binop: 7
    }),
    _break: Ye("break"),
    _case: Ye("case", {
      beforeExpr: Ve
    }),
    _catch: Ye("catch"),
    _continue: Ye("continue"),
    _debugger: Ye("debugger"),
    _default: Ye("default", {
      beforeExpr: Ve
    }),
    _else: Ye("else", {
      beforeExpr: Ve
    }),
    _finally: Ye("finally"),
    _function: Ye("function", {
      startsExpr: ie
    }),
    _if: Ye("if"),
    _return: Ye("return", {
      beforeExpr: Ve
    }),
    _switch: Ye("switch"),
    _throw: Ye("throw", {
      beforeExpr: Ve,
      prefix: es,
      startsExpr: ie
    }),
    _try: Ye("try"),
    _var: Ye("var"),
    _const: Ye("const"),
    _with: Ye("with"),
    _new: Ye("new", {
      beforeExpr: Ve,
      startsExpr: ie
    }),
    _this: Ye("this", {
      startsExpr: ie
    }),
    _super: Ye("super", {
      startsExpr: ie
    }),
    _class: Ye("class", {
      startsExpr: ie
    }),
    _extends: Ye("extends", {
      beforeExpr: Ve
    }),
    _export: Ye("export"),
    _import: Ye("import", {
      startsExpr: ie
    }),
    _null: Ye("null", {
      startsExpr: ie
    }),
    _true: Ye("true", {
      startsExpr: ie
    }),
    _false: Ye("false", {
      startsExpr: ie
    }),
    _typeof: Ye("typeof", {
      beforeExpr: Ve,
      prefix: es,
      startsExpr: ie
    }),
    _void: Ye("void", {
      beforeExpr: Ve,
      prefix: es,
      startsExpr: ie
    }),
    _delete: Ye("delete", {
      beforeExpr: Ve,
      prefix: es,
      startsExpr: ie
    }),
    _do: Ye("do", {
      isLoop: Hd,
      beforeExpr: Ve
    }),
    _for: Ye("for", {
      isLoop: Hd
    }),
    _while: Ye("while", {
      isLoop: Hd
    }),
    _as: Ue("as", {
      startsExpr: ie
    }),
    _assert: Ue("assert", {
      startsExpr: ie
    }),
    _async: Ue("async", {
      startsExpr: ie
    }),
    _await: Ue("await", {
      startsExpr: ie
    }),
    _defer: Ue("defer", {
      startsExpr: ie
    }),
    _from: Ue("from", {
      startsExpr: ie
    }),
    _get: Ue("get", {
      startsExpr: ie
    }),
    _let: Ue("let", {
      startsExpr: ie
    }),
    _meta: Ue("meta", {
      startsExpr: ie
    }),
    _of: Ue("of", {
      startsExpr: ie
    }),
    _sent: Ue("sent", {
      startsExpr: ie
    }),
    _set: Ue("set", {
      startsExpr: ie
    }),
    _source: Ue("source", {
      startsExpr: ie
    }),
    _static: Ue("static", {
      startsExpr: ie
    }),
    _using: Ue("using", {
      startsExpr: ie
    }),
    _yield: Ue("yield", {
      startsExpr: ie
    }),
    _asserts: Ue("asserts", {
      startsExpr: ie
    }),
    _checks: Ue("checks", {
      startsExpr: ie
    }),
    _exports: Ue("exports", {
      startsExpr: ie
    }),
    _global: Ue("global", {
      startsExpr: ie
    }),
    _implements: Ue("implements", {
      startsExpr: ie
    }),
    _intrinsic: Ue("intrinsic", {
      startsExpr: ie
    }),
    _infer: Ue("infer", {
      startsExpr: ie
    }),
    _is: Ue("is", {
      startsExpr: ie
    }),
    _mixins: Ue("mixins", {
      startsExpr: ie
    }),
    _proto: Ue("proto", {
      startsExpr: ie
    }),
    _require: Ue("require", {
      startsExpr: ie
    }),
    _satisfies: Ue("satisfies", {
      startsExpr: ie
    }),
    _keyof: Ue("keyof", {
      startsExpr: ie
    }),
    _readonly: Ue("readonly", {
      startsExpr: ie
    }),
    _unique: Ue("unique", {
      startsExpr: ie
    }),
    _abstract: Ue("abstract", {
      startsExpr: ie
    }),
    _declare: Ue("declare", {
      startsExpr: ie
    }),
    _enum: Ue("enum", {
      startsExpr: ie
    }),
    _module: Ue("module", {
      startsExpr: ie
    }),
    _namespace: Ue("namespace", {
      startsExpr: ie
    }),
    _interface: Ue("interface", {
      startsExpr: ie
    }),
    _type: Ue("type", {
      startsExpr: ie
    }),
    _opaque: Ue("opaque", {
      startsExpr: ie
    }),
    name: xe("name", {
      startsExpr: ie
    }),
    placeholder: xe("%%", {
      startsExpr: !0
    }),
    string: xe("string", {
      startsExpr: ie
    }),
    num: xe("num", {
      startsExpr: ie
    }),
    bigint: xe("bigint", {
      startsExpr: ie
    }),
    decimal: xe("decimal", {
      startsExpr: ie
    }),
    regexp: xe("regexp", {
      startsExpr: ie
    }),
    privateName: xe("#name", {
      startsExpr: ie
    }),
    eof: xe("eof"),
    jsxName: xe("jsxName"),
    jsxText: xe("jsxText", {
      beforeExpr: !0
    }),
    jsxTagStart: xe("jsxTagStart", {
      startsExpr: !0
    }),
    jsxTagEnd: xe("jsxTagEnd")
  };
  function Ze(e) {
    return e >= 93 && e <= 133;
  }
  i(Ze, "tokenIsIdentifier");
  function tK(e) {
    return e <= 92;
  }
  i(tK, "tokenKeywordOrIdentifierIsKeyword");
  function Vr(e) {
    return e >= 58 && e <= 133;
  }
  i(Vr, "tokenIsKeywordOrIdentifier");
  function MT(e) {
    return e >= 58 && e <= 137;
  }
  i(MT, "tokenIsLiteralPropertyName");
  function rK(e) {
    return Sh[e];
  }
  i(rK, "tokenComesBeforeExpression");
  function Qd(e) {
    return xh[e];
  }
  i(Qd, "tokenCanStartExpression");
  function nK(e) {
    return e >= 29 && e <= 33;
  }
  i(nK, "tokenIsAssignment");
  function DT(e) {
    return e >= 129 && e <= 131;
  }
  i(DT, "tokenIsFlowInterfaceOrTypeOrOpaque");
  function sK(e) {
    return e >= 90 && e <= 92;
  }
  i(sK, "tokenIsLoop");
  function Ph(e) {
    return e >= 58 && e <= 92;
  }
  i(Ph, "tokenIsKeyword");
  function iK(e) {
    return e >= 39 && e <= 59;
  }
  i(iK, "tokenIsOperator");
  function aK(e) {
    return e === 34;
  }
  i(aK, "tokenIsPostfix");
  function oK(e) {
    return vh[e];
  }
  i(oK, "tokenIsPrefix");
  function lK(e) {
    return e >= 121 && e <= 123;
  }
  i(lK, "tokenIsTSTypeOperator");
  function uK(e) {
    return e >= 124 && e <= 130;
  }
  i(uK, "tokenIsTSDeclarationStart");
  function rs(e) {
    return Eh[e];
  }
  i(rs, "tokenLabelName");
  function Il(e) {
    return Th[e];
  }
  i(Il, "tokenOperatorPrecedence");
  function cK(e) {
    return e === 57;
  }
  i(cK, "tokenIsRightAssociative");
  function Nl(e) {
    return e >= 24 && e <= 25;
  }
  i(Nl, "tokenIsTemplate");
  function vn(e) {
    return Pn[e];
  }
  i(vn, "getExportedToken");
  Pn[8].updateContext = (e) => {
    e.pop();
  }, Pn[5].updateContext = Pn[7].updateContext = Pn[23].updateContext = (e) => {
    e.push(st.brace);
  }, Pn[22].updateContext = (e) => {
    e[e.length - 1] === st.template ? e.pop() : e.push(st.template);
  }, Pn[143].updateContext = (e) => {
    e.push(st.j_expr, st.j_oTag);
  };
  var Ah = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993\
-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\
\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\
\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\
\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\
\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01\
-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
  RT = "\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\
\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\
\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6\
-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20\
-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65", pK = new RegExp("[" + Ah + "]"), fK = new RegExp("[" + Ah + RT + "]");
  Ah = RT = null;
  var qT = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157,
  19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5,
  3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7,
  2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17,
  47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64,
  6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45,
  52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2,
  1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29,
  113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071,
  18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12,
  65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991,
  84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30,
  2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3,
  0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2,
  2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153,
  7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], dK = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0,
  166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2,
  9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68,
  8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14,
  5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2,
  7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0,
  7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4,
  4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10,
  9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function Zd(e, t) {
    let r = 65536;
    for (let n = 0, s = t.length; n < s; n += 2) {
      if (r += t[n], r > e) return !1;
      if (r += t[n + 1], r >= e) return !0;
    }
    return !1;
  }
  i(Zd, "isInAstralSet");
  function An(e) {
    return e < 65 ? e === 36 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && pK.test(String.fromCharCode(e)) :
    Zd(e, qT);
  }
  i(An, "isIdentifierStart");
  function Ei(e) {
    return e < 48 ? e === 36 : e < 58 ? !0 : e < 65 ? !1 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && fK.test(
    String.fromCharCode(e)) : Zd(e, qT) || Zd(e, dK);
  }
  i(Ei, "isIdentifierChar");
  var Ch = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "swit\
ch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false",
    "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  }, hK = new Set(Ch.keyword), mK = new Set(Ch.strict), yK = new Set(Ch.strictBind);
  function UT(e, t) {
    return t && e === "await" || e === "enum";
  }
  i(UT, "isReservedWord");
  function VT(e, t) {
    return UT(e, t) || mK.has(e);
  }
  i(VT, "isStrictReservedWord");
  function $T(e) {
    return yK.has(e);
  }
  i($T, "isStrictBindOnlyReservedWord");
  function WT(e, t) {
    return VT(e, t) || $T(e);
  }
  i(WT, "isStrictBindReservedWord");
  function gK(e) {
    return hK.has(e);
  }
  i(gK, "isKeyword");
  function bK(e, t, r) {
    return e === 64 && t === 64 && An(r);
  }
  i(bK, "isIteratorStart");
  var EK = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function",
  "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import",
  "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protecte\
d", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
  function TK(e) {
    return EK.has(e);
  }
  i(TK, "canBeReservedWord");
  var Ma = class {
    static {
      i(this, "Scope");
    }
    constructor(t) {
      this.flags = 0, this.names = /* @__PURE__ */ new Map(), this.firstLexicalName = "", this.flags = t;
    }
  }, Ra = class {
    static {
      i(this, "ScopeHandler");
    }
    constructor(t, r) {
      this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = t,
      this.inModule = r;
    }
    get inTopLevel() {
      return (this.currentScope().flags & 1) > 0;
    }
    get inFunction() {
      return (this.currentVarScopeFlags() & 2) > 0;
    }
    get allowSuper() {
      return (this.currentThisScopeFlags() & 16) > 0;
    }
    get allowDirectSuper() {
      return (this.currentThisScopeFlags() & 32) > 0;
    }
    get inClass() {
      return (this.currentThisScopeFlags() & 64) > 0;
    }
    get inClassAndNotInNonArrowFunction() {
      let t = this.currentThisScopeFlags();
      return (t & 64) > 0 && (t & 2) === 0;
    }
    get inStaticBlock() {
      for (let t = this.scopeStack.length - 1; ; t--) {
        let {
          flags: r
        } = this.scopeStack[t];
        if (r & 128)
          return !0;
        if (r & 451)
          return !1;
      }
    }
    get inNonArrowFunction() {
      return (this.currentThisScopeFlags() & 2) > 0;
    }
    get treatFunctionsAsVar() {
      return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(t) {
      return new Ma(t);
    }
    enter(t) {
      this.scopeStack.push(this.createScope(t));
    }
    exit() {
      return this.scopeStack.pop().flags;
    }
    treatFunctionsAsVarInScope(t) {
      return !!(t.flags & 130 || !this.parser.inModule && t.flags & 1);
    }
    declareName(t, r, n) {
      let s = this.currentScope();
      if (r & 8 || r & 16) {
        this.checkRedeclarationInScope(s, t, r, n);
        let a = s.names.get(t) || 0;
        r & 16 ? a = a | 4 : (s.firstLexicalName || (s.firstLexicalName = t), a = a | 2), s.names.set(t, a), r & 8 && this.maybeExportDefined(
        s, t);
      } else if (r & 4)
        for (let a = this.scopeStack.length - 1; a >= 0 && (s = this.scopeStack[a], this.checkRedeclarationInScope(s, t, r, n), s.names.set(
        t, (s.names.get(t) || 0) | 1), this.maybeExportDefined(s, t), !(s.flags & 387)); --a)
          ;
      this.parser.inModule && s.flags & 1 && this.undefinedExports.delete(t);
    }
    maybeExportDefined(t, r) {
      this.parser.inModule && t.flags & 1 && this.undefinedExports.delete(r);
    }
    checkRedeclarationInScope(t, r, n, s) {
      this.isRedeclaredInScope(t, r, n) && this.parser.raise(O.VarRedeclaration, s, {
        identifierName: r
      });
    }
    isRedeclaredInScope(t, r, n) {
      if (!(n & 1)) return !1;
      if (n & 8)
        return t.names.has(r);
      let s = t.names.get(r);
      return n & 16 ? (s & 2) > 0 || !this.treatFunctionsAsVarInScope(t) && (s & 1) > 0 : (s & 2) > 0 && !(t.flags & 8 && t.firstLexicalName ===
      r) || !this.treatFunctionsAsVarInScope(t) && (s & 4) > 0;
    }
    checkLocalExport(t) {
      let {
        name: r
      } = t;
      this.scopeStack[0].names.has(r) || this.undefinedExports.set(r, t.loc.start);
    }
    currentScope() {
      return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScopeFlags() {
      for (let t = this.scopeStack.length - 1; ; t--) {
        let {
          flags: r
        } = this.scopeStack[t];
        if (r & 387)
          return r;
      }
    }
    currentThisScopeFlags() {
      for (let t = this.scopeStack.length - 1; ; t--) {
        let {
          flags: r
        } = this.scopeStack[t];
        if (r & 451 && !(r & 4))
          return r;
      }
    }
  }, eh = class extends Ma {
    static {
      i(this, "FlowScope");
    }
    constructor(...t) {
      super(...t), this.declareFunctions = /* @__PURE__ */ new Set();
    }
  }, th = class extends Ra {
    static {
      i(this, "FlowScopeHandler");
    }
    createScope(t) {
      return new eh(t);
    }
    declareName(t, r, n) {
      let s = this.currentScope();
      if (r & 2048) {
        this.checkRedeclarationInScope(s, t, r, n), this.maybeExportDefined(s, t), s.declareFunctions.add(t);
        return;
      }
      super.declareName(t, r, n);
    }
    isRedeclaredInScope(t, r, n) {
      if (super.isRedeclaredInScope(t, r, n)) return !0;
      if (n & 2048 && !t.declareFunctions.has(r)) {
        let s = t.names.get(r);
        return (s & 4) > 0 || (s & 2) > 0;
      }
      return !1;
    }
    checkLocalExport(t) {
      this.scopeStack[0].declareFunctions.has(t.name) || super.checkLocalExport(t);
    }
  }, rh = class {
    static {
      i(this, "BaseParser");
    }
    constructor() {
      this.sawUnambiguousESM = !1, this.ambiguousScriptDifferentAst = !1;
    }
    sourceToOffsetPos(t) {
      return t + this.startIndex;
    }
    offsetToSourcePos(t) {
      return t - this.startIndex;
    }
    hasPlugin(t) {
      if (typeof t == "string")
        return this.plugins.has(t);
      {
        let [r, n] = t;
        if (!this.hasPlugin(r))
          return !1;
        let s = this.plugins.get(r);
        for (let a of Object.keys(n))
          if (s?.[a] !== n[a])
            return !1;
        return !0;
      }
    }
    getPluginOption(t, r) {
      var n;
      return (n = this.plugins.get(t)) == null ? void 0 : n[r];
    }
  };
  function KT(e, t) {
    e.trailingComments === void 0 ? e.trailingComments = t : e.trailingComments.unshift(...t);
  }
  i(KT, "setTrailingComments");
  function SK(e, t) {
    e.leadingComments === void 0 ? e.leadingComments = t : e.leadingComments.unshift(...t);
  }
  i(SK, "setLeadingComments");
  function qa(e, t) {
    e.innerComments === void 0 ? e.innerComments = t : e.innerComments.unshift(...t);
  }
  i(qa, "setInnerComments");
  function ka(e, t, r) {
    let n = null, s = t.length;
    for (; n === null && s > 0; )
      n = t[--s];
    n === null || n.start > r.start ? qa(e, r.comments) : KT(n, r.comments);
  }
  i(ka, "adjustInnerComments");
  var nh = class extends rh {
    static {
      i(this, "CommentsParser");
    }
    addComment(t) {
      this.filename && (t.loc.filename = this.filename);
      let {
        commentsLen: r
      } = this.state;
      this.comments.length !== r && (this.comments.length = r), this.comments.push(t), this.state.commentsLen++;
    }
    processComment(t) {
      let {
        commentStack: r
      } = this.state, n = r.length;
      if (n === 0) return;
      let s = n - 1, a = r[s];
      a.start === t.end && (a.leadingNode = t, s--);
      let {
        start: o
      } = t;
      for (; s >= 0; s--) {
        let l = r[s], u = l.end;
        if (u > o)
          l.containingNode = t, this.finalizeComment(l), r.splice(s, 1);
        else {
          u === o && (l.trailingNode = t);
          break;
        }
      }
    }
    finalizeComment(t) {
      let {
        comments: r
      } = t;
      if (t.leadingNode !== null || t.trailingNode !== null)
        t.leadingNode !== null && KT(t.leadingNode, r), t.trailingNode !== null && SK(t.trailingNode, r);
      else {
        let {
          containingNode: n,
          start: s
        } = t;
        if (this.input.charCodeAt(this.offsetToSourcePos(s) - 1) === 44)
          switch (n.type) {
            case "ObjectExpression":
            case "ObjectPattern":
            case "RecordExpression":
              ka(n, n.properties, t);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
              ka(n, n.arguments, t);
              break;
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ArrowFunctionExpression":
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              ka(n, n.params, t);
              break;
            case "ArrayExpression":
            case "ArrayPattern":
            case "TupleExpression":
              ka(n, n.elements, t);
              break;
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              ka(n, n.specifiers, t);
              break;
            default:
              qa(n, r);
          }
        else
          qa(n, r);
      }
    }
    finalizeRemainingComments() {
      let {
        commentStack: t
      } = this.state;
      for (let r = t.length - 1; r >= 0; r--)
        this.finalizeComment(t[r]);
      this.state.commentStack = [];
    }
    resetPreviousNodeTrailingComments(t) {
      let {
        commentStack: r
      } = this.state, {
        length: n
      } = r;
      if (n === 0) return;
      let s = r[n - 1];
      s.leadingNode === t && (s.leadingNode = null);
    }
    resetPreviousIdentifierLeadingComments(t) {
      let {
        commentStack: r
      } = this.state, {
        length: n
      } = r;
      n !== 0 && (r[n - 1].trailingNode === t ? r[n - 1].trailingNode = null : n >= 2 && r[n - 2].trailingNode === t && (r[n - 2].trailingNode =
      null));
    }
    takeSurroundingComments(t, r, n) {
      let {
        commentStack: s
      } = this.state, a = s.length;
      if (a === 0) return;
      let o = a - 1;
      for (; o >= 0; o--) {
        let l = s[o], u = l.end;
        if (l.start === n)
          l.leadingNode = t;
        else if (u === r)
          l.trailingNode = t;
        else if (u < r)
          break;
      }
    }
  }, xK = /\r\n|[\r\n\u2028\u2029]/, Cl = new RegExp(xK.source, "g");
  function Ti(e) {
    switch (e) {
      case 10:
      case 13:
      case 8232:
      case 8233:
        return !0;
      default:
        return !1;
    }
  }
  i(Ti, "isNewLine");
  function wT(e, t, r) {
    for (let n = t; n < r; n++)
      if (Ti(e.charCodeAt(n)))
        return !0;
    return !1;
  }
  i(wT, "hasNewLine");
  var Yd = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, Jd = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
  function vK(e) {
    switch (e) {
      case 9:
      case 11:
      case 12:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
        return !0;
      default:
        return !1;
    }
  }
  i(vK, "isWhitespace");
  var sh = class e {
    static {
      i(this, "State");
    }
    constructor() {
      this.flags = 1024, this.startIndex = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0,
      this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.topicContext = {
        maxNumOfResolvableTopics: 0,
        maxTopicIndex: null
      }, this.labels = [], this.commentsLen = 0, this.commentStack = [], this.pos = 0, this.type = 140, this.value = null, this.start = 0, this.
      end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.context = [st.brace], this.firstInvalidTemplateEscapePos = null,
      this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
    }
    get strict() {
      return (this.flags & 1) > 0;
    }
    set strict(t) {
      t ? this.flags |= 1 : this.flags &= -2;
    }
    init({
      strictMode: t,
      sourceType: r,
      startIndex: n,
      startLine: s,
      startColumn: a
    }) {
      this.strict = t === !1 ? !1 : t === !0 ? !0 : r === "module", this.startIndex = n, this.curLine = s, this.lineStart = -a, this.startLoc =
      this.endLoc = new un(s, a, n);
    }
    get maybeInArrowParameters() {
      return (this.flags & 2) > 0;
    }
    set maybeInArrowParameters(t) {
      t ? this.flags |= 2 : this.flags &= -3;
    }
    get inType() {
      return (this.flags & 4) > 0;
    }
    set inType(t) {
      t ? this.flags |= 4 : this.flags &= -5;
    }
    get noAnonFunctionType() {
      return (this.flags & 8) > 0;
    }
    set noAnonFunctionType(t) {
      t ? this.flags |= 8 : this.flags &= -9;
    }
    get hasFlowComment() {
      return (this.flags & 16) > 0;
    }
    set hasFlowComment(t) {
      t ? this.flags |= 16 : this.flags &= -17;
    }
    get isAmbientContext() {
      return (this.flags & 32) > 0;
    }
    set isAmbientContext(t) {
      t ? this.flags |= 32 : this.flags &= -33;
    }
    get inAbstractClass() {
      return (this.flags & 64) > 0;
    }
    set inAbstractClass(t) {
      t ? this.flags |= 64 : this.flags &= -65;
    }
    get inDisallowConditionalTypesContext() {
      return (this.flags & 128) > 0;
    }
    set inDisallowConditionalTypesContext(t) {
      t ? this.flags |= 128 : this.flags &= -129;
    }
    get soloAwait() {
      return (this.flags & 256) > 0;
    }
    set soloAwait(t) {
      t ? this.flags |= 256 : this.flags &= -257;
    }
    get inFSharpPipelineDirectBody() {
      return (this.flags & 512) > 0;
    }
    set inFSharpPipelineDirectBody(t) {
      t ? this.flags |= 512 : this.flags &= -513;
    }
    get canStartJSXElement() {
      return (this.flags & 1024) > 0;
    }
    set canStartJSXElement(t) {
      t ? this.flags |= 1024 : this.flags &= -1025;
    }
    get containsEsc() {
      return (this.flags & 2048) > 0;
    }
    set containsEsc(t) {
      t ? this.flags |= 2048 : this.flags &= -2049;
    }
    get hasTopLevelAwait() {
      return (this.flags & 4096) > 0;
    }
    set hasTopLevelAwait(t) {
      t ? this.flags |= 4096 : this.flags &= -4097;
    }
    curPosition() {
      return new un(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
    }
    clone() {
      let t = new e();
      return t.flags = this.flags, t.startIndex = this.startIndex, t.curLine = this.curLine, t.lineStart = this.lineStart, t.startLoc = this.
      startLoc, t.endLoc = this.endLoc, t.errors = this.errors.slice(), t.potentialArrowAt = this.potentialArrowAt, t.noArrowAt = this.noArrowAt.
      slice(), t.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice(), t.topicContext = this.topicContext, t.labels = this.labels.
      slice(), t.commentsLen = this.commentsLen, t.commentStack = this.commentStack.slice(), t.pos = this.pos, t.type = this.type, t.value =
      this.value, t.start = this.start, t.end = this.end, t.lastTokEndLoc = this.lastTokEndLoc, t.lastTokStartLoc = this.lastTokStartLoc, t.
      context = this.context.slice(), t.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos, t.strictErrors = this.strictErrors,
      t.tokensLength = this.tokensLength, t;
    }
  }, PK = /* @__PURE__ */ i(function(t) {
    return t >= 48 && t <= 57;
  }, "isDigit"), IT = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  }, Dl = {
    bin: /* @__PURE__ */ i((e) => e === 48 || e === 49, "bin"),
    oct: /* @__PURE__ */ i((e) => e >= 48 && e <= 55, "oct"),
    dec: /* @__PURE__ */ i((e) => e >= 48 && e <= 57, "dec"),
    hex: /* @__PURE__ */ i((e) => e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102, "hex")
  };
  function _T(e, t, r, n, s, a) {
    let o = r, l = n, u = s, c = "", p = null, f = r, {
      length: h
    } = t;
    for (; ; ) {
      if (r >= h) {
        a.unterminated(o, l, u), c += t.slice(f, r);
        break;
      }
      let g = t.charCodeAt(r);
      if (AK(e, g, t, r)) {
        c += t.slice(f, r);
        break;
      }
      if (g === 92) {
        c += t.slice(f, r);
        let P = CK(t, r, n, s, e === "template", a);
        P.ch === null && !p ? p = {
          pos: r,
          lineStart: n,
          curLine: s
        } : c += P.ch, {
          pos: r,
          lineStart: n,
          curLine: s
        } = P, f = r;
      } else g === 8232 || g === 8233 ? (++r, ++s, n = r) : g === 10 || g === 13 ? e === "template" ? (c += t.slice(f, r) + `
`, ++r, g === 13 && t.charCodeAt(r) === 10 && ++r, ++s, f = n = r) : a.unterminated(o, l, u) : ++r;
    }
    return {
      pos: r,
      str: c,
      firstInvalidLoc: p,
      lineStart: n,
      curLine: s,
      containsInvalid: !!p
    };
  }
  i(_T, "readStringContents");
  function AK(e, t, r, n) {
    return e === "template" ? t === 96 || t === 36 && r.charCodeAt(n + 1) === 123 : t === (e === "double" ? 34 : 39);
  }
  i(AK, "isStringEnd");
  function CK(e, t, r, n, s, a) {
    let o = !s;
    t++;
    let l = /* @__PURE__ */ i((c) => ({
      pos: t,
      ch: c,
      lineStart: r,
      curLine: n
    }), "res"), u = e.charCodeAt(t++);
    switch (u) {
      case 110:
        return l(`
`);
      case 114:
        return l("\r");
      case 120: {
        let c;
        return {
          code: c,
          pos: t
        } = ih(e, t, r, n, 2, !1, o, a), l(c === null ? null : String.fromCharCode(c));
      }
      case 117: {
        let c;
        return {
          code: c,
          pos: t
        } = HT(e, t, r, n, o, a), l(c === null ? null : String.fromCodePoint(c));
      }
      case 116:
        return l("	");
      case 98:
        return l("\b");
      case 118:
        return l("\v");
      case 102:
        return l("\f");
      case 13:
        e.charCodeAt(t) === 10 && ++t;
      case 10:
        r = t, ++n;
      case 8232:
      case 8233:
        return l("");
      case 56:
      case 57:
        if (s)
          return l(null);
        a.strictNumericEscape(t - 1, r, n);
      default:
        if (u >= 48 && u <= 55) {
          let c = t - 1, f = /^[0-7]+/.exec(e.slice(c, t + 2))[0], h = parseInt(f, 8);
          h > 255 && (f = f.slice(0, -1), h = parseInt(f, 8)), t += f.length - 1;
          let g = e.charCodeAt(t);
          if (f !== "0" || g === 56 || g === 57) {
            if (s)
              return l(null);
            a.strictNumericEscape(c, r, n);
          }
          return l(String.fromCharCode(h));
        }
        return l(String.fromCharCode(u));
    }
  }
  i(CK, "readEscapedChar");
  function ih(e, t, r, n, s, a, o, l) {
    let u = t, c;
    return {
      n: c,
      pos: t
    } = GT(e, t, r, n, 16, s, a, !1, l, !o), c === null && (o ? l.invalidEscapeSequence(u, r, n) : t = u - 1), {
      code: c,
      pos: t
    };
  }
  i(ih, "readHexChar");
  function GT(e, t, r, n, s, a, o, l, u, c) {
    let p = t, f = s === 16 ? IT.hex : IT.decBinOct, h = s === 16 ? Dl.hex : s === 10 ? Dl.dec : s === 8 ? Dl.oct : Dl.bin, g = !1, P = 0;
    for (let d = 0, y = a ?? 1 / 0; d < y; ++d) {
      let E = e.charCodeAt(t), _;
      if (E === 95 && l !== "bail") {
        let k = e.charCodeAt(t - 1), B = e.charCodeAt(t + 1);
        if (l) {
          if (Number.isNaN(B) || !h(B) || f.has(k) || f.has(B)) {
            if (c) return {
              n: null,
              pos: t
            };
            u.unexpectedNumericSeparator(t, r, n);
          }
        } else {
          if (c) return {
            n: null,
            pos: t
          };
          u.numericSeparatorInEscapeSequence(t, r, n);
        }
        ++t;
        continue;
      }
      if (E >= 97 ? _ = E - 97 + 10 : E >= 65 ? _ = E - 65 + 10 : PK(E) ? _ = E - 48 : _ = 1 / 0, _ >= s) {
        if (_ <= 9 && c)
          return {
            n: null,
            pos: t
          };
        if (_ <= 9 && u.invalidDigit(t, r, n, s))
          _ = 0;
        else if (o)
          _ = 0, g = !0;
        else
          break;
      }
      ++t, P = P * s + _;
    }
    return t === p || a != null && t - p !== a || g ? {
      n: null,
      pos: t
    } : {
      n: P,
      pos: t
    };
  }
  i(GT, "readInt");
  function HT(e, t, r, n, s, a) {
    let o = e.charCodeAt(t), l;
    if (o === 123) {
      if (++t, {
        code: l,
        pos: t
      } = ih(e, t, r, n, e.indexOf("}", t) - t, !0, s, a), ++t, l !== null && l > 1114111)
        if (s)
          a.invalidCodePoint(t, r, n);
        else
          return {
            code: null,
            pos: t
          };
    } else
      ({
        code: l,
        pos: t
      } = ih(e, t, r, n, 4, !1, s, a));
    return {
      code: l,
      pos: t
    };
  }
  i(HT, "readCodePoint");
  function Fa(e, t, r) {
    return new un(r, e - t, e);
  }
  i(Fa, "buildPosition");
  var DK = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]), ln = class {
    static {
      i(this, "Token");
    }
    constructor(t) {
      let r = t.startIndex || 0;
      this.type = t.type, this.value = t.value, this.start = r + t.start, this.end = r + t.end, this.loc = new xi(t.startLoc, t.endLoc);
    }
  }, ah = class extends nh {
    static {
      i(this, "Tokenizer");
    }
    constructor(t, r) {
      super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = {
        invalidDigit: /* @__PURE__ */ i((n, s, a, o) => this.options.errorRecovery ? (this.raise(O.InvalidDigit, Fa(n, s, a), {
          radix: o
        }), !0) : !1, "invalidDigit"),
        numericSeparatorInEscapeSequence: this.errorBuilder(O.NumericSeparatorInEscapeSequence),
        unexpectedNumericSeparator: this.errorBuilder(O.UnexpectedNumericSeparator)
      }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
        invalidEscapeSequence: this.errorBuilder(O.InvalidEscapeSequence),
        invalidCodePoint: this.errorBuilder(O.InvalidCodePoint)
      }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: /* @__PURE__ */ i((n, s, a) => {
          this.recordStrictModeErrors(O.StrictNumericEscape, Fa(n, s, a));
        }, "strictNumericEscape"),
        unterminated: /* @__PURE__ */ i((n, s, a) => {
          throw this.raise(O.UnterminatedString, Fa(n - 1, s, a));
        }, "unterminated")
      }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: this.errorBuilder(O.StrictNumericEscape),
        unterminated: /* @__PURE__ */ i((n, s, a) => {
          throw this.raise(O.UnterminatedTemplate, Fa(n, s, a));
        }, "unterminated")
      }), this.state = new sh(), this.state.init(t), this.input = r, this.length = r.length, this.comments = [], this.isLookahead = !1;
    }
    pushToken(t) {
      this.tokens.length = this.state.tokensLength, this.tokens.push(t), ++this.state.tokensLength;
    }
    next() {
      this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new ln(this.state)), this.state.lastTokEndLoc = this.state.endLoc, this.
      state.lastTokStartLoc = this.state.startLoc, this.nextToken();
    }
    eat(t) {
      return this.match(t) ? (this.next(), !0) : !1;
    }
    match(t) {
      return this.state.type === t;
    }
    createLookaheadState(t) {
      return {
        pos: t.pos,
        value: null,
        type: t.type,
        start: t.start,
        end: t.end,
        context: [this.curContext()],
        inType: t.inType,
        startLoc: t.startLoc,
        lastTokEndLoc: t.lastTokEndLoc,
        curLine: t.curLine,
        lineStart: t.lineStart,
        curPosition: t.curPosition
      };
    }
    lookahead() {
      let t = this.state;
      this.state = this.createLookaheadState(t), this.isLookahead = !0, this.nextToken(), this.isLookahead = !1;
      let r = this.state;
      return this.state = t, r;
    }
    nextTokenStart() {
      return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(t) {
      return Yd.lastIndex = t, Yd.test(this.input) ? Yd.lastIndex : t;
    }
    lookaheadCharCode() {
      return this.input.charCodeAt(this.nextTokenStart());
    }
    nextTokenInLineStart() {
      return this.nextTokenInLineStartSince(this.state.pos);
    }
    nextTokenInLineStartSince(t) {
      return Jd.lastIndex = t, Jd.test(this.input) ? Jd.lastIndex : t;
    }
    lookaheadInLineCharCode() {
      return this.input.charCodeAt(this.nextTokenInLineStart());
    }
    codePointAtPos(t) {
      let r = this.input.charCodeAt(t);
      if ((r & 64512) === 55296 && ++t < this.input.length) {
        let n = this.input.charCodeAt(t);
        (n & 64512) === 56320 && (r = 65536 + ((r & 1023) << 10) + (n & 1023));
      }
      return r;
    }
    setStrict(t) {
      this.state.strict = t, t && (this.state.strictErrors.forEach(([r, n]) => this.raise(r, n)), this.state.strictErrors.clear());
    }
    curContext() {
      return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
      if (this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.
      pos >= this.length) {
        this.finishToken(140);
        return;
      }
      this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    skipBlockComment(t) {
      let r;
      this.isLookahead || (r = this.state.curPosition());
      let n = this.state.pos, s = this.input.indexOf(t, n + 2);
      if (s === -1)
        throw this.raise(O.UnterminatedComment, this.state.curPosition());
      for (this.state.pos = s + t.length, Cl.lastIndex = n + 2; Cl.test(this.input) && Cl.lastIndex <= s; )
        ++this.state.curLine, this.state.lineStart = Cl.lastIndex;
      if (this.isLookahead) return;
      let a = {
        type: "CommentBlock",
        value: this.input.slice(n + 2, s),
        start: this.sourceToOffsetPos(n),
        end: this.sourceToOffsetPos(s + t.length),
        loc: new xi(r, this.state.curPosition())
      };
      return this.options.tokens && this.pushToken(a), a;
    }
    skipLineComment(t) {
      let r = this.state.pos, n;
      this.isLookahead || (n = this.state.curPosition());
      let s = this.input.charCodeAt(this.state.pos += t);
      if (this.state.pos < this.length)
        for (; !Ti(s) && ++this.state.pos < this.length; )
          s = this.input.charCodeAt(this.state.pos);
      if (this.isLookahead) return;
      let a = this.state.pos, l = {
        type: "CommentLine",
        value: this.input.slice(r + t, a),
        start: this.sourceToOffsetPos(r),
        end: this.sourceToOffsetPos(a),
        loc: new xi(n, this.state.curPosition())
      };
      return this.options.tokens && this.pushToken(l), l;
    }
    skipSpace() {
      let t = this.state.pos, r = [];
      e: for (; this.state.pos < this.length; ) {
        let n = this.input.charCodeAt(this.state.pos);
        switch (n) {
          case 32:
          case 160:
          case 9:
            ++this.state.pos;
            break;
          case 13:
            this.input.charCodeAt(this.state.pos + 1) === 10 && ++this.state.pos;
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
            break;
          case 47:
            switch (this.input.charCodeAt(this.state.pos + 1)) {
              case 42: {
                let s = this.skipBlockComment("*/");
                s !== void 0 && (this.addComment(s), this.options.attachComment && r.push(s));
                break;
              }
              case 47: {
                let s = this.skipLineComment(2);
                s !== void 0 && (this.addComment(s), this.options.attachComment && r.push(s));
                break;
              }
              default:
                break e;
            }
            break;
          default:
            if (vK(n))
              ++this.state.pos;
            else if (n === 45 && !this.inModule && this.options.annexB) {
              let s = this.state.pos;
              if (this.input.charCodeAt(s + 1) === 45 && this.input.charCodeAt(s + 2) === 62 && (t === 0 || this.state.lineStart > t)) {
                let a = this.skipLineComment(3);
                a !== void 0 && (this.addComment(a), this.options.attachComment && r.push(a));
              } else
                break e;
            } else if (n === 60 && !this.inModule && this.options.annexB) {
              let s = this.state.pos;
              if (this.input.charCodeAt(s + 1) === 33 && this.input.charCodeAt(s + 2) === 45 && this.input.charCodeAt(s + 3) === 45) {
                let a = this.skipLineComment(4);
                a !== void 0 && (this.addComment(a), this.options.attachComment && r.push(a));
              } else
                break e;
            } else
              break e;
        }
      }
      if (r.length > 0) {
        let n = this.state.pos, s = {
          start: this.sourceToOffsetPos(t),
          end: this.sourceToOffsetPos(n),
          comments: r,
          leadingNode: null,
          trailingNode: null,
          containingNode: null
        };
        this.state.commentStack.push(s);
      }
    }
    finishToken(t, r) {
      this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
      let n = this.state.type;
      this.state.type = t, this.state.value = r, this.isLookahead || this.updateContext(n);
    }
    replaceToken(t) {
      this.state.type = t, this.updateContext();
    }
    readToken_numberSign() {
      if (this.state.pos === 0 && this.readToken_interpreter())
        return;
      let t = this.state.pos + 1, r = this.codePointAtPos(t);
      if (r >= 48 && r <= 57)
        throw this.raise(O.UnexpectedDigitAfterHash, this.state.curPosition());
      if (r === 123 || r === 91 && this.hasPlugin("recordAndTuple")) {
        if (this.expectPlugin("recordAndTuple"), this.getPluginOption("recordAndTuple", "syntaxType") === "bar")
          throw this.raise(r === 123 ? O.RecordExpressionHashIncorrectStartSyntaxType : O.TupleExpressionHashIncorrectStartSyntaxType, this.
          state.curPosition());
        this.state.pos += 2, r === 123 ? this.finishToken(7) : this.finishToken(1);
      } else An(r) ? (++this.state.pos, this.finishToken(139, this.readWord1(r))) : r === 92 ? (++this.state.pos, this.finishToken(139, this.
      readWord1())) : this.finishOp(27, 1);
    }
    readToken_dot() {
      let t = this.input.charCodeAt(this.state.pos + 1);
      if (t >= 48 && t <= 57) {
        this.readNumber(!0);
        return;
      }
      t === 46 && this.input.charCodeAt(this.state.pos + 2) === 46 ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(
      16));
    }
    readToken_slash() {
      this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(31, 2) : this.finishOp(56, 1);
    }
    readToken_interpreter() {
      if (this.state.pos !== 0 || this.length < 2) return !1;
      let t = this.input.charCodeAt(this.state.pos + 1);
      if (t !== 33) return !1;
      let r = this.state.pos;
      for (this.state.pos += 1; !Ti(t) && ++this.state.pos < this.length; )
        t = this.input.charCodeAt(this.state.pos);
      let n = this.input.slice(r + 2, this.state.pos);
      return this.finishToken(28, n), !0;
    }
    readToken_mult_modulo(t) {
      let r = t === 42 ? 55 : 54, n = 1, s = this.input.charCodeAt(this.state.pos + 1);
      t === 42 && s === 42 && (n++, s = this.input.charCodeAt(this.state.pos + 2), r = 57), s === 61 && !this.state.inType && (n++, r = t ===
      37 ? 33 : 30), this.finishOp(r, n);
    }
    readToken_pipe_amp(t) {
      let r = this.input.charCodeAt(this.state.pos + 1);
      if (r === t) {
        this.input.charCodeAt(this.state.pos + 2) === 61 ? this.finishOp(30, 3) : this.finishOp(t === 124 ? 41 : 42, 2);
        return;
      }
      if (t === 124) {
        if (r === 62) {
          this.finishOp(39, 2);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && r === 125) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
            throw this.raise(O.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          this.state.pos += 2, this.finishToken(9);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && r === 93) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
            throw this.raise(O.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          this.state.pos += 2, this.finishToken(4);
          return;
        }
      }
      if (r === 61) {
        this.finishOp(30, 2);
        return;
      }
      this.finishOp(t === 124 ? 43 : 45, 1);
    }
    readToken_caret() {
      let t = this.input.charCodeAt(this.state.pos + 1);
      t === 61 && !this.state.inType ? this.finishOp(32, 2) : t === 94 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "^^"
      }]) ? (this.finishOp(37, 2), this.input.codePointAt(this.state.pos) === 94 && this.unexpected()) : this.finishOp(44, 1);
    }
    readToken_atSign() {
      this.input.charCodeAt(this.state.pos + 1) === 64 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "@@"
      }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
    }
    readToken_plus_min(t) {
      let r = this.input.charCodeAt(this.state.pos + 1);
      if (r === t) {
        this.finishOp(34, 2);
        return;
      }
      r === 61 ? this.finishOp(30, 2) : this.finishOp(53, 1);
    }
    readToken_lt() {
      let {
        pos: t
      } = this.state, r = this.input.charCodeAt(t + 1);
      if (r === 60) {
        if (this.input.charCodeAt(t + 2) === 61) {
          this.finishOp(30, 3);
          return;
        }
        this.finishOp(51, 2);
        return;
      }
      if (r === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(47, 1);
    }
    readToken_gt() {
      let {
        pos: t
      } = this.state, r = this.input.charCodeAt(t + 1);
      if (r === 62) {
        let n = this.input.charCodeAt(t + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(t + n) === 61) {
          this.finishOp(30, n + 1);
          return;
        }
        this.finishOp(52, n);
        return;
      }
      if (r === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(48, 1);
    }
    readToken_eq_excl(t) {
      let r = this.input.charCodeAt(this.state.pos + 1);
      if (r === 61) {
        this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        return;
      }
      if (t === 61 && r === 62) {
        this.state.pos += 2, this.finishToken(19);
        return;
      }
      this.finishOp(t === 61 ? 29 : 35, 1);
    }
    readToken_question() {
      let t = this.input.charCodeAt(this.state.pos + 1), r = this.input.charCodeAt(this.state.pos + 2);
      t === 63 ? r === 61 ? this.finishOp(30, 3) : this.finishOp(40, 2) : t === 46 && !(r >= 48 && r <= 57) ? (this.state.pos += 2, this.finishToken(
      18)) : (++this.state.pos, this.finishToken(17));
    }
    getTokenFromCode(t) {
      switch (t) {
        case 46:
          this.readToken_dot();
          return;
        case 40:
          ++this.state.pos, this.finishToken(10);
          return;
        case 41:
          ++this.state.pos, this.finishToken(11);
          return;
        case 59:
          ++this.state.pos, this.finishToken(13);
          return;
        case 44:
          ++this.state.pos, this.finishToken(12);
          return;
        case 91:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
              throw this.raise(O.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            this.state.pos += 2, this.finishToken(2);
          } else
            ++this.state.pos, this.finishToken(0);
          return;
        case 93:
          ++this.state.pos, this.finishToken(3);
          return;
        case 123:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
              throw this.raise(O.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            this.state.pos += 2, this.finishToken(6);
          } else
            ++this.state.pos, this.finishToken(5);
          return;
        case 125:
          ++this.state.pos, this.finishToken(8);
          return;
        case 58:
          this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58 ? this.finishOp(15, 2) : (++this.state.pos, this.
          finishToken(14));
          return;
        case 63:
          this.readToken_question();
          return;
        case 96:
          this.readTemplateToken();
          return;
        case 48: {
          let r = this.input.charCodeAt(this.state.pos + 1);
          if (r === 120 || r === 88) {
            this.readRadixNumber(16);
            return;
          }
          if (r === 111 || r === 79) {
            this.readRadixNumber(8);
            return;
          }
          if (r === 98 || r === 66) {
            this.readRadixNumber(2);
            return;
          }
        }
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          this.readNumber(!1);
          return;
        case 34:
        case 39:
          this.readString(t);
          return;
        case 47:
          this.readToken_slash();
          return;
        case 37:
        case 42:
          this.readToken_mult_modulo(t);
          return;
        case 124:
        case 38:
          this.readToken_pipe_amp(t);
          return;
        case 94:
          this.readToken_caret();
          return;
        case 43:
        case 45:
          this.readToken_plus_min(t);
          return;
        case 60:
          this.readToken_lt();
          return;
        case 62:
          this.readToken_gt();
          return;
        case 61:
        case 33:
          this.readToken_eq_excl(t);
          return;
        case 126:
          this.finishOp(36, 1);
          return;
        case 64:
          this.readToken_atSign();
          return;
        case 35:
          this.readToken_numberSign();
          return;
        case 92:
          this.readWord();
          return;
        default:
          if (An(t)) {
            this.readWord(t);
            return;
          }
      }
      throw this.raise(O.InvalidOrUnexpectedToken, this.state.curPosition(), {
        unexpected: String.fromCodePoint(t)
      });
    }
    finishOp(t, r) {
      let n = this.input.slice(this.state.pos, this.state.pos + r);
      this.state.pos += r, this.finishToken(t, n);
    }
    readRegexp() {
      let t = this.state.startLoc, r = this.state.start + 1, n, s, {
        pos: a
      } = this.state;
      for (; ; ++a) {
        if (a >= this.length)
          throw this.raise(O.UnterminatedRegExp, sr(t, 1));
        let c = this.input.charCodeAt(a);
        if (Ti(c))
          throw this.raise(O.UnterminatedRegExp, sr(t, 1));
        if (n)
          n = !1;
        else {
          if (c === 91)
            s = !0;
          else if (c === 93 && s)
            s = !1;
          else if (c === 47 && !s)
            break;
          n = c === 92;
        }
      }
      let o = this.input.slice(r, a);
      ++a;
      let l = "", u = /* @__PURE__ */ i(() => sr(t, a + 2 - r), "nextPos");
      for (; a < this.length; ) {
        let c = this.codePointAtPos(a), p = String.fromCharCode(c);
        if (DK.has(c))
          c === 118 ? l.includes("u") && this.raise(O.IncompatibleRegExpUVFlags, u()) : c === 117 && l.includes("v") && this.raise(O.IncompatibleRegExpUVFlags,
          u()), l.includes(p) && this.raise(O.DuplicateRegExpFlags, u());
        else if (Ei(c) || c === 92)
          this.raise(O.MalformedRegExpFlags, u());
        else
          break;
        ++a, l += p;
      }
      this.state.pos = a, this.finishToken(138, {
        pattern: o,
        flags: l
      });
    }
    readInt(t, r, n = !1, s = !0) {
      let {
        n: a,
        pos: o
      } = GT(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, r, n, s, this.errorHandlers_readInt, !1);
      return this.state.pos = o, a;
    }
    readRadixNumber(t) {
      let r = this.state.pos, n = this.state.curPosition(), s = !1;
      this.state.pos += 2;
      let a = this.readInt(t);
      a == null && this.raise(O.InvalidDigit, sr(n, 2), {
        radix: t
      });
      let o = this.input.charCodeAt(this.state.pos);
      if (o === 110)
        ++this.state.pos, s = !0;
      else if (o === 109)
        throw this.raise(O.InvalidDecimal, n);
      if (An(this.codePointAtPos(this.state.pos)))
        throw this.raise(O.NumberIdentifier, this.state.curPosition());
      if (s) {
        let l = this.input.slice(r, this.state.pos).replace(/[_n]/g, "");
        this.finishToken(136, l);
        return;
      }
      this.finishToken(135, a);
    }
    readNumber(t) {
      let r = this.state.pos, n = this.state.curPosition(), s = !1, a = !1, o = !1, l = !1;
      !t && this.readInt(10) === null && this.raise(O.InvalidNumber, this.state.curPosition());
      let u = this.state.pos - r >= 2 && this.input.charCodeAt(r) === 48;
      if (u) {
        let g = this.input.slice(r, this.state.pos);
        if (this.recordStrictModeErrors(O.StrictOctalLiteral, n), !this.state.strict) {
          let P = g.indexOf("_");
          P > 0 && this.raise(O.ZeroDigitNumericSeparator, sr(n, P));
        }
        l = u && !/[89]/.test(g);
      }
      let c = this.input.charCodeAt(this.state.pos);
      if (c === 46 && !l && (++this.state.pos, this.readInt(10), s = !0, c = this.input.charCodeAt(this.state.pos)), (c === 69 || c === 101) &&
      !l && (c = this.input.charCodeAt(++this.state.pos), (c === 43 || c === 45) && ++this.state.pos, this.readInt(10) === null && this.raise(
      O.InvalidOrMissingExponent, n), s = !0, o = !0, c = this.input.charCodeAt(this.state.pos)), c === 110 && ((s || u) && this.raise(O.InvalidBigIntLiteral,
      n), ++this.state.pos, a = !0), c === 109) {
        this.expectPlugin("decimal", this.state.curPosition()), (o || u) && this.raise(O.InvalidDecimal, n), ++this.state.pos;
        var p = !0;
      }
      if (An(this.codePointAtPos(this.state.pos)))
        throw this.raise(O.NumberIdentifier, this.state.curPosition());
      let f = this.input.slice(r, this.state.pos).replace(/[_mn]/g, "");
      if (a) {
        this.finishToken(136, f);
        return;
      }
      if (p) {
        this.finishToken(137, f);
        return;
      }
      let h = l ? parseInt(f, 8) : parseFloat(f);
      this.finishToken(135, h);
    }
    readCodePoint(t) {
      let {
        code: r,
        pos: n
      } = HT(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, this.errorHandlers_readCodePoint);
      return this.state.pos = n, r;
    }
    readString(t) {
      let {
        str: r,
        pos: n,
        curLine: s,
        lineStart: a
      } = _T(t === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
      this.state.pos = n + 1, this.state.lineStart = a, this.state.curLine = s, this.finishToken(134, r);
    }
    readTemplateContinuation() {
      this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
    }
    readTemplateToken() {
      let t = this.input[this.state.pos], {
        str: r,
        firstInvalidLoc: n,
        pos: s,
        curLine: a,
        lineStart: o
      } = _T("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
      this.state.pos = s + 1, this.state.lineStart = o, this.state.curLine = a, n && (this.state.firstInvalidTemplateEscapePos = new un(n.curLine,
      n.pos - n.lineStart, this.sourceToOffsetPos(n.pos))), this.input.codePointAt(s) === 96 ? this.finishToken(24, n ? null : t + r + "`") :
      (this.state.pos++, this.finishToken(25, n ? null : t + r + "${"));
    }
    recordStrictModeErrors(t, r) {
      let n = r.index;
      this.state.strict && !this.state.strictErrors.has(n) ? this.raise(t, r) : this.state.strictErrors.set(n, [t, r]);
    }
    readWord1(t) {
      this.state.containsEsc = !1;
      let r = "", n = this.state.pos, s = this.state.pos;
      for (t !== void 0 && (this.state.pos += t <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
        let a = this.codePointAtPos(this.state.pos);
        if (Ei(a))
          this.state.pos += a <= 65535 ? 1 : 2;
        else if (a === 92) {
          this.state.containsEsc = !0, r += this.input.slice(s, this.state.pos);
          let o = this.state.curPosition(), l = this.state.pos === n ? An : Ei;
          if (this.input.charCodeAt(++this.state.pos) !== 117) {
            this.raise(O.MissingUnicodeEscape, this.state.curPosition()), s = this.state.pos - 1;
            continue;
          }
          ++this.state.pos;
          let u = this.readCodePoint(!0);
          u !== null && (l(u) || this.raise(O.EscapedCharNotAnIdentifier, o), r += String.fromCodePoint(u)), s = this.state.pos;
        } else
          break;
      }
      return r + this.input.slice(s, this.state.pos);
    }
    readWord(t) {
      let r = this.readWord1(t), n = bh.get(r);
      n !== void 0 ? this.finishToken(n, rs(n)) : this.finishToken(132, r);
    }
    checkKeywordEscapes() {
      let {
        type: t
      } = this.state;
      Ph(t) && this.state.containsEsc && this.raise(O.InvalidEscapedReservedWord, this.state.startLoc, {
        reservedWord: rs(t)
      });
    }
    raise(t, r, n = {}) {
      let s = r instanceof un ? r : r.loc.start, a = t(s, n);
      if (!this.options.errorRecovery) throw a;
      return this.isLookahead || this.state.errors.push(a), a;
    }
    raiseOverwrite(t, r, n = {}) {
      let s = r instanceof un ? r : r.loc.start, a = s.index, o = this.state.errors;
      for (let l = o.length - 1; l >= 0; l--) {
        let u = o[l];
        if (u.loc.index === a)
          return o[l] = t(s, n);
        if (u.loc.index < a) break;
      }
      return this.raise(t, r, n);
    }
    updateContext(t) {
    }
    unexpected(t, r) {
      throw this.raise(O.UnexpectedToken, t ?? this.state.startLoc, {
        expected: r ? rs(r) : null
      });
    }
    expectPlugin(t, r) {
      if (this.hasPlugin(t))
        return !0;
      throw this.raise(O.MissingPlugin, r ?? this.state.startLoc, {
        missingPlugin: [t]
      });
    }
    expectOnePlugin(t) {
      if (!t.some((r) => this.hasPlugin(r)))
        throw this.raise(O.MissingOneOfPlugins, this.state.startLoc, {
          missingPlugin: t
        });
    }
    errorBuilder(t) {
      return (r, n, s) => {
        this.raise(t, Fa(r, n, s));
      };
    }
  }, oh = class {
    static {
      i(this, "ClassScope");
    }
    constructor() {
      this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
    }
  }, lh = class {
    static {
      i(this, "ClassScopeHandler");
    }
    constructor(t) {
      this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = t;
    }
    current() {
      return this.stack[this.stack.length - 1];
    }
    enter() {
      this.stack.push(new oh());
    }
    exit() {
      let t = this.stack.pop(), r = this.current();
      for (let [n, s] of Array.from(t.undefinedPrivateNames))
        r ? r.undefinedPrivateNames.has(n) || r.undefinedPrivateNames.set(n, s) : this.parser.raise(O.InvalidPrivateFieldResolution, s, {
          identifierName: n
        });
    }
    declarePrivateName(t, r, n) {
      let {
        privateNames: s,
        loneAccessors: a,
        undefinedPrivateNames: o
      } = this.current(), l = s.has(t);
      if (r & 3) {
        let u = l && a.get(t);
        if (u) {
          let c = u & 4, p = r & 4, f = u & 3, h = r & 3;
          l = f === h || c !== p, l || a.delete(t);
        } else l || a.set(t, r);
      }
      l && this.parser.raise(O.PrivateNameRedeclaration, n, {
        identifierName: t
      }), s.add(t), o.delete(t);
    }
    usePrivateName(t, r) {
      let n;
      for (n of this.stack)
        if (n.privateNames.has(t)) return;
      n ? n.undefinedPrivateNames.set(t, r) : this.parser.raise(O.InvalidPrivateFieldResolution, r, {
        identifierName: t
      });
    }
  }, vi = class {
    static {
      i(this, "ExpressionScope");
    }
    constructor(t = 0) {
      this.type = t;
    }
    canBeArrowParameterDeclaration() {
      return this.type === 2 || this.type === 1;
    }
    isCertainlyParameterDeclaration() {
      return this.type === 3;
    }
  }, Bl = class extends vi {
    static {
      i(this, "ArrowHeadParsingScope");
    }
    constructor(t) {
      super(t), this.declarationErrors = /* @__PURE__ */ new Map();
    }
    recordDeclarationError(t, r) {
      let n = r.index;
      this.declarationErrors.set(n, [t, r]);
    }
    clearDeclarationError(t) {
      this.declarationErrors.delete(t);
    }
    iterateErrors(t) {
      this.declarationErrors.forEach(t);
    }
  }, uh = class {
    static {
      i(this, "ExpressionScopeHandler");
    }
    constructor(t) {
      this.parser = void 0, this.stack = [new vi()], this.parser = t;
    }
    enter(t) {
      this.stack.push(t);
    }
    exit() {
      this.stack.pop();
    }
    recordParameterInitializerError(t, r) {
      let n = r.loc.start, {
        stack: s
      } = this, a = s.length - 1, o = s[a];
      for (; !o.isCertainlyParameterDeclaration(); ) {
        if (o.canBeArrowParameterDeclaration())
          o.recordDeclarationError(t, n);
        else
          return;
        o = s[--a];
      }
      this.parser.raise(t, n);
    }
    recordArrowParameterBindingError(t, r) {
      let {
        stack: n
      } = this, s = n[n.length - 1], a = r.loc.start;
      if (s.isCertainlyParameterDeclaration())
        this.parser.raise(t, a);
      else if (s.canBeArrowParameterDeclaration())
        s.recordDeclarationError(t, a);
      else
        return;
    }
    recordAsyncArrowParametersError(t) {
      let {
        stack: r
      } = this, n = r.length - 1, s = r[n];
      for (; s.canBeArrowParameterDeclaration(); )
        s.type === 2 && s.recordDeclarationError(O.AwaitBindingIdentifier, t), s = r[--n];
    }
    validateAsPattern() {
      let {
        stack: t
      } = this, r = t[t.length - 1];
      r.canBeArrowParameterDeclaration() && r.iterateErrors(([n, s]) => {
        this.parser.raise(n, s);
        let a = t.length - 2, o = t[a];
        for (; o.canBeArrowParameterDeclaration(); )
          o.clearDeclarationError(s.index), o = t[--a];
      });
    }
  };
  function wK() {
    return new vi(3);
  }
  i(wK, "newParameterDeclarationScope");
  function IK() {
    return new Bl(1);
  }
  i(IK, "newArrowHeadScope");
  function _K() {
    return new Bl(2);
  }
  i(_K, "newAsyncArrowScope");
  function YT() {
    return new vi();
  }
  i(YT, "newExpressionScope");
  var ch = class {
    static {
      i(this, "ProductionParameterHandler");
    }
    constructor() {
      this.stacks = [];
    }
    enter(t) {
      this.stacks.push(t);
    }
    exit() {
      this.stacks.pop();
    }
    currentFlags() {
      return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
      return (this.currentFlags() & 2) > 0;
    }
    get hasYield() {
      return (this.currentFlags() & 1) > 0;
    }
    get hasReturn() {
      return (this.currentFlags() & 4) > 0;
    }
    get hasIn() {
      return (this.currentFlags() & 8) > 0;
    }
  };
  function _l(e, t) {
    return (e ? 2 : 0) | (t ? 1 : 0);
  }
  i(_l, "functionFlags");
  var ph = class extends ah {
    static {
      i(this, "UtilParser");
    }
    addExtra(t, r, n, s = !0) {
      if (!t) return;
      let {
        extra: a
      } = t;
      a == null && (a = {}, t.extra = a), s ? a[r] = n : Object.defineProperty(a, r, {
        enumerable: s,
        value: n
      });
    }
    isContextual(t) {
      return this.state.type === t && !this.state.containsEsc;
    }
    isUnparsedContextual(t, r) {
      let n = t + r.length;
      if (this.input.slice(t, n) === r) {
        let s = this.input.charCodeAt(n);
        return !(Ei(s) || (s & 64512) === 55296);
      }
      return !1;
    }
    isLookaheadContextual(t) {
      let r = this.nextTokenStart();
      return this.isUnparsedContextual(r, t);
    }
    eatContextual(t) {
      return this.isContextual(t) ? (this.next(), !0) : !1;
    }
    expectContextual(t, r) {
      if (!this.eatContextual(t)) {
        if (r != null)
          throw this.raise(r, this.state.startLoc);
        this.unexpected(null, t);
      }
    }
    canInsertSemicolon() {
      return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
      return wT(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
    }
    hasFollowingLineBreak() {
      return wT(this.input, this.state.end, this.nextTokenStart());
    }
    isLineTerminator() {
      return this.eat(13) || this.canInsertSemicolon();
    }
    semicolon(t = !0) {
      (t ? this.isLineTerminator() : this.eat(13)) || this.raise(O.MissingSemicolon, this.state.lastTokEndLoc);
    }
    expect(t, r) {
      this.eat(t) || this.unexpected(r, t);
    }
    tryParse(t, r = this.state.clone()) {
      let n = {
        node: null
      };
      try {
        let s = t((a = null) => {
          throw n.node = a, n;
        });
        if (this.state.errors.length > r.errors.length) {
          let a = this.state;
          return this.state = r, this.state.tokensLength = a.tokensLength, {
            node: s,
            error: a.errors[r.errors.length],
            thrown: !1,
            aborted: !1,
            failState: a
          };
        }
        return {
          node: s,
          error: null,
          thrown: !1,
          aborted: !1,
          failState: null
        };
      } catch (s) {
        let a = this.state;
        if (this.state = r, s instanceof SyntaxError)
          return {
            node: null,
            error: s,
            thrown: !0,
            aborted: !1,
            failState: a
          };
        if (s === n)
          return {
            node: n.node,
            error: null,
            thrown: !1,
            aborted: !0,
            failState: a
          };
        throw s;
      }
    }
    checkExpressionErrors(t, r) {
      if (!t) return !1;
      let {
        shorthandAssignLoc: n,
        doubleProtoLoc: s,
        privateKeyLoc: a,
        optionalParametersLoc: o
      } = t, l = !!n || !!s || !!o || !!a;
      if (!r)
        return l;
      n != null && this.raise(O.InvalidCoverInitializedName, n), s != null && this.raise(O.DuplicateProto, s), a != null && this.raise(O.UnexpectedPrivateField,
      a), o != null && this.unexpected(o);
    }
    isLiteralPropertyName() {
      return MT(this.state.type);
    }
    isPrivateName(t) {
      return t.type === "PrivateName";
    }
    getPrivateNameSV(t) {
      return t.id.name;
    }
    hasPropertyAsPrivateName(t) {
      return (t.type === "MemberExpression" || t.type === "OptionalMemberExpression") && this.isPrivateName(t.property);
    }
    isObjectProperty(t) {
      return t.type === "ObjectProperty";
    }
    isObjectMethod(t) {
      return t.type === "ObjectMethod";
    }
    initializeScopes(t = this.options.sourceType === "module") {
      let r = this.state.labels;
      this.state.labels = [];
      let n = this.exportedIdentifiers;
      this.exportedIdentifiers = /* @__PURE__ */ new Set();
      let s = this.inModule;
      this.inModule = t;
      let a = this.scope, o = this.getScopeHandler();
      this.scope = new o(this, t);
      let l = this.prodParam;
      this.prodParam = new ch();
      let u = this.classScope;
      this.classScope = new lh(this);
      let c = this.expressionScope;
      return this.expressionScope = new uh(this), () => {
        this.state.labels = r, this.exportedIdentifiers = n, this.inModule = s, this.scope = a, this.prodParam = l, this.classScope = u, this.
        expressionScope = c;
      };
    }
    enterInitialScopes() {
      let t = 0;
      this.inModule && (t |= 2), this.scope.enter(1), this.prodParam.enter(t);
    }
    checkDestructuringPrivate(t) {
      let {
        privateKeyLoc: r
      } = t;
      r !== null && this.expectPlugin("destructuringPrivate", r);
    }
  }, Si = class {
    static {
      i(this, "ExpressionErrors");
    }
    constructor() {
      this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
    }
  }, Pi = class {
    static {
      i(this, "Node");
    }
    constructor(t, r, n) {
      this.type = "", this.start = r, this.end = 0, this.loc = new xi(n), t != null && t.options.ranges && (this.range = [r, 0]), t != null &&
      t.filename && (this.loc.filename = t.filename);
    }
  }, Dh = Pi.prototype;
  Dh.__clone = function() {
    let e = new Pi(void 0, this.start, this.loc.start), t = Object.keys(this);
    for (let r = 0, n = t.length; r < n; r++) {
      let s = t[r];
      s !== "leadingComments" && s !== "trailingComments" && s !== "innerComments" && (e[s] = this[s]);
    }
    return e;
  };
  function OK(e) {
    return Dn(e);
  }
  i(OK, "clonePlaceholder");
  function Dn(e) {
    let {
      type: t,
      start: r,
      end: n,
      loc: s,
      range: a,
      extra: o,
      name: l
    } = e, u = Object.create(Dh);
    return u.type = t, u.start = r, u.end = n, u.loc = s, u.range = a, u.extra = o, u.name = l, t === "Placeholder" && (u.expectedNode = e.expectedNode),
    u;
  }
  i(Dn, "cloneIdentifier");
  function NK(e) {
    let {
      type: t,
      start: r,
      end: n,
      loc: s,
      range: a,
      extra: o
    } = e;
    if (t === "Placeholder")
      return OK(e);
    let l = Object.create(Dh);
    return l.type = t, l.start = r, l.end = n, l.loc = s, l.range = a, e.raw !== void 0 ? l.raw = e.raw : l.extra = o, l.value = e.value, l;
  }
  i(NK, "cloneStringLiteral");
  var fh = class extends ph {
    static {
      i(this, "NodeUtils");
    }
    startNode() {
      let t = this.state.startLoc;
      return new Pi(this, t.index, t);
    }
    startNodeAt(t) {
      return new Pi(this, t.index, t);
    }
    startNodeAtNode(t) {
      return this.startNodeAt(t.loc.start);
    }
    finishNode(t, r) {
      return this.finishNodeAt(t, r, this.state.lastTokEndLoc);
    }
    finishNodeAt(t, r, n) {
      return t.type = r, t.end = n.index, t.loc.end = n, this.options.ranges && (t.range[1] = n.index), this.options.attachComment && this.processComment(
      t), t;
    }
    resetStartLocation(t, r) {
      t.start = r.index, t.loc.start = r, this.options.ranges && (t.range[0] = r.index);
    }
    resetEndLocation(t, r = this.state.lastTokEndLoc) {
      t.end = r.index, t.loc.end = r, this.options.ranges && (t.range[1] = r.index);
    }
    resetStartLocationFromNode(t, r) {
      this.resetStartLocation(t, r.loc.start);
    }
  }, BK = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "stat\
ic", "string", "true", "typeof", "void"]), Ae = Cn`flow`({
    AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
    AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since \
they are either an ES module or they are a CommonJS module.",
    AssignReservedType: /* @__PURE__ */ i(({
      reservedType: e
    }) => `Cannot overwrite reserved type ${e}.`, "AssignReservedType"),
    DeclareClassElement: "The `declare` modifier can only appear on class fields.",
    DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
    DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
    EnumBooleanMemberNotInitialized: /* @__PURE__ */ i(({
      memberName: e,
      enumName: t
    }) => `Boolean enum members need to be initialized. Use either \`${e} = true,\` or \`${e} = false,\` in enum \`${t}\`.`, "EnumBooleanMem\
berNotInitialized"),
    EnumDuplicateMemberName: /* @__PURE__ */ i(({
      memberName: e,
      enumName: t
    }) => `Enum member names need to be unique, but the name \`${e}\` has already been used before in enum \`${t}\`.`, "EnumDuplicateMemberN\
ame"),
    EnumInconsistentMemberValues: /* @__PURE__ */ i(({
      enumName: e
    }) => `Enum \`${e}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, num\
bers, or strings) for all member initializers.`, "EnumInconsistentMemberValues"),
    EnumInvalidExplicitType: /* @__PURE__ */ i(({
      invalidEnumType: e,
      enumName: t
    }) => `Enum type \`${e}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${t}\`.`, "EnumInvalidEx\
plicitType"),
    EnumInvalidExplicitTypeUnknownSupplied: /* @__PURE__ */ i(({
      enumName: e
    }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${e}\`.`, "EnumInvalidEx\
plicitTypeUnknownSupplied"),
    EnumInvalidMemberInitializerPrimaryType: /* @__PURE__ */ i(({
      enumName: e,
      memberName: t,
      explicitType: r
    }) => `Enum \`${e}\` has type \`${r}\`, so the initializer of \`${t}\` needs to be a ${r} literal.`, "EnumInvalidMemberInitializerPrimar\
yType"),
    EnumInvalidMemberInitializerSymbolType: /* @__PURE__ */ i(({
      enumName: e,
      memberName: t
    }) => `Symbol enum members cannot be initialized. Use \`${t},\` in enum \`${e}\`.`, "EnumInvalidMemberInitializerSymbolType"),
    EnumInvalidMemberInitializerUnknownType: /* @__PURE__ */ i(({
      enumName: e,
      memberName: t
    }) => `The enum member initializer for \`${t}\` needs to be a literal (either a boolean, number, or string) in enum \`${e}\`.`, "EnumInv\
alidMemberInitializerUnknownType"),
    EnumInvalidMemberName: /* @__PURE__ */ i(({
      enumName: e,
      memberName: t,
      suggestion: r
    }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${t}\`, consider using \`${r}\`, in enum \`${e}\
\`.`, "EnumInvalidMemberName"),
    EnumNumberMemberNotInitialized: /* @__PURE__ */ i(({
      enumName: e,
      memberName: t
    }) => `Number enum members need to be initialized, e.g. \`${t} = 1\` in enum \`${e}\`.`, "EnumNumberMemberNotInitialized"),
    EnumStringMemberInconsistentlyInitialized: /* @__PURE__ */ i(({
      enumName: e
    }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${e}\`.`, "EnumStringMemb\
erInconsistentlyInitialized"),
    GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
    ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements.\
 It cannot be used with `import type` or `import typeof` statements.",
    InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
    InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
    InexactVariance: "Explicit inexact syntax cannot have variance.",
    InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
    MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
    NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
    NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
    PatternIsOptional: Object.assign({
      message: "A binding pattern parameter cannot be optional in an implementation signature."
    }, {
      reasonCode: "OptionalBindingPattern"
    }),
    SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
    SpreadVariance: "Spread properties cannot have variance.",
    ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
    ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
    ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
    ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
    ThisParamNoDefault: "The `this` parameter may not have a default value.",
    TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\
.",
    TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
    UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
    UnexpectedReservedType: /* @__PURE__ */ i(({
      reservedType: e
    }) => `Unexpected reserved type ${e}.`, "UnexpectedReservedType"),
    UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
    UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
    UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
    UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
    UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
    UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}\
`, use `async <T>() => {}`.",
    UnsupportedDeclareExportKind: /* @__PURE__ */ i(({
      unsupportedExportKind: e,
      suggestion: t
    }) => `\`declare export ${e}\` is not supported. Use \`${t}\` instead.`, "UnsupportedDeclareExportKind"),
    UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
    UnterminatedFlowComment: "Unterminated flow-comment."
  });
  function kK(e) {
    return e.type === "DeclareExportAllDeclaration" || e.type === "DeclareExportDeclaration" && (!e.declaration || e.declaration.type !== "T\
ypeAlias" && e.declaration.type !== "InterfaceDeclaration");
  }
  i(kK, "isEsModuleType");
  function OT(e) {
    return e.importKind === "type" || e.importKind === "typeof";
  }
  i(OT, "hasTypeImportKind");
  var FK = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
  };
  function jK(e, t) {
    let r = [], n = [];
    for (let s = 0; s < e.length; s++)
      (t(e[s], s, e) ? r : n).push(e[s]);
    return [r, n];
  }
  i(jK, "partition");
  var LK = /\*?\s*@((?:no)?flow)\b/, MK = /* @__PURE__ */ i((e) => class extends e {
    static {
      i(this, "FlowParserMixin");
    }
    constructor(...r) {
      super(...r), this.flowPragma = void 0;
    }
    getScopeHandler() {
      return th;
    }
    shouldParseTypes() {
      return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
    }
    finishToken(r, n) {
      r !== 134 && r !== 13 && r !== 28 && this.flowPragma === void 0 && (this.flowPragma = null), super.finishToken(r, n);
    }
    addComment(r) {
      if (this.flowPragma === void 0) {
        let n = LK.exec(r.value);
        if (n) if (n[1] === "flow")
          this.flowPragma = "flow";
        else if (n[1] === "noflow")
          this.flowPragma = "noflow";
        else
          throw new Error("Unexpected flow pragma");
      }
      super.addComment(r);
    }
    flowParseTypeInitialiser(r) {
      let n = this.state.inType;
      this.state.inType = !0, this.expect(r || 14);
      let s = this.flowParseType();
      return this.state.inType = n, s;
    }
    flowParsePredicate() {
      let r = this.startNode(), n = this.state.startLoc;
      return this.next(), this.expectContextual(110), this.state.lastTokStartLoc.index > n.index + 1 && this.raise(Ae.UnexpectedSpaceBetweenModuloChecks,
      n), this.eat(10) ? (r.value = super.parseExpression(), this.expect(11), this.finishNode(r, "DeclaredPredicate")) : this.finishNode(r, "\
InferredPredicate");
    }
    flowParseTypeAndPredicateInitialiser() {
      let r = this.state.inType;
      this.state.inType = !0, this.expect(14);
      let n = null, s = null;
      return this.match(54) ? (this.state.inType = r, s = this.flowParsePredicate()) : (n = this.flowParseType(), this.state.inType = r, this.
      match(54) && (s = this.flowParsePredicate())), [n, s];
    }
    flowParseDeclareClass(r) {
      return this.next(), this.flowParseInterfaceish(r, !0), this.finishNode(r, "DeclareClass");
    }
    flowParseDeclareFunction(r) {
      this.next();
      let n = r.id = this.parseIdentifier(), s = this.startNode(), a = this.startNode();
      this.match(47) ? s.typeParameters = this.flowParseTypeParameterDeclaration() : s.typeParameters = null, this.expect(10);
      let o = this.flowParseFunctionTypeParams();
      return s.params = o.params, s.rest = o.rest, s.this = o._this, this.expect(11), [s.returnType, r.predicate] = this.flowParseTypeAndPredicateInitialiser(),
      a.typeAnnotation = this.finishNode(s, "FunctionTypeAnnotation"), n.typeAnnotation = this.finishNode(a, "TypeAnnotation"), this.resetEndLocation(
      n), this.semicolon(), this.scope.declareName(r.id.name, 2048, r.id.loc.start), this.finishNode(r, "DeclareFunction");
    }
    flowParseDeclare(r, n) {
      if (this.match(80))
        return this.flowParseDeclareClass(r);
      if (this.match(68))
        return this.flowParseDeclareFunction(r);
      if (this.match(74))
        return this.flowParseDeclareVariable(r);
      if (this.eatContextual(127))
        return this.match(16) ? this.flowParseDeclareModuleExports(r) : (n && this.raise(Ae.NestedDeclareModule, this.state.lastTokStartLoc),
        this.flowParseDeclareModule(r));
      if (this.isContextual(130))
        return this.flowParseDeclareTypeAlias(r);
      if (this.isContextual(131))
        return this.flowParseDeclareOpaqueType(r);
      if (this.isContextual(129))
        return this.flowParseDeclareInterface(r);
      if (this.match(82))
        return this.flowParseDeclareExportDeclaration(r, n);
      this.unexpected();
    }
    flowParseDeclareVariable(r) {
      return this.next(), r.id = this.flowParseTypeAnnotatableIdentifier(!0), this.scope.declareName(r.id.name, 5, r.id.loc.start), this.semicolon(),
      this.finishNode(r, "DeclareVariable");
    }
    flowParseDeclareModule(r) {
      this.scope.enter(0), this.match(134) ? r.id = super.parseExprAtom() : r.id = this.parseIdentifier();
      let n = r.body = this.startNode(), s = n.body = [];
      for (this.expect(5); !this.match(8); ) {
        let l = this.startNode();
        this.match(83) ? (this.next(), !this.isContextual(130) && !this.match(87) && this.raise(Ae.InvalidNonTypeImportInDeclareModule, this.
        state.lastTokStartLoc), super.parseImport(l)) : (this.expectContextual(125, Ae.UnsupportedStatementInDeclareModule), l = this.flowParseDeclare(
        l, !0)), s.push(l);
      }
      this.scope.exit(), this.expect(8), this.finishNode(n, "BlockStatement");
      let a = null, o = !1;
      return s.forEach((l) => {
        kK(l) ? (a === "CommonJS" && this.raise(Ae.AmbiguousDeclareModuleKind, l), a = "ES") : l.type === "DeclareModuleExports" && (o && this.
        raise(Ae.DuplicateDeclareModuleExports, l), a === "ES" && this.raise(Ae.AmbiguousDeclareModuleKind, l), a = "CommonJS", o = !0);
      }), r.kind = a || "CommonJS", this.finishNode(r, "DeclareModule");
    }
    flowParseDeclareExportDeclaration(r, n) {
      if (this.expect(82), this.eat(65))
        return this.match(68) || this.match(80) ? r.declaration = this.flowParseDeclare(this.startNode()) : (r.declaration = this.flowParseType(),
        this.semicolon()), r.default = !0, this.finishNode(r, "DeclareExportDeclaration");
      if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !n) {
        let s = this.state.value;
        throw this.raise(Ae.UnsupportedDeclareExportKind, this.state.startLoc, {
          unsupportedExportKind: s,
          suggestion: FK[s]
        });
      }
      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131))
        return r.declaration = this.flowParseDeclare(this.startNode()), r.default = !1, this.finishNode(r, "DeclareExportDeclaration");
      if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131))
        return r = this.parseExport(r, null), r.type === "ExportNamedDeclaration" && (r.type = "ExportDeclaration", r.default = !1, delete r.
        exportKind), r.type = "Declare" + r.type, r;
      this.unexpected();
    }
    flowParseDeclareModuleExports(r) {
      return this.next(), this.expectContextual(111), r.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(r,
      "DeclareModuleExports");
    }
    flowParseDeclareTypeAlias(r) {
      this.next();
      let n = this.flowParseTypeAlias(r);
      return n.type = "DeclareTypeAlias", n;
    }
    flowParseDeclareOpaqueType(r) {
      this.next();
      let n = this.flowParseOpaqueType(r, !0);
      return n.type = "DeclareOpaqueType", n;
    }
    flowParseDeclareInterface(r) {
      return this.next(), this.flowParseInterfaceish(r, !1), this.finishNode(r, "DeclareInterface");
    }
    flowParseInterfaceish(r, n) {
      if (r.id = this.flowParseRestrictedIdentifier(!n, !0), this.scope.declareName(r.id.name, n ? 17 : 8201, r.id.loc.start), this.match(47) ?
      r.typeParameters = this.flowParseTypeParameterDeclaration() : r.typeParameters = null, r.extends = [], this.eat(81))
        do
          r.extends.push(this.flowParseInterfaceExtends());
        while (!n && this.eat(12));
      if (n) {
        if (r.implements = [], r.mixins = [], this.eatContextual(117))
          do
            r.mixins.push(this.flowParseInterfaceExtends());
          while (this.eat(12));
        if (this.eatContextual(113))
          do
            r.implements.push(this.flowParseInterfaceExtends());
          while (this.eat(12));
      }
      r.body = this.flowParseObjectType({
        allowStatic: n,
        allowExact: !1,
        allowSpread: !1,
        allowProto: n,
        allowInexact: !1
      });
    }
    flowParseInterfaceExtends() {
      let r = this.startNode();
      return r.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? r.typeParameters = this.flowParseTypeParameterInstantiation() :
      r.typeParameters = null, this.finishNode(r, "InterfaceExtends");
    }
    flowParseInterface(r) {
      return this.flowParseInterfaceish(r, !1), this.finishNode(r, "InterfaceDeclaration");
    }
    checkNotUnderscore(r) {
      r === "_" && this.raise(Ae.UnexpectedReservedUnderscore, this.state.startLoc);
    }
    checkReservedType(r, n, s) {
      BK.has(r) && this.raise(s ? Ae.AssignReservedType : Ae.UnexpectedReservedType, n, {
        reservedType: r
      });
    }
    flowParseRestrictedIdentifier(r, n) {
      return this.checkReservedType(this.state.value, this.state.startLoc, n), this.parseIdentifier(r);
    }
    flowParseTypeAlias(r) {
      return r.id = this.flowParseRestrictedIdentifier(!1, !0), this.scope.declareName(r.id.name, 8201, r.id.loc.start), this.match(47) ? r.
      typeParameters = this.flowParseTypeParameterDeclaration() : r.typeParameters = null, r.right = this.flowParseTypeInitialiser(29), this.
      semicolon(), this.finishNode(r, "TypeAlias");
    }
    flowParseOpaqueType(r, n) {
      return this.expectContextual(130), r.id = this.flowParseRestrictedIdentifier(!0, !0), this.scope.declareName(r.id.name, 8201, r.id.loc.
      start), this.match(47) ? r.typeParameters = this.flowParseTypeParameterDeclaration() : r.typeParameters = null, r.supertype = null, this.
      match(14) && (r.supertype = this.flowParseTypeInitialiser(14)), r.impltype = null, n || (r.impltype = this.flowParseTypeInitialiser(29)),
      this.semicolon(), this.finishNode(r, "OpaqueType");
    }
    flowParseTypeParameter(r = !1) {
      let n = this.state.startLoc, s = this.startNode(), a = this.flowParseVariance(), o = this.flowParseTypeAnnotatableIdentifier();
      return s.name = o.name, s.variance = a, s.bound = o.typeAnnotation, this.match(29) ? (this.eat(29), s.default = this.flowParseType()) :
      r && this.raise(Ae.MissingTypeParamDefault, n), this.finishNode(s, "TypeParameter");
    }
    flowParseTypeParameterDeclaration() {
      let r = this.state.inType, n = this.startNode();
      n.params = [], this.state.inType = !0, this.match(47) || this.match(143) ? this.next() : this.unexpected();
      let s = !1;
      do {
        let a = this.flowParseTypeParameter(s);
        n.params.push(a), a.default && (s = !0), this.match(48) || this.expect(12);
      } while (!this.match(48));
      return this.expect(48), this.state.inType = r, this.finishNode(n, "TypeParameterDeclaration");
    }
    flowParseTypeParameterInstantiation() {
      let r = this.startNode(), n = this.state.inType;
      r.params = [], this.state.inType = !0, this.expect(47);
      let s = this.state.noAnonFunctionType;
      for (this.state.noAnonFunctionType = !1; !this.match(48); )
        r.params.push(this.flowParseType()), this.match(48) || this.expect(12);
      return this.state.noAnonFunctionType = s, this.expect(48), this.state.inType = n, this.finishNode(r, "TypeParameterInstantiation");
    }
    flowParseTypeParameterInstantiationCallOrNew() {
      let r = this.startNode(), n = this.state.inType;
      for (r.params = [], this.state.inType = !0, this.expect(47); !this.match(48); )
        r.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
      return this.expect(48), this.state.inType = n, this.finishNode(r, "TypeParameterInstantiation");
    }
    flowParseInterfaceType() {
      let r = this.startNode();
      if (this.expectContextual(129), r.extends = [], this.eat(81))
        do
          r.extends.push(this.flowParseInterfaceExtends());
        while (this.eat(12));
      return r.body = this.flowParseObjectType({
        allowStatic: !1,
        allowExact: !1,
        allowSpread: !1,
        allowProto: !1,
        allowInexact: !1
      }), this.finishNode(r, "InterfaceTypeAnnotation");
    }
    flowParseObjectPropertyKey() {
      return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(!0);
    }
    flowParseObjectTypeIndexer(r, n, s) {
      return r.static = n, this.lookahead().type === 14 ? (r.id = this.flowParseObjectPropertyKey(), r.key = this.flowParseTypeInitialiser()) :
      (r.id = null, r.key = this.flowParseType()), this.expect(3), r.value = this.flowParseTypeInitialiser(), r.variance = s, this.finishNode(
      r, "ObjectTypeIndexer");
    }
    flowParseObjectTypeInternalSlot(r, n) {
      return r.static = n, r.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (r.method =
      !0, r.optional = !1, r.value = this.flowParseObjectTypeMethodish(this.startNodeAt(r.loc.start))) : (r.method = !1, this.eat(17) && (r.
      optional = !0), r.value = this.flowParseTypeInitialiser()), this.finishNode(r, "ObjectTypeInternalSlot");
    }
    flowParseObjectTypeMethodish(r) {
      for (r.params = [], r.rest = null, r.typeParameters = null, r.this = null, this.match(47) && (r.typeParameters = this.flowParseTypeParameterDeclaration()),
      this.expect(10), this.match(78) && (r.this = this.flowParseFunctionTypeParam(!0), r.this.name = null, this.match(11) || this.expect(12)); !this.
      match(11) && !this.match(21); )
        r.params.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
      return this.eat(21) && (r.rest = this.flowParseFunctionTypeParam(!1)), this.expect(11), r.returnType = this.flowParseTypeInitialiser(),
      this.finishNode(r, "FunctionTypeAnnotation");
    }
    flowParseObjectTypeCallProperty(r, n) {
      let s = this.startNode();
      return r.static = n, r.value = this.flowParseObjectTypeMethodish(s), this.finishNode(r, "ObjectTypeCallProperty");
    }
    flowParseObjectType({
      allowStatic: r,
      allowExact: n,
      allowSpread: s,
      allowProto: a,
      allowInexact: o
    }) {
      let l = this.state.inType;
      this.state.inType = !0;
      let u = this.startNode();
      u.callProperties = [], u.properties = [], u.indexers = [], u.internalSlots = [];
      let c, p, f = !1;
      for (n && this.match(6) ? (this.expect(6), c = 9, p = !0) : (this.expect(5), c = 8, p = !1), u.exact = p; !this.match(c); ) {
        let g = !1, P = null, d = null, y = this.startNode();
        if (a && this.isContextual(118)) {
          let _ = this.lookahead();
          _.type !== 14 && _.type !== 17 && (this.next(), P = this.state.startLoc, r = !1);
        }
        if (r && this.isContextual(106)) {
          let _ = this.lookahead();
          _.type !== 14 && _.type !== 17 && (this.next(), g = !0);
        }
        let E = this.flowParseVariance();
        if (this.eat(0))
          P != null && this.unexpected(P), this.eat(0) ? (E && this.unexpected(E.loc.start), u.internalSlots.push(this.flowParseObjectTypeInternalSlot(
          y, g))) : u.indexers.push(this.flowParseObjectTypeIndexer(y, g, E));
        else if (this.match(10) || this.match(47))
          P != null && this.unexpected(P), E && this.unexpected(E.loc.start), u.callProperties.push(this.flowParseObjectTypeCallProperty(y, g));
        else {
          let _ = "init";
          if (this.isContextual(99) || this.isContextual(104)) {
            let B = this.lookahead();
            MT(B.type) && (_ = this.state.value, this.next());
          }
          let k = this.flowParseObjectTypeProperty(y, g, P, E, _, s, o ?? !p);
          k === null ? (f = !0, d = this.state.lastTokStartLoc) : u.properties.push(k);
        }
        this.flowObjectTypeSemicolon(), d && !this.match(8) && !this.match(9) && this.raise(Ae.UnexpectedExplicitInexactInObject, d);
      }
      this.expect(c), s && (u.inexact = f);
      let h = this.finishNode(u, "ObjectTypeAnnotation");
      return this.state.inType = l, h;
    }
    flowParseObjectTypeProperty(r, n, s, a, o, l, u) {
      if (this.eat(21))
        return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (l ? u || this.raise(Ae.InexactInsideExact, this.state.lastTokStartLoc) :
        this.raise(Ae.InexactInsideNonObject, this.state.lastTokStartLoc), a && this.raise(Ae.InexactVariance, a), null) : (l || this.raise(
        Ae.UnexpectedSpreadType, this.state.lastTokStartLoc), s != null && this.unexpected(s), a && this.raise(Ae.SpreadVariance, a), r.argument =
        this.flowParseType(), this.finishNode(r, "ObjectTypeSpreadProperty"));
      {
        r.key = this.flowParseObjectPropertyKey(), r.static = n, r.proto = s != null, r.kind = o;
        let c = !1;
        return this.match(47) || this.match(10) ? (r.method = !0, s != null && this.unexpected(s), a && this.unexpected(a.loc.start), r.value =
        this.flowParseObjectTypeMethodish(this.startNodeAt(r.loc.start)), (o === "get" || o === "set") && this.flowCheckGetterSetterParams(r),
        !l && r.key.name === "constructor" && r.value.this && this.raise(Ae.ThisParamBannedInConstructor, r.value.this)) : (o !== "init" && this.
        unexpected(), r.method = !1, this.eat(17) && (c = !0), r.value = this.flowParseTypeInitialiser(), r.variance = a), r.optional = c, this.
        finishNode(r, "ObjectTypeProperty");
      }
    }
    flowCheckGetterSetterParams(r) {
      let n = r.kind === "get" ? 0 : 1, s = r.value.params.length + (r.value.rest ? 1 : 0);
      r.value.this && this.raise(r.kind === "get" ? Ae.GetterMayNotHaveThisParam : Ae.SetterMayNotHaveThisParam, r.value.this), s !== n && this.
      raise(r.kind === "get" ? O.BadGetterArity : O.BadSetterArity, r), r.kind === "set" && r.value.rest && this.raise(O.BadSetterRestParameter,
      r);
    }
    flowObjectTypeSemicolon() {
      !this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9) && this.unexpected();
    }
    flowParseQualifiedTypeIdentifier(r, n) {
      var s;
      (s = r) != null || (r = this.state.startLoc);
      let a = n || this.flowParseRestrictedIdentifier(!0);
      for (; this.eat(16); ) {
        let o = this.startNodeAt(r);
        o.qualification = a, o.id = this.flowParseRestrictedIdentifier(!0), a = this.finishNode(o, "QualifiedTypeIdentifier");
      }
      return a;
    }
    flowParseGenericType(r, n) {
      let s = this.startNodeAt(r);
      return s.typeParameters = null, s.id = this.flowParseQualifiedTypeIdentifier(r, n), this.match(47) && (s.typeParameters = this.flowParseTypeParameterInstantiation()),
      this.finishNode(s, "GenericTypeAnnotation");
    }
    flowParseTypeofType() {
      let r = this.startNode();
      return this.expect(87), r.argument = this.flowParsePrimaryType(), this.finishNode(r, "TypeofTypeAnnotation");
    }
    flowParseTupleType() {
      let r = this.startNode();
      for (r.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (r.types.push(this.flowParseType()), !this.match(
      3)); )
        this.expect(12);
      return this.expect(3), this.finishNode(r, "TupleTypeAnnotation");
    }
    flowParseFunctionTypeParam(r) {
      let n = null, s = !1, a = null, o = this.startNode(), l = this.lookahead(), u = this.state.type === 78;
      return l.type === 14 || l.type === 17 ? (u && !r && this.raise(Ae.ThisParamMustBeFirst, o), n = this.parseIdentifier(u), this.eat(17) &&
      (s = !0, u && this.raise(Ae.ThisParamMayNotBeOptional, o)), a = this.flowParseTypeInitialiser()) : a = this.flowParseType(), o.name = n,
      o.optional = s, o.typeAnnotation = a, this.finishNode(o, "FunctionTypeParam");
    }
    reinterpretTypeAsFunctionTypeParam(r) {
      let n = this.startNodeAt(r.loc.start);
      return n.name = null, n.optional = !1, n.typeAnnotation = r, this.finishNode(n, "FunctionTypeParam");
    }
    flowParseFunctionTypeParams(r = []) {
      let n = null, s = null;
      for (this.match(78) && (s = this.flowParseFunctionTypeParam(!0), s.name = null, this.match(11) || this.expect(12)); !this.match(11) &&
      !this.match(21); )
        r.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
      return this.eat(21) && (n = this.flowParseFunctionTypeParam(!1)), {
        params: r,
        rest: n,
        _this: s
      };
    }
    flowIdentToTypeAnnotation(r, n, s) {
      switch (s.name) {
        case "any":
          return this.finishNode(n, "AnyTypeAnnotation");
        case "bool":
        case "boolean":
          return this.finishNode(n, "BooleanTypeAnnotation");
        case "mixed":
          return this.finishNode(n, "MixedTypeAnnotation");
        case "empty":
          return this.finishNode(n, "EmptyTypeAnnotation");
        case "number":
          return this.finishNode(n, "NumberTypeAnnotation");
        case "string":
          return this.finishNode(n, "StringTypeAnnotation");
        case "symbol":
          return this.finishNode(n, "SymbolTypeAnnotation");
        default:
          return this.checkNotUnderscore(s.name), this.flowParseGenericType(r, s);
      }
    }
    flowParsePrimaryType() {
      let r = this.state.startLoc, n = this.startNode(), s, a, o = !1, l = this.state.noAnonFunctionType;
      switch (this.state.type) {
        case 5:
          return this.flowParseObjectType({
            allowStatic: !1,
            allowExact: !1,
            allowSpread: !0,
            allowProto: !1,
            allowInexact: !0
          });
        case 6:
          return this.flowParseObjectType({
            allowStatic: !1,
            allowExact: !0,
            allowSpread: !0,
            allowProto: !1,
            allowInexact: !1
          });
        case 0:
          return this.state.noAnonFunctionType = !1, a = this.flowParseTupleType(), this.state.noAnonFunctionType = l, a;
        case 47: {
          let u = this.startNode();
          return u.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), s = this.flowParseFunctionTypeParams(), u.params =
          s.params, u.rest = s.rest, u.this = s._this, this.expect(11), this.expect(19), u.returnType = this.flowParseType(), this.finishNode(
          u, "FunctionTypeAnnotation");
        }
        case 10: {
          let u = this.startNode();
          if (this.next(), !this.match(11) && !this.match(21))
            if (Ze(this.state.type) || this.match(78)) {
              let c = this.lookahead().type;
              o = c !== 17 && c !== 14;
            } else
              o = !0;
          if (o) {
            if (this.state.noAnonFunctionType = !1, a = this.flowParseType(), this.state.noAnonFunctionType = l, this.state.noAnonFunctionType ||
            !(this.match(12) || this.match(11) && this.lookahead().type === 19))
              return this.expect(11), a;
            this.eat(12);
          }
          return a ? s = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(a)]) : s = this.flowParseFunctionTypeParams(),
          u.params = s.params, u.rest = s.rest, u.this = s._this, this.expect(11), this.expect(19), u.returnType = this.flowParseType(), u.typeParameters =
          null, this.finishNode(u, "FunctionTypeAnnotation");
        }
        case 134:
          return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
        case 85:
        case 86:
          return n.value = this.match(85), this.next(), this.finishNode(n, "BooleanLiteralTypeAnnotation");
        case 53:
          if (this.state.value === "-") {
            if (this.next(), this.match(135))
              return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", n);
            if (this.match(136))
              return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", n);
            throw this.raise(Ae.UnexpectedSubtractionOperand, this.state.startLoc);
          }
          this.unexpected();
          return;
        case 135:
          return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
        case 136:
          return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
        case 88:
          return this.next(), this.finishNode(n, "VoidTypeAnnotation");
        case 84:
          return this.next(), this.finishNode(n, "NullLiteralTypeAnnotation");
        case 78:
          return this.next(), this.finishNode(n, "ThisTypeAnnotation");
        case 55:
          return this.next(), this.finishNode(n, "ExistsTypeAnnotation");
        case 87:
          return this.flowParseTypeofType();
        default:
          if (Ph(this.state.type)) {
            let u = rs(this.state.type);
            return this.next(), super.createIdentifier(n, u);
          } else if (Ze(this.state.type))
            return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(r, n, this.parseIdentifier());
      }
      this.unexpected();
    }
    flowParsePostfixType() {
      let r = this.state.startLoc, n = this.flowParsePrimaryType(), s = !1;
      for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
        let a = this.startNodeAt(r), o = this.eat(18);
        s = s || o, this.expect(0), !o && this.match(3) ? (a.elementType = n, this.next(), n = this.finishNode(a, "ArrayTypeAnnotation")) : (a.
        objectType = n, a.indexType = this.flowParseType(), this.expect(3), s ? (a.optional = o, n = this.finishNode(a, "OptionalIndexedAcce\
ssType")) : n = this.finishNode(a, "IndexedAccessType"));
      }
      return n;
    }
    flowParsePrefixType() {
      let r = this.startNode();
      return this.eat(17) ? (r.typeAnnotation = this.flowParsePrefixType(), this.finishNode(r, "NullableTypeAnnotation")) : this.flowParsePostfixType();
    }
    flowParseAnonFunctionWithoutParens() {
      let r = this.flowParsePrefixType();
      if (!this.state.noAnonFunctionType && this.eat(19)) {
        let n = this.startNodeAt(r.loc.start);
        return n.params = [this.reinterpretTypeAsFunctionTypeParam(r)], n.rest = null, n.this = null, n.returnType = this.flowParseType(), n.
        typeParameters = null, this.finishNode(n, "FunctionTypeAnnotation");
      }
      return r;
    }
    flowParseIntersectionType() {
      let r = this.startNode();
      this.eat(45);
      let n = this.flowParseAnonFunctionWithoutParens();
      for (r.types = [n]; this.eat(45); )
        r.types.push(this.flowParseAnonFunctionWithoutParens());
      return r.types.length === 1 ? n : this.finishNode(r, "IntersectionTypeAnnotation");
    }
    flowParseUnionType() {
      let r = this.startNode();
      this.eat(43);
      let n = this.flowParseIntersectionType();
      for (r.types = [n]; this.eat(43); )
        r.types.push(this.flowParseIntersectionType());
      return r.types.length === 1 ? n : this.finishNode(r, "UnionTypeAnnotation");
    }
    flowParseType() {
      let r = this.state.inType;
      this.state.inType = !0;
      let n = this.flowParseUnionType();
      return this.state.inType = r, n;
    }
    flowParseTypeOrImplicitInstantiation() {
      if (this.state.type === 132 && this.state.value === "_") {
        let r = this.state.startLoc, n = this.parseIdentifier();
        return this.flowParseGenericType(r, n);
      } else
        return this.flowParseType();
    }
    flowParseTypeAnnotation() {
      let r = this.startNode();
      return r.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(r, "TypeAnnotation");
    }
    flowParseTypeAnnotatableIdentifier(r) {
      let n = r ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
      return this.match(14) && (n.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(n)), n;
    }
    typeCastToParameter(r) {
      return r.expression.typeAnnotation = r.typeAnnotation, this.resetEndLocation(r.expression, r.typeAnnotation.loc.end), r.expression;
    }
    flowParseVariance() {
      let r = null;
      return this.match(53) ? (r = this.startNode(), this.state.value === "+" ? r.kind = "plus" : r.kind = "minus", this.next(), this.finishNode(
      r, "Variance")) : r;
    }
    parseFunctionBody(r, n, s = !1) {
      if (n) {
        this.forwardNoArrowParamsConversionAt(r, () => super.parseFunctionBody(r, !0, s));
        return;
      }
      super.parseFunctionBody(r, !1, s);
    }
    parseFunctionBodyAndFinish(r, n, s = !1) {
      if (this.match(14)) {
        let a = this.startNode();
        [a.typeAnnotation, r.predicate] = this.flowParseTypeAndPredicateInitialiser(), r.returnType = a.typeAnnotation ? this.finishNode(a, "\
TypeAnnotation") : null;
      }
      return super.parseFunctionBodyAndFinish(r, n, s);
    }
    parseStatementLike(r) {
      if (this.state.strict && this.isContextual(129)) {
        let s = this.lookahead();
        if (Vr(s.type)) {
          let a = this.startNode();
          return this.next(), this.flowParseInterface(a);
        }
      } else if (this.isContextual(126)) {
        let s = this.startNode();
        return this.next(), this.flowParseEnumDeclaration(s);
      }
      let n = super.parseStatementLike(r);
      return this.flowPragma === void 0 && !this.isValidDirective(n) && (this.flowPragma = null), n;
    }
    parseExpressionStatement(r, n, s) {
      if (n.type === "Identifier") {
        if (n.name === "declare") {
          if (this.match(80) || Ze(this.state.type) || this.match(68) || this.match(74) || this.match(82))
            return this.flowParseDeclare(r);
        } else if (Ze(this.state.type)) {
          if (n.name === "interface")
            return this.flowParseInterface(r);
          if (n.name === "type")
            return this.flowParseTypeAlias(r);
          if (n.name === "opaque")
            return this.flowParseOpaqueType(r, !1);
        }
      }
      return super.parseExpressionStatement(r, n, s);
    }
    shouldParseExportDeclaration() {
      let {
        type: r
      } = this.state;
      return r === 126 || DT(r) ? !this.state.containsEsc : super.shouldParseExportDeclaration();
    }
    isExportDefaultSpecifier() {
      let {
        type: r
      } = this.state;
      return r === 126 || DT(r) ? this.state.containsEsc : super.isExportDefaultSpecifier();
    }
    parseExportDefaultExpression() {
      if (this.isContextual(126)) {
        let r = this.startNode();
        return this.next(), this.flowParseEnumDeclaration(r);
      }
      return super.parseExportDefaultExpression();
    }
    parseConditional(r, n, s) {
      if (!this.match(17)) return r;
      if (this.state.maybeInArrowParameters) {
        let h = this.lookaheadCharCode();
        if (h === 44 || h === 61 || h === 58 || h === 41)
          return this.setOptionalParametersError(s), r;
      }
      this.expect(17);
      let a = this.state.clone(), o = this.state.noArrowAt, l = this.startNodeAt(n), {
        consequent: u,
        failed: c
      } = this.tryParseConditionalConsequent(), [p, f] = this.getArrowLikeExpressions(u);
      if (c || f.length > 0) {
        let h = [...o];
        if (f.length > 0) {
          this.state = a, this.state.noArrowAt = h;
          for (let g = 0; g < f.length; g++)
            h.push(f[g].start);
          ({
            consequent: u,
            failed: c
          } = this.tryParseConditionalConsequent()), [p, f] = this.getArrowLikeExpressions(u);
        }
        c && p.length > 1 && this.raise(Ae.AmbiguousConditionalArrow, a.startLoc), c && p.length === 1 && (this.state = a, h.push(p[0].start),
        this.state.noArrowAt = h, {
          consequent: u,
          failed: c
        } = this.tryParseConditionalConsequent());
      }
      return this.getArrowLikeExpressions(u, !0), this.state.noArrowAt = o, this.expect(14), l.test = r, l.consequent = u, l.alternate = this.
      forwardNoArrowParamsConversionAt(l, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(l, "ConditionalExpression");
    }
    tryParseConditionalConsequent() {
      this.state.noArrowParamsConversionAt.push(this.state.start);
      let r = this.parseMaybeAssignAllowIn(), n = !this.match(14);
      return this.state.noArrowParamsConversionAt.pop(), {
        consequent: r,
        failed: n
      };
    }
    getArrowLikeExpressions(r, n) {
      let s = [r], a = [];
      for (; s.length !== 0; ) {
        let o = s.pop();
        o.type === "ArrowFunctionExpression" && o.body.type !== "BlockStatement" ? (o.typeParameters || !o.returnType ? this.finishArrowValidation(
        o) : a.push(o), s.push(o.body)) : o.type === "ConditionalExpression" && (s.push(o.consequent), s.push(o.alternate));
      }
      return n ? (a.forEach((o) => this.finishArrowValidation(o)), [a, []]) : jK(a, (o) => o.params.every((l) => this.isAssignable(l, !0)));
    }
    finishArrowValidation(r) {
      var n;
      this.toAssignableList(r.params, (n = r.extra) == null ? void 0 : n.trailingCommaLoc, !1), this.scope.enter(6), super.checkParams(r, !1,
      !0), this.scope.exit();
    }
    forwardNoArrowParamsConversionAt(r, n) {
      let s;
      return this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(r.start)) ? (this.state.noArrowParamsConversionAt.push(this.
      state.start), s = n(), this.state.noArrowParamsConversionAt.pop()) : s = n(), s;
    }
    parseParenItem(r, n) {
      let s = super.parseParenItem(r, n);
      if (this.eat(17) && (s.optional = !0, this.resetEndLocation(r)), this.match(14)) {
        let a = this.startNodeAt(n);
        return a.expression = s, a.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(a, "TypeCastExpression");
      }
      return s;
    }
    assertModuleNodeAllowed(r) {
      r.type === "ImportDeclaration" && (r.importKind === "type" || r.importKind === "typeof") || r.type === "ExportNamedDeclaration" && r.exportKind ===
      "type" || r.type === "ExportAllDeclaration" && r.exportKind === "type" || super.assertModuleNodeAllowed(r);
    }
    parseExportDeclaration(r) {
      if (this.isContextual(130)) {
        r.exportKind = "type";
        let n = this.startNode();
        return this.next(), this.match(5) ? (r.specifiers = this.parseExportSpecifiers(!0), super.parseExportFrom(r), null) : this.flowParseTypeAlias(
        n);
      } else if (this.isContextual(131)) {
        r.exportKind = "type";
        let n = this.startNode();
        return this.next(), this.flowParseOpaqueType(n, !1);
      } else if (this.isContextual(129)) {
        r.exportKind = "type";
        let n = this.startNode();
        return this.next(), this.flowParseInterface(n);
      } else if (this.isContextual(126)) {
        r.exportKind = "value";
        let n = this.startNode();
        return this.next(), this.flowParseEnumDeclaration(n);
      } else
        return super.parseExportDeclaration(r);
    }
    eatExportStar(r) {
      return super.eatExportStar(r) ? !0 : this.isContextual(130) && this.lookahead().type === 55 ? (r.exportKind = "type", this.next(), this.
      next(), !0) : !1;
    }
    maybeParseExportNamespaceSpecifier(r) {
      let {
        startLoc: n
      } = this.state, s = super.maybeParseExportNamespaceSpecifier(r);
      return s && r.exportKind === "type" && this.unexpected(n), s;
    }
    parseClassId(r, n, s) {
      super.parseClassId(r, n, s), this.match(47) && (r.typeParameters = this.flowParseTypeParameterDeclaration());
    }
    parseClassMember(r, n, s) {
      let {
        startLoc: a
      } = this.state;
      if (this.isContextual(125)) {
        if (super.parseClassMemberFromModifier(r, n))
          return;
        n.declare = !0;
      }
      super.parseClassMember(r, n, s), n.declare && (n.type !== "ClassProperty" && n.type !== "ClassPrivateProperty" && n.type !== "Property\
Definition" ? this.raise(Ae.DeclareClassElement, a) : n.value && this.raise(Ae.DeclareClassFieldInitializer, n.value));
    }
    isIterator(r) {
      return r === "iterator" || r === "asyncIterator";
    }
    readIterator() {
      let r = super.readWord1(), n = "@@" + r;
      (!this.isIterator(r) || !this.state.inType) && this.raise(O.InvalidIdentifier, this.state.curPosition(), {
        identifierName: n
      }), this.finishToken(132, n);
    }
    getTokenFromCode(r) {
      let n = this.input.charCodeAt(this.state.pos + 1);
      r === 123 && n === 124 ? this.finishOp(6, 2) : this.state.inType && (r === 62 || r === 60) ? this.finishOp(r === 62 ? 48 : 47, 1) : this.
      state.inType && r === 63 ? n === 46 ? this.finishOp(18, 2) : this.finishOp(17, 1) : bK(r, n, this.input.charCodeAt(this.state.pos + 2)) ?
      (this.state.pos += 2, this.readIterator()) : super.getTokenFromCode(r);
    }
    isAssignable(r, n) {
      return r.type === "TypeCastExpression" ? this.isAssignable(r.expression, n) : super.isAssignable(r, n);
    }
    toAssignable(r, n = !1) {
      !n && r.type === "AssignmentExpression" && r.left.type === "TypeCastExpression" && (r.left = this.typeCastToParameter(r.left)), super.
      toAssignable(r, n);
    }
    toAssignableList(r, n, s) {
      for (let a = 0; a < r.length; a++) {
        let o = r[a];
        o?.type === "TypeCastExpression" && (r[a] = this.typeCastToParameter(o));
      }
      super.toAssignableList(r, n, s);
    }
    toReferencedList(r, n) {
      for (let a = 0; a < r.length; a++) {
        var s;
        let o = r[a];
        o && o.type === "TypeCastExpression" && !((s = o.extra) != null && s.parenthesized) && (r.length > 1 || !n) && this.raise(Ae.TypeCastInPattern,
        o.typeAnnotation);
      }
      return r;
    }
    parseArrayLike(r, n, s, a) {
      let o = super.parseArrayLike(r, n, s, a);
      return n && !this.state.maybeInArrowParameters && this.toReferencedList(o.elements), o;
    }
    isValidLVal(r, n, s) {
      return r === "TypeCastExpression" || super.isValidLVal(r, n, s);
    }
    parseClassProperty(r) {
      return this.match(14) && (r.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(r);
    }
    parseClassPrivateProperty(r) {
      return this.match(14) && (r.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(r);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(14) || super.isClassProperty();
    }
    isNonstaticConstructor(r) {
      return !this.match(14) && super.isNonstaticConstructor(r);
    }
    pushClassMethod(r, n, s, a, o, l) {
      if (n.variance && this.unexpected(n.variance.loc.start), delete n.variance, this.match(47) && (n.typeParameters = this.flowParseTypeParameterDeclaration()),
      super.pushClassMethod(r, n, s, a, o, l), n.params && o) {
        let u = n.params;
        u.length > 0 && this.isThisParam(u[0]) && this.raise(Ae.ThisParamBannedInConstructor, n);
      } else if (n.type === "MethodDefinition" && o && n.value.params) {
        let u = n.value.params;
        u.length > 0 && this.isThisParam(u[0]) && this.raise(Ae.ThisParamBannedInConstructor, n);
      }
    }
    pushClassPrivateMethod(r, n, s, a) {
      n.variance && this.unexpected(n.variance.loc.start), delete n.variance, this.match(47) && (n.typeParameters = this.flowParseTypeParameterDeclaration()),
      super.pushClassPrivateMethod(r, n, s, a);
    }
    parseClassSuper(r) {
      if (super.parseClassSuper(r), r.superClass && this.match(47) && (r.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.
      isContextual(113)) {
        this.next();
        let n = r.implements = [];
        do {
          let s = this.startNode();
          s.id = this.flowParseRestrictedIdentifier(!0), this.match(47) ? s.typeParameters = this.flowParseTypeParameterInstantiation() : s.
          typeParameters = null, n.push(this.finishNode(s, "ClassImplements"));
        } while (this.eat(12));
      }
    }
    checkGetterSetterParams(r) {
      super.checkGetterSetterParams(r);
      let n = this.getObjectOrClassMethodParams(r);
      if (n.length > 0) {
        let s = n[0];
        this.isThisParam(s) && r.kind === "get" ? this.raise(Ae.GetterMayNotHaveThisParam, s) : this.isThisParam(s) && this.raise(Ae.SetterMayNotHaveThisParam,
        s);
      }
    }
    parsePropertyNamePrefixOperator(r) {
      r.variance = this.flowParseVariance();
    }
    parseObjPropValue(r, n, s, a, o, l, u) {
      r.variance && this.unexpected(r.variance.loc.start), delete r.variance;
      let c;
      this.match(47) && !l && (c = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
      let p = super.parseObjPropValue(r, n, s, a, o, l, u);
      return c && ((p.value || p).typeParameters = c), p;
    }
    parseFunctionParamType(r) {
      return this.eat(17) && (r.type !== "Identifier" && this.raise(Ae.PatternIsOptional, r), this.isThisParam(r) && this.raise(Ae.ThisParamMayNotBeOptional,
      r), r.optional = !0), this.match(14) ? r.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(r) && this.raise(Ae.ThisParamAnnotationRequired,
      r), this.match(29) && this.isThisParam(r) && this.raise(Ae.ThisParamNoDefault, r), this.resetEndLocation(r), r;
    }
    parseMaybeDefault(r, n) {
      let s = super.parseMaybeDefault(r, n);
      return s.type === "AssignmentPattern" && s.typeAnnotation && s.right.start < s.typeAnnotation.start && this.raise(Ae.TypeBeforeInitializer,
      s.typeAnnotation), s;
    }
    checkImportReflection(r) {
      super.checkImportReflection(r), r.module && r.importKind !== "value" && this.raise(Ae.ImportReflectionHasImportType, r.specifiers[0].loc.
      start);
    }
    parseImportSpecifierLocal(r, n, s) {
      n.local = OT(r) ? this.flowParseRestrictedIdentifier(!0, !0) : this.parseIdentifier(), r.specifiers.push(this.finishImportSpecifier(n,
      s));
    }
    isPotentialImportPhase(r) {
      if (super.isPotentialImportPhase(r)) return !0;
      if (this.isContextual(130)) {
        if (!r) return !0;
        let n = this.lookaheadCharCode();
        return n === 123 || n === 42;
      }
      return !r && this.isContextual(87);
    }
    applyImportPhase(r, n, s, a) {
      if (super.applyImportPhase(r, n, s, a), n) {
        if (!s && this.match(65))
          return;
        r.exportKind = s === "type" ? s : "value";
      } else
        s === "type" && this.match(55) && this.unexpected(), r.importKind = s === "type" || s === "typeof" ? s : "value";
    }
    parseImportSpecifier(r, n, s, a, o) {
      let l = r.imported, u = null;
      l.type === "Identifier" && (l.name === "type" ? u = "type" : l.name === "typeof" && (u = "typeof"));
      let c = !1;
      if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
        let f = this.parseIdentifier(!0);
        u !== null && !Vr(this.state.type) ? (r.imported = f, r.importKind = u, r.local = Dn(f)) : (r.imported = l, r.importKind = null, r.local =
        this.parseIdentifier());
      } else {
        if (u !== null && Vr(this.state.type))
          r.imported = this.parseIdentifier(!0), r.importKind = u;
        else {
          if (n)
            throw this.raise(O.ImportBindingIsString, r, {
              importName: l.value
            });
          r.imported = l, r.importKind = null;
        }
        this.eatContextual(93) ? r.local = this.parseIdentifier() : (c = !0, r.local = Dn(r.imported));
      }
      let p = OT(r);
      return s && p && this.raise(Ae.ImportTypeShorthandOnlyInPureImport, r), (s || p) && this.checkReservedType(r.local.name, r.local.loc.start,
      !0), c && !s && !p && this.checkReservedWord(r.local.name, r.loc.start, !0, !0), this.finishImportSpecifier(r, "ImportSpecifier");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 78:
          return this.parseIdentifier(!0);
        default:
          return super.parseBindingAtom();
      }
    }
    parseFunctionParams(r, n) {
      let s = r.kind;
      s !== "get" && s !== "set" && this.match(47) && (r.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(
      r, n);
    }
    parseVarId(r, n) {
      super.parseVarId(r, n), this.match(14) && (r.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(r.id));
    }
    parseAsyncArrowFromCallExpression(r, n) {
      if (this.match(14)) {
        let s = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = !0, r.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = s;
      }
      return super.parseAsyncArrowFromCallExpression(r, n);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    parseMaybeAssign(r, n) {
      var s;
      let a = null, o;
      if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
        if (a = this.state.clone(), o = this.tryParse(() => super.parseMaybeAssign(r, n), a), !o.error) return o.node;
        let {
          context: c
        } = this.state, p = c[c.length - 1];
        (p === st.j_oTag || p === st.j_expr) && c.pop();
      }
      if ((s = o) != null && s.error || this.match(47)) {
        var l, u;
        a = a || this.state.clone();
        let c, p = this.tryParse((h) => {
          var g;
          c = this.flowParseTypeParameterDeclaration();
          let P = this.forwardNoArrowParamsConversionAt(c, () => {
            let y = super.parseMaybeAssign(r, n);
            return this.resetStartLocationFromNode(y, c), y;
          });
          (g = P.extra) != null && g.parenthesized && h();
          let d = this.maybeUnwrapTypeCastExpression(P);
          return d.type !== "ArrowFunctionExpression" && h(), d.typeParameters = c, this.resetStartLocationFromNode(d, c), P;
        }, a), f = null;
        if (p.node && this.maybeUnwrapTypeCastExpression(p.node).type === "ArrowFunctionExpression") {
          if (!p.error && !p.aborted)
            return p.node.async && this.raise(Ae.UnexpectedTypeParameterBeforeAsyncArrowFunction, c), p.node;
          f = p.node;
        }
        if ((l = o) != null && l.node)
          return this.state = o.failState, o.node;
        if (f)
          return this.state = p.failState, f;
        throw (u = o) != null && u.thrown ? o.error : p.thrown ? p.error : this.raise(Ae.UnexpectedTokenAfterTypeParameter, c);
      }
      return super.parseMaybeAssign(r, n);
    }
    parseArrow(r) {
      if (this.match(14)) {
        let n = this.tryParse(() => {
          let s = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = !0;
          let a = this.startNode();
          return [a.typeAnnotation, r.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = s, this.canInsertSemicolon() &&
          this.unexpected(), this.match(19) || this.unexpected(), a;
        });
        if (n.thrown) return null;
        n.error && (this.state = n.failState), r.returnType = n.node.typeAnnotation ? this.finishNode(n.node, "TypeAnnotation") : null;
      }
      return super.parseArrow(r);
    }
    shouldParseArrow(r) {
      return this.match(14) || super.shouldParseArrow(r);
    }
    setArrowFunctionParameters(r, n) {
      this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(r.start)) ? r.params = n : super.setArrowFunctionParameters(r, n);
    }
    checkParams(r, n, s, a = !0) {
      if (!(s && this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(r.start)))) {
        for (let o = 0; o < r.params.length; o++)
          this.isThisParam(r.params[o]) && o > 0 && this.raise(Ae.ThisParamMustBeFirst, r.params[o]);
        super.checkParams(r, n, s, a);
      }
    }
    parseParenAndDistinguishExpression(r) {
      return super.parseParenAndDistinguishExpression(r && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
    }
    parseSubscripts(r, n, s) {
      if (r.type === "Identifier" && r.name === "async" && this.state.noArrowAt.includes(n.index)) {
        this.next();
        let a = this.startNodeAt(n);
        a.callee = r, a.arguments = super.parseCallExpressionArguments(11), r = this.finishNode(a, "CallExpression");
      } else if (r.type === "Identifier" && r.name === "async" && this.match(47)) {
        let a = this.state.clone(), o = this.tryParse((u) => this.parseAsyncArrowWithTypeParameters(n) || u(), a);
        if (!o.error && !o.aborted) return o.node;
        let l = this.tryParse(() => super.parseSubscripts(r, n, s), a);
        if (l.node && !l.error) return l.node;
        if (o.node)
          return this.state = o.failState, o.node;
        if (l.node)
          return this.state = l.failState, l.node;
        throw o.error || l.error;
      }
      return super.parseSubscripts(r, n, s);
    }
    parseSubscript(r, n, s, a) {
      if (this.match(18) && this.isLookaheadToken_lt()) {
        if (a.optionalChainMember = !0, s)
          return a.stop = !0, r;
        this.next();
        let o = this.startNodeAt(n);
        return o.callee = r, o.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), o.arguments = this.parseCallExpressionArguments(
        11), o.optional = !0, this.finishCallExpression(o, !0);
      } else if (!s && this.shouldParseTypes() && this.match(47)) {
        let o = this.startNodeAt(n);
        o.callee = r;
        let l = this.tryParse(() => (o.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), o.arguments = super.
        parseCallExpressionArguments(11), a.optionalChainMember && (o.optional = !1), this.finishCallExpression(o, a.optionalChainMember)));
        if (l.node)
          return l.error && (this.state = l.failState), l.node;
      }
      return super.parseSubscript(r, n, s, a);
    }
    parseNewCallee(r) {
      super.parseNewCallee(r);
      let n = null;
      this.shouldParseTypes() && this.match(47) && (n = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), r.typeArguments =
      n;
    }
    parseAsyncArrowWithTypeParameters(r) {
      let n = this.startNodeAt(r);
      if (this.parseFunctionParams(n, !1), !!this.parseArrow(n))
        return super.parseArrowExpression(n, void 0, !0);
    }
    readToken_mult_modulo(r) {
      let n = this.input.charCodeAt(this.state.pos + 1);
      if (r === 42 && n === 47 && this.state.hasFlowComment) {
        this.state.hasFlowComment = !1, this.state.pos += 2, this.nextToken();
        return;
      }
      super.readToken_mult_modulo(r);
    }
    readToken_pipe_amp(r) {
      let n = this.input.charCodeAt(this.state.pos + 1);
      if (r === 124 && n === 125) {
        this.finishOp(9, 2);
        return;
      }
      super.readToken_pipe_amp(r);
    }
    parseTopLevel(r, n) {
      let s = super.parseTopLevel(r, n);
      return this.state.hasFlowComment && this.raise(Ae.UnterminatedFlowComment, this.state.curPosition()), s;
    }
    skipBlockComment() {
      if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
        if (this.state.hasFlowComment)
          throw this.raise(Ae.NestedFlowComment, this.state.startLoc);
        this.hasFlowCommentCompletion();
        let r = this.skipFlowComment();
        r && (this.state.pos += r, this.state.hasFlowComment = !0);
        return;
      }
      return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
    }
    skipFlowComment() {
      let {
        pos: r
      } = this.state, n = 2;
      for (; [32, 9].includes(this.input.charCodeAt(r + n)); )
        n++;
      let s = this.input.charCodeAt(n + r), a = this.input.charCodeAt(n + r + 1);
      return s === 58 && a === 58 ? n + 2 : this.input.slice(n + r, n + r + 12) === "flow-include" ? n + 12 : s === 58 && a !== 58 ? n : !1;
    }
    hasFlowCommentCompletion() {
      if (this.input.indexOf("*/", this.state.pos) === -1)
        throw this.raise(O.UnterminatedComment, this.state.curPosition());
    }
    flowEnumErrorBooleanMemberNotInitialized(r, {
      enumName: n,
      memberName: s
    }) {
      this.raise(Ae.EnumBooleanMemberNotInitialized, r, {
        memberName: s,
        enumName: n
      });
    }
    flowEnumErrorInvalidMemberInitializer(r, n) {
      return this.raise(n.explicitType ? n.explicitType === "symbol" ? Ae.EnumInvalidMemberInitializerSymbolType : Ae.EnumInvalidMemberInitializerPrimaryType :
      Ae.EnumInvalidMemberInitializerUnknownType, r, n);
    }
    flowEnumErrorNumberMemberNotInitialized(r, n) {
      this.raise(Ae.EnumNumberMemberNotInitialized, r, n);
    }
    flowEnumErrorStringMemberInconsistentlyInitialized(r, n) {
      this.raise(Ae.EnumStringMemberInconsistentlyInitialized, r, n);
    }
    flowEnumMemberInit() {
      let r = this.state.startLoc, n = /* @__PURE__ */ i(() => this.match(12) || this.match(8), "endOfInit");
      switch (this.state.type) {
        case 135: {
          let s = this.parseNumericLiteral(this.state.value);
          return n() ? {
            type: "number",
            loc: s.loc.start,
            value: s
          } : {
            type: "invalid",
            loc: r
          };
        }
        case 134: {
          let s = this.parseStringLiteral(this.state.value);
          return n() ? {
            type: "string",
            loc: s.loc.start,
            value: s
          } : {
            type: "invalid",
            loc: r
          };
        }
        case 85:
        case 86: {
          let s = this.parseBooleanLiteral(this.match(85));
          return n() ? {
            type: "boolean",
            loc: s.loc.start,
            value: s
          } : {
            type: "invalid",
            loc: r
          };
        }
        default:
          return {
            type: "invalid",
            loc: r
          };
      }
    }
    flowEnumMemberRaw() {
      let r = this.state.startLoc, n = this.parseIdentifier(!0), s = this.eat(29) ? this.flowEnumMemberInit() : {
        type: "none",
        loc: r
      };
      return {
        id: n,
        init: s
      };
    }
    flowEnumCheckExplicitTypeMismatch(r, n, s) {
      let {
        explicitType: a
      } = n;
      a !== null && a !== s && this.flowEnumErrorInvalidMemberInitializer(r, n);
    }
    flowEnumMembers({
      enumName: r,
      explicitType: n
    }) {
      let s = /* @__PURE__ */ new Set(), a = {
        booleanMembers: [],
        numberMembers: [],
        stringMembers: [],
        defaultedMembers: []
      }, o = !1;
      for (; !this.match(8); ) {
        if (this.eat(21)) {
          o = !0;
          break;
        }
        let l = this.startNode(), {
          id: u,
          init: c
        } = this.flowEnumMemberRaw(), p = u.name;
        if (p === "")
          continue;
        /^[a-z]/.test(p) && this.raise(Ae.EnumInvalidMemberName, u, {
          memberName: p,
          suggestion: p[0].toUpperCase() + p.slice(1),
          enumName: r
        }), s.has(p) && this.raise(Ae.EnumDuplicateMemberName, u, {
          memberName: p,
          enumName: r
        }), s.add(p);
        let f = {
          enumName: r,
          explicitType: n,
          memberName: p
        };
        switch (l.id = u, c.type) {
          case "boolean": {
            this.flowEnumCheckExplicitTypeMismatch(c.loc, f, "boolean"), l.init = c.value, a.booleanMembers.push(this.finishNode(l, "EnumBoo\
leanMember"));
            break;
          }
          case "number": {
            this.flowEnumCheckExplicitTypeMismatch(c.loc, f, "number"), l.init = c.value, a.numberMembers.push(this.finishNode(l, "EnumNumbe\
rMember"));
            break;
          }
          case "string": {
            this.flowEnumCheckExplicitTypeMismatch(c.loc, f, "string"), l.init = c.value, a.stringMembers.push(this.finishNode(l, "EnumStrin\
gMember"));
            break;
          }
          case "invalid":
            throw this.flowEnumErrorInvalidMemberInitializer(c.loc, f);
          case "none":
            switch (n) {
              case "boolean":
                this.flowEnumErrorBooleanMemberNotInitialized(c.loc, f);
                break;
              case "number":
                this.flowEnumErrorNumberMemberNotInitialized(c.loc, f);
                break;
              default:
                a.defaultedMembers.push(this.finishNode(l, "EnumDefaultedMember"));
            }
        }
        this.match(8) || this.expect(12);
      }
      return {
        members: a,
        hasUnknownMembers: o
      };
    }
    flowEnumStringMembers(r, n, {
      enumName: s
    }) {
      if (r.length === 0)
        return n;
      if (n.length === 0)
        return r;
      if (n.length > r.length) {
        for (let a of r)
          this.flowEnumErrorStringMemberInconsistentlyInitialized(a, {
            enumName: s
          });
        return n;
      } else {
        for (let a of n)
          this.flowEnumErrorStringMemberInconsistentlyInitialized(a, {
            enumName: s
          });
        return r;
      }
    }
    flowEnumParseExplicitType({
      enumName: r
    }) {
      if (!this.eatContextual(102)) return null;
      if (!Ze(this.state.type))
        throw this.raise(Ae.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {
          enumName: r
        });
      let {
        value: n
      } = this.state;
      return this.next(), n !== "boolean" && n !== "number" && n !== "string" && n !== "symbol" && this.raise(Ae.EnumInvalidExplicitType, this.
      state.startLoc, {
        enumName: r,
        invalidEnumType: n
      }), n;
    }
    flowEnumBody(r, n) {
      let s = n.name, a = n.loc.start, o = this.flowEnumParseExplicitType({
        enumName: s
      });
      this.expect(5);
      let {
        members: l,
        hasUnknownMembers: u
      } = this.flowEnumMembers({
        enumName: s,
        explicitType: o
      });
      switch (r.hasUnknownMembers = u, o) {
        case "boolean":
          return r.explicitType = !0, r.members = l.booleanMembers, this.expect(8), this.finishNode(r, "EnumBooleanBody");
        case "number":
          return r.explicitType = !0, r.members = l.numberMembers, this.expect(8), this.finishNode(r, "EnumNumberBody");
        case "string":
          return r.explicitType = !0, r.members = this.flowEnumStringMembers(l.stringMembers, l.defaultedMembers, {
            enumName: s
          }), this.expect(8), this.finishNode(r, "EnumStringBody");
        case "symbol":
          return r.members = l.defaultedMembers, this.expect(8), this.finishNode(r, "EnumSymbolBody");
        default: {
          let c = /* @__PURE__ */ i(() => (r.members = [], this.expect(8), this.finishNode(r, "EnumStringBody")), "empty");
          r.explicitType = !1;
          let p = l.booleanMembers.length, f = l.numberMembers.length, h = l.stringMembers.length, g = l.defaultedMembers.length;
          if (!p && !f && !h && !g)
            return c();
          if (!p && !f)
            return r.members = this.flowEnumStringMembers(l.stringMembers, l.defaultedMembers, {
              enumName: s
            }), this.expect(8), this.finishNode(r, "EnumStringBody");
          if (!f && !h && p >= g) {
            for (let P of l.defaultedMembers)
              this.flowEnumErrorBooleanMemberNotInitialized(P.loc.start, {
                enumName: s,
                memberName: P.id.name
              });
            return r.members = l.booleanMembers, this.expect(8), this.finishNode(r, "EnumBooleanBody");
          } else if (!p && !h && f >= g) {
            for (let P of l.defaultedMembers)
              this.flowEnumErrorNumberMemberNotInitialized(P.loc.start, {
                enumName: s,
                memberName: P.id.name
              });
            return r.members = l.numberMembers, this.expect(8), this.finishNode(r, "EnumNumberBody");
          } else
            return this.raise(Ae.EnumInconsistentMemberValues, a, {
              enumName: s
            }), c();
        }
      }
    }
    flowParseEnumDeclaration(r) {
      let n = this.parseIdentifier();
      return r.id = n, r.body = this.flowEnumBody(this.startNode(), n), this.finishNode(r, "EnumDeclaration");
    }
    isLookaheadToken_lt() {
      let r = this.nextTokenStart();
      if (this.input.charCodeAt(r) === 60) {
        let n = this.input.charCodeAt(r + 1);
        return n !== 60 && n !== 61;
      }
      return !1;
    }
    maybeUnwrapTypeCastExpression(r) {
      return r.type === "TypeCastExpression" ? r.expression : r;
    }
  }, "flow"), RK = {
    __proto__: null,
    quot: '"',
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: "\xA0",
    iexcl: "\xA1",
    cent: "\xA2",
    pound: "\xA3",
    curren: "\xA4",
    yen: "\xA5",
    brvbar: "\xA6",
    sect: "\xA7",
    uml: "\xA8",
    copy: "\xA9",
    ordf: "\xAA",
    laquo: "\xAB",
    not: "\xAC",
    shy: "\xAD",
    reg: "\xAE",
    macr: "\xAF",
    deg: "\xB0",
    plusmn: "\xB1",
    sup2: "\xB2",
    sup3: "\xB3",
    acute: "\xB4",
    micro: "\xB5",
    para: "\xB6",
    middot: "\xB7",
    cedil: "\xB8",
    sup1: "\xB9",
    ordm: "\xBA",
    raquo: "\xBB",
    frac14: "\xBC",
    frac12: "\xBD",
    frac34: "\xBE",
    iquest: "\xBF",
    Agrave: "\xC0",
    Aacute: "\xC1",
    Acirc: "\xC2",
    Atilde: "\xC3",
    Auml: "\xC4",
    Aring: "\xC5",
    AElig: "\xC6",
    Ccedil: "\xC7",
    Egrave: "\xC8",
    Eacute: "\xC9",
    Ecirc: "\xCA",
    Euml: "\xCB",
    Igrave: "\xCC",
    Iacute: "\xCD",
    Icirc: "\xCE",
    Iuml: "\xCF",
    ETH: "\xD0",
    Ntilde: "\xD1",
    Ograve: "\xD2",
    Oacute: "\xD3",
    Ocirc: "\xD4",
    Otilde: "\xD5",
    Ouml: "\xD6",
    times: "\xD7",
    Oslash: "\xD8",
    Ugrave: "\xD9",
    Uacute: "\xDA",
    Ucirc: "\xDB",
    Uuml: "\xDC",
    Yacute: "\xDD",
    THORN: "\xDE",
    szlig: "\xDF",
    agrave: "\xE0",
    aacute: "\xE1",
    acirc: "\xE2",
    atilde: "\xE3",
    auml: "\xE4",
    aring: "\xE5",
    aelig: "\xE6",
    ccedil: "\xE7",
    egrave: "\xE8",
    eacute: "\xE9",
    ecirc: "\xEA",
    euml: "\xEB",
    igrave: "\xEC",
    iacute: "\xED",
    icirc: "\xEE",
    iuml: "\xEF",
    eth: "\xF0",
    ntilde: "\xF1",
    ograve: "\xF2",
    oacute: "\xF3",
    ocirc: "\xF4",
    otilde: "\xF5",
    ouml: "\xF6",
    divide: "\xF7",
    oslash: "\xF8",
    ugrave: "\xF9",
    uacute: "\xFA",
    ucirc: "\xFB",
    uuml: "\xFC",
    yacute: "\xFD",
    thorn: "\xFE",
    yuml: "\xFF",
    OElig: "\u0152",
    oelig: "\u0153",
    Scaron: "\u0160",
    scaron: "\u0161",
    Yuml: "\u0178",
    fnof: "\u0192",
    circ: "\u02C6",
    tilde: "\u02DC",
    Alpha: "\u0391",
    Beta: "\u0392",
    Gamma: "\u0393",
    Delta: "\u0394",
    Epsilon: "\u0395",
    Zeta: "\u0396",
    Eta: "\u0397",
    Theta: "\u0398",
    Iota: "\u0399",
    Kappa: "\u039A",
    Lambda: "\u039B",
    Mu: "\u039C",
    Nu: "\u039D",
    Xi: "\u039E",
    Omicron: "\u039F",
    Pi: "\u03A0",
    Rho: "\u03A1",
    Sigma: "\u03A3",
    Tau: "\u03A4",
    Upsilon: "\u03A5",
    Phi: "\u03A6",
    Chi: "\u03A7",
    Psi: "\u03A8",
    Omega: "\u03A9",
    alpha: "\u03B1",
    beta: "\u03B2",
    gamma: "\u03B3",
    delta: "\u03B4",
    epsilon: "\u03B5",
    zeta: "\u03B6",
    eta: "\u03B7",
    theta: "\u03B8",
    iota: "\u03B9",
    kappa: "\u03BA",
    lambda: "\u03BB",
    mu: "\u03BC",
    nu: "\u03BD",
    xi: "\u03BE",
    omicron: "\u03BF",
    pi: "\u03C0",
    rho: "\u03C1",
    sigmaf: "\u03C2",
    sigma: "\u03C3",
    tau: "\u03C4",
    upsilon: "\u03C5",
    phi: "\u03C6",
    chi: "\u03C7",
    psi: "\u03C8",
    omega: "\u03C9",
    thetasym: "\u03D1",
    upsih: "\u03D2",
    piv: "\u03D6",
    ensp: "\u2002",
    emsp: "\u2003",
    thinsp: "\u2009",
    zwnj: "\u200C",
    zwj: "\u200D",
    lrm: "\u200E",
    rlm: "\u200F",
    ndash: "\u2013",
    mdash: "\u2014",
    lsquo: "\u2018",
    rsquo: "\u2019",
    sbquo: "\u201A",
    ldquo: "\u201C",
    rdquo: "\u201D",
    bdquo: "\u201E",
    dagger: "\u2020",
    Dagger: "\u2021",
    bull: "\u2022",
    hellip: "\u2026",
    permil: "\u2030",
    prime: "\u2032",
    Prime: "\u2033",
    lsaquo: "\u2039",
    rsaquo: "\u203A",
    oline: "\u203E",
    frasl: "\u2044",
    euro: "\u20AC",
    image: "\u2111",
    weierp: "\u2118",
    real: "\u211C",
    trade: "\u2122",
    alefsym: "\u2135",
    larr: "\u2190",
    uarr: "\u2191",
    rarr: "\u2192",
    darr: "\u2193",
    harr: "\u2194",
    crarr: "\u21B5",
    lArr: "\u21D0",
    uArr: "\u21D1",
    rArr: "\u21D2",
    dArr: "\u21D3",
    hArr: "\u21D4",
    forall: "\u2200",
    part: "\u2202",
    exist: "\u2203",
    empty: "\u2205",
    nabla: "\u2207",
    isin: "\u2208",
    notin: "\u2209",
    ni: "\u220B",
    prod: "\u220F",
    sum: "\u2211",
    minus: "\u2212",
    lowast: "\u2217",
    radic: "\u221A",
    prop: "\u221D",
    infin: "\u221E",
    ang: "\u2220",
    and: "\u2227",
    or: "\u2228",
    cap: "\u2229",
    cup: "\u222A",
    int: "\u222B",
    there4: "\u2234",
    sim: "\u223C",
    cong: "\u2245",
    asymp: "\u2248",
    ne: "\u2260",
    equiv: "\u2261",
    le: "\u2264",
    ge: "\u2265",
    sub: "\u2282",
    sup: "\u2283",
    nsub: "\u2284",
    sube: "\u2286",
    supe: "\u2287",
    oplus: "\u2295",
    otimes: "\u2297",
    perp: "\u22A5",
    sdot: "\u22C5",
    lceil: "\u2308",
    rceil: "\u2309",
    lfloor: "\u230A",
    rfloor: "\u230B",
    lang: "\u2329",
    rang: "\u232A",
    loz: "\u25CA",
    spades: "\u2660",
    clubs: "\u2663",
    hearts: "\u2665",
    diams: "\u2666"
  }, Bs = Cn`jsx`({
    AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
    MissingClosingTagElement: /* @__PURE__ */ i(({
      openingTagName: e
    }) => `Expected corresponding JSX closing tag for <${e}>.`, "MissingClosingTagElement"),
    MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
    UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
    UnexpectedToken: /* @__PURE__ */ i(({
      unexpected: e,
      HTMLEntity: t
    }) => `Unexpected token \`${e}\`. Did you mean \`${t}\` or \`{'${e}'}\`?`, "UnexpectedToken"),
    UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
    UnterminatedJsxContent: "Unterminated JSX contents.",
    UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
  });
  function ts(e) {
    return e ? e.type === "JSXOpeningFragment" || e.type === "JSXClosingFragment" : !1;
  }
  i(ts, "isFragment");
  function bi(e) {
    if (e.type === "JSXIdentifier")
      return e.name;
    if (e.type === "JSXNamespacedName")
      return e.namespace.name + ":" + e.name.name;
    if (e.type === "JSXMemberExpression")
      return bi(e.object) + "." + bi(e.property);
    throw new Error("Node had unexpected type: " + e.type);
  }
  i(bi, "getQualifiedJSXName");
  var qK = /* @__PURE__ */ i((e) => class extends e {
    static {
      i(this, "JSXParserMixin");
    }
    jsxReadToken() {
      let r = "", n = this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length)
          throw this.raise(Bs.UnterminatedJsxContent, this.state.startLoc);
        let s = this.input.charCodeAt(this.state.pos);
        switch (s) {
          case 60:
          case 123:
            if (this.state.pos === this.state.start) {
              s === 60 && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(143)) : super.getTokenFromCode(s);
              return;
            }
            r += this.input.slice(n, this.state.pos), this.finishToken(142, r);
            return;
          case 38:
            r += this.input.slice(n, this.state.pos), r += this.jsxReadEntity(), n = this.state.pos;
            break;
          case 62:
          case 125:
          default:
            Ti(s) ? (r += this.input.slice(n, this.state.pos), r += this.jsxReadNewLine(!0), n = this.state.pos) : ++this.state.pos;
        }
      }
    }
    jsxReadNewLine(r) {
      let n = this.input.charCodeAt(this.state.pos), s;
      return ++this.state.pos, n === 13 && this.input.charCodeAt(this.state.pos) === 10 ? (++this.state.pos, s = r ? `
` : `\r
`) : s = String.fromCharCode(n), ++this.state.curLine, this.state.lineStart = this.state.pos, s;
    }
    jsxReadString(r) {
      let n = "", s = ++this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length)
          throw this.raise(O.UnterminatedString, this.state.startLoc);
        let a = this.input.charCodeAt(this.state.pos);
        if (a === r) break;
        a === 38 ? (n += this.input.slice(s, this.state.pos), n += this.jsxReadEntity(), s = this.state.pos) : Ti(a) ? (n += this.input.slice(
        s, this.state.pos), n += this.jsxReadNewLine(!1), s = this.state.pos) : ++this.state.pos;
      }
      n += this.input.slice(s, this.state.pos++), this.finishToken(134, n);
    }
    jsxReadEntity() {
      let r = ++this.state.pos;
      if (this.codePointAtPos(this.state.pos) === 35) {
        ++this.state.pos;
        let n = 10;
        this.codePointAtPos(this.state.pos) === 120 && (n = 16, ++this.state.pos);
        let s = this.readInt(n, void 0, !1, "bail");
        if (s !== null && this.codePointAtPos(this.state.pos) === 59)
          return ++this.state.pos, String.fromCodePoint(s);
      } else {
        let n = 0, s = !1;
        for (; n++ < 10 && this.state.pos < this.length && !(s = this.codePointAtPos(this.state.pos) === 59); )
          ++this.state.pos;
        if (s) {
          let a = this.input.slice(r, this.state.pos), o = RK[a];
          if (++this.state.pos, o)
            return o;
        }
      }
      return this.state.pos = r, "&";
    }
    jsxReadWord() {
      let r, n = this.state.pos;
      do
        r = this.input.charCodeAt(++this.state.pos);
      while (Ei(r) || r === 45);
      this.finishToken(141, this.input.slice(n, this.state.pos));
    }
    jsxParseIdentifier() {
      let r = this.startNode();
      return this.match(141) ? r.name = this.state.value : Ph(this.state.type) ? r.name = rs(this.state.type) : this.unexpected(), this.next(),
      this.finishNode(r, "JSXIdentifier");
    }
    jsxParseNamespacedName() {
      let r = this.state.startLoc, n = this.jsxParseIdentifier();
      if (!this.eat(14)) return n;
      let s = this.startNodeAt(r);
      return s.namespace = n, s.name = this.jsxParseIdentifier(), this.finishNode(s, "JSXNamespacedName");
    }
    jsxParseElementName() {
      let r = this.state.startLoc, n = this.jsxParseNamespacedName();
      if (n.type === "JSXNamespacedName")
        return n;
      for (; this.eat(16); ) {
        let s = this.startNodeAt(r);
        s.object = n, s.property = this.jsxParseIdentifier(), n = this.finishNode(s, "JSXMemberExpression");
      }
      return n;
    }
    jsxParseAttributeValue() {
      let r;
      switch (this.state.type) {
        case 5:
          return r = this.startNode(), this.setContext(st.brace), this.next(), r = this.jsxParseExpressionContainer(r, st.j_oTag), r.expression.
          type === "JSXEmptyExpression" && this.raise(Bs.AttributeIsEmpty, r), r;
        case 143:
        case 134:
          return this.parseExprAtom();
        default:
          throw this.raise(Bs.UnsupportedJsxValue, this.state.startLoc);
      }
    }
    jsxParseEmptyExpression() {
      let r = this.startNodeAt(this.state.lastTokEndLoc);
      return this.finishNodeAt(r, "JSXEmptyExpression", this.state.startLoc);
    }
    jsxParseSpreadChild(r) {
      return this.next(), r.expression = this.parseExpression(), this.setContext(st.j_expr), this.state.canStartJSXElement = !0, this.expect(
      8), this.finishNode(r, "JSXSpreadChild");
    }
    jsxParseExpressionContainer(r, n) {
      if (this.match(8))
        r.expression = this.jsxParseEmptyExpression();
      else {
        let s = this.parseExpression();
        r.expression = s;
      }
      return this.setContext(n), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(r, "JSXExpressionContainer");
    }
    jsxParseAttribute() {
      let r = this.startNode();
      return this.match(5) ? (this.setContext(st.brace), this.next(), this.expect(21), r.argument = this.parseMaybeAssignAllowIn(), this.setContext(
      st.j_oTag), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(r, "JSXSpreadAttribute")) : (r.name = this.jsxParseNamespacedName(),
      r.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(r, "JSXAttribute"));
    }
    jsxParseOpeningElementAt(r) {
      let n = this.startNodeAt(r);
      return this.eat(144) ? this.finishNode(n, "JSXOpeningFragment") : (n.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(
      n));
    }
    jsxParseOpeningElementAfterName(r) {
      let n = [];
      for (; !this.match(56) && !this.match(144); )
        n.push(this.jsxParseAttribute());
      return r.attributes = n, r.selfClosing = this.eat(56), this.expect(144), this.finishNode(r, "JSXOpeningElement");
    }
    jsxParseClosingElementAt(r) {
      let n = this.startNodeAt(r);
      return this.eat(144) ? this.finishNode(n, "JSXClosingFragment") : (n.name = this.jsxParseElementName(), this.expect(144), this.finishNode(
      n, "JSXClosingElement"));
    }
    jsxParseElementAt(r) {
      let n = this.startNodeAt(r), s = [], a = this.jsxParseOpeningElementAt(r), o = null;
      if (!a.selfClosing) {
        e: for (; ; )
          switch (this.state.type) {
            case 143:
              if (r = this.state.startLoc, this.next(), this.eat(56)) {
                o = this.jsxParseClosingElementAt(r);
                break e;
              }
              s.push(this.jsxParseElementAt(r));
              break;
            case 142:
              s.push(this.parseLiteral(this.state.value, "JSXText"));
              break;
            case 5: {
              let l = this.startNode();
              this.setContext(st.brace), this.next(), this.match(21) ? s.push(this.jsxParseSpreadChild(l)) : s.push(this.jsxParseExpressionContainer(
              l, st.j_expr));
              break;
            }
            default:
              this.unexpected();
          }
        ts(a) && !ts(o) && o !== null ? this.raise(Bs.MissingClosingTagFragment, o) : !ts(a) && ts(o) ? this.raise(Bs.MissingClosingTagElement,
        o, {
          openingTagName: bi(a.name)
        }) : !ts(a) && !ts(o) && bi(o.name) !== bi(a.name) && this.raise(Bs.MissingClosingTagElement, o, {
          openingTagName: bi(a.name)
        });
      }
      if (ts(a) ? (n.openingFragment = a, n.closingFragment = o) : (n.openingElement = a, n.closingElement = o), n.children = s, this.match(
      47))
        throw this.raise(Bs.UnwrappedAdjacentJSXElements, this.state.startLoc);
      return ts(a) ? this.finishNode(n, "JSXFragment") : this.finishNode(n, "JSXElement");
    }
    jsxParseElement() {
      let r = this.state.startLoc;
      return this.next(), this.jsxParseElementAt(r);
    }
    setContext(r) {
      let {
        context: n
      } = this.state;
      n[n.length - 1] = r;
    }
    parseExprAtom(r) {
      return this.match(143) ? this.jsxParseElement() : this.match(47) && this.input.charCodeAt(this.state.pos) !== 33 ? (this.replaceToken(
      143), this.jsxParseElement()) : super.parseExprAtom(r);
    }
    skipSpace() {
      this.curContext().preserveSpace || super.skipSpace();
    }
    getTokenFromCode(r) {
      let n = this.curContext();
      if (n === st.j_expr) {
        this.jsxReadToken();
        return;
      }
      if (n === st.j_oTag || n === st.j_cTag) {
        if (An(r)) {
          this.jsxReadWord();
          return;
        }
        if (r === 62) {
          ++this.state.pos, this.finishToken(144);
          return;
        }
        if ((r === 34 || r === 39) && n === st.j_oTag) {
          this.jsxReadString(r);
          return;
        }
      }
      if (r === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
        ++this.state.pos, this.finishToken(143);
        return;
      }
      super.getTokenFromCode(r);
    }
    updateContext(r) {
      let {
        context: n,
        type: s
      } = this.state;
      if (s === 56 && r === 143)
        n.splice(-2, 2, st.j_cTag), this.state.canStartJSXElement = !1;
      else if (s === 143)
        n.push(st.j_oTag);
      else if (s === 144) {
        let a = n[n.length - 1];
        a === st.j_oTag && r === 56 || a === st.j_cTag ? (n.pop(), this.state.canStartJSXElement = n[n.length - 1] === st.j_expr) : (this.setContext(
        st.j_expr), this.state.canStartJSXElement = !0);
      } else
        this.state.canStartJSXElement = rK(s);
    }
  }, "jsx"), dh = class extends Ma {
    static {
      i(this, "TypeScriptScope");
    }
    constructor(...t) {
      super(...t), this.tsNames = /* @__PURE__ */ new Map();
    }
  }, hh = class extends Ra {
    static {
      i(this, "TypeScriptScopeHandler");
    }
    constructor(...t) {
      super(...t), this.importsStack = [];
    }
    createScope(t) {
      return this.importsStack.push(/* @__PURE__ */ new Set()), new dh(t);
    }
    enter(t) {
      t === 256 && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(t);
    }
    exit() {
      let t = super.exit();
      return t === 256 && this.importsStack.pop(), t;
    }
    hasImport(t, r) {
      let n = this.importsStack.length;
      if (this.importsStack[n - 1].has(t))
        return !0;
      if (!r && n > 1) {
        for (let s = 0; s < n - 1; s++)
          if (this.importsStack[s].has(t)) return !0;
      }
      return !1;
    }
    declareName(t, r, n) {
      if (r & 4096) {
        this.hasImport(t, !0) && this.parser.raise(O.VarRedeclaration, n, {
          identifierName: t
        }), this.importsStack[this.importsStack.length - 1].add(t);
        return;
      }
      let s = this.currentScope(), a = s.tsNames.get(t) || 0;
      if (r & 1024) {
        this.maybeExportDefined(s, t), s.tsNames.set(t, a | 16);
        return;
      }
      super.declareName(t, r, n), r & 2 && (r & 1 || (this.checkRedeclarationInScope(s, t, r, n), this.maybeExportDefined(s, t)), a = a | 1),
      r & 256 && (a = a | 2), r & 512 && (a = a | 4), r & 128 && (a = a | 8), a && s.tsNames.set(t, a);
    }
    isRedeclaredInScope(t, r, n) {
      let s = t.tsNames.get(r);
      if ((s & 2) > 0) {
        if (n & 256) {
          let a = !!(n & 512), o = (s & 4) > 0;
          return a !== o;
        }
        return !0;
      }
      return n & 128 && (s & 8) > 0 ? t.names.get(r) & 2 ? !!(n & 1) : !1 : n & 2 && (s & 1) > 0 ? !0 : super.isRedeclaredInScope(t, r, n);
    }
    checkLocalExport(t) {
      let {
        name: r
      } = t;
      if (this.hasImport(r)) return;
      let n = this.scopeStack.length;
      for (let s = n - 1; s >= 0; s--) {
        let o = this.scopeStack[s].tsNames.get(r);
        if ((o & 1) > 0 || (o & 16) > 0)
          return;
      }
      super.checkLocalExport(t);
    }
  }, JT = /* @__PURE__ */ i((e) => e.type === "ParenthesizedExpression" ? JT(e.expression) : e, "unwrapParenthesizedExpression"), mh = class extends fh {
    static {
      i(this, "LValParser");
    }
    toAssignable(t, r = !1) {
      var n, s;
      let a;
      switch ((t.type === "ParenthesizedExpression" || (n = t.extra) != null && n.parenthesized) && (a = JT(t), r ? a.type === "Identifier" ?
      this.expressionScope.recordArrowParameterBindingError(O.InvalidParenthesizedAssignment, t) : a.type !== "MemberExpression" && !this.isOptionalMemberExpression(
      a) && this.raise(O.InvalidParenthesizedAssignment, t) : this.raise(O.InvalidParenthesizedAssignment, t)), t.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          break;
        case "ObjectExpression":
          t.type = "ObjectPattern";
          for (let l = 0, u = t.properties.length, c = u - 1; l < u; l++) {
            var o;
            let p = t.properties[l], f = l === c;
            this.toAssignableObjectExpressionProp(p, f, r), f && p.type === "RestElement" && (o = t.extra) != null && o.trailingCommaLoc && this.
            raise(O.RestTrailingComma, t.extra.trailingCommaLoc);
          }
          break;
        case "ObjectProperty": {
          let {
            key: l,
            value: u
          } = t;
          this.isPrivateName(l) && this.classScope.usePrivateName(this.getPrivateNameSV(l), l.loc.start), this.toAssignable(u, r);
          break;
        }
        case "SpreadElement":
          throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignabl\
e's caller.");
        case "ArrayExpression":
          t.type = "ArrayPattern", this.toAssignableList(t.elements, (s = t.extra) == null ? void 0 : s.trailingCommaLoc, r);
          break;
        case "AssignmentExpression":
          t.operator !== "=" && this.raise(O.MissingEqInAssignment, t.left.loc.end), t.type = "AssignmentPattern", delete t.operator, this.toAssignable(
          t.left, r);
          break;
        case "ParenthesizedExpression":
          this.toAssignable(a, r);
          break;
      }
    }
    toAssignableObjectExpressionProp(t, r, n) {
      if (t.type === "ObjectMethod")
        this.raise(t.kind === "get" || t.kind === "set" ? O.PatternHasAccessor : O.PatternHasMethod, t.key);
      else if (t.type === "SpreadElement") {
        t.type = "RestElement";
        let s = t.argument;
        this.checkToRestConversion(s, !1), this.toAssignable(s, n), r || this.raise(O.RestTrailingComma, t);
      } else
        this.toAssignable(t, n);
    }
    toAssignableList(t, r, n) {
      let s = t.length - 1;
      for (let a = 0; a <= s; a++) {
        let o = t[a];
        if (o) {
          if (o.type === "SpreadElement") {
            o.type = "RestElement";
            let l = o.argument;
            this.checkToRestConversion(l, !0), this.toAssignable(l, n);
          } else
            this.toAssignable(o, n);
          o.type === "RestElement" && (a < s ? this.raise(O.RestTrailingComma, o) : r && this.raise(O.RestTrailingComma, r));
        }
      }
    }
    isAssignable(t, r) {
      switch (t.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          return !0;
        case "ObjectExpression": {
          let n = t.properties.length - 1;
          return t.properties.every((s, a) => s.type !== "ObjectMethod" && (a === n || s.type !== "SpreadElement") && this.isAssignable(s));
        }
        case "ObjectProperty":
          return this.isAssignable(t.value);
        case "SpreadElement":
          return this.isAssignable(t.argument);
        case "ArrayExpression":
          return t.elements.every((n) => n === null || this.isAssignable(n));
        case "AssignmentExpression":
          return t.operator === "=";
        case "ParenthesizedExpression":
          return this.isAssignable(t.expression);
        case "MemberExpression":
        case "OptionalMemberExpression":
          return !r;
        default:
          return !1;
      }
    }
    toReferencedList(t, r) {
      return t;
    }
    toReferencedListDeep(t, r) {
      this.toReferencedList(t, r);
      for (let n of t)
        n?.type === "ArrayExpression" && this.toReferencedListDeep(n.elements);
    }
    parseSpread(t) {
      let r = this.startNode();
      return this.next(), r.argument = this.parseMaybeAssignAllowIn(t, void 0), this.finishNode(r, "SpreadElement");
    }
    parseRestBinding() {
      let t = this.startNode();
      return this.next(), t.argument = this.parseBindingAtom(), this.finishNode(t, "RestElement");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 0: {
          let t = this.startNode();
          return this.next(), t.elements = this.parseBindingList(3, 93, 1), this.finishNode(t, "ArrayPattern");
        }
        case 5:
          return this.parseObjectLike(8, !0);
      }
      return this.parseIdentifier();
    }
    parseBindingList(t, r, n) {
      let s = n & 1, a = [], o = !0;
      for (; !this.eat(t); )
        if (o ? o = !1 : this.expect(12), s && this.match(12))
          a.push(null);
        else {
          if (this.eat(t))
            break;
          if (this.match(21)) {
            let l = this.parseRestBinding();
            if ((this.hasPlugin("flow") || n & 2) && (l = this.parseFunctionParamType(l)), a.push(l), !this.checkCommaAfterRest(r)) {
              this.expect(t);
              break;
            }
          } else {
            let l = [];
            for (this.match(26) && this.hasPlugin("decorators") && this.raise(O.UnsupportedParameterDecorator, this.state.startLoc); this.match(
            26); )
              l.push(this.parseDecorator());
            a.push(this.parseAssignableListItem(n, l));
          }
        }
      return a;
    }
    parseBindingRestProperty(t) {
      return this.next(), t.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(t, "RestElement");
    }
    parseBindingProperty() {
      let {
        type: t,
        startLoc: r
      } = this.state;
      if (t === 21)
        return this.parseBindingRestProperty(this.startNode());
      let n = this.startNode();
      return t === 139 ? (this.expectPlugin("destructuringPrivate", r), this.classScope.usePrivateName(this.state.value, r), n.key = this.parsePrivateName()) :
      this.parsePropertyName(n), n.method = !1, this.parseObjPropValue(n, r, !1, !1, !0, !1);
    }
    parseAssignableListItem(t, r) {
      let n = this.parseMaybeDefault();
      (this.hasPlugin("flow") || t & 2) && this.parseFunctionParamType(n);
      let s = this.parseMaybeDefault(n.loc.start, n);
      return r.length && (n.decorators = r), s;
    }
    parseFunctionParamType(t) {
      return t;
    }
    parseMaybeDefault(t, r) {
      var n, s;
      if ((n = t) != null || (t = this.state.startLoc), r = (s = r) != null ? s : this.parseBindingAtom(), !this.eat(29)) return r;
      let a = this.startNodeAt(t);
      return a.left = r, a.right = this.parseMaybeAssignAllowIn(), this.finishNode(a, "AssignmentPattern");
    }
    isValidLVal(t, r, n) {
      switch (t) {
        case "AssignmentPattern":
          return "left";
        case "RestElement":
          return "argument";
        case "ObjectProperty":
          return "value";
        case "ParenthesizedExpression":
          return "expression";
        case "ArrayPattern":
          return "elements";
        case "ObjectPattern":
          return "properties";
      }
      return !1;
    }
    isOptionalMemberExpression(t) {
      return t.type === "OptionalMemberExpression";
    }
    checkLVal(t, r, n = 64, s = !1, a = !1, o = !1) {
      var l;
      let u = t.type;
      if (this.isObjectMethod(t)) return;
      let c = this.isOptionalMemberExpression(t);
      if (c || u === "MemberExpression") {
        c && (this.expectPlugin("optionalChainingAssign", t.loc.start), r.type !== "AssignmentExpression" && this.raise(O.InvalidLhsOptionalChaining,
        t, {
          ancestor: r
        })), n !== 64 && this.raise(O.InvalidPropertyBindingPattern, t);
        return;
      }
      if (u === "Identifier") {
        this.checkIdentifier(t, n, a);
        let {
          name: d
        } = t;
        s && (s.has(d) ? this.raise(O.ParamDupe, t) : s.add(d));
        return;
      }
      let p = this.isValidLVal(u, !(o || (l = t.extra) != null && l.parenthesized) && r.type === "AssignmentExpression", n);
      if (p === !0) return;
      if (p === !1) {
        let d = n === 64 ? O.InvalidLhs : O.InvalidLhsBinding;
        this.raise(d, t, {
          ancestor: r
        });
        return;
      }
      let f, h;
      typeof p == "string" ? (f = p, h = u === "ParenthesizedExpression") : [f, h] = p;
      let g = u === "ArrayPattern" || u === "ObjectPattern" ? {
        type: u
      } : r, P = t[f];
      if (Array.isArray(P))
        for (let d of P)
          d && this.checkLVal(d, g, n, s, a, h);
      else P && this.checkLVal(P, g, n, s, a, h);
    }
    checkIdentifier(t, r, n = !1) {
      this.state.strict && (n ? WT(t.name, this.inModule) : $T(t.name)) && (r === 64 ? this.raise(O.StrictEvalArguments, t, {
        referenceName: t.name
      }) : this.raise(O.StrictEvalArgumentsBinding, t, {
        bindingName: t.name
      })), r & 8192 && t.name === "let" && this.raise(O.LetInLexicalBinding, t), r & 64 || this.declareNameFromIdentifier(t, r);
    }
    declareNameFromIdentifier(t, r) {
      this.scope.declareName(t.name, r, t.loc.start);
    }
    checkToRestConversion(t, r) {
      switch (t.type) {
        case "ParenthesizedExpression":
          this.checkToRestConversion(t.expression, r);
          break;
        case "Identifier":
        case "MemberExpression":
          break;
        case "ArrayExpression":
        case "ObjectExpression":
          if (r) break;
        default:
          this.raise(O.InvalidRestAssignmentPattern, t);
      }
    }
    checkCommaAfterRest(t) {
      return this.match(12) ? (this.raise(this.lookaheadCharCode() === t ? O.RestTrailingComma : O.ElementAfterRest, this.state.startLoc), !0) :
      !1;
    }
  };
  function UK(e) {
    if (e == null)
      throw new Error(`Unexpected ${e} value.`);
    return e;
  }
  i(UK, "nonNull");
  function NT(e) {
    if (!e)
      throw new Error("Assert fail");
  }
  i(NT, "assert");
  var ye = Cn`typescript`({
    AbstractMethodHasImplementation: /* @__PURE__ */ i(({
      methodName: e
    }) => `Method '${e}' cannot have an implementation because it is marked abstract.`, "AbstractMethodHasImplementation"),
    AbstractPropertyHasInitializer: /* @__PURE__ */ i(({
      propertyName: e
    }) => `Property '${e}' cannot have an initializer because it is marked abstract.`, "AbstractPropertyHasInitializer"),
    AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
    AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
    AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
    ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
    ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
    ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or num\
eric literal or literal enum reference.",
    ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
    DeclareAccessor: /* @__PURE__ */ i(({
      kind: e
    }) => `'declare' is not allowed in ${e}ters.`, "DeclareAccessor"),
    DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
    DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
    DuplicateAccessibilityModifier: /* @__PURE__ */ i(({
      modifier: e
    }) => "Accessibility modifier already seen.", "DuplicateAccessibilityModifier"),
    DuplicateModifier: /* @__PURE__ */ i(({
      modifier: e
    }) => `Duplicate modifier: '${e}'.`, "DuplicateModifier"),
    EmptyHeritageClauseType: /* @__PURE__ */ i(({
      token: e
    }) => `'${e}' list cannot be empty.`, "EmptyHeritageClauseType"),
    EmptyTypeArguments: "Type argument list cannot be empty.",
    EmptyTypeParameters: "Type parameter list cannot be empty.",
    ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
    ImportAliasHasImportType: "An import alias can not use 'import type'.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
    IncompatibleModifiers: /* @__PURE__ */ i(({
      modifiers: e
    }) => `'${e[0]}' modifier cannot be used with '${e[1]}' modifier.`, "IncompatibleModifiers"),
    IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
    IndexSignatureHasAccessibility: /* @__PURE__ */ i(({
      modifier: e
    }) => `Index signatures cannot have an accessibility modifier ('${e}').`, "IndexSignatureHasAccessibility"),
    IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
    IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
    IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
    InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
    InvalidModifierOnTypeMember: /* @__PURE__ */ i(({
      modifier: e
    }) => `'${e}' modifier cannot appear on a type member.`, "InvalidModifierOnTypeMember"),
    InvalidModifierOnTypeParameter: /* @__PURE__ */ i(({
      modifier: e
    }) => `'${e}' modifier cannot appear on a type parameter.`, "InvalidModifierOnTypeParameter"),
    InvalidModifierOnTypeParameterPositions: /* @__PURE__ */ i(({
      modifier: e
    }) => `'${e}' modifier can only appear on a type parameter of a class, interface or type alias.`, "InvalidModifierOnTypeParameterPositio\
ns"),
    InvalidModifiersOrder: /* @__PURE__ */ i(({
      orderedModifiers: e
    }) => `'${e[0]}' modifier must precede '${e[1]}' modifier.`, "InvalidModifiersOrder"),
    InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the i\
nstantiation expression in parentheses, or delete the type arguments.",
    InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
    MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
    NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
    NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
    OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
    OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
    PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
    PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
    PrivateElementHasAccessibility: /* @__PURE__ */ i(({
      modifier: e
    }) => `Private elements cannot have an accessibility modifier ('${e}').`, "PrivateElementHasAccessibility"),
    ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
    ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
    ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
    SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
    SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
    SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
    SingleTypeParameterWithoutTrailingComma: /* @__PURE__ */ i(({
      typeParameterName: e
    }) => `Single type parameter ${e} should have a trailing comma. Example usage: <${e},>.`, "SingleTypeParameterWithoutTrailingComma"),
    StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
    TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`n\
ame?: type`), rather than after the type (`name: type?`).",
    TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number =\
 25`.",
    TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
    TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statemen\
t.",
    TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statemen\
t.",
    UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
    UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
    UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
    UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
    UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
    UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
    UnsupportedSignatureParameterKind: /* @__PURE__ */ i(({
      type: e
    }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${e}.`, "UnsupportedSignatureParameterKind")
  });
  function VK(e) {
    switch (e) {
      case "any":
        return "TSAnyKeyword";
      case "boolean":
        return "TSBooleanKeyword";
      case "bigint":
        return "TSBigIntKeyword";
      case "never":
        return "TSNeverKeyword";
      case "number":
        return "TSNumberKeyword";
      case "object":
        return "TSObjectKeyword";
      case "string":
        return "TSStringKeyword";
      case "symbol":
        return "TSSymbolKeyword";
      case "undefined":
        return "TSUndefinedKeyword";
      case "unknown":
        return "TSUnknownKeyword";
      default:
        return;
    }
  }
  i(VK, "keywordTypeFromName");
  function BT(e) {
    return e === "private" || e === "public" || e === "protected";
  }
  i(BT, "tsIsAccessModifier");
  function $K(e) {
    return e === "in" || e === "out";
  }
  i($K, "tsIsVarianceAnnotations");
  var WK = /* @__PURE__ */ i((e) => class extends e {
    static {
      i(this, "TypeScriptParserMixin");
    }
    constructor(...r) {
      super(...r), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out"],
        disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: ye.InvalidModifierOnTypeParameter
      }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["const"],
        disallowedModifiers: ["in", "out"],
        errorTemplate: ye.InvalidModifierOnTypeParameterPositions
      }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out", "const"],
        disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: ye.InvalidModifierOnTypeParameter
      });
    }
    getScopeHandler() {
      return hh;
    }
    tsIsIdentifier() {
      return Ze(this.state.type);
    }
    tsTokenCanFollowModifier() {
      return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
    }
    tsNextTokenOnSameLineAndCanFollowModifier() {
      return this.next(), this.hasPrecedingLineBreak() ? !1 : this.tsTokenCanFollowModifier();
    }
    tsNextTokenCanFollowModifier() {
      return this.match(106) ? (this.next(), this.tsTokenCanFollowModifier()) : this.tsNextTokenOnSameLineAndCanFollowModifier();
    }
    tsParseModifier(r, n) {
      if (!Ze(this.state.type) && this.state.type !== 58 && this.state.type !== 75)
        return;
      let s = this.state.value;
      if (r.includes(s)) {
        if (n && this.tsIsStartOfStaticBlocks())
          return;
        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
          return s;
      }
    }
    tsParseModifiers({
      allowedModifiers: r,
      disallowedModifiers: n,
      stopOnStartOfClassStaticBlock: s,
      errorTemplate: a = ye.InvalidModifierOnTypeMember
    }, o) {
      let l = /* @__PURE__ */ i((c, p, f, h) => {
        p === f && o[h] && this.raise(ye.InvalidModifiersOrder, c, {
          orderedModifiers: [f, h]
        });
      }, "enforceOrder"), u = /* @__PURE__ */ i((c, p, f, h) => {
        (o[f] && p === h || o[h] && p === f) && this.raise(ye.IncompatibleModifiers, c, {
          modifiers: [f, h]
        });
      }, "incompatible");
      for (; ; ) {
        let {
          startLoc: c
        } = this.state, p = this.tsParseModifier(r.concat(n ?? []), s);
        if (!p) break;
        BT(p) ? o.accessibility ? this.raise(ye.DuplicateAccessibilityModifier, c, {
          modifier: p
        }) : (l(c, p, p, "override"), l(c, p, p, "static"), l(c, p, p, "readonly"), o.accessibility = p) : $K(p) ? (o[p] && this.raise(ye.DuplicateModifier,
        c, {
          modifier: p
        }), o[p] = !0, l(c, p, "in", "out")) : (hasOwnProperty.call(o, p) ? this.raise(ye.DuplicateModifier, c, {
          modifier: p
        }) : (l(c, p, "static", "readonly"), l(c, p, "static", "override"), l(c, p, "override", "readonly"), l(c, p, "abstract", "override"),
        u(c, p, "declare", "override"), u(c, p, "static", "abstract")), o[p] = !0), n != null && n.includes(p) && this.raise(a, c, {
          modifier: p
        });
      }
    }
    tsIsListTerminator(r) {
      switch (r) {
        case "EnumMembers":
        case "TypeMembers":
          return this.match(8);
        case "HeritageClauseElement":
          return this.match(5);
        case "TupleElementTypes":
          return this.match(3);
        case "TypeParametersOrArguments":
          return this.match(48);
      }
    }
    tsParseList(r, n) {
      let s = [];
      for (; !this.tsIsListTerminator(r); )
        s.push(n());
      return s;
    }
    tsParseDelimitedList(r, n, s) {
      return UK(this.tsParseDelimitedListWorker(r, n, !0, s));
    }
    tsParseDelimitedListWorker(r, n, s, a) {
      let o = [], l = -1;
      for (; !this.tsIsListTerminator(r); ) {
        l = -1;
        let u = n();
        if (u == null)
          return;
        if (o.push(u), this.eat(12)) {
          l = this.state.lastTokStartLoc.index;
          continue;
        }
        if (this.tsIsListTerminator(r))
          break;
        s && this.expect(12);
        return;
      }
      return a && (a.value = l), o;
    }
    tsParseBracketedList(r, n, s, a, o) {
      a || (s ? this.expect(0) : this.expect(47));
      let l = this.tsParseDelimitedList(r, n, o);
      return s ? this.expect(3) : this.expect(48), l;
    }
    tsParseImportType() {
      let r = this.startNode();
      return this.expect(83), this.expect(10), this.match(134) || this.raise(ye.UnsupportedImportTypeArgument, this.state.startLoc), r.argument =
      super.parseExprAtom(), this.eat(12) && !this.match(11) ? (r.options = super.parseMaybeAssignAllowIn(), this.eat(12)) : r.options = null,
      this.expect(11), this.eat(16) && (r.qualifier = this.tsParseEntityName()), this.match(47) && (r.typeParameters = this.tsParseTypeArguments()),
      this.finishNode(r, "TSImportType");
    }
    tsParseEntityName(r = !0) {
      let n = this.parseIdentifier(r);
      for (; this.eat(16); ) {
        let s = this.startNodeAtNode(n);
        s.left = n, s.right = this.parseIdentifier(r), n = this.finishNode(s, "TSQualifiedName");
      }
      return n;
    }
    tsParseTypeReference() {
      let r = this.startNode();
      return r.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (r.typeParameters = this.tsParseTypeArguments()),
      this.finishNode(r, "TSTypeReference");
    }
    tsParseThisTypePredicate(r) {
      this.next();
      let n = this.startNodeAtNode(r);
      return n.parameterName = r, n.typeAnnotation = this.tsParseTypeAnnotation(!1), n.asserts = !1, this.finishNode(n, "TSTypePredicate");
    }
    tsParseThisTypeNode() {
      let r = this.startNode();
      return this.next(), this.finishNode(r, "TSThisType");
    }
    tsParseTypeQuery() {
      let r = this.startNode();
      return this.expect(87), this.match(83) ? r.exprName = this.tsParseImportType() : r.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() &&
      this.match(47) && (r.typeParameters = this.tsParseTypeArguments()), this.finishNode(r, "TSTypeQuery");
    }
    tsParseTypeParameter(r) {
      let n = this.startNode();
      return r(n), n.name = this.tsParseTypeParameterName(), n.constraint = this.tsEatThenParseType(81), n.default = this.tsEatThenParseType(
      29), this.finishNode(n, "TSTypeParameter");
    }
    tsTryParseTypeParameters(r) {
      if (this.match(47))
        return this.tsParseTypeParameters(r);
    }
    tsParseTypeParameters(r) {
      let n = this.startNode();
      this.match(47) || this.match(143) ? this.next() : this.unexpected();
      let s = {
        value: -1
      };
      return n.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, r), !1, !0, s), n.params.
      length === 0 && this.raise(ye.EmptyTypeParameters, n), s.value !== -1 && this.addExtra(n, "trailingComma", s.value), this.finishNode(n,
      "TSTypeParameterDeclaration");
    }
    tsFillSignature(r, n) {
      let s = r === 19, a = "parameters", o = "typeAnnotation";
      n.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), n[a] = this.tsParseBindingListForSignature(),
      s ? n[o] = this.tsParseTypeOrTypePredicateAnnotation(r) : this.match(r) && (n[o] = this.tsParseTypeOrTypePredicateAnnotation(r));
    }
    tsParseBindingListForSignature() {
      let r = super.parseBindingList(11, 41, 2);
      for (let n of r) {
        let {
          type: s
        } = n;
        (s === "AssignmentPattern" || s === "TSParameterProperty") && this.raise(ye.UnsupportedSignatureParameterKind, n, {
          type: s
        });
      }
      return r;
    }
    tsParseTypeMemberSemicolon() {
      !this.eat(12) && !this.isLineTerminator() && this.expect(13);
    }
    tsParseSignatureMember(r, n) {
      return this.tsFillSignature(14, n), this.tsParseTypeMemberSemicolon(), this.finishNode(n, r);
    }
    tsIsUnambiguouslyIndexSignature() {
      return this.next(), Ze(this.state.type) ? (this.next(), this.match(14)) : !1;
    }
    tsTryParseIndexSignature(r) {
      if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))))
        return;
      this.expect(0);
      let n = this.parseIdentifier();
      n.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(n), this.expect(3), r.parameters = [n];
      let s = this.tsTryParseTypeAnnotation();
      return s && (r.typeAnnotation = s), this.tsParseTypeMemberSemicolon(), this.finishNode(r, "TSIndexSignature");
    }
    tsParsePropertyOrMethodSignature(r, n) {
      this.eat(17) && (r.optional = !0);
      let s = r;
      if (this.match(10) || this.match(47)) {
        n && this.raise(ye.ReadonlyForMethodSignature, r);
        let a = s;
        a.kind && this.match(47) && this.raise(ye.AccessorCannotHaveTypeParameters, this.state.curPosition()), this.tsFillSignature(14, a), this.
        tsParseTypeMemberSemicolon();
        let o = "parameters", l = "typeAnnotation";
        if (a.kind === "get")
          a[o].length > 0 && (this.raise(O.BadGetterArity, this.state.curPosition()), this.isThisParam(a[o][0]) && this.raise(ye.AccessorCannotDeclareThisParameter,
          this.state.curPosition()));
        else if (a.kind === "set") {
          if (a[o].length !== 1)
            this.raise(O.BadSetterArity, this.state.curPosition());
          else {
            let u = a[o][0];
            this.isThisParam(u) && this.raise(ye.AccessorCannotDeclareThisParameter, this.state.curPosition()), u.type === "Identifier" && u.
            optional && this.raise(ye.SetAccessorCannotHaveOptionalParameter, this.state.curPosition()), u.type === "RestElement" && this.raise(
            ye.SetAccessorCannotHaveRestParameter, this.state.curPosition());
          }
          a[l] && this.raise(ye.SetAccessorCannotHaveReturnType, a[l]);
        } else
          a.kind = "method";
        return this.finishNode(a, "TSMethodSignature");
      } else {
        let a = s;
        n && (a.readonly = !0);
        let o = this.tsTryParseTypeAnnotation();
        return o && (a.typeAnnotation = o), this.tsParseTypeMemberSemicolon(), this.finishNode(a, "TSPropertySignature");
      }
    }
    tsParseTypeMember() {
      let r = this.startNode();
      if (this.match(10) || this.match(47))
        return this.tsParseSignatureMember("TSCallSignatureDeclaration", r);
      if (this.match(77)) {
        let s = this.startNode();
        return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", r) : (r.key = this.
        createIdentifier(s, "new"), this.tsParsePropertyOrMethodSignature(r, !1));
      }
      this.tsParseModifiers({
        allowedModifiers: ["readonly"],
        disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
      }, r);
      let n = this.tsTryParseIndexSignature(r);
      return n || (super.parsePropertyName(r), !r.computed && r.key.type === "Identifier" && (r.key.name === "get" || r.key.name === "set") &&
      this.tsTokenCanFollowModifier() && (r.kind = r.key.name, super.parsePropertyName(r)), this.tsParsePropertyOrMethodSignature(r, !!r.readonly));
    }
    tsParseTypeLiteral() {
      let r = this.startNode();
      return r.members = this.tsParseObjectTypeMembers(), this.finishNode(r, "TSTypeLiteral");
    }
    tsParseObjectTypeMembers() {
      this.expect(5);
      let r = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
      return this.expect(8), r;
    }
    tsIsStartOfMappedType() {
      return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !this.match(0) || (this.next(), !this.
      tsIsIdentifier()) ? !1 : (this.next(), this.match(58)));
    }
    tsParseMappedType() {
      let r = this.startNode();
      this.expect(5), this.match(53) ? (r.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(122) &&
      (r.readonly = !0), this.expect(0);
      {
        let n = this.startNode();
        n.name = this.tsParseTypeParameterName(), n.constraint = this.tsExpectThenParseType(58), r.typeParameter = this.finishNode(n, "TSTyp\
eParameter");
      }
      return r.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (r.optional = this.state.value,
      this.next(), this.expect(17)) : this.eat(17) && (r.optional = !0), r.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(
      8), this.finishNode(r, "TSMappedType");
    }
    tsParseTupleType() {
      let r = this.startNode();
      r.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), !0, !1);
      let n = !1;
      return r.elementTypes.forEach((s) => {
        let {
          type: a
        } = s;
        n && a !== "TSRestType" && a !== "TSOptionalType" && !(a === "TSNamedTupleMember" && s.optional) && this.raise(ye.OptionalTypeBeforeRequired,
        s), n || (n = a === "TSNamedTupleMember" && s.optional || a === "TSOptionalType");
      }), this.finishNode(r, "TSTupleType");
    }
    tsParseTupleElementType() {
      let {
        startLoc: r
      } = this.state, n = this.eat(21), s, a, o, l, c = Vr(this.state.type) ? this.lookaheadCharCode() : null;
      if (c === 58)
        s = !0, o = !1, a = this.parseIdentifier(!0), this.expect(14), l = this.tsParseType();
      else if (c === 63) {
        o = !0;
        let p = this.state.startLoc, f = this.state.value, h = this.tsParseNonArrayType();
        this.lookaheadCharCode() === 58 ? (s = !0, a = this.createIdentifier(this.startNodeAt(p), f), this.expect(17), this.expect(14), l = this.
        tsParseType()) : (s = !1, l = h, this.expect(17));
      } else
        l = this.tsParseType(), o = this.eat(17), s = this.eat(14);
      if (s) {
        let p;
        a ? (p = this.startNodeAtNode(a), p.optional = o, p.label = a, p.elementType = l, this.eat(17) && (p.optional = !0, this.raise(ye.TupleOptionalAfterType,
        this.state.lastTokStartLoc))) : (p = this.startNodeAtNode(l), p.optional = o, this.raise(ye.InvalidTupleMemberLabel, l), p.label = l,
        p.elementType = this.tsParseType()), l = this.finishNode(p, "TSNamedTupleMember");
      } else if (o) {
        let p = this.startNodeAtNode(l);
        p.typeAnnotation = l, l = this.finishNode(p, "TSOptionalType");
      }
      if (n) {
        let p = this.startNodeAt(r);
        p.typeAnnotation = l, l = this.finishNode(p, "TSRestType");
      }
      return l;
    }
    tsParseParenthesizedType() {
      let r = this.startNode();
      return this.expect(10), r.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(r, "TSParenthesizedType");
    }
    tsParseFunctionOrConstructorType(r, n) {
      let s = this.startNode();
      return r === "TSConstructorType" && (s.abstract = !!n, n && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.
      tsFillSignature(19, s)), this.finishNode(s, r);
    }
    tsParseLiteralTypeNode() {
      let r = this.startNode();
      switch (this.state.type) {
        case 135:
        case 136:
        case 134:
        case 85:
        case 86:
          r.literal = super.parseExprAtom();
          break;
        default:
          this.unexpected();
      }
      return this.finishNode(r, "TSLiteralType");
    }
    tsParseTemplateLiteralType() {
      let r = this.startNode();
      return r.literal = super.parseTemplate(!1), this.finishNode(r, "TSLiteralType");
    }
    parseTemplateSubstitution() {
      return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
    }
    tsParseThisTypeOrThisTypePredicate() {
      let r = this.tsParseThisTypeNode();
      return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(r) : r;
    }
    tsParseNonArrayType() {
      switch (this.state.type) {
        case 134:
        case 135:
        case 136:
        case 85:
        case 86:
          return this.tsParseLiteralTypeNode();
        case 53:
          if (this.state.value === "-") {
            let r = this.startNode(), n = this.lookahead();
            return n.type !== 135 && n.type !== 136 && this.unexpected(), r.literal = this.parseMaybeUnary(), this.finishNode(r, "TSLiteralT\
ype");
          }
          break;
        case 78:
          return this.tsParseThisTypeOrThisTypePredicate();
        case 87:
          return this.tsParseTypeQuery();
        case 83:
          return this.tsParseImportType();
        case 5:
          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
        case 0:
          return this.tsParseTupleType();
        case 10:
          return this.tsParseParenthesizedType();
        case 25:
        case 24:
          return this.tsParseTemplateLiteralType();
        default: {
          let {
            type: r
          } = this.state;
          if (Ze(r) || r === 88 || r === 84) {
            let n = r === 88 ? "TSVoidKeyword" : r === 84 ? "TSNullKeyword" : VK(this.state.value);
            if (n !== void 0 && this.lookaheadCharCode() !== 46) {
              let s = this.startNode();
              return this.next(), this.finishNode(s, n);
            }
            return this.tsParseTypeReference();
          }
        }
      }
      this.unexpected();
    }
    tsParseArrayTypeOrHigher() {
      let r = this.tsParseNonArrayType();
      for (; !this.hasPrecedingLineBreak() && this.eat(0); )
        if (this.match(3)) {
          let n = this.startNodeAtNode(r);
          n.elementType = r, this.expect(3), r = this.finishNode(n, "TSArrayType");
        } else {
          let n = this.startNodeAtNode(r);
          n.objectType = r, n.indexType = this.tsParseType(), this.expect(3), r = this.finishNode(n, "TSIndexedAccessType");
        }
      return r;
    }
    tsParseTypeOperator() {
      let r = this.startNode(), n = this.state.value;
      return this.next(), r.operator = n, r.typeAnnotation = this.tsParseTypeOperatorOrHigher(), n === "readonly" && this.tsCheckTypeAnnotationForReadOnly(
      r), this.finishNode(r, "TSTypeOperator");
    }
    tsCheckTypeAnnotationForReadOnly(r) {
      switch (r.typeAnnotation.type) {
        case "TSTupleType":
        case "TSArrayType":
          return;
        default:
          this.raise(ye.UnexpectedReadonly, r);
      }
    }
    tsParseInferType() {
      let r = this.startNode();
      this.expectContextual(115);
      let n = this.startNode();
      return n.name = this.tsParseTypeParameterName(), n.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), r.typeParameter =
      this.finishNode(n, "TSTypeParameter"), this.finishNode(r, "TSInferType");
    }
    tsParseConstraintForInferType() {
      if (this.eat(81)) {
        let r = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
        if (this.state.inDisallowConditionalTypesContext || !this.match(17))
          return r;
      }
    }
    tsParseTypeOperatorOrHigher() {
      return lK(this.state.type) && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() :
      this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
    }
    tsParseUnionOrIntersectionType(r, n, s) {
      let a = this.startNode(), o = this.eat(s), l = [];
      do
        l.push(n());
      while (this.eat(s));
      return l.length === 1 && !o ? l[0] : (a.types = l, this.finishNode(a, r));
    }
    tsParseIntersectionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
    }
    tsParseUnionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
    }
    tsIsStartOfFunctionType() {
      return this.match(47) ? !0 : this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
    }
    tsSkipParameterStart() {
      if (Ze(this.state.type) || this.match(78))
        return this.next(), !0;
      if (this.match(5)) {
        let {
          errors: r
        } = this.state, n = r.length;
        try {
          return this.parseObjectLike(8, !0), r.length === n;
        } catch {
          return !1;
        }
      }
      if (this.match(0)) {
        this.next();
        let {
          errors: r
        } = this.state, n = r.length;
        try {
          return super.parseBindingList(3, 93, 1), r.length === n;
        } catch {
          return !1;
        }
      }
      return !1;
    }
    tsIsUnambiguouslyStartOfFunctionType() {
      return this.next(), !!(this.match(11) || this.match(21) || this.tsSkipParameterStart() && (this.match(14) || this.match(12) || this.match(
      17) || this.match(29) || this.match(11) && (this.next(), this.match(19))));
    }
    tsParseTypeOrTypePredicateAnnotation(r) {
      return this.tsInType(() => {
        let n = this.startNode();
        this.expect(r);
        let s = this.startNode(), a = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
        if (a && this.match(78)) {
          let u = this.tsParseThisTypeOrThisTypePredicate();
          return u.type === "TSThisType" ? (s.parameterName = u, s.asserts = !0, s.typeAnnotation = null, u = this.finishNode(s, "TSTypePred\
icate")) : (this.resetStartLocationFromNode(u, s), u.asserts = !0), n.typeAnnotation = u, this.finishNode(n, "TSTypeAnnotation");
        }
        let o = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
        if (!o)
          return a ? (s.parameterName = this.parseIdentifier(), s.asserts = a, s.typeAnnotation = null, n.typeAnnotation = this.finishNode(s,
          "TSTypePredicate"), this.finishNode(n, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(!1, n);
        let l = this.tsParseTypeAnnotation(!1);
        return s.parameterName = o, s.typeAnnotation = l, s.asserts = a, n.typeAnnotation = this.finishNode(s, "TSTypePredicate"), this.finishNode(
        n, "TSTypeAnnotation");
      });
    }
    tsTryParseTypeOrTypePredicateAnnotation() {
      if (this.match(14))
        return this.tsParseTypeOrTypePredicateAnnotation(14);
    }
    tsTryParseTypeAnnotation() {
      if (this.match(14))
        return this.tsParseTypeAnnotation();
    }
    tsTryParseType() {
      return this.tsEatThenParseType(14);
    }
    tsParseTypePredicatePrefix() {
      let r = this.parseIdentifier();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak())
        return this.next(), r;
    }
    tsParseTypePredicateAsserts() {
      if (this.state.type !== 109)
        return !1;
      let r = this.state.containsEsc;
      return this.next(), !Ze(this.state.type) && !this.match(78) ? !1 : (r && this.raise(O.InvalidEscapedReservedWord, this.state.lastTokStartLoc,
      {
        reservedWord: "asserts"
      }), !0);
    }
    tsParseTypeAnnotation(r = !0, n = this.startNode()) {
      return this.tsInType(() => {
        r && this.expect(14), n.typeAnnotation = this.tsParseType();
      }), this.finishNode(n, "TSTypeAnnotation");
    }
    tsParseType() {
      NT(this.state.inType);
      let r = this.tsParseNonConditionalType();
      if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81))
        return r;
      let n = this.startNodeAtNode(r);
      return n.checkType = r, n.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(
      17), n.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), n.falseType = this.tsInAllowConditionalTypesContext(
      () => this.tsParseType()), this.finishNode(n, "TSConditionalType");
    }
    isAbstractConstructorSignature() {
      return this.isContextual(124) && this.lookahead().type === 77;
    }
    tsParseNonConditionalType() {
      return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType(
      "TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", !0) : this.tsParseUnionTypeOrHigher();
    }
    tsParseTypeAssertion() {
      this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(ye.ReservedTypeAssertion, this.state.startLoc);
      let r = this.startNode();
      return r.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.
      expect(48), r.expression = this.parseMaybeUnary(), this.finishNode(r, "TSTypeAssertion");
    }
    tsParseHeritageClause(r) {
      let n = this.state.startLoc, s = this.tsParseDelimitedList("HeritageClauseElement", () => {
        let a = this.startNode();
        return a.expression = this.tsParseEntityName(), this.match(47) && (a.typeParameters = this.tsParseTypeArguments()), this.finishNode(
        a, "TSExpressionWithTypeArguments");
      });
      return s.length || this.raise(ye.EmptyHeritageClauseType, n, {
        token: r
      }), s;
    }
    tsParseInterfaceDeclaration(r, n = {}) {
      if (this.hasFollowingLineBreak()) return null;
      this.expectContextual(129), n.declare && (r.declare = !0), Ze(this.state.type) ? (r.id = this.parseIdentifier(), this.checkIdentifier(
      r.id, 130)) : (r.id = null, this.raise(ye.MissingInterfaceName, this.state.startLoc)), r.typeParameters = this.tsTryParseTypeParameters(
      this.tsParseInOutConstModifiers), this.eat(81) && (r.extends = this.tsParseHeritageClause("extends"));
      let s = this.startNode();
      return s.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), r.body = this.finishNode(s, "TSInterfaceBody"), this.finishNode(
      r, "TSInterfaceDeclaration");
    }
    tsParseTypeAliasDeclaration(r) {
      return r.id = this.parseIdentifier(), this.checkIdentifier(r.id, 2), r.typeAnnotation = this.tsInType(() => {
        if (r.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && this.lookahead().
        type !== 16) {
          let n = this.startNode();
          return this.next(), this.finishNode(n, "TSIntrinsicKeyword");
        }
        return this.tsParseType();
      }), this.semicolon(), this.finishNode(r, "TSTypeAliasDeclaration");
    }
    tsInNoContext(r) {
      let n = this.state.context;
      this.state.context = [n[0]];
      try {
        return r();
      } finally {
        this.state.context = n;
      }
    }
    tsInType(r) {
      let n = this.state.inType;
      this.state.inType = !0;
      try {
        return r();
      } finally {
        this.state.inType = n;
      }
    }
    tsInDisallowConditionalTypesContext(r) {
      let n = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = !0;
      try {
        return r();
      } finally {
        this.state.inDisallowConditionalTypesContext = n;
      }
    }
    tsInAllowConditionalTypesContext(r) {
      let n = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = !1;
      try {
        return r();
      } finally {
        this.state.inDisallowConditionalTypesContext = n;
      }
    }
    tsEatThenParseType(r) {
      if (this.match(r))
        return this.tsNextThenParseType();
    }
    tsExpectThenParseType(r) {
      return this.tsInType(() => (this.expect(r), this.tsParseType()));
    }
    tsNextThenParseType() {
      return this.tsInType(() => (this.next(), this.tsParseType()));
    }
    tsParseEnumMember() {
      let r = this.startNode();
      return r.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(!0), this.eat(29) && (r.initializer =
      super.parseMaybeAssignAllowIn()), this.finishNode(r, "TSEnumMember");
    }
    tsParseEnumDeclaration(r, n = {}) {
      return n.const && (r.const = !0), n.declare && (r.declare = !0), this.expectContextual(126), r.id = this.parseIdentifier(), this.checkIdentifier(
      r.id, r.const ? 8971 : 8459), this.expect(5), r.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)),
      this.expect(8), this.finishNode(r, "TSEnumDeclaration");
    }
    tsParseModuleBlock() {
      let r = this.startNode();
      return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(r.body = [], void 0, !0, 8), this.scope.exit(), this.finishNode(
      r, "TSModuleBlock");
    }
    tsParseModuleOrNamespaceDeclaration(r, n = !1) {
      if (r.id = this.parseIdentifier(), n || this.checkIdentifier(r.id, 1024), this.eat(16)) {
        let s = this.startNode();
        this.tsParseModuleOrNamespaceDeclaration(s, !0), r.body = s;
      } else
        this.scope.enter(256), this.prodParam.enter(0), r.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
      return this.finishNode(r, "TSModuleDeclaration");
    }
    tsParseAmbientExternalModuleDeclaration(r) {
      return this.isContextual(112) ? (r.kind = "global", r.global = !0, r.id = this.parseIdentifier()) : this.match(134) ? (r.kind = "modul\
e", r.id = super.parseStringLiteral(this.state.value)) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0),
      r.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(r, "TSModuleDeclarat\
ion");
    }
    tsParseImportEqualsDeclaration(r, n, s) {
      r.isExport = s || !1, r.id = n || this.parseIdentifier(), this.checkIdentifier(r.id, 4096), this.expect(29);
      let a = this.tsParseModuleReference();
      return r.importKind === "type" && a.type !== "TSExternalModuleReference" && this.raise(ye.ImportAliasHasImportType, a), r.moduleReference =
      a, this.semicolon(), this.finishNode(r, "TSImportEqualsDeclaration");
    }
    tsIsExternalModuleReference() {
      return this.isContextual(119) && this.lookaheadCharCode() === 40;
    }
    tsParseModuleReference() {
      return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(!1);
    }
    tsParseExternalModuleReference() {
      let r = this.startNode();
      return this.expectContextual(119), this.expect(10), this.match(134) || this.unexpected(), r.expression = super.parseExprAtom(), this.expect(
      11), this.sawUnambiguousESM = !0, this.finishNode(r, "TSExternalModuleReference");
    }
    tsLookAhead(r) {
      let n = this.state.clone(), s = r();
      return this.state = n, s;
    }
    tsTryParseAndCatch(r) {
      let n = this.tryParse((s) => r() || s());
      if (!(n.aborted || !n.node))
        return n.error && (this.state = n.failState), n.node;
    }
    tsTryParse(r) {
      let n = this.state.clone(), s = r();
      if (s !== void 0 && s !== !1)
        return s;
      this.state = n;
    }
    tsTryParseDeclare(r) {
      if (this.isLineTerminator())
        return;
      let n = this.state.type, s;
      return this.isContextual(100) && (n = 74, s = "let"), this.tsInAmbientContext(() => {
        switch (n) {
          case 68:
            return r.declare = !0, super.parseFunctionStatement(r, !1, !1);
          case 80:
            return r.declare = !0, this.parseClass(r, !0, !1);
          case 126:
            return this.tsParseEnumDeclaration(r, {
              declare: !0
            });
          case 112:
            return this.tsParseAmbientExternalModuleDeclaration(r);
          case 75:
          case 74:
            return !this.match(75) || !this.isLookaheadContextual("enum") ? (r.declare = !0, this.parseVarStatement(r, s || this.state.value,
            !0)) : (this.expect(75), this.tsParseEnumDeclaration(r, {
              const: !0,
              declare: !0
            }));
          case 129: {
            let a = this.tsParseInterfaceDeclaration(r, {
              declare: !0
            });
            if (a) return a;
          }
          default:
            if (Ze(n))
              return this.tsParseDeclaration(r, this.state.value, !0, null);
        }
      });
    }
    tsTryParseExportDeclaration() {
      return this.tsParseDeclaration(this.startNode(), this.state.value, !0, null);
    }
    tsParseExpressionStatement(r, n, s) {
      switch (n.name) {
        case "declare": {
          let a = this.tsTryParseDeclare(r);
          return a && (a.declare = !0), a;
        }
        case "global":
          if (this.match(5)) {
            this.scope.enter(256), this.prodParam.enter(0);
            let a = r;
            return a.kind = "global", r.global = !0, a.id = n, a.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(),
            this.finishNode(a, "TSModuleDeclaration");
          }
          break;
        default:
          return this.tsParseDeclaration(r, n.name, !1, s);
      }
    }
    tsParseDeclaration(r, n, s, a) {
      switch (n) {
        case "abstract":
          if (this.tsCheckLineTerminator(s) && (this.match(80) || Ze(this.state.type)))
            return this.tsParseAbstractDeclaration(r, a);
          break;
        case "module":
          if (this.tsCheckLineTerminator(s)) {
            if (this.match(134))
              return this.tsParseAmbientExternalModuleDeclaration(r);
            if (Ze(this.state.type))
              return r.kind = "module", this.tsParseModuleOrNamespaceDeclaration(r);
          }
          break;
        case "namespace":
          if (this.tsCheckLineTerminator(s) && Ze(this.state.type))
            return r.kind = "namespace", this.tsParseModuleOrNamespaceDeclaration(r);
          break;
        case "type":
          if (this.tsCheckLineTerminator(s) && Ze(this.state.type))
            return this.tsParseTypeAliasDeclaration(r);
          break;
      }
    }
    tsCheckLineTerminator(r) {
      return r ? this.hasFollowingLineBreak() ? !1 : (this.next(), !0) : !this.isLineTerminator();
    }
    tsTryParseGenericAsyncArrowFunction(r) {
      if (!this.match(47)) return;
      let n = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = !0;
      let s = this.tsTryParseAndCatch(() => {
        let a = this.startNodeAt(r);
        return a.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(a), a.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(),
        this.expect(19), a;
      });
      if (this.state.maybeInArrowParameters = n, !!s)
        return super.parseArrowExpression(s, null, !0);
    }
    tsParseTypeArgumentsInExpression() {
      if (this.reScan_lt() === 47)
        return this.tsParseTypeArguments();
    }
    tsParseTypeArguments() {
      let r = this.startNode();
      return r.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments",
      this.tsParseType.bind(this))))), r.params.length === 0 ? this.raise(ye.EmptyTypeArguments, r) : !this.state.inType && this.curContext() ===
      st.brace && this.reScan_lt_gt(), this.expect(48), this.finishNode(r, "TSTypeParameterInstantiation");
    }
    tsIsDeclarationStart() {
      return uK(this.state.type);
    }
    isExportDefaultSpecifier() {
      return this.tsIsDeclarationStart() ? !1 : super.isExportDefaultSpecifier();
    }
    parseAssignableListItem(r, n) {
      let s = this.state.startLoc, a = {};
      this.tsParseModifiers({
        allowedModifiers: ["public", "private", "protected", "override", "readonly"]
      }, a);
      let o = a.accessibility, l = a.override, u = a.readonly;
      !(r & 4) && (o || u || l) && this.raise(ye.UnexpectedParameterModifier, s);
      let c = this.parseMaybeDefault();
      r & 2 && this.parseFunctionParamType(c);
      let p = this.parseMaybeDefault(c.loc.start, c);
      if (o || u || l) {
        let f = this.startNodeAt(s);
        return n.length && (f.decorators = n), o && (f.accessibility = o), u && (f.readonly = u), l && (f.override = l), p.type !== "Identif\
ier" && p.type !== "AssignmentPattern" && this.raise(ye.UnsupportedParameterPropertyKind, f), f.parameter = p, this.finishNode(f, "TSParamet\
erProperty");
      }
      return n.length && (c.decorators = n), p;
    }
    isSimpleParameter(r) {
      return r.type === "TSParameterProperty" && super.isSimpleParameter(r.parameter) || super.isSimpleParameter(r);
    }
    tsDisallowOptionalPattern(r) {
      for (let n of r.params)
        n.type !== "Identifier" && n.optional && !this.state.isAmbientContext && this.raise(ye.PatternIsOptional, n);
    }
    setArrowFunctionParameters(r, n, s) {
      super.setArrowFunctionParameters(r, n, s), this.tsDisallowOptionalPattern(r);
    }
    parseFunctionBodyAndFinish(r, n, s = !1) {
      this.match(14) && (r.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
      let a = n === "FunctionDeclaration" ? "TSDeclareFunction" : n === "ClassMethod" || n === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
      return a && !this.match(5) && this.isLineTerminator() ? this.finishNode(r, a) : a === "TSDeclareFunction" && this.state.isAmbientContext &&
      (this.raise(ye.DeclareFunctionHasImplementation, r), r.declare) ? super.parseFunctionBodyAndFinish(r, a, s) : (this.tsDisallowOptionalPattern(
      r), super.parseFunctionBodyAndFinish(r, n, s));
    }
    registerFunctionStatementId(r) {
      !r.body && r.id ? this.checkIdentifier(r.id, 1024) : super.registerFunctionStatementId(r);
    }
    tsCheckForInvalidTypeCasts(r) {
      r.forEach((n) => {
        n?.type === "TSTypeCastExpression" && this.raise(ye.UnexpectedTypeAnnotation, n.typeAnnotation);
      });
    }
    toReferencedList(r, n) {
      return this.tsCheckForInvalidTypeCasts(r), r;
    }
    parseArrayLike(r, n, s, a) {
      let o = super.parseArrayLike(r, n, s, a);
      return o.type === "ArrayExpression" && this.tsCheckForInvalidTypeCasts(o.elements), o;
    }
    parseSubscript(r, n, s, a) {
      if (!this.hasPrecedingLineBreak() && this.match(35)) {
        this.state.canStartJSXElement = !1, this.next();
        let l = this.startNodeAt(n);
        return l.expression = r, this.finishNode(l, "TSNonNullExpression");
      }
      let o = !1;
      if (this.match(18) && this.lookaheadCharCode() === 60) {
        if (s)
          return a.stop = !0, r;
        a.optionalChainMember = o = !0, this.next();
      }
      if (this.match(47) || this.match(51)) {
        let l, u = this.tsTryParseAndCatch(() => {
          if (!s && this.atPossibleAsyncArrow(r)) {
            let h = this.tsTryParseGenericAsyncArrowFunction(n);
            if (h)
              return h;
          }
          let c = this.tsParseTypeArgumentsInExpression();
          if (!c) return;
          if (o && !this.match(10)) {
            l = this.state.curPosition();
            return;
          }
          if (Nl(this.state.type)) {
            let h = super.parseTaggedTemplateExpression(r, n, a);
            return h.typeParameters = c, h;
          }
          if (!s && this.eat(10)) {
            let h = this.startNodeAt(n);
            return h.callee = r, h.arguments = this.parseCallExpressionArguments(11), this.tsCheckForInvalidTypeCasts(h.arguments), h.typeParameters =
            c, a.optionalChainMember && (h.optional = o), this.finishCallExpression(h, a.optionalChainMember);
          }
          let p = this.state.type;
          if (p === 48 || p === 52 || p !== 10 && Qd(p) && !this.hasPrecedingLineBreak())
            return;
          let f = this.startNodeAt(n);
          return f.expression = r, f.typeParameters = c, this.finishNode(f, "TSInstantiationExpression");
        });
        if (l && this.unexpected(l, 10), u)
          return u.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40) && this.raise(
          ye.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc), u;
      }
      return super.parseSubscript(r, n, s, a);
    }
    parseNewCallee(r) {
      var n;
      super.parseNewCallee(r);
      let {
        callee: s
      } = r;
      s.type === "TSInstantiationExpression" && !((n = s.extra) != null && n.parenthesized) && (r.typeParameters = s.typeParameters, r.callee =
      s.expression);
    }
    parseExprOp(r, n, s) {
      let a;
      if (Il(58) > s && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (a = this.isContextual(120)))) {
        let o = this.startNodeAt(n);
        return o.expression = r, o.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (a && this.raise(O.UnexpectedKeyword,
        this.state.startLoc, {
          keyword: "const"
        }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(o, a ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(),
        this.parseExprOp(o, n, s);
      }
      return super.parseExprOp(r, n, s);
    }
    checkReservedWord(r, n, s, a) {
      this.state.isAmbientContext || super.checkReservedWord(r, n, s, a);
    }
    checkImportReflection(r) {
      super.checkImportReflection(r), r.module && r.importKind !== "value" && this.raise(ye.ImportReflectionHasImportType, r.specifiers[0].loc.
      start);
    }
    checkDuplicateExports() {
    }
    isPotentialImportPhase(r) {
      if (super.isPotentialImportPhase(r)) return !0;
      if (this.isContextual(130)) {
        let n = this.lookaheadCharCode();
        return r ? n === 123 || n === 42 : n !== 61;
      }
      return !r && this.isContextual(87);
    }
    applyImportPhase(r, n, s, a) {
      super.applyImportPhase(r, n, s, a), n ? r.exportKind = s === "type" ? "type" : "value" : r.importKind = s === "type" || s === "typeof" ?
      s : "value";
    }
    parseImport(r) {
      if (this.match(134))
        return r.importKind = "value", super.parseImport(r);
      let n;
      if (Ze(this.state.type) && this.lookaheadCharCode() === 61)
        return r.importKind = "value", this.tsParseImportEqualsDeclaration(r);
      if (this.isContextual(130)) {
        let s = this.parseMaybeImportPhase(r, !1);
        if (this.lookaheadCharCode() === 61)
          return this.tsParseImportEqualsDeclaration(r, s);
        n = super.parseImportSpecifiersAndAfter(r, s);
      } else
        n = super.parseImport(r);
      return n.importKind === "type" && n.specifiers.length > 1 && n.specifiers[0].type === "ImportDefaultSpecifier" && this.raise(ye.TypeImportCannotSpecifyDefaultAndNamed,
      n), n;
    }
    parseExport(r, n) {
      if (this.match(83)) {
        this.next();
        let s = r, a = null;
        return this.isContextual(130) && this.isPotentialImportPhase(!1) ? a = this.parseMaybeImportPhase(s, !1) : s.importKind = "value", this.
        tsParseImportEqualsDeclaration(s, a, !0);
      } else if (this.eat(29)) {
        let s = r;
        return s.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = !0, this.finishNode(s, "TSExportAssignment");
      } else if (this.eatContextual(93)) {
        let s = r;
        return this.expectContextual(128), s.id = this.parseIdentifier(), this.semicolon(), this.finishNode(s, "TSNamespaceExportDeclaration");
      } else
        return super.parseExport(r, n);
    }
    isAbstractClass() {
      return this.isContextual(124) && this.lookahead().type === 80;
    }
    parseExportDefaultExpression() {
      if (this.isAbstractClass()) {
        let r = this.startNode();
        return this.next(), r.abstract = !0, this.parseClass(r, !0, !0);
      }
      if (this.match(129)) {
        let r = this.tsParseInterfaceDeclaration(this.startNode());
        if (r) return r;
      }
      return super.parseExportDefaultExpression();
    }
    parseVarStatement(r, n, s = !1) {
      let {
        isAmbientContext: a
      } = this.state, o = super.parseVarStatement(r, n, s || a);
      if (!a) return o;
      for (let {
        id: l,
        init: u
      } of o.declarations)
        u && (n !== "const" || l.typeAnnotation ? this.raise(ye.InitializerNotAllowedInAmbientContext, u) : GK(u, this.hasPlugin("estree")) ||
        this.raise(ye.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, u));
      return o;
    }
    parseStatementContent(r, n) {
      if (this.match(75) && this.isLookaheadContextual("enum")) {
        let s = this.startNode();
        return this.expect(75), this.tsParseEnumDeclaration(s, {
          const: !0
        });
      }
      if (this.isContextual(126))
        return this.tsParseEnumDeclaration(this.startNode());
      if (this.isContextual(129)) {
        let s = this.tsParseInterfaceDeclaration(this.startNode());
        if (s) return s;
      }
      return super.parseStatementContent(r, n);
    }
    parseAccessModifier() {
      return this.tsParseModifier(["public", "protected", "private"]);
    }
    tsHasSomeModifiers(r, n) {
      return n.some((s) => BT(s) ? r.accessibility === s : !!r[s]);
    }
    tsIsStartOfStaticBlocks() {
      return this.isContextual(106) && this.lookaheadCharCode() === 123;
    }
    parseClassMember(r, n, s) {
      let a = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
      this.tsParseModifiers({
        allowedModifiers: a,
        disallowedModifiers: ["in", "out"],
        stopOnStartOfClassStaticBlock: !0,
        errorTemplate: ye.InvalidModifierOnTypeParameterPositions
      }, n);
      let o = /* @__PURE__ */ i(() => {
        this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(n, a) && this.raise(ye.StaticBlockCannotHaveModifier,
        this.state.curPosition()), super.parseClassStaticBlock(r, n)) : this.parseClassMemberWithIsStatic(r, n, s, !!n.static);
      }, "callParseClassMemberWithIsStatic");
      n.declare ? this.tsInAmbientContext(o) : o();
    }
    parseClassMemberWithIsStatic(r, n, s, a) {
      let o = this.tsTryParseIndexSignature(n);
      if (o) {
        r.body.push(o), n.abstract && this.raise(ye.IndexSignatureHasAbstract, n), n.accessibility && this.raise(ye.IndexSignatureHasAccessibility,
        n, {
          modifier: n.accessibility
        }), n.declare && this.raise(ye.IndexSignatureHasDeclare, n), n.override && this.raise(ye.IndexSignatureHasOverride, n);
        return;
      }
      !this.state.inAbstractClass && n.abstract && this.raise(ye.NonAbstractClassHasAbstractMethod, n), n.override && (s.hadSuperClass || this.
      raise(ye.OverrideNotInSubClass, n)), super.parseClassMemberWithIsStatic(r, n, s, a);
    }
    parsePostMemberNameModifiers(r) {
      this.eat(17) && (r.optional = !0), r.readonly && this.match(10) && this.raise(ye.ClassMethodHasReadonly, r), r.declare && this.match(10) &&
      this.raise(ye.ClassMethodHasDeclare, r);
    }
    parseExpressionStatement(r, n, s) {
      return (n.type === "Identifier" ? this.tsParseExpressionStatement(r, n, s) : void 0) || super.parseExpressionStatement(r, n, s);
    }
    shouldParseExportDeclaration() {
      return this.tsIsDeclarationStart() ? !0 : super.shouldParseExportDeclaration();
    }
    parseConditional(r, n, s) {
      if (!this.state.maybeInArrowParameters || !this.match(17))
        return super.parseConditional(r, n, s);
      let a = this.tryParse(() => super.parseConditional(r, n));
      return a.node ? (a.error && (this.state = a.failState), a.node) : (a.error && super.setOptionalParametersError(s, a.error), r);
    }
    parseParenItem(r, n) {
      let s = super.parseParenItem(r, n);
      if (this.eat(17) && (s.optional = !0, this.resetEndLocation(r)), this.match(14)) {
        let a = this.startNodeAt(n);
        return a.expression = r, a.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(a, "TSTypeCastExpression");
      }
      return r;
    }
    parseExportDeclaration(r) {
      if (!this.state.isAmbientContext && this.isContextual(125))
        return this.tsInAmbientContext(() => this.parseExportDeclaration(r));
      let n = this.state.startLoc, s = this.eatContextual(125);
      if (s && (this.isContextual(125) || !this.shouldParseExportDeclaration()))
        throw this.raise(ye.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
      let o = Ze(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(r);
      return o ? ((o.type === "TSInterfaceDeclaration" || o.type === "TSTypeAliasDeclaration" || s) && (r.exportKind = "type"), s && (this.resetStartLocation(
      o, n), o.declare = !0), o) : null;
    }
    parseClassId(r, n, s, a) {
      if ((!n || s) && this.isContextual(113))
        return;
      super.parseClassId(r, n, s, r.declare ? 1024 : 8331);
      let o = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      o && (r.typeParameters = o);
    }
    parseClassPropertyAnnotation(r) {
      r.optional || (this.eat(35) ? r.definite = !0 : this.eat(17) && (r.optional = !0));
      let n = this.tsTryParseTypeAnnotation();
      n && (r.typeAnnotation = n);
    }
    parseClassProperty(r) {
      if (this.parseClassPropertyAnnotation(r), this.state.isAmbientContext && !(r.readonly && !r.typeAnnotation) && this.match(29) && this.
      raise(ye.DeclareClassFieldHasInitializer, this.state.startLoc), r.abstract && this.match(29)) {
        let {
          key: n
        } = r;
        this.raise(ye.AbstractPropertyHasInitializer, this.state.startLoc, {
          propertyName: n.type === "Identifier" && !r.computed ? n.name : `[${this.input.slice(this.offsetToSourcePos(n.start), this.offsetToSourcePos(
          n.end))}]`
        });
      }
      return super.parseClassProperty(r);
    }
    parseClassPrivateProperty(r) {
      return r.abstract && this.raise(ye.PrivateElementHasAbstract, r), r.accessibility && this.raise(ye.PrivateElementHasAccessibility, r, {
        modifier: r.accessibility
      }), this.parseClassPropertyAnnotation(r), super.parseClassPrivateProperty(r);
    }
    parseClassAccessorProperty(r) {
      return this.parseClassPropertyAnnotation(r), r.optional && this.raise(ye.AccessorCannotBeOptional, r), super.parseClassAccessorProperty(
      r);
    }
    pushClassMethod(r, n, s, a, o, l) {
      let u = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      u && o && this.raise(ye.ConstructorHasTypeParameters, u);
      let {
        declare: c = !1,
        kind: p
      } = n;
      c && (p === "get" || p === "set") && this.raise(ye.DeclareAccessor, n, {
        kind: p
      }), u && (n.typeParameters = u), super.pushClassMethod(r, n, s, a, o, l);
    }
    pushClassPrivateMethod(r, n, s, a) {
      let o = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      o && (n.typeParameters = o), super.pushClassPrivateMethod(r, n, s, a);
    }
    declareClassPrivateMethodInScope(r, n) {
      r.type !== "TSDeclareMethod" && (r.type === "MethodDefinition" && !hasOwnProperty.call(r.value, "body") || super.declareClassPrivateMethodInScope(
      r, n));
    }
    parseClassSuper(r) {
      super.parseClassSuper(r), r.superClass && (this.match(47) || this.match(51)) && (r.superTypeParameters = this.tsParseTypeArgumentsInExpression()),
      this.eatContextual(113) && (r.implements = this.tsParseHeritageClause("implements"));
    }
    parseObjPropValue(r, n, s, a, o, l, u) {
      let c = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      return c && (r.typeParameters = c), super.parseObjPropValue(r, n, s, a, o, l, u);
    }
    parseFunctionParams(r, n) {
      let s = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      s && (r.typeParameters = s), super.parseFunctionParams(r, n);
    }
    parseVarId(r, n) {
      super.parseVarId(r, n), r.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35) && (r.definite = !0);
      let s = this.tsTryParseTypeAnnotation();
      s && (r.id.typeAnnotation = s, this.resetEndLocation(r.id));
    }
    parseAsyncArrowFromCallExpression(r, n) {
      return this.match(14) && (r.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(r, n);
    }
    parseMaybeAssign(r, n) {
      var s, a, o, l, u;
      let c, p, f;
      if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
        if (c = this.state.clone(), p = this.tryParse(() => super.parseMaybeAssign(r, n), c), !p.error) return p.node;
        let {
          context: P
        } = this.state, d = P[P.length - 1];
        (d === st.j_oTag || d === st.j_expr) && P.pop();
      }
      if (!((s = p) != null && s.error) && !this.match(47))
        return super.parseMaybeAssign(r, n);
      (!c || c === this.state) && (c = this.state.clone());
      let h, g = this.tryParse((P) => {
        var d, y;
        h = this.tsParseTypeParameters(this.tsParseConstModifier);
        let E = super.parseMaybeAssign(r, n);
        return (E.type !== "ArrowFunctionExpression" || (d = E.extra) != null && d.parenthesized) && P(), ((y = h) == null ? void 0 : y.params.
        length) !== 0 && this.resetStartLocationFromNode(E, h), E.typeParameters = h, E;
      }, c);
      if (!g.error && !g.aborted)
        return h && this.reportReservedArrowTypeParam(h), g.node;
      if (!p && (NT(!this.hasPlugin("jsx")), f = this.tryParse(() => super.parseMaybeAssign(r, n), c), !f.error))
        return f.node;
      if ((a = p) != null && a.node)
        return this.state = p.failState, p.node;
      if (g.node)
        return this.state = g.failState, h && this.reportReservedArrowTypeParam(h), g.node;
      if ((o = f) != null && o.node)
        return this.state = f.failState, f.node;
      throw ((l = p) == null ? void 0 : l.error) || g.error || ((u = f) == null ? void 0 : u.error);
    }
    reportReservedArrowTypeParam(r) {
      var n;
      r.params.length === 1 && !r.params[0].constraint && !((n = r.extra) != null && n.trailingComma) && this.getPluginOption("typescript", "\
disallowAmbiguousJSXLike") && this.raise(ye.ReservedArrowTypeParam, r);
    }
    parseMaybeUnary(r, n) {
      return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(r, n);
    }
    parseArrow(r) {
      if (this.match(14)) {
        let n = this.tryParse((s) => {
          let a = this.tsParseTypeOrTypePredicateAnnotation(14);
          return (this.canInsertSemicolon() || !this.match(19)) && s(), a;
        });
        if (n.aborted) return;
        n.thrown || (n.error && (this.state = n.failState), r.returnType = n.node);
      }
      return super.parseArrow(r);
    }
    parseFunctionParamType(r) {
      this.eat(17) && (r.optional = !0);
      let n = this.tsTryParseTypeAnnotation();
      return n && (r.typeAnnotation = n), this.resetEndLocation(r), r;
    }
    isAssignable(r, n) {
      switch (r.type) {
        case "TSTypeCastExpression":
          return this.isAssignable(r.expression, n);
        case "TSParameterProperty":
          return !0;
        default:
          return super.isAssignable(r, n);
      }
    }
    toAssignable(r, n = !1) {
      switch (r.type) {
        case "ParenthesizedExpression":
          this.toAssignableParenthesizedExpression(r, n);
          break;
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
          n ? this.expressionScope.recordArrowParameterBindingError(ye.UnexpectedTypeCastInParameter, r) : this.raise(ye.UnexpectedTypeCastInParameter,
          r), this.toAssignable(r.expression, n);
          break;
        case "AssignmentExpression":
          !n && r.left.type === "TSTypeCastExpression" && (r.left = this.typeCastToParameter(r.left));
        default:
          super.toAssignable(r, n);
      }
    }
    toAssignableParenthesizedExpression(r, n) {
      switch (r.expression.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
        case "ParenthesizedExpression":
          this.toAssignable(r.expression, n);
          break;
        default:
          super.toAssignable(r, n);
      }
    }
    checkToRestConversion(r, n) {
      switch (r.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          this.checkToRestConversion(r.expression, !1);
          break;
        default:
          super.checkToRestConversion(r, n);
      }
    }
    isValidLVal(r, n, s) {
      switch (r) {
        case "TSTypeCastExpression":
          return !0;
        case "TSParameterProperty":
          return "parameter";
        case "TSNonNullExpression":
        case "TSInstantiationExpression":
          return "expression";
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
          return (s !== 64 || !n) && ["expression", !0];
        default:
          return super.isValidLVal(r, n, s);
      }
    }
    parseBindingAtom() {
      return this.state.type === 78 ? this.parseIdentifier(!0) : super.parseBindingAtom();
    }
    parseMaybeDecoratorArguments(r) {
      if (this.match(47) || this.match(51)) {
        let n = this.tsParseTypeArgumentsInExpression();
        if (this.match(10)) {
          let s = super.parseMaybeDecoratorArguments(r);
          return s.typeParameters = n, s;
        }
        this.unexpected(null, 10);
      }
      return super.parseMaybeDecoratorArguments(r);
    }
    checkCommaAfterRest(r) {
      return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === r ? (this.next(), !1) : super.checkCommaAfterRest(
      r);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(35) || this.match(14) || super.isClassProperty();
    }
    parseMaybeDefault(r, n) {
      let s = super.parseMaybeDefault(r, n);
      return s.type === "AssignmentPattern" && s.typeAnnotation && s.right.start < s.typeAnnotation.start && this.raise(ye.TypeAnnotationAfterAssign,
      s.typeAnnotation), s;
    }
    getTokenFromCode(r) {
      if (this.state.inType) {
        if (r === 62) {
          this.finishOp(48, 1);
          return;
        }
        if (r === 60) {
          this.finishOp(47, 1);
          return;
        }
      }
      super.getTokenFromCode(r);
    }
    reScan_lt_gt() {
      let {
        type: r
      } = this.state;
      r === 47 ? (this.state.pos -= 1, this.readToken_lt()) : r === 48 && (this.state.pos -= 1, this.readToken_gt());
    }
    reScan_lt() {
      let {
        type: r
      } = this.state;
      return r === 51 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : r;
    }
    toAssignableList(r, n, s) {
      for (let a = 0; a < r.length; a++) {
        let o = r[a];
        o?.type === "TSTypeCastExpression" && (r[a] = this.typeCastToParameter(o));
      }
      super.toAssignableList(r, n, s);
    }
    typeCastToParameter(r) {
      return r.expression.typeAnnotation = r.typeAnnotation, this.resetEndLocation(r.expression, r.typeAnnotation.loc.end), r.expression;
    }
    shouldParseArrow(r) {
      return this.match(14) ? r.every((n) => this.isAssignable(n, !0)) : super.shouldParseArrow(r);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    canHaveLeadingDecorator() {
      return super.canHaveLeadingDecorator() || this.isAbstractClass();
    }
    jsxParseOpeningElementAfterName(r) {
      if (this.match(47) || this.match(51)) {
        let n = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
        n && (r.typeParameters = n);
      }
      return super.jsxParseOpeningElementAfterName(r);
    }
    getGetterSetterExpectedParamCount(r) {
      let n = super.getGetterSetterExpectedParamCount(r), a = this.getObjectOrClassMethodParams(r)[0];
      return a && this.isThisParam(a) ? n + 1 : n;
    }
    parseCatchClauseParam() {
      let r = super.parseCatchClauseParam(), n = this.tsTryParseTypeAnnotation();
      return n && (r.typeAnnotation = n, this.resetEndLocation(r)), r;
    }
    tsInAmbientContext(r) {
      let {
        isAmbientContext: n,
        strict: s
      } = this.state;
      this.state.isAmbientContext = !0, this.state.strict = !1;
      try {
        return r();
      } finally {
        this.state.isAmbientContext = n, this.state.strict = s;
      }
    }
    parseClass(r, n, s) {
      let a = this.state.inAbstractClass;
      this.state.inAbstractClass = !!r.abstract;
      try {
        return super.parseClass(r, n, s);
      } finally {
        this.state.inAbstractClass = a;
      }
    }
    tsParseAbstractDeclaration(r, n) {
      if (this.match(80))
        return r.abstract = !0, this.maybeTakeDecorators(n, this.parseClass(r, !0, !1));
      if (this.isContextual(129)) {
        if (!this.hasFollowingLineBreak())
          return r.abstract = !0, this.raise(ye.NonClassMethodPropertyHasAbstractModifer, r), this.tsParseInterfaceDeclaration(r);
      } else
        this.unexpected(null, 80);
    }
    parseMethod(r, n, s, a, o, l, u) {
      let c = super.parseMethod(r, n, s, a, o, l, u);
      if (c.abstract && (this.hasPlugin("estree") ? !!c.value.body : !!c.body)) {
        let {
          key: f
        } = c;
        this.raise(ye.AbstractMethodHasImplementation, c, {
          methodName: f.type === "Identifier" && !c.computed ? f.name : `[${this.input.slice(this.offsetToSourcePos(f.start), this.offsetToSourcePos(
          f.end))}]`
        });
      }
      return c;
    }
    tsParseTypeParameterName() {
      return this.parseIdentifier().name;
    }
    shouldParseAsAmbientContext() {
      return !!this.getPluginOption("typescript", "dts");
    }
    parse() {
      return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), super.parse();
    }
    getExpression() {
      return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), super.getExpression();
    }
    parseExportSpecifier(r, n, s, a) {
      return !n && a ? (this.parseTypeOnlyImportExportSpecifier(r, !1, s), this.finishNode(r, "ExportSpecifier")) : (r.exportKind = "value",
      super.parseExportSpecifier(r, n, s, a));
    }
    parseImportSpecifier(r, n, s, a, o) {
      return !n && a ? (this.parseTypeOnlyImportExportSpecifier(r, !0, s), this.finishNode(r, "ImportSpecifier")) : (r.importKind = "value",
      super.parseImportSpecifier(r, n, s, a, s ? 4098 : 4096));
    }
    parseTypeOnlyImportExportSpecifier(r, n, s) {
      let a = n ? "imported" : "local", o = n ? "local" : "exported", l = r[a], u, c = !1, p = !0, f = l.loc.start;
      if (this.isContextual(93)) {
        let g = this.parseIdentifier();
        if (this.isContextual(93)) {
          let P = this.parseIdentifier();
          Vr(this.state.type) ? (c = !0, l = g, u = n ? this.parseIdentifier() : this.parseModuleExportName(), p = !1) : (u = P, p = !1);
        } else Vr(this.state.type) ? (p = !1, u = n ? this.parseIdentifier() : this.parseModuleExportName()) : (c = !0, l = g);
      } else Vr(this.state.type) && (c = !0, n ? (l = this.parseIdentifier(!0), this.isContextual(93) || this.checkReservedWord(l.name, l.loc.
      start, !0, !0)) : l = this.parseModuleExportName());
      c && s && this.raise(n ? ye.TypeModifierIsUsedInTypeImports : ye.TypeModifierIsUsedInTypeExports, f), r[a] = l, r[o] = u;
      let h = n ? "importKind" : "exportKind";
      r[h] = c ? "type" : "value", p && this.eatContextual(93) && (r[o] = n ? this.parseIdentifier() : this.parseModuleExportName()), r[o] ||
      (r[o] = Dn(r[a])), n && this.checkIdentifier(r[o], c ? 4098 : 4096);
    }
  }, "typescript");
  function KK(e) {
    if (e.type !== "MemberExpression") return !1;
    let {
      computed: t,
      property: r
    } = e;
    return t && r.type !== "StringLiteral" && (r.type !== "TemplateLiteral" || r.expressions.length > 0) ? !1 : XT(e.object);
  }
  i(KK, "isPossiblyLiteralEnum");
  function GK(e, t) {
    var r;
    let {
      type: n
    } = e;
    if ((r = e.extra) != null && r.parenthesized)
      return !1;
    if (t) {
      if (n === "Literal") {
        let {
          value: s
        } = e;
        if (typeof s == "string" || typeof s == "boolean")
          return !0;
      }
    } else if (n === "StringLiteral" || n === "BooleanLiteral")
      return !0;
    return !!(zT(e, t) || HK(e, t) || n === "TemplateLiteral" && e.expressions.length === 0 || KK(e));
  }
  i(GK, "isValidAmbientConstInitializer");
  function zT(e, t) {
    return t ? e.type === "Literal" && (typeof e.value == "number" || "bigint" in e) : e.type === "NumericLiteral" || e.type === "BigIntLite\
ral";
  }
  i(zT, "isNumber");
  function HK(e, t) {
    if (e.type === "UnaryExpression") {
      let {
        operator: r,
        argument: n
      } = e;
      if (r === "-" && zT(n, t))
        return !0;
    }
    return !1;
  }
  i(HK, "isNegativeNumber");
  function XT(e) {
    return e.type === "Identifier" ? !0 : e.type !== "MemberExpression" || e.computed ? !1 : XT(e.object);
  }
  i(XT, "isUncomputedMemberExpressionChain");
  var kT = Cn`placeholders`({
    ClassNameIsRequired: "A class name is required.",
    UnexpectedSpace: "Unexpected space in placeholder."
  }), YK = /* @__PURE__ */ i((e) => class extends e {
    static {
      i(this, "PlaceholdersParserMixin");
    }
    parsePlaceholder(r) {
      if (this.match(133)) {
        let n = this.startNode();
        return this.next(), this.assertNoSpace(), n.name = super.parseIdentifier(!0), this.assertNoSpace(), this.expect(133), this.finishPlaceholder(
        n, r);
      }
    }
    finishPlaceholder(r, n) {
      let s = r;
      return (!s.expectedNode || !s.type) && (s = this.finishNode(s, "Placeholder")), s.expectedNode = n, s;
    }
    getTokenFromCode(r) {
      r === 37 && this.input.charCodeAt(this.state.pos + 1) === 37 ? this.finishOp(133, 2) : super.getTokenFromCode(r);
    }
    parseExprAtom(r) {
      return this.parsePlaceholder("Expression") || super.parseExprAtom(r);
    }
    parseIdentifier(r) {
      return this.parsePlaceholder("Identifier") || super.parseIdentifier(r);
    }
    checkReservedWord(r, n, s, a) {
      r !== void 0 && super.checkReservedWord(r, n, s, a);
    }
    parseBindingAtom() {
      return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
    }
    isValidLVal(r, n, s) {
      return r === "Placeholder" || super.isValidLVal(r, n, s);
    }
    toAssignable(r, n) {
      r && r.type === "Placeholder" && r.expectedNode === "Expression" ? r.expectedNode = "Pattern" : super.toAssignable(r, n);
    }
    chStartsBindingIdentifier(r, n) {
      return !!(super.chStartsBindingIdentifier(r, n) || this.lookahead().type === 133);
    }
    verifyBreakContinue(r, n) {
      r.label && r.label.type === "Placeholder" || super.verifyBreakContinue(r, n);
    }
    parseExpressionStatement(r, n) {
      var s;
      if (n.type !== "Placeholder" || (s = n.extra) != null && s.parenthesized)
        return super.parseExpressionStatement(r, n);
      if (this.match(14)) {
        let o = r;
        return o.label = this.finishPlaceholder(n, "Identifier"), this.next(), o.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(),
        this.finishNode(o, "LabeledStatement");
      }
      this.semicolon();
      let a = r;
      return a.name = n.name, this.finishPlaceholder(a, "Statement");
    }
    parseBlock(r, n, s) {
      return this.parsePlaceholder("BlockStatement") || super.parseBlock(r, n, s);
    }
    parseFunctionId(r) {
      return this.parsePlaceholder("Identifier") || super.parseFunctionId(r);
    }
    parseClass(r, n, s) {
      let a = n ? "ClassDeclaration" : "ClassExpression";
      this.next();
      let o = this.state.strict, l = this.parsePlaceholder("Identifier");
      if (l)
        if (this.match(81) || this.match(133) || this.match(5))
          r.id = l;
        else {
          if (s || !n)
            return r.id = null, r.body = this.finishPlaceholder(l, "ClassBody"), this.finishNode(r, a);
          throw this.raise(kT.ClassNameIsRequired, this.state.startLoc);
        }
      else
        this.parseClassId(r, n, s);
      return super.parseClassSuper(r), r.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!r.superClass, o), this.finishNode(
      r, a);
    }
    parseExport(r, n) {
      let s = this.parsePlaceholder("Identifier");
      if (!s) return super.parseExport(r, n);
      let a = r;
      if (!this.isContextual(98) && !this.match(12))
        return a.specifiers = [], a.source = null, a.declaration = this.finishPlaceholder(s, "Declaration"), this.finishNode(a, "ExportNamed\
Declaration");
      this.expectPlugin("exportDefaultFrom");
      let o = this.startNode();
      return o.exported = s, a.specifiers = [this.finishNode(o, "ExportDefaultSpecifier")], super.parseExport(a, n);
    }
    isExportDefaultSpecifier() {
      if (this.match(65)) {
        let r = this.nextTokenStart();
        if (this.isUnparsedContextual(r, "from") && this.input.startsWith(rs(133), this.nextTokenStartSince(r + 4)))
          return !0;
      }
      return super.isExportDefaultSpecifier();
    }
    maybeParseExportDefaultSpecifier(r, n) {
      var s;
      return (s = r.specifiers) != null && s.length ? !0 : super.maybeParseExportDefaultSpecifier(r, n);
    }
    checkExport(r) {
      let {
        specifiers: n
      } = r;
      n != null && n.length && (r.specifiers = n.filter((s) => s.exported.type === "Placeholder")), super.checkExport(r), r.specifiers = n;
    }
    parseImport(r) {
      let n = this.parsePlaceholder("Identifier");
      if (!n) return super.parseImport(r);
      if (r.specifiers = [], !this.isContextual(98) && !this.match(12))
        return r.source = this.finishPlaceholder(n, "StringLiteral"), this.semicolon(), this.finishNode(r, "ImportDeclaration");
      let s = this.startNodeAtNode(n);
      return s.local = n, r.specifiers.push(this.finishNode(s, "ImportDefaultSpecifier")), this.eat(12) && (this.maybeParseStarImportSpecifier(
      r) || this.parseNamedImportSpecifiers(r)), this.expectContextual(98), r.source = this.parseImportSource(), this.semicolon(), this.finishNode(
      r, "ImportDeclaration");
    }
    parseImportSource() {
      return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
    }
    assertNoSpace() {
      this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index) && this.raise(kT.UnexpectedSpace, this.state.lastTokEndLoc);
    }
  }, "placeholders"), JK = /* @__PURE__ */ i((e) => class extends e {
    static {
      i(this, "V8IntrinsicMixin");
    }
    parseV8Intrinsic() {
      if (this.match(54)) {
        let r = this.state.startLoc, n = this.startNode();
        if (this.next(), Ze(this.state.type)) {
          let s = this.parseIdentifierName(), a = this.createIdentifier(n, s);
          if (a.type = "V8IntrinsicIdentifier", this.match(10))
            return a;
        }
        this.unexpected(r);
      }
    }
    parseExprAtom(r) {
      return this.parseV8Intrinsic() || super.parseExprAtom(r);
    }
  }, "v8intrinsic"), FT = ["minimal", "fsharp", "hack", "smart"], jT = ["^^", "@@", "^", "%", "#"];
  function zK(e) {
    if (e.has("decorators")) {
      if (e.has("decorators-legacy"))
        throw new Error("Cannot use the decorators and decorators-legacy plugin together");
      let r = e.get("decorators").decoratorsBeforeExport;
      if (r != null && typeof r != "boolean")
        throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
      let n = e.get("decorators").allowCallParenthesized;
      if (n != null && typeof n != "boolean")
        throw new Error("'allowCallParenthesized' must be a boolean.");
    }
    if (e.has("flow") && e.has("typescript"))
      throw new Error("Cannot combine flow and typescript plugins.");
    if (e.has("placeholders") && e.has("v8intrinsic"))
      throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    if (e.has("pipelineOperator")) {
      var t;
      let r = e.get("pipelineOperator").proposal;
      if (!FT.includes(r)) {
        let s = FT.map((a) => `"${a}"`).join(", ");
        throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${s}.`);
      }
      let n = ((t = e.get("recordAndTuple")) == null ? void 0 : t.syntaxType) === "hash";
      if (r === "hack") {
        if (e.has("placeholders"))
          throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
        if (e.has("v8intrinsic"))
          throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
        let s = e.get("pipelineOperator").topicToken;
        if (!jT.includes(s)) {
          let a = jT.map((o) => `"${o}"`).join(", ");
          throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${a}\
.`);
        }
        if (s === "#" && n)
          throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["\
recordAndTuple", e.get("recordAndTuple")])}\`.`);
      } else if (r === "smart" && n)
        throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", e.
        get("recordAndTuple")])}\`.`);
    }
    if (e.has("moduleAttributes")) {
      if (e.has("deprecatedImportAssert") || e.has("importAssertions"))
        throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
      if (e.get("moduleAttributes").version !== "may-2020")
        throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the on\
ly supported value is 'may-2020'.");
    }
    if (e.has("importAssertions") && e.has("deprecatedImportAssert"))
      throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
    if (!e.has("deprecatedImportAssert") && e.has("importAttributes") && e.get("importAttributes").deprecatedAssertSyntax && e.set("deprecat\
edImportAssert", {}), e.has("recordAndTuple")) {
      let r = e.get("recordAndTuple").syntaxType;
      if (r != null) {
        let n = ["hash", "bar"];
        if (!n.includes(r))
          throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + n.map((s) => `'${s}'`).join(", "));
      }
    }
    if (e.has("asyncDoExpressions") && !e.has("doExpressions")) {
      let r = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
      throw r.missingPlugins = "doExpressions", r;
    }
    if (e.has("optionalChainingAssign") && e.get("optionalChainingAssign").version !== "2023-07")
      throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, th\
e only supported value is '2023-07'.");
  }
  i(zK, "validatePlugins");
  var QT = {
    estree: QW,
    jsx: qK,
    flow: MK,
    typescript: WK,
    v8intrinsic: JK,
    placeholders: YK
  }, XK = Object.keys(QT);
  function QK() {
    return {
      sourceType: "script",
      sourceFilename: void 0,
      startIndex: 0,
      startColumn: 0,
      startLine: 1,
      allowAwaitOutsideFunction: !1,
      allowReturnOutsideFunction: !1,
      allowNewTargetOutsideFunction: !1,
      allowImportExportEverywhere: !1,
      allowSuperOutsideMethod: !1,
      allowUndeclaredExports: !1,
      plugins: [],
      strictMode: null,
      ranges: !1,
      tokens: !1,
      createImportExpressions: !1,
      createParenthesizedExpressions: !1,
      errorRecovery: !1,
      attachComment: !0,
      annexB: !0
    };
  }
  i(QK, "createDefaultOptions");
  function ZK(e) {
    let t = QK();
    if (e == null)
      return t;
    if (e.annexB != null && e.annexB !== !1)
      throw new Error("The `annexB` option can only be set to `false`.");
    for (let r of Object.keys(t))
      e[r] != null && (t[r] = e[r]);
    if (t.startLine === 1)
      e.startIndex == null && t.startColumn > 0 ? t.startIndex = t.startColumn : e.startColumn == null && t.startIndex > 0 && (t.startColumn =
      t.startIndex);
    else if ((e.startColumn == null || e.startIndex == null) && e.startIndex != null)
      throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
    return t;
  }
  i(ZK, "getOptions");
  var yh = class extends mh {
    static {
      i(this, "ExpressionParser");
    }
    checkProto(t, r, n, s) {
      if (t.type === "SpreadElement" || this.isObjectMethod(t) || t.computed || t.shorthand)
        return;
      let a = t.key;
      if ((a.type === "Identifier" ? a.name : a.value) === "__proto__") {
        if (r) {
          this.raise(O.RecordNoProto, a);
          return;
        }
        n.used && (s ? s.doubleProtoLoc === null && (s.doubleProtoLoc = a.loc.start) : this.raise(O.DuplicateProto, a)), n.used = !0;
      }
    }
    shouldExitDescending(t, r) {
      return t.type === "ArrowFunctionExpression" && this.offsetToSourcePos(t.start) === r;
    }
    getExpression() {
      this.enterInitialScopes(), this.nextToken();
      let t = this.parseExpression();
      return this.match(140) || this.unexpected(), this.finalizeRemainingComments(), t.comments = this.comments, t.errors = this.state.errors,
      this.options.tokens && (t.tokens = this.tokens), t;
    }
    parseExpression(t, r) {
      return t ? this.disallowInAnd(() => this.parseExpressionBase(r)) : this.allowInAnd(() => this.parseExpressionBase(r));
    }
    parseExpressionBase(t) {
      let r = this.state.startLoc, n = this.parseMaybeAssign(t);
      if (this.match(12)) {
        let s = this.startNodeAt(r);
        for (s.expressions = [n]; this.eat(12); )
          s.expressions.push(this.parseMaybeAssign(t));
        return this.toReferencedList(s.expressions), this.finishNode(s, "SequenceExpression");
      }
      return n;
    }
    parseMaybeAssignDisallowIn(t, r) {
      return this.disallowInAnd(() => this.parseMaybeAssign(t, r));
    }
    parseMaybeAssignAllowIn(t, r) {
      return this.allowInAnd(() => this.parseMaybeAssign(t, r));
    }
    setOptionalParametersError(t, r) {
      var n;
      t.optionalParametersLoc = (n = r?.loc) != null ? n : this.state.startLoc;
    }
    parseMaybeAssign(t, r) {
      let n = this.state.startLoc;
      if (this.isContextual(108) && this.prodParam.hasYield) {
        let l = this.parseYield();
        return r && (l = r.call(this, l, n)), l;
      }
      let s;
      t ? s = !1 : (t = new Si(), s = !0);
      let {
        type: a
      } = this.state;
      (a === 10 || Ze(a)) && (this.state.potentialArrowAt = this.state.start);
      let o = this.parseMaybeConditional(t);
      if (r && (o = r.call(this, o, n)), nK(this.state.type)) {
        let l = this.startNodeAt(n), u = this.state.value;
        if (l.operator = u, this.match(29)) {
          this.toAssignable(o, !0), l.left = o;
          let c = n.index;
          t.doubleProtoLoc != null && t.doubleProtoLoc.index >= c && (t.doubleProtoLoc = null), t.shorthandAssignLoc != null && t.shorthandAssignLoc.
          index >= c && (t.shorthandAssignLoc = null), t.privateKeyLoc != null && t.privateKeyLoc.index >= c && (this.checkDestructuringPrivate(
          t), t.privateKeyLoc = null);
        } else
          l.left = o;
        return this.next(), l.right = this.parseMaybeAssign(), this.checkLVal(o, this.finishNode(l, "AssignmentExpression")), l;
      } else s && this.checkExpressionErrors(t, !0);
      return o;
    }
    parseMaybeConditional(t) {
      let r = this.state.startLoc, n = this.state.potentialArrowAt, s = this.parseExprOps(t);
      return this.shouldExitDescending(s, n) ? s : this.parseConditional(s, r, t);
    }
    parseConditional(t, r, n) {
      if (this.eat(17)) {
        let s = this.startNodeAt(r);
        return s.test = t, s.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), s.alternate = this.parseMaybeAssign(), this.finishNode(
        s, "ConditionalExpression");
      }
      return t;
    }
    parseMaybeUnaryOrPrivate(t) {
      return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(t);
    }
    parseExprOps(t) {
      let r = this.state.startLoc, n = this.state.potentialArrowAt, s = this.parseMaybeUnaryOrPrivate(t);
      return this.shouldExitDescending(s, n) ? s : this.parseExprOp(s, r, -1);
    }
    parseExprOp(t, r, n) {
      if (this.isPrivateName(t)) {
        let a = this.getPrivateNameSV(t);
        (n >= Il(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(O.PrivateInExpectedIn, t, {
          identifierName: a
        }), this.classScope.usePrivateName(a, t.loc.start);
      }
      let s = this.state.type;
      if (iK(s) && (this.prodParam.hasIn || !this.match(58))) {
        let a = Il(s);
        if (a > n) {
          if (s === 39) {
            if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
              return t;
            this.checkPipelineAtInfixOperator(t, r);
          }
          let o = this.startNodeAt(r);
          o.left = t, o.operator = this.state.value;
          let l = s === 41 || s === 42, u = s === 40;
          if (u && (a = Il(42)), this.next(), s === 39 && this.hasPlugin(["pipelineOperator", {
            proposal: "minimal"
          }]) && this.state.type === 96 && this.prodParam.hasAwait)
            throw this.raise(O.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
          o.right = this.parseExprOpRightExpr(s, a);
          let c = this.finishNode(o, l || u ? "LogicalExpression" : "BinaryExpression"), p = this.state.type;
          if (u && (p === 41 || p === 42) || l && p === 40)
            throw this.raise(O.MixingCoalesceWithLogical, this.state.startLoc);
          return this.parseExprOp(c, r, n);
        }
      }
      return t;
    }
    parseExprOpRightExpr(t, r) {
      let n = this.state.startLoc;
      switch (t) {
        case 39:
          switch (this.getPluginOption("pipelineOperator", "proposal")) {
            case "hack":
              return this.withTopicBindingContext(() => this.parseHackPipeBody());
            case "smart":
              return this.withTopicBindingContext(() => {
                if (this.prodParam.hasYield && this.isContextual(108))
                  throw this.raise(O.PipeBodyIsTighter, this.state.startLoc);
                return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(t, r), n);
              });
            case "fsharp":
              return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(r));
          }
        default:
          return this.parseExprOpBaseRightExpr(t, r);
      }
    }
    parseExprOpBaseRightExpr(t, r) {
      let n = this.state.startLoc;
      return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), n, cK(t) ? r - 1 : r);
    }
    parseHackPipeBody() {
      var t;
      let {
        startLoc: r
      } = this.state, n = this.parseMaybeAssign();
      return HW.has(n.type) && !((t = n.extra) != null && t.parenthesized) && this.raise(O.PipeUnparenthesizedBody, r, {
        type: n.type
      }), this.topicReferenceWasUsedInCurrentContext() || this.raise(O.PipeTopicUnused, r), n;
    }
    checkExponentialAfterUnary(t) {
      this.match(57) && this.raise(O.UnexpectedTokenUnaryExponentiation, t.argument);
    }
    parseMaybeUnary(t, r) {
      let n = this.state.startLoc, s = this.isContextual(96);
      if (s && this.recordAwaitIfAllowed()) {
        this.next();
        let u = this.parseAwait(n);
        return r || this.checkExponentialAfterUnary(u), u;
      }
      let a = this.match(34), o = this.startNode();
      if (oK(this.state.type)) {
        o.operator = this.state.value, o.prefix = !0, this.match(72) && this.expectPlugin("throwExpressions");
        let u = this.match(89);
        if (this.next(), o.argument = this.parseMaybeUnary(null, !0), this.checkExpressionErrors(t, !0), this.state.strict && u) {
          let c = o.argument;
          c.type === "Identifier" ? this.raise(O.StrictDelete, o) : this.hasPropertyAsPrivateName(c) && this.raise(O.DeletePrivateField, o);
        }
        if (!a)
          return r || this.checkExponentialAfterUnary(o), this.finishNode(o, "UnaryExpression");
      }
      let l = this.parseUpdate(o, a, t);
      if (s) {
        let {
          type: u
        } = this.state;
        if ((this.hasPlugin("v8intrinsic") ? Qd(u) : Qd(u) && !this.match(54)) && !this.isAmbiguousAwait())
          return this.raiseOverwrite(O.AwaitNotInAsyncContext, n), this.parseAwait(n);
      }
      return l;
    }
    parseUpdate(t, r, n) {
      if (r) {
        let o = t;
        return this.checkLVal(o.argument, this.finishNode(o, "UpdateExpression")), t;
      }
      let s = this.state.startLoc, a = this.parseExprSubscripts(n);
      if (this.checkExpressionErrors(n, !1)) return a;
      for (; aK(this.state.type) && !this.canInsertSemicolon(); ) {
        let o = this.startNodeAt(s);
        o.operator = this.state.value, o.prefix = !1, o.argument = a, this.next(), this.checkLVal(a, a = this.finishNode(o, "UpdateExpressio\
n"));
      }
      return a;
    }
    parseExprSubscripts(t) {
      let r = this.state.startLoc, n = this.state.potentialArrowAt, s = this.parseExprAtom(t);
      return this.shouldExitDescending(s, n) ? s : this.parseSubscripts(s, r);
    }
    parseSubscripts(t, r, n) {
      let s = {
        optionalChainMember: !1,
        maybeAsyncArrow: this.atPossibleAsyncArrow(t),
        stop: !1
      };
      do
        t = this.parseSubscript(t, r, n, s), s.maybeAsyncArrow = !1;
      while (!s.stop);
      return t;
    }
    parseSubscript(t, r, n, s) {
      let {
        type: a
      } = this.state;
      if (!n && a === 15)
        return this.parseBind(t, r, n, s);
      if (Nl(a))
        return this.parseTaggedTemplateExpression(t, r, s);
      let o = !1;
      if (a === 18) {
        if (n && (this.raise(O.OptionalChainingNoNew, this.state.startLoc), this.lookaheadCharCode() === 40))
          return s.stop = !0, t;
        s.optionalChainMember = o = !0, this.next();
      }
      if (!n && this.match(10))
        return this.parseCoverCallAndAsyncArrowHead(t, r, s, o);
      {
        let l = this.eat(0);
        return l || o || this.eat(16) ? this.parseMember(t, r, s, l, o) : (s.stop = !0, t);
      }
    }
    parseMember(t, r, n, s, a) {
      let o = this.startNodeAt(r);
      return o.object = t, o.computed = s, s ? (o.property = this.parseExpression(), this.expect(3)) : this.match(139) ? (t.type === "Super" &&
      this.raise(O.SuperPrivateField, r), this.classScope.usePrivateName(this.state.value, this.state.startLoc), o.property = this.parsePrivateName()) :
      o.property = this.parseIdentifier(!0), n.optionalChainMember ? (o.optional = a, this.finishNode(o, "OptionalMemberExpression")) : this.
      finishNode(o, "MemberExpression");
    }
    parseBind(t, r, n, s) {
      let a = this.startNodeAt(r);
      return a.object = t, this.next(), a.callee = this.parseNoCallExpr(), s.stop = !0, this.parseSubscripts(this.finishNode(a, "BindExpress\
ion"), r, n);
    }
    parseCoverCallAndAsyncArrowHead(t, r, n, s) {
      let a = this.state.maybeInArrowParameters, o = null;
      this.state.maybeInArrowParameters = !0, this.next();
      let l = this.startNodeAt(r);
      l.callee = t;
      let {
        maybeAsyncArrow: u,
        optionalChainMember: c
      } = n;
      u && (this.expressionScope.enter(_K()), o = new Si()), c && (l.optional = s), s ? l.arguments = this.parseCallExpressionArguments(11) :
      l.arguments = this.parseCallExpressionArguments(11, t.type !== "Super", l, o);
      let p = this.finishCallExpression(l, c);
      return u && this.shouldParseAsyncArrow() && !s ? (n.stop = !0, this.checkDestructuringPrivate(o), this.expressionScope.validateAsPattern(),
      this.expressionScope.exit(), p = this.parseAsyncArrowFromCallExpression(this.startNodeAt(r), p)) : (u && (this.checkExpressionErrors(o,
      !0), this.expressionScope.exit()), this.toReferencedArguments(p)), this.state.maybeInArrowParameters = a, p;
    }
    toReferencedArguments(t, r) {
      this.toReferencedListDeep(t.arguments, r);
    }
    parseTaggedTemplateExpression(t, r, n) {
      let s = this.startNodeAt(r);
      return s.tag = t, s.quasi = this.parseTemplate(!0), n.optionalChainMember && this.raise(O.OptionalChainingNoTemplate, r), this.finishNode(
      s, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(t) {
      return t.type === "Identifier" && t.name === "async" && this.state.lastTokEndLoc.index === t.end && !this.canInsertSemicolon() && t.end -
      t.start === 5 && this.offsetToSourcePos(t.start) === this.state.potentialArrowAt;
    }
    finishCallExpression(t, r) {
      if (t.callee.type === "Import")
        if (t.arguments.length === 0 || t.arguments.length > 2)
          this.raise(O.ImportCallArity, t);
        else
          for (let n of t.arguments)
            n.type === "SpreadElement" && this.raise(O.ImportCallSpreadArgument, n);
      return this.finishNode(t, r ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(t, r, n, s) {
      let a = [], o = !0, l = this.state.inFSharpPipelineDirectBody;
      for (this.state.inFSharpPipelineDirectBody = !1; !this.eat(t); ) {
        if (o)
          o = !1;
        else if (this.expect(12), this.match(t)) {
          n && this.addTrailingCommaExtraToNode(n), this.next();
          break;
        }
        a.push(this.parseExprListItem(!1, s, r));
      }
      return this.state.inFSharpPipelineDirectBody = l, a;
    }
    shouldParseAsyncArrow() {
      return this.match(19) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(t, r) {
      var n;
      return this.resetPreviousNodeTrailingComments(r), this.expect(19), this.parseArrowExpression(t, r.arguments, !0, (n = r.extra) == null ?
      void 0 : n.trailingCommaLoc), r.innerComments && qa(t, r.innerComments), r.callee.trailingComments && qa(t, r.callee.trailingComments),
      t;
    }
    parseNoCallExpr() {
      let t = this.state.startLoc;
      return this.parseSubscripts(this.parseExprAtom(), t, !0);
    }
    parseExprAtom(t) {
      let r, n = null, {
        type: s
      } = this.state;
      switch (s) {
        case 79:
          return this.parseSuper();
        case 83:
          return r = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(r) : this.match(10) ? this.options.createImportExpressions ?
          this.parseImportCall(r) : this.finishNode(r, "Import") : (this.raise(O.UnsupportedImport, this.state.lastTokStartLoc), this.finishNode(
          r, "Import"));
        case 78:
          return r = this.startNode(), this.next(), this.finishNode(r, "ThisExpression");
        case 90:
          return this.parseDo(this.startNode(), !1);
        case 56:
        case 31:
          return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
        case 135:
          return this.parseNumericLiteral(this.state.value);
        case 136:
          return this.parseBigIntLiteral(this.state.value);
        case 134:
          return this.parseStringLiteral(this.state.value);
        case 84:
          return this.parseNullLiteral();
        case 85:
          return this.parseBooleanLiteral(!0);
        case 86:
          return this.parseBooleanLiteral(!1);
        case 10: {
          let a = this.state.potentialArrowAt === this.state.start;
          return this.parseParenAndDistinguishExpression(a);
        }
        case 2:
        case 1:
          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, !1, !0);
        case 0:
          return this.parseArrayLike(3, !0, !1, t);
        case 6:
        case 7:
          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, !1, !0);
        case 5:
          return this.parseObjectLike(8, !1, !1, t);
        case 68:
          return this.parseFunctionOrFunctionSent();
        case 26:
          n = this.parseDecorators();
        case 80:
          return this.parseClass(this.maybeTakeDecorators(n, this.startNode()), !1);
        case 77:
          return this.parseNewOrNewTarget();
        case 25:
        case 24:
          return this.parseTemplate(!1);
        case 15: {
          r = this.startNode(), this.next(), r.object = null;
          let a = r.callee = this.parseNoCallExpr();
          if (a.type === "MemberExpression")
            return this.finishNode(r, "BindExpression");
          throw this.raise(O.UnsupportedBind, a);
        }
        case 139:
          return this.raise(O.PrivateInExpectedIn, this.state.startLoc, {
            identifierName: this.state.value
          }), this.parsePrivateName();
        case 33:
          return this.parseTopicReferenceThenEqualsSign(54, "%");
        case 32:
          return this.parseTopicReferenceThenEqualsSign(44, "^");
        case 37:
        case 38:
          return this.parseTopicReference("hack");
        case 44:
        case 54:
        case 27: {
          let a = this.getPluginOption("pipelineOperator", "proposal");
          if (a)
            return this.parseTopicReference(a);
          this.unexpected();
          break;
        }
        case 47: {
          let a = this.input.codePointAt(this.nextTokenStart());
          An(a) || a === 62 ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
          break;
        }
        default:
          if (s === 137)
            return this.parseDecimalLiteral(this.state.value);
          if (Ze(s)) {
            if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123)
              return this.parseModuleExpression();
            let a = this.state.potentialArrowAt === this.state.start, o = this.state.containsEsc, l = this.parseIdentifier();
            if (!o && l.name === "async" && !this.canInsertSemicolon()) {
              let {
                type: u
              } = this.state;
              if (u === 68)
                return this.resetPreviousNodeTrailingComments(l), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(l));
              if (Ze(u))
                return this.lookaheadCharCode() === 61 ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(l)) : l;
              if (u === 90)
                return this.resetPreviousNodeTrailingComments(l), this.parseDo(this.startNodeAtNode(l), !0);
            }
            return a && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(l), [l],
            !1)) : l;
          } else
            this.unexpected();
      }
    }
    parseTopicReferenceThenEqualsSign(t, r) {
      let n = this.getPluginOption("pipelineOperator", "proposal");
      if (n)
        return this.state.type = t, this.state.value = r, this.state.pos--, this.state.end--, this.state.endLoc = sr(this.state.endLoc, -1),
        this.parseTopicReference(n);
      this.unexpected();
    }
    parseTopicReference(t) {
      let r = this.startNode(), n = this.state.startLoc, s = this.state.type;
      return this.next(), this.finishTopicReference(r, n, t, s);
    }
    finishTopicReference(t, r, n, s) {
      if (this.testTopicReferenceConfiguration(n, r, s)) {
        let a = n === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
        return this.topicReferenceIsAllowedInCurrentContext() || this.raise(n === "smart" ? O.PrimaryTopicNotAllowed : O.PipeTopicUnbound, r),
        this.registerTopicReference(), this.finishNode(t, a);
      } else
        throw this.raise(O.PipeTopicUnconfiguredToken, r, {
          token: rs(s)
        });
    }
    testTopicReferenceConfiguration(t, r, n) {
      switch (t) {
        case "hack":
          return this.hasPlugin(["pipelineOperator", {
            topicToken: rs(n)
          }]);
        case "smart":
          return n === 27;
        default:
          throw this.raise(O.PipeTopicRequiresHackPipes, r);
      }
    }
    parseAsyncArrowUnaryFunction(t) {
      this.prodParam.enter(_l(!0, this.prodParam.hasYield));
      let r = [this.parseIdentifier()];
      return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(O.LineTerminatorBeforeArrow, this.state.curPosition()), this.
      expect(19), this.parseArrowExpression(t, r, !0);
    }
    parseDo(t, r) {
      this.expectPlugin("doExpressions"), r && this.expectPlugin("asyncDoExpressions"), t.async = r, this.next();
      let n = this.state.labels;
      return this.state.labels = [], r ? (this.prodParam.enter(2), t.body = this.parseBlock(), this.prodParam.exit()) : t.body = this.parseBlock(),
      this.state.labels = n, this.finishNode(t, "DoExpression");
    }
    parseSuper() {
      let t = this.startNode();
      return this.next(), this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod ? this.raise(O.SuperNotAllowed,
      t) : !this.scope.allowSuper && !this.options.allowSuperOutsideMethod && this.raise(O.UnexpectedSuper, t), !this.match(10) && !this.match(
      0) && !this.match(16) && this.raise(O.UnsupportedSuper, t), this.finishNode(t, "Super");
    }
    parsePrivateName() {
      let t = this.startNode(), r = this.startNodeAt(sr(this.state.startLoc, 1)), n = this.state.value;
      return this.next(), t.id = this.createIdentifier(r, n), this.finishNode(t, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
      let t = this.startNode();
      if (this.next(), this.prodParam.hasYield && this.match(16)) {
        let r = this.createIdentifier(this.startNodeAtNode(t), "function");
        return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.
        parseMetaProperty(t, r, "sent");
      }
      return this.parseFunction(t);
    }
    parseMetaProperty(t, r, n) {
      t.meta = r;
      let s = this.state.containsEsc;
      return t.property = this.parseIdentifier(!0), (t.property.name !== n || s) && this.raise(O.UnsupportedMetaProperty, t.property, {
        target: r.name,
        onlyValidPropertyName: n
      }), this.finishNode(t, "MetaProperty");
    }
    parseImportMetaProperty(t) {
      let r = this.createIdentifier(this.startNodeAtNode(t), "import");
      if (this.next(), this.isContextual(101))
        this.inModule || this.raise(O.ImportMetaOutsideModule, r), this.sawUnambiguousESM = !0;
      else if (this.isContextual(105) || this.isContextual(97)) {
        let n = this.isContextual(105);
        if (n || this.unexpected(), this.expectPlugin(n ? "sourcePhaseImports" : "deferredImportEvaluation"), !this.options.createImportExpressions)
          throw this.raise(O.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {
            phase: this.state.value
          });
        return this.next(), t.phase = n ? "source" : "defer", this.parseImportCall(t);
      }
      return this.parseMetaProperty(t, r, "meta");
    }
    parseLiteralAtNode(t, r, n) {
      return this.addExtra(n, "rawValue", t), this.addExtra(n, "raw", this.input.slice(this.offsetToSourcePos(n.start), this.state.end)), n.
      value = t, this.next(), this.finishNode(n, r);
    }
    parseLiteral(t, r) {
      let n = this.startNode();
      return this.parseLiteralAtNode(t, r, n);
    }
    parseStringLiteral(t) {
      return this.parseLiteral(t, "StringLiteral");
    }
    parseNumericLiteral(t) {
      return this.parseLiteral(t, "NumericLiteral");
    }
    parseBigIntLiteral(t) {
      return this.parseLiteral(t, "BigIntLiteral");
    }
    parseDecimalLiteral(t) {
      return this.parseLiteral(t, "DecimalLiteral");
    }
    parseRegExpLiteral(t) {
      let r = this.startNode();
      return this.addExtra(r, "raw", this.input.slice(this.offsetToSourcePos(r.start), this.state.end)), r.pattern = t.pattern, r.flags = t.
      flags, this.next(), this.finishNode(r, "RegExpLiteral");
    }
    parseBooleanLiteral(t) {
      let r = this.startNode();
      return r.value = t, this.next(), this.finishNode(r, "BooleanLiteral");
    }
    parseNullLiteral() {
      let t = this.startNode();
      return this.next(), this.finishNode(t, "NullLiteral");
    }
    parseParenAndDistinguishExpression(t) {
      let r = this.state.startLoc, n;
      this.next(), this.expressionScope.enter(IK());
      let s = this.state.maybeInArrowParameters, a = this.state.inFSharpPipelineDirectBody;
      this.state.maybeInArrowParameters = !0, this.state.inFSharpPipelineDirectBody = !1;
      let o = this.state.startLoc, l = [], u = new Si(), c = !0, p, f;
      for (; !this.match(11); ) {
        if (c)
          c = !1;
        else if (this.expect(12, u.optionalParametersLoc === null ? null : u.optionalParametersLoc), this.match(11)) {
          f = this.state.startLoc;
          break;
        }
        if (this.match(21)) {
          let P = this.state.startLoc;
          if (p = this.state.startLoc, l.push(this.parseParenItem(this.parseRestBinding(), P)), !this.checkCommaAfterRest(41))
            break;
        } else
          l.push(this.parseMaybeAssignAllowIn(u, this.parseParenItem));
      }
      let h = this.state.lastTokEndLoc;
      this.expect(11), this.state.maybeInArrowParameters = s, this.state.inFSharpPipelineDirectBody = a;
      let g = this.startNodeAt(r);
      return t && this.shouldParseArrow(l) && (g = this.parseArrow(g)) ? (this.checkDestructuringPrivate(u), this.expressionScope.validateAsPattern(),
      this.expressionScope.exit(), this.parseArrowExpression(g, l, !1), g) : (this.expressionScope.exit(), l.length || this.unexpected(this.
      state.lastTokStartLoc), f && this.unexpected(f), p && this.unexpected(p), this.checkExpressionErrors(u, !0), this.toReferencedListDeep(
      l, !0), l.length > 1 ? (n = this.startNodeAt(o), n.expressions = l, this.finishNode(n, "SequenceExpression"), this.resetEndLocation(n,
      h)) : n = l[0], this.wrapParenthesis(r, n));
    }
    wrapParenthesis(t, r) {
      if (!this.options.createParenthesizedExpressions)
        return this.addExtra(r, "parenthesized", !0), this.addExtra(r, "parenStart", t.index), this.takeSurroundingComments(r, t.index, this.
        state.lastTokEndLoc.index), r;
      let n = this.startNodeAt(t);
      return n.expression = r, this.finishNode(n, "ParenthesizedExpression");
    }
    shouldParseArrow(t) {
      return !this.canInsertSemicolon();
    }
    parseArrow(t) {
      if (this.eat(19))
        return t;
    }
    parseParenItem(t, r) {
      return t;
    }
    parseNewOrNewTarget() {
      let t = this.startNode();
      if (this.next(), this.match(16)) {
        let r = this.createIdentifier(this.startNodeAtNode(t), "new");
        this.next();
        let n = this.parseMetaProperty(t, r, "target");
        return !this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction && this.raise(O.UnexpectedNewTarget,
        n), n;
      }
      return this.parseNew(t);
    }
    parseNew(t) {
      if (this.parseNewCallee(t), this.eat(10)) {
        let r = this.parseExprList(11);
        this.toReferencedList(r), t.arguments = r;
      } else
        t.arguments = [];
      return this.finishNode(t, "NewExpression");
    }
    parseNewCallee(t) {
      let r = this.match(83), n = this.parseNoCallExpr();
      t.callee = n, r && (n.type === "Import" || n.type === "ImportExpression") && this.raise(O.ImportCallNotNewExpression, n);
    }
    parseTemplateElement(t) {
      let {
        start: r,
        startLoc: n,
        end: s,
        value: a
      } = this.state, o = r + 1, l = this.startNodeAt(sr(n, 1));
      a === null && (t || this.raise(O.InvalidEscapeSequenceTemplate, sr(this.state.firstInvalidTemplateEscapePos, 1)));
      let u = this.match(24), c = u ? -1 : -2, p = s + c;
      l.value = {
        raw: this.input.slice(o, p).replace(/\r\n?/g, `
`),
        cooked: a === null ? null : a.slice(1, c)
      }, l.tail = u, this.next();
      let f = this.finishNode(l, "TemplateElement");
      return this.resetEndLocation(f, sr(this.state.lastTokEndLoc, c)), f;
    }
    parseTemplate(t) {
      let r = this.startNode(), n = this.parseTemplateElement(t), s = [n], a = [];
      for (; !n.tail; )
        a.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), s.push(n = this.parseTemplateElement(t));
      return r.expressions = a, r.quasis = s, this.finishNode(r, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
      return this.parseExpression();
    }
    parseObjectLike(t, r, n, s) {
      n && this.expectPlugin("recordAndTuple");
      let a = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = !1;
      let o = /* @__PURE__ */ Object.create(null), l = !0, u = this.startNode();
      for (u.properties = [], this.next(); !this.match(t); ) {
        if (l)
          l = !1;
        else if (this.expect(12), this.match(t)) {
          this.addTrailingCommaExtraToNode(u);
          break;
        }
        let p;
        r ? p = this.parseBindingProperty() : (p = this.parsePropertyDefinition(s), this.checkProto(p, n, o, s)), n && !this.isObjectProperty(
        p) && p.type !== "SpreadElement" && this.raise(O.InvalidRecordProperty, p), p.shorthand && this.addExtra(p, "shorthand", !0), u.properties.
        push(p);
      }
      this.next(), this.state.inFSharpPipelineDirectBody = a;
      let c = "ObjectExpression";
      return r ? c = "ObjectPattern" : n && (c = "RecordExpression"), this.finishNode(u, c);
    }
    addTrailingCommaExtraToNode(t) {
      this.addExtra(t, "trailingComma", this.state.lastTokStartLoc.index), this.addExtra(t, "trailingCommaLoc", this.state.lastTokStartLoc, !1);
    }
    maybeAsyncOrAccessorProp(t) {
      return !t.computed && t.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
    }
    parsePropertyDefinition(t) {
      let r = [];
      if (this.match(26))
        for (this.hasPlugin("decorators") && this.raise(O.UnsupportedPropertyDecorator, this.state.startLoc); this.match(26); )
          r.push(this.parseDecorator());
      let n = this.startNode(), s = !1, a = !1, o;
      if (this.match(21))
        return r.length && this.unexpected(), this.parseSpread();
      r.length && (n.decorators = r, r = []), n.method = !1, t && (o = this.state.startLoc);
      let l = this.eat(55);
      this.parsePropertyNamePrefixOperator(n);
      let u = this.state.containsEsc;
      if (this.parsePropertyName(n, t), !l && !u && this.maybeAsyncOrAccessorProp(n)) {
        let {
          key: c
        } = n, p = c.name;
        p === "async" && !this.hasPrecedingLineBreak() && (s = !0, this.resetPreviousNodeTrailingComments(c), l = this.eat(55), this.parsePropertyName(
        n)), (p === "get" || p === "set") && (a = !0, this.resetPreviousNodeTrailingComments(c), n.kind = p, this.match(55) && (l = !0, this.
        raise(O.AccessorIsGenerator, this.state.curPosition(), {
          kind: p
        }), this.next()), this.parsePropertyName(n));
      }
      return this.parseObjPropValue(n, o, l, s, !1, a, t);
    }
    getGetterSetterExpectedParamCount(t) {
      return t.kind === "get" ? 0 : 1;
    }
    getObjectOrClassMethodParams(t) {
      return t.params;
    }
    checkGetterSetterParams(t) {
      var r;
      let n = this.getGetterSetterExpectedParamCount(t), s = this.getObjectOrClassMethodParams(t);
      s.length !== n && this.raise(t.kind === "get" ? O.BadGetterArity : O.BadSetterArity, t), t.kind === "set" && ((r = s[s.length - 1]) ==
      null ? void 0 : r.type) === "RestElement" && this.raise(O.BadSetterRestParameter, t);
    }
    parseObjectMethod(t, r, n, s, a) {
      if (a) {
        let o = this.parseMethod(t, r, !1, !1, !1, "ObjectMethod");
        return this.checkGetterSetterParams(o), o;
      }
      if (n || r || this.match(10))
        return s && this.unexpected(), t.kind = "method", t.method = !0, this.parseMethod(t, r, n, !1, !1, "ObjectMethod");
    }
    parseObjectProperty(t, r, n, s) {
      if (t.shorthand = !1, this.eat(14))
        return t.value = n ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(s), this.finishNode(t, "ObjectProper\
ty");
      if (!t.computed && t.key.type === "Identifier") {
        if (this.checkReservedWord(t.key.name, t.key.loc.start, !0, !1), n)
          t.value = this.parseMaybeDefault(r, Dn(t.key));
        else if (this.match(29)) {
          let a = this.state.startLoc;
          s != null ? s.shorthandAssignLoc === null && (s.shorthandAssignLoc = a) : this.raise(O.InvalidCoverInitializedName, a), t.value = this.
          parseMaybeDefault(r, Dn(t.key));
        } else
          t.value = Dn(t.key);
        return t.shorthand = !0, this.finishNode(t, "ObjectProperty");
      }
    }
    parseObjPropValue(t, r, n, s, a, o, l) {
      let u = this.parseObjectMethod(t, n, s, a, o) || this.parseObjectProperty(t, r, a, l);
      return u || this.unexpected(), u;
    }
    parsePropertyName(t, r) {
      if (this.eat(0))
        t.computed = !0, t.key = this.parseMaybeAssignAllowIn(), this.expect(3);
      else {
        let {
          type: n,
          value: s
        } = this.state, a;
        if (Vr(n))
          a = this.parseIdentifier(!0);
        else
          switch (n) {
            case 135:
              a = this.parseNumericLiteral(s);
              break;
            case 134:
              a = this.parseStringLiteral(s);
              break;
            case 136:
              a = this.parseBigIntLiteral(s);
              break;
            case 139: {
              let o = this.state.startLoc;
              r != null ? r.privateKeyLoc === null && (r.privateKeyLoc = o) : this.raise(O.UnexpectedPrivateField, o), a = this.parsePrivateName();
              break;
            }
            default:
              if (n === 137) {
                a = this.parseDecimalLiteral(s);
                break;
              }
              this.unexpected();
          }
        t.key = a, n !== 139 && (t.computed = !1);
      }
    }
    initFunction(t, r) {
      t.id = null, t.generator = !1, t.async = r;
    }
    parseMethod(t, r, n, s, a, o, l = !1) {
      this.initFunction(t, n), t.generator = r, this.scope.enter(18 | (l ? 64 : 0) | (a ? 32 : 0)), this.prodParam.enter(_l(n, t.generator)),
      this.parseFunctionParams(t, s);
      let u = this.parseFunctionBodyAndFinish(t, o, !0);
      return this.prodParam.exit(), this.scope.exit(), u;
    }
    parseArrayLike(t, r, n, s) {
      n && this.expectPlugin("recordAndTuple");
      let a = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = !1;
      let o = this.startNode();
      return this.next(), o.elements = this.parseExprList(t, !n, s, o), this.state.inFSharpPipelineDirectBody = a, this.finishNode(o, n ? "T\
upleExpression" : "ArrayExpression");
    }
    parseArrowExpression(t, r, n, s) {
      this.scope.enter(6);
      let a = _l(n, !1);
      !this.match(5) && this.prodParam.hasIn && (a |= 8), this.prodParam.enter(a), this.initFunction(t, n);
      let o = this.state.maybeInArrowParameters;
      return r && (this.state.maybeInArrowParameters = !0, this.setArrowFunctionParameters(t, r, s)), this.state.maybeInArrowParameters = !1,
      this.parseFunctionBody(t, !0), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = o, this.finishNode(t, "Ar\
rowFunctionExpression");
    }
    setArrowFunctionParameters(t, r, n) {
      this.toAssignableList(r, n, !1), t.params = r;
    }
    parseFunctionBodyAndFinish(t, r, n = !1) {
      return this.parseFunctionBody(t, !1, n), this.finishNode(t, r);
    }
    parseFunctionBody(t, r, n = !1) {
      let s = r && !this.match(5);
      if (this.expressionScope.enter(YT()), s)
        t.body = this.parseMaybeAssign(), this.checkParams(t, !1, r, !1);
      else {
        let a = this.state.strict, o = this.state.labels;
        this.state.labels = [], this.prodParam.enter(this.prodParam.currentFlags() | 4), t.body = this.parseBlock(!0, !1, (l) => {
          let u = !this.isSimpleParamList(t.params);
          l && u && this.raise(O.IllegalLanguageModeDirective, (t.kind === "method" || t.kind === "constructor") && t.key ? t.key.loc.end : t);
          let c = !a && this.state.strict;
          this.checkParams(t, !this.state.strict && !r && !n && !u, r, c), this.state.strict && t.id && this.checkIdentifier(t.id, 65, c);
        }), this.prodParam.exit(), this.state.labels = o;
      }
      this.expressionScope.exit();
    }
    isSimpleParameter(t) {
      return t.type === "Identifier";
    }
    isSimpleParamList(t) {
      for (let r = 0, n = t.length; r < n; r++)
        if (!this.isSimpleParameter(t[r])) return !1;
      return !0;
    }
    checkParams(t, r, n, s = !0) {
      let a = !r && /* @__PURE__ */ new Set(), o = {
        type: "FormalParameters"
      };
      for (let l of t.params)
        this.checkLVal(l, o, 5, a, s);
    }
    parseExprList(t, r, n, s) {
      let a = [], o = !0;
      for (; !this.eat(t); ) {
        if (o)
          o = !1;
        else if (this.expect(12), this.match(t)) {
          s && this.addTrailingCommaExtraToNode(s), this.next();
          break;
        }
        a.push(this.parseExprListItem(r, n));
      }
      return a;
    }
    parseExprListItem(t, r, n) {
      let s;
      if (this.match(12))
        t || this.raise(O.UnexpectedToken, this.state.curPosition(), {
          unexpected: ","
        }), s = null;
      else if (this.match(21)) {
        let a = this.state.startLoc;
        s = this.parseParenItem(this.parseSpread(r), a);
      } else if (this.match(17)) {
        this.expectPlugin("partialApplication"), n || this.raise(O.UnexpectedArgumentPlaceholder, this.state.startLoc);
        let a = this.startNode();
        this.next(), s = this.finishNode(a, "ArgumentPlaceholder");
      } else
        s = this.parseMaybeAssignAllowIn(r, this.parseParenItem);
      return s;
    }
    parseIdentifier(t) {
      let r = this.startNode(), n = this.parseIdentifierName(t);
      return this.createIdentifier(r, n);
    }
    createIdentifier(t, r) {
      return t.name = r, t.loc.identifierName = r, this.finishNode(t, "Identifier");
    }
    parseIdentifierName(t) {
      let r, {
        startLoc: n,
        type: s
      } = this.state;
      Vr(s) ? r = this.state.value : this.unexpected();
      let a = tK(s);
      return t ? a && this.replaceToken(132) : this.checkReservedWord(r, n, a, !1), this.next(), r;
    }
    checkReservedWord(t, r, n, s) {
      if (t.length > 10 || !TK(t))
        return;
      if (n && gK(t)) {
        this.raise(O.UnexpectedKeyword, r, {
          keyword: t
        });
        return;
      }
      if ((this.state.strict ? s ? WT : VT : UT)(t, this.inModule)) {
        this.raise(O.UnexpectedReservedWord, r, {
          reservedWord: t
        });
        return;
      } else if (t === "yield") {
        if (this.prodParam.hasYield) {
          this.raise(O.YieldBindingIdentifier, r);
          return;
        }
      } else if (t === "await") {
        if (this.prodParam.hasAwait) {
          this.raise(O.AwaitBindingIdentifier, r);
          return;
        }
        if (this.scope.inStaticBlock) {
          this.raise(O.AwaitBindingIdentifierInStaticBlock, r);
          return;
        }
        this.expressionScope.recordAsyncArrowParametersError(r);
      } else if (t === "arguments" && this.scope.inClassAndNotInNonArrowFunction) {
        this.raise(O.ArgumentsInClass, r);
        return;
      }
    }
    recordAwaitIfAllowed() {
      let t = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;
      return t && !this.scope.inFunction && (this.state.hasTopLevelAwait = !0), t;
    }
    parseAwait(t) {
      let r = this.startNodeAt(t);
      return this.expressionScope.recordParameterInitializerError(O.AwaitExpressionFormalParameter, r), this.eat(55) && this.raise(O.ObsoleteAwaitStar,
      r), !this.scope.inFunction && !this.options.allowAwaitOutsideFunction && (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst =
      !0 : this.sawUnambiguousESM = !0), this.state.soloAwait || (r.argument = this.parseMaybeUnary(null, !0)), this.finishNode(r, "AwaitExp\
ression");
    }
    isAmbiguousAwait() {
      if (this.hasPrecedingLineBreak()) return !0;
      let {
        type: t
      } = this.state;
      return t === 53 || t === 10 || t === 0 || Nl(t) || t === 102 && !this.state.containsEsc || t === 138 || t === 56 || this.hasPlugin("v8\
intrinsic") && t === 54;
    }
    parseYield() {
      let t = this.startNode();
      this.expressionScope.recordParameterInitializerError(O.YieldInParameter, t), this.next();
      let r = !1, n = null;
      if (!this.hasPrecedingLineBreak())
        switch (r = this.eat(55), this.state.type) {
          case 13:
          case 140:
          case 8:
          case 11:
          case 3:
          case 9:
          case 14:
          case 12:
            if (!r) break;
          default:
            n = this.parseMaybeAssign();
        }
      return t.delegate = r, t.argument = n, this.finishNode(t, "YieldExpression");
    }
    parseImportCall(t) {
      if (this.next(), t.source = this.parseMaybeAssignAllowIn(), t.options = null, this.eat(12) && !this.match(11) && (t.options = this.parseMaybeAssignAllowIn(),
      this.eat(12) && !this.match(11))) {
        do
          this.parseMaybeAssignAllowIn();
        while (this.eat(12) && !this.match(11));
        this.raise(O.ImportCallArity, t);
      }
      return this.expect(11), this.finishNode(t, "ImportExpression");
    }
    checkPipelineAtInfixOperator(t, r) {
      this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }]) && t.type === "SequenceExpression" && this.raise(O.PipelineHeadSequenceExpression, r);
    }
    parseSmartPipelineBodyInStyle(t, r) {
      if (this.isSimpleReference(t)) {
        let n = this.startNodeAt(r);
        return n.callee = t, this.finishNode(n, "PipelineBareFunction");
      } else {
        let n = this.startNodeAt(r);
        return this.checkSmartPipeTopicBodyEarlyErrors(r), n.expression = t, this.finishNode(n, "PipelineTopicExpression");
      }
    }
    isSimpleReference(t) {
      switch (t.type) {
        case "MemberExpression":
          return !t.computed && this.isSimpleReference(t.object);
        case "Identifier":
          return !0;
        default:
          return !1;
      }
    }
    checkSmartPipeTopicBodyEarlyErrors(t) {
      if (this.match(19))
        throw this.raise(O.PipelineBodyNoArrow, this.state.startLoc);
      this.topicReferenceWasUsedInCurrentContext() || this.raise(O.PipelineTopicUnused, t);
    }
    withTopicBindingContext(t) {
      let r = this.state.topicContext;
      this.state.topicContext = {
        maxNumOfResolvableTopics: 1,
        maxTopicIndex: null
      };
      try {
        return t();
      } finally {
        this.state.topicContext = r;
      }
    }
    withSmartMixTopicForbiddingContext(t) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        let r = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        try {
          return t();
        } finally {
          this.state.topicContext = r;
        }
      } else
        return t();
    }
    withSoloAwaitPermittingContext(t) {
      let r = this.state.soloAwait;
      this.state.soloAwait = !0;
      try {
        return t();
      } finally {
        this.state.soloAwait = r;
      }
    }
    allowInAnd(t) {
      let r = this.prodParam.currentFlags();
      if (8 & ~r) {
        this.prodParam.enter(r | 8);
        try {
          return t();
        } finally {
          this.prodParam.exit();
        }
      }
      return t();
    }
    disallowInAnd(t) {
      let r = this.prodParam.currentFlags();
      if (8 & r) {
        this.prodParam.enter(r & -9);
        try {
          return t();
        } finally {
          this.prodParam.exit();
        }
      }
      return t();
    }
    registerTopicReference() {
      this.state.topicContext.maxTopicIndex = 0;
    }
    topicReferenceIsAllowedInCurrentContext() {
      return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentContext() {
      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(t) {
      let r = this.state.startLoc;
      this.state.potentialArrowAt = this.state.start;
      let n = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = !0;
      let s = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), r, t);
      return this.state.inFSharpPipelineDirectBody = n, s;
    }
    parseModuleExpression() {
      this.expectPlugin("moduleBlocks");
      let t = this.startNode();
      this.next(), this.match(5) || this.unexpected(null, 5);
      let r = this.startNodeAt(this.state.endLoc);
      this.next();
      let n = this.initializeScopes(!0);
      this.enterInitialScopes();
      try {
        t.body = this.parseProgram(r, 8, "module");
      } finally {
        n();
      }
      return this.finishNode(t, "ModuleExpression");
    }
    parsePropertyNamePrefixOperator(t) {
    }
  }, zd = {
    kind: 1
  }, eG = {
    kind: 2
  }, tG = /[\uD800-\uDFFF]/u, Xd = /in(?:stanceof)?/y;
  function rG(e, t, r) {
    for (let n = 0; n < e.length; n++) {
      let s = e[n], {
        type: a
      } = s;
      if (typeof a == "number") {
        {
          if (a === 139) {
            let {
              loc: o,
              start: l,
              value: u,
              end: c
            } = s, p = l + 1, f = sr(o.start, 1);
            e.splice(n, 1, new ln({
              type: vn(27),
              value: "#",
              start: l,
              end: p,
              startLoc: o.start,
              endLoc: f
            }), new ln({
              type: vn(132),
              value: u,
              start: p,
              end: c,
              startLoc: f,
              endLoc: o.end
            })), n++;
            continue;
          }
          if (Nl(a)) {
            let {
              loc: o,
              start: l,
              value: u,
              end: c
            } = s, p = l + 1, f = sr(o.start, 1), h;
            t.charCodeAt(l - r) === 96 ? h = new ln({
              type: vn(22),
              value: "`",
              start: l,
              end: p,
              startLoc: o.start,
              endLoc: f
            }) : h = new ln({
              type: vn(8),
              value: "}",
              start: l,
              end: p,
              startLoc: o.start,
              endLoc: f
            });
            let g, P, d, y;
            a === 24 ? (P = c - 1, d = sr(o.end, -1), g = u === null ? null : u.slice(1, -1), y = new ln({
              type: vn(22),
              value: "`",
              start: P,
              end: c,
              startLoc: d,
              endLoc: o.end
            })) : (P = c - 2, d = sr(o.end, -2), g = u === null ? null : u.slice(1, -2), y = new ln({
              type: vn(23),
              value: "${",
              start: P,
              end: c,
              startLoc: d,
              endLoc: o.end
            })), e.splice(n, 1, h, new ln({
              type: vn(20),
              value: g,
              start: p,
              end: P,
              startLoc: f,
              endLoc: d
            }), y), n += 2;
            continue;
          }
        }
        s.type = vn(a);
      }
    }
    return e;
  }
  i(rG, "babel7CompatTokens");
  var gh = class extends yh {
    static {
      i(this, "StatementParser");
    }
    parseTopLevel(t, r) {
      return t.program = this.parseProgram(r), t.comments = this.comments, this.options.tokens && (t.tokens = rG(this.tokens, this.input, this.
      startIndex)), this.finishNode(t, "File");
    }
    parseProgram(t, r = 140, n = this.options.sourceType) {
      if (t.sourceType = n, t.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(t, !0, !0, r), this.inModule) {
        if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
          for (let [a, o] of Array.from(this.scope.undefinedExports))
            this.raise(O.ModuleExportUndefined, o, {
              localName: a
            });
        this.addExtra(t, "topLevelAwait", this.state.hasTopLevelAwait);
      }
      let s;
      return r === 140 ? s = this.finishNode(t, "Program") : s = this.finishNodeAt(t, "Program", sr(this.state.startLoc, -1)), s;
    }
    stmtToDirective(t) {
      let r = t;
      r.type = "Directive", r.value = r.expression, delete r.expression;
      let n = r.value, s = n.value, a = this.input.slice(this.offsetToSourcePos(n.start), this.offsetToSourcePos(n.end)), o = n.value = a.slice(
      1, -1);
      return this.addExtra(n, "raw", a), this.addExtra(n, "rawValue", o), this.addExtra(n, "expressionValue", s), n.type = "DirectiveLiteral",
      r;
    }
    parseInterpreterDirective() {
      if (!this.match(28))
        return null;
      let t = this.startNode();
      return t.value = this.state.value, this.next(), this.finishNode(t, "InterpreterDirective");
    }
    isLet() {
      return this.isContextual(100) ? this.hasFollowingBindingAtom() : !1;
    }
    chStartsBindingIdentifier(t, r) {
      if (An(t)) {
        if (Xd.lastIndex = r, Xd.test(this.input)) {
          let n = this.codePointAtPos(Xd.lastIndex);
          if (!Ei(n) && n !== 92)
            return !1;
        }
        return !0;
      } else return t === 92;
    }
    chStartsBindingPattern(t) {
      return t === 91 || t === 123;
    }
    hasFollowingBindingAtom() {
      let t = this.nextTokenStart(), r = this.codePointAtPos(t);
      return this.chStartsBindingPattern(r) || this.chStartsBindingIdentifier(r, t);
    }
    hasInLineFollowingBindingIdentifierOrBrace() {
      let t = this.nextTokenInLineStart(), r = this.codePointAtPos(t);
      return r === 123 || this.chStartsBindingIdentifier(r, t);
    }
    startsUsingForOf() {
      let {
        type: t,
        containsEsc: r
      } = this.lookahead();
      if (t === 102 && !r)
        return !1;
      if (Ze(t) && !this.hasFollowingLineBreak())
        return this.expectPlugin("explicitResourceManagement"), !0;
    }
    startsAwaitUsing() {
      let t = this.nextTokenInLineStart();
      if (this.isUnparsedContextual(t, "using")) {
        t = this.nextTokenInLineStartSince(t + 5);
        let r = this.codePointAtPos(t);
        if (this.chStartsBindingIdentifier(r, t))
          return this.expectPlugin("explicitResourceManagement"), !0;
      }
      return !1;
    }
    parseModuleItem() {
      return this.parseStatementLike(15);
    }
    parseStatementListItem() {
      return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
    }
    parseStatementOrSloppyAnnexBFunctionDeclaration(t = !1) {
      let r = 0;
      return this.options.annexB && !this.state.strict && (r |= 4, t && (r |= 8)), this.parseStatementLike(r);
    }
    parseStatement() {
      return this.parseStatementLike(0);
    }
    parseStatementLike(t) {
      let r = null;
      return this.match(26) && (r = this.parseDecorators(!0)), this.parseStatementContent(t, r);
    }
    parseStatementContent(t, r) {
      let n = this.state.type, s = this.startNode(), a = !!(t & 2), o = !!(t & 4), l = t & 1;
      switch (n) {
        case 60:
          return this.parseBreakContinueStatement(s, !0);
        case 63:
          return this.parseBreakContinueStatement(s, !1);
        case 64:
          return this.parseDebuggerStatement(s);
        case 90:
          return this.parseDoWhileStatement(s);
        case 91:
          return this.parseForStatement(s);
        case 68:
          if (this.lookaheadCharCode() === 46) break;
          return o || this.raise(this.state.strict ? O.StrictFunction : this.options.annexB ? O.SloppyFunctionAnnexB : O.SloppyFunction, this.
          state.startLoc), this.parseFunctionStatement(s, !1, !a && o);
        case 80:
          return a || this.unexpected(), this.parseClass(this.maybeTakeDecorators(r, s), !0);
        case 69:
          return this.parseIfStatement(s);
        case 70:
          return this.parseReturnStatement(s);
        case 71:
          return this.parseSwitchStatement(s);
        case 72:
          return this.parseThrowStatement(s);
        case 73:
          return this.parseTryStatement(s);
        case 96:
          if (!this.state.containsEsc && this.startsAwaitUsing())
            return this.recordAwaitIfAllowed() ? a || this.raise(O.UnexpectedLexicalDeclaration, s) : this.raise(O.AwaitUsingNotInAsyncContext,
            s), this.next(), this.parseVarStatement(s, "await using");
          break;
        case 107:
          if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace())
            break;
          return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(O.UnexpectedUsingDeclaration,
          this.state.startLoc) : a || this.raise(O.UnexpectedLexicalDeclaration, this.state.startLoc), this.parseVarStatement(s, "using");
        case 100: {
          if (this.state.containsEsc)
            break;
          let p = this.nextTokenStart(), f = this.codePointAtPos(p);
          if (f !== 91 && (!a && this.hasFollowingLineBreak() || !this.chStartsBindingIdentifier(f, p) && f !== 123))
            break;
        }
        case 75:
          a || this.raise(O.UnexpectedLexicalDeclaration, this.state.startLoc);
        case 74: {
          let p = this.state.value;
          return this.parseVarStatement(s, p);
        }
        case 92:
          return this.parseWhileStatement(s);
        case 76:
          return this.parseWithStatement(s);
        case 5:
          return this.parseBlock();
        case 13:
          return this.parseEmptyStatement(s);
        case 83: {
          let p = this.lookaheadCharCode();
          if (p === 40 || p === 46)
            break;
        }
        case 82: {
          !this.options.allowImportExportEverywhere && !l && this.raise(O.UnexpectedImportExport, this.state.startLoc), this.next();
          let p;
          return n === 83 ? (p = this.parseImport(s), p.type === "ImportDeclaration" && (!p.importKind || p.importKind === "value") && (this.
          sawUnambiguousESM = !0)) : (p = this.parseExport(s, r), (p.type === "ExportNamedDeclaration" && (!p.exportKind || p.exportKind ===
          "value") || p.type === "ExportAllDeclaration" && (!p.exportKind || p.exportKind === "value") || p.type === "ExportDefaultDeclarati\
on") && (this.sawUnambiguousESM = !0)), this.assertModuleNodeAllowed(p), p;
        }
        default:
          if (this.isAsyncFunction())
            return a || this.raise(O.AsyncFunctionInSingleStatementContext, this.state.startLoc), this.next(), this.parseFunctionStatement(s,
            !0, !a && o);
      }
      let u = this.state.value, c = this.parseExpression();
      return Ze(n) && c.type === "Identifier" && this.eat(14) ? this.parseLabeledStatement(s, u, c, t) : this.parseExpressionStatement(s, c,
      r);
    }
    assertModuleNodeAllowed(t) {
      !this.options.allowImportExportEverywhere && !this.inModule && this.raise(O.ImportOutsideModule, t);
    }
    decoratorsEnabledBeforeExport() {
      return this.hasPlugin("decorators-legacy") ? !0 : this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBefore\
Export") !== !1;
    }
    maybeTakeDecorators(t, r, n) {
      return t && (r.decorators && r.decorators.length > 0 ? (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") != "boolea\
n" && this.raise(O.DecoratorsBeforeAfterExport, r.decorators[0]), r.decorators.unshift(...t)) : r.decorators = t, this.resetStartLocationFromNode(
      r, t[0]), n && this.resetStartLocationFromNode(n, r)), r;
    }
    canHaveLeadingDecorator() {
      return this.match(80);
    }
    parseDecorators(t) {
      let r = [];
      do
        r.push(this.parseDecorator());
      while (this.match(26));
      if (this.match(82))
        t || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(O.DecoratorExportClass, this.state.startLoc);
      else if (!this.canHaveLeadingDecorator())
        throw this.raise(O.UnexpectedLeadingDecorator, this.state.startLoc);
      return r;
    }
    parseDecorator() {
      this.expectOnePlugin(["decorators", "decorators-legacy"]);
      let t = this.startNode();
      if (this.next(), this.hasPlugin("decorators")) {
        let r = this.state.startLoc, n;
        if (this.match(10)) {
          let s = this.state.startLoc;
          this.next(), n = this.parseExpression(), this.expect(11), n = this.wrapParenthesis(s, n);
          let a = this.state.startLoc;
          t.expression = this.parseMaybeDecoratorArguments(n), this.getPluginOption("decorators", "allowCallParenthesized") === !1 && t.expression !==
          n && this.raise(O.DecoratorArgumentsOutsideParentheses, a);
        } else {
          for (n = this.parseIdentifier(!1); this.eat(16); ) {
            let s = this.startNodeAt(r);
            s.object = n, this.match(139) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), s.property = this.parsePrivateName()) :
            s.property = this.parseIdentifier(!0), s.computed = !1, n = this.finishNode(s, "MemberExpression");
          }
          t.expression = this.parseMaybeDecoratorArguments(n);
        }
      } else
        t.expression = this.parseExprSubscripts();
      return this.finishNode(t, "Decorator");
    }
    parseMaybeDecoratorArguments(t) {
      if (this.eat(10)) {
        let r = this.startNodeAtNode(t);
        return r.callee = t, r.arguments = this.parseCallExpressionArguments(11), this.toReferencedList(r.arguments), this.finishNode(r, "Ca\
llExpression");
      }
      return t;
    }
    parseBreakContinueStatement(t, r) {
      return this.next(), this.isLineTerminator() ? t.label = null : (t.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(
      t, r), this.finishNode(t, r ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(t, r) {
      let n;
      for (n = 0; n < this.state.labels.length; ++n) {
        let s = this.state.labels[n];
        if ((t.label == null || s.name === t.label.name) && (s.kind != null && (r || s.kind === 1) || t.label && r))
          break;
      }
      if (n === this.state.labels.length) {
        let s = r ? "BreakStatement" : "ContinueStatement";
        this.raise(O.IllegalBreakContinue, t, {
          type: s
        });
      }
    }
    parseDebuggerStatement(t) {
      return this.next(), this.semicolon(), this.finishNode(t, "DebuggerStatement");
    }
    parseHeaderExpression() {
      this.expect(10);
      let t = this.parseExpression();
      return this.expect(11), t;
    }
    parseDoWhileStatement(t) {
      return this.next(), this.state.labels.push(zd), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.
      labels.pop(), this.expect(92), t.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(t, "DoWhileStatement");
    }
    parseForStatement(t) {
      this.next(), this.state.labels.push(zd);
      let r = null;
      if (this.isContextual(96) && this.recordAwaitIfAllowed() && (r = this.state.startLoc, this.next()), this.scope.enter(0), this.expect(10),
      this.match(13))
        return r !== null && this.unexpected(r), this.parseFor(t, null);
      let n = this.isContextual(100);
      {
        let u = this.isContextual(96) && this.startsAwaitUsing(), c = u || this.isContextual(107) && this.startsUsingForOf(), p = n && this.
        hasFollowingBindingAtom() || c;
        if (this.match(74) || this.match(75) || p) {
          let f = this.startNode(), h;
          u ? (h = "await using", this.recordAwaitIfAllowed() || this.raise(O.AwaitUsingNotInAsyncContext, this.state.startLoc), this.next()) :
          h = this.state.value, this.next(), this.parseVar(f, !0, h);
          let g = this.finishNode(f, "VariableDeclaration"), P = this.match(58);
          return P && c && this.raise(O.ForInUsing, g), (P || this.isContextual(102)) && g.declarations.length === 1 ? this.parseForIn(t, g,
          r) : (r !== null && this.unexpected(r), this.parseFor(t, g));
        }
      }
      let s = this.isContextual(95), a = new Si(), o = this.parseExpression(!0, a), l = this.isContextual(102);
      if (l && (n && this.raise(O.ForOfLet, o), r === null && s && o.type === "Identifier" && this.raise(O.ForOfAsync, o)), l || this.match(
      58)) {
        this.checkDestructuringPrivate(a), this.toAssignable(o, !0);
        let u = l ? "ForOfStatement" : "ForInStatement";
        return this.checkLVal(o, {
          type: u
        }), this.parseForIn(t, o, r);
      } else
        this.checkExpressionErrors(a, !0);
      return r !== null && this.unexpected(r), this.parseFor(t, o);
    }
    parseFunctionStatement(t, r, n) {
      return this.next(), this.parseFunction(t, 1 | (n ? 2 : 0) | (r ? 8 : 0));
    }
    parseIfStatement(t) {
      return this.next(), t.test = this.parseHeaderExpression(), t.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), t.alternate =
      this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(t, "IfStatement");
    }
    parseReturnStatement(t) {
      return !this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction && this.raise(O.IllegalReturn, this.state.startLoc), this.
      next(), this.isLineTerminator() ? t.argument = null : (t.argument = this.parseExpression(), this.semicolon()), this.finishNode(t, "Ret\
urnStatement");
    }
    parseSwitchStatement(t) {
      this.next(), t.discriminant = this.parseHeaderExpression();
      let r = t.cases = [];
      this.expect(5), this.state.labels.push(eG), this.scope.enter(0);
      let n;
      for (let s; !this.match(8); )
        if (this.match(61) || this.match(65)) {
          let a = this.match(61);
          n && this.finishNode(n, "SwitchCase"), r.push(n = this.startNode()), n.consequent = [], this.next(), a ? n.test = this.parseExpression() :
          (s && this.raise(O.MultipleDefaultsInSwitch, this.state.lastTokStartLoc), s = !0, n.test = null), this.expect(14);
        } else
          n ? n.consequent.push(this.parseStatementListItem()) : this.unexpected();
      return this.scope.exit(), n && this.finishNode(n, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(t, "SwitchState\
ment");
    }
    parseThrowStatement(t) {
      return this.next(), this.hasPrecedingLineBreak() && this.raise(O.NewlineAfterThrow, this.state.lastTokEndLoc), t.argument = this.parseExpression(),
      this.semicolon(), this.finishNode(t, "ThrowStatement");
    }
    parseCatchClauseParam() {
      let t = this.parseBindingAtom();
      return this.scope.enter(this.options.annexB && t.type === "Identifier" ? 8 : 0), this.checkLVal(t, {
        type: "CatchClause"
      }, 9), t;
    }
    parseTryStatement(t) {
      if (this.next(), t.block = this.parseBlock(), t.handler = null, this.match(62)) {
        let r = this.startNode();
        this.next(), this.match(10) ? (this.expect(10), r.param = this.parseCatchClauseParam(), this.expect(11)) : (r.param = null, this.scope.
        enter(0)), r.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(!1, !1)), this.scope.exit(), t.handler = this.finishNode(
        r, "CatchClause");
      }
      return t.finalizer = this.eat(67) ? this.parseBlock() : null, !t.handler && !t.finalizer && this.raise(O.NoCatchOrFinally, t), this.finishNode(
      t, "TryStatement");
    }
    parseVarStatement(t, r, n = !1) {
      return this.next(), this.parseVar(t, !1, r, n), this.semicolon(), this.finishNode(t, "VariableDeclaration");
    }
    parseWhileStatement(t) {
      return this.next(), t.test = this.parseHeaderExpression(), this.state.labels.push(zd), t.body = this.withSmartMixTopicForbiddingContext(
      () => this.parseStatement()), this.state.labels.pop(), this.finishNode(t, "WhileStatement");
    }
    parseWithStatement(t) {
      return this.state.strict && this.raise(O.StrictWith, this.state.startLoc), this.next(), t.object = this.parseHeaderExpression(), t.body =
      this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(t, "WithStatement");
    }
    parseEmptyStatement(t) {
      return this.next(), this.finishNode(t, "EmptyStatement");
    }
    parseLabeledStatement(t, r, n, s) {
      for (let o of this.state.labels)
        o.name === r && this.raise(O.LabelRedeclaration, n, {
          labelName: r
        });
      let a = sK(this.state.type) ? 1 : this.match(71) ? 2 : null;
      for (let o = this.state.labels.length - 1; o >= 0; o--) {
        let l = this.state.labels[o];
        if (l.statementStart === t.start)
          l.statementStart = this.sourceToOffsetPos(this.state.start), l.kind = a;
        else
          break;
      }
      return this.state.labels.push({
        name: r,
        kind: a,
        statementStart: this.sourceToOffsetPos(this.state.start)
      }), t.body = s & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(!0) : this.parseStatement(), this.state.labels.pop(), t.label =
      n, this.finishNode(t, "LabeledStatement");
    }
    parseExpressionStatement(t, r, n) {
      return t.expression = r, this.semicolon(), this.finishNode(t, "ExpressionStatement");
    }
    parseBlock(t = !1, r = !0, n) {
      let s = this.startNode();
      return t && this.state.strictErrors.clear(), this.expect(5), r && this.scope.enter(0), this.parseBlockBody(s, t, !1, 8, n), r && this.
      scope.exit(), this.finishNode(s, "BlockStatement");
    }
    isValidDirective(t) {
      return t.type === "ExpressionStatement" && t.expression.type === "StringLiteral" && !t.expression.extra.parenthesized;
    }
    parseBlockBody(t, r, n, s, a) {
      let o = t.body = [], l = t.directives = [];
      this.parseBlockOrModuleBlockBody(o, r ? l : void 0, n, s, a);
    }
    parseBlockOrModuleBlockBody(t, r, n, s, a) {
      let o = this.state.strict, l = !1, u = !1;
      for (; !this.match(s); ) {
        let c = n ? this.parseModuleItem() : this.parseStatementListItem();
        if (r && !u) {
          if (this.isValidDirective(c)) {
            let p = this.stmtToDirective(c);
            r.push(p), !l && p.value.value === "use strict" && (l = !0, this.setStrict(!0));
            continue;
          }
          u = !0, this.state.strictErrors.clear();
        }
        t.push(c);
      }
      a?.call(this, l), o || this.setStrict(!1), this.next();
    }
    parseFor(t, r) {
      return t.init = r, this.semicolon(!1), t.test = this.match(13) ? null : this.parseExpression(), this.semicolon(!1), t.update = this.match(
      11) ? null : this.parseExpression(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.
      scope.exit(), this.state.labels.pop(), this.finishNode(t, "ForStatement");
    }
    parseForIn(t, r, n) {
      let s = this.match(58);
      return this.next(), s ? n !== null && this.unexpected(n) : t.await = n !== null, r.type === "VariableDeclaration" && r.declarations[0].
      init != null && (!s || !this.options.annexB || this.state.strict || r.kind !== "var" || r.declarations[0].id.type !== "Identifier") &&
      this.raise(O.ForInOfLoopInitializer, r, {
        type: s ? "ForInStatement" : "ForOfStatement"
      }), r.type === "AssignmentPattern" && this.raise(O.InvalidLhs, r, {
        ancestor: {
          type: "ForStatement"
        }
      }), t.left = r, t.right = s ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(
      () => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, s ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(t, r, n, s = !1) {
      let a = t.declarations = [];
      for (t.kind = n; ; ) {
        let o = this.startNode();
        if (this.parseVarId(o, n), o.init = this.eat(29) ? r ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, o.
        init === null && !s && (o.id.type !== "Identifier" && !(r && (this.match(58) || this.isContextual(102))) ? this.raise(O.DeclarationMissingInitializer,
        this.state.lastTokEndLoc, {
          kind: "destructuring"
        }) : (n === "const" || n === "using" || n === "await using") && !(this.match(58) || this.isContextual(102)) && this.raise(O.DeclarationMissingInitializer,
        this.state.lastTokEndLoc, {
          kind: n
        })), a.push(this.finishNode(o, "VariableDeclarator")), !this.eat(12)) break;
      }
      return t;
    }
    parseVarId(t, r) {
      let n = this.parseBindingAtom();
      (r === "using" || r === "await using") && (n.type === "ArrayPattern" || n.type === "ObjectPattern") && this.raise(O.UsingDeclarationHasBindingPattern,
      n.loc.start), this.checkLVal(n, {
        type: "VariableDeclarator"
      }, r === "var" ? 5 : 8201), t.id = n;
    }
    parseAsyncFunctionExpression(t) {
      return this.parseFunction(t, 8);
    }
    parseFunction(t, r = 0) {
      let n = r & 2, s = !!(r & 1), a = s && !(r & 4), o = !!(r & 8);
      this.initFunction(t, o), this.match(55) && (n && this.raise(O.GeneratorInSingleStatementContext, this.state.startLoc), this.next(), t.
      generator = !0), s && (t.id = this.parseFunctionId(a));
      let l = this.state.maybeInArrowParameters;
      return this.state.maybeInArrowParameters = !1, this.scope.enter(2), this.prodParam.enter(_l(o, t.generator)), s || (t.id = this.parseFunctionId()),
      this.parseFunctionParams(t, !1), this.withSmartMixTopicForbiddingContext(() => {
        this.parseFunctionBodyAndFinish(t, s ? "FunctionDeclaration" : "FunctionExpression");
      }), this.prodParam.exit(), this.scope.exit(), s && !n && this.registerFunctionStatementId(t), this.state.maybeInArrowParameters = l, t;
    }
    parseFunctionId(t) {
      return t || Ze(this.state.type) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(t, r) {
      this.expect(10), this.expressionScope.enter(wK()), t.params = this.parseBindingList(11, 41, 2 | (r ? 4 : 0)), this.expressionScope.exit();
    }
    registerFunctionStatementId(t) {
      t.id && this.scope.declareName(t.id.name, !this.options.annexB || this.state.strict || t.generator || t.async ? this.scope.treatFunctionsAsVar ?
      5 : 8201 : 17, t.id.loc.start);
    }
    parseClass(t, r, n) {
      this.next();
      let s = this.state.strict;
      return this.state.strict = !0, this.parseClassId(t, r, n), this.parseClassSuper(t), t.body = this.parseClassBody(!!t.superClass, s), this.
      finishNode(t, r ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
      return this.match(29) || this.match(13) || this.match(8);
    }
    isClassMethod() {
      return this.match(10);
    }
    nameIsConstructor(t) {
      return t.type === "Identifier" && t.name === "constructor" || t.type === "StringLiteral" && t.value === "constructor";
    }
    isNonstaticConstructor(t) {
      return !t.computed && !t.static && this.nameIsConstructor(t.key);
    }
    parseClassBody(t, r) {
      this.classScope.enter();
      let n = {
        hadConstructor: !1,
        hadSuperClass: t
      }, s = [], a = this.startNode();
      if (a.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
        for (; !this.match(8); ) {
          if (this.eat(13)) {
            if (s.length > 0)
              throw this.raise(O.DecoratorSemicolon, this.state.lastTokEndLoc);
            continue;
          }
          if (this.match(26)) {
            s.push(this.parseDecorator());
            continue;
          }
          let o = this.startNode();
          s.length && (o.decorators = s, this.resetStartLocationFromNode(o, s[0]), s = []), this.parseClassMember(a, o, n), o.kind === "cons\
tructor" && o.decorators && o.decorators.length > 0 && this.raise(O.DecoratorConstructor, o);
        }
      }), this.state.strict = r, this.next(), s.length)
        throw this.raise(O.TrailingDecorator, this.state.startLoc);
      return this.classScope.exit(), this.finishNode(a, "ClassBody");
    }
    parseClassMemberFromModifier(t, r) {
      let n = this.parseIdentifier(!0);
      if (this.isClassMethod()) {
        let s = r;
        return s.kind = "method", s.computed = !1, s.key = n, s.static = !1, this.pushClassMethod(t, s, !1, !1, !1, !1), !0;
      } else if (this.isClassProperty()) {
        let s = r;
        return s.computed = !1, s.key = n, s.static = !1, t.body.push(this.parseClassProperty(s)), !0;
      }
      return this.resetPreviousNodeTrailingComments(n), !1;
    }
    parseClassMember(t, r, n) {
      let s = this.isContextual(106);
      if (s) {
        if (this.parseClassMemberFromModifier(t, r))
          return;
        if (this.eat(5)) {
          this.parseClassStaticBlock(t, r);
          return;
        }
      }
      this.parseClassMemberWithIsStatic(t, r, n, s);
    }
    parseClassMemberWithIsStatic(t, r, n, s) {
      let a = r, o = r, l = r, u = r, c = r, p = a, f = a;
      if (r.static = s, this.parsePropertyNamePrefixOperator(r), this.eat(55)) {
        p.kind = "method";
        let E = this.match(139);
        if (this.parseClassElementName(p), E) {
          this.pushClassPrivateMethod(t, o, !0, !1);
          return;
        }
        this.isNonstaticConstructor(a) && this.raise(O.ConstructorIsGenerator, a.key), this.pushClassMethod(t, a, !0, !1, !1, !1);
        return;
      }
      let h = !this.state.containsEsc && Ze(this.state.type), g = this.parseClassElementName(r), P = h ? g.name : null, d = this.isPrivateName(
      g), y = this.state.startLoc;
      if (this.parsePostMemberNameModifiers(f), this.isClassMethod()) {
        if (p.kind = "method", d) {
          this.pushClassPrivateMethod(t, o, !1, !1);
          return;
        }
        let E = this.isNonstaticConstructor(a), _ = !1;
        E && (a.kind = "constructor", n.hadConstructor && !this.hasPlugin("typescript") && this.raise(O.DuplicateConstructor, g), E && this.
        hasPlugin("typescript") && r.override && this.raise(O.OverrideOnConstructor, g), n.hadConstructor = !0, _ = n.hadSuperClass), this.pushClassMethod(
        t, a, !1, !1, E, _);
      } else if (this.isClassProperty())
        d ? this.pushClassPrivateProperty(t, u) : this.pushClassProperty(t, l);
      else if (P === "async" && !this.isLineTerminator()) {
        this.resetPreviousNodeTrailingComments(g);
        let E = this.eat(55);
        f.optional && this.unexpected(y), p.kind = "method";
        let _ = this.match(139);
        this.parseClassElementName(p), this.parsePostMemberNameModifiers(f), _ ? this.pushClassPrivateMethod(t, o, E, !0) : (this.isNonstaticConstructor(
        a) && this.raise(O.ConstructorIsAsync, a.key), this.pushClassMethod(t, a, E, !0, !1, !1));
      } else if ((P === "get" || P === "set") && !(this.match(55) && this.isLineTerminator())) {
        this.resetPreviousNodeTrailingComments(g), p.kind = P;
        let E = this.match(139);
        this.parseClassElementName(a), E ? this.pushClassPrivateMethod(t, o, !1, !1) : (this.isNonstaticConstructor(a) && this.raise(O.ConstructorIsAccessor,
        a.key), this.pushClassMethod(t, a, !1, !1, !1, !1)), this.checkGetterSetterParams(a);
      } else if (P === "accessor" && !this.isLineTerminator()) {
        this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(g);
        let E = this.match(139);
        this.parseClassElementName(l), this.pushClassAccessorProperty(t, c, E);
      } else this.isLineTerminator() ? d ? this.pushClassPrivateProperty(t, u) : this.pushClassProperty(t, l) : this.unexpected();
    }
    parseClassElementName(t) {
      let {
        type: r,
        value: n
      } = this.state;
      if ((r === 132 || r === 134) && t.static && n === "prototype" && this.raise(O.StaticPrototype, this.state.startLoc), r === 139) {
        n === "constructor" && this.raise(O.ConstructorClassPrivateField, this.state.startLoc);
        let s = this.parsePrivateName();
        return t.key = s, s;
      }
      return this.parsePropertyName(t), t.key;
    }
    parseClassStaticBlock(t, r) {
      var n;
      this.scope.enter(208);
      let s = this.state.labels;
      this.state.labels = [], this.prodParam.enter(0);
      let a = r.body = [];
      this.parseBlockOrModuleBlockBody(a, void 0, !1, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = s, t.body.push(this.
      finishNode(r, "StaticBlock")), (n = r.decorators) != null && n.length && this.raise(O.DecoratorStaticBlock, r);
    }
    pushClassProperty(t, r) {
      !r.computed && this.nameIsConstructor(r.key) && this.raise(O.ConstructorClassField, r.key), t.body.push(this.parseClassProperty(r));
    }
    pushClassPrivateProperty(t, r) {
      let n = this.parseClassPrivateProperty(r);
      t.body.push(n), this.classScope.declarePrivateName(this.getPrivateNameSV(n.key), 0, n.key.loc.start);
    }
    pushClassAccessorProperty(t, r, n) {
      !n && !r.computed && this.nameIsConstructor(r.key) && this.raise(O.ConstructorClassField, r.key);
      let s = this.parseClassAccessorProperty(r);
      t.body.push(s), n && this.classScope.declarePrivateName(this.getPrivateNameSV(s.key), 0, s.key.loc.start);
    }
    pushClassMethod(t, r, n, s, a, o) {
      t.body.push(this.parseMethod(r, n, s, a, o, "ClassMethod", !0));
    }
    pushClassPrivateMethod(t, r, n, s) {
      let a = this.parseMethod(r, n, s, !1, !1, "ClassPrivateMethod", !0);
      t.body.push(a);
      let o = a.kind === "get" ? a.static ? 6 : 2 : a.kind === "set" ? a.static ? 5 : 1 : 0;
      this.declareClassPrivateMethodInScope(a, o);
    }
    declareClassPrivateMethodInScope(t, r) {
      this.classScope.declarePrivateName(this.getPrivateNameSV(t.key), r, t.key.loc.start);
    }
    parsePostMemberNameModifiers(t) {
    }
    parseClassPrivateProperty(t) {
      return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassPrivateProperty");
    }
    parseClassProperty(t) {
      return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassProperty");
    }
    parseClassAccessorProperty(t) {
      return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassAccessorProperty");
    }
    parseInitializer(t) {
      this.scope.enter(80), this.expressionScope.enter(YT()), this.prodParam.enter(0), t.value = this.eat(29) ? this.parseMaybeAssignAllowIn() :
      null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
    }
    parseClassId(t, r, n, s = 8331) {
      if (Ze(this.state.type))
        t.id = this.parseIdentifier(), r && this.declareNameFromIdentifier(t.id, s);
      else if (n || !r)
        t.id = null;
      else
        throw this.raise(O.MissingClassName, this.state.startLoc);
    }
    parseClassSuper(t) {
      t.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
    }
    parseExport(t, r) {
      let n = this.parseMaybeImportPhase(t, !0), s = this.maybeParseExportDefaultSpecifier(t, n), a = !s || this.eat(12), o = a && this.eatExportStar(
      t), l = o && this.maybeParseExportNamespaceSpecifier(t), u = a && (!l || this.eat(12)), c = s || o;
      if (o && !l) {
        if (s && this.unexpected(), r)
          throw this.raise(O.UnsupportedDecoratorExport, t);
        return this.parseExportFrom(t, !0), this.finishNode(t, "ExportAllDeclaration");
      }
      let p = this.maybeParseExportNamedSpecifiers(t);
      s && a && !o && !p && this.unexpected(null, 5), l && u && this.unexpected(null, 98);
      let f;
      if (c || p) {
        if (f = !1, r)
          throw this.raise(O.UnsupportedDecoratorExport, t);
        this.parseExportFrom(t, c);
      } else
        f = this.maybeParseExportDeclaration(t);
      if (c || p || f) {
        var h;
        let g = t;
        if (this.checkExport(g, !0, !1, !!g.source), ((h = g.declaration) == null ? void 0 : h.type) === "ClassDeclaration")
          this.maybeTakeDecorators(r, g.declaration, g);
        else if (r)
          throw this.raise(O.UnsupportedDecoratorExport, t);
        return this.finishNode(g, "ExportNamedDeclaration");
      }
      if (this.eat(65)) {
        let g = t, P = this.parseExportDefaultExpression();
        if (g.declaration = P, P.type === "ClassDeclaration")
          this.maybeTakeDecorators(r, P, g);
        else if (r)
          throw this.raise(O.UnsupportedDecoratorExport, t);
        return this.checkExport(g, !0, !0), this.finishNode(g, "ExportDefaultDeclaration");
      }
      this.unexpected(null, 5);
    }
    eatExportStar(t) {
      return this.eat(55);
    }
    maybeParseExportDefaultSpecifier(t, r) {
      if (r || this.isExportDefaultSpecifier()) {
        this.expectPlugin("exportDefaultFrom", r?.loc.start);
        let n = r || this.parseIdentifier(!0), s = this.startNodeAtNode(n);
        return s.exported = n, t.specifiers = [this.finishNode(s, "ExportDefaultSpecifier")], !0;
      }
      return !1;
    }
    maybeParseExportNamespaceSpecifier(t) {
      if (this.isContextual(93)) {
        var r, n;
        (n = (r = t).specifiers) != null || (r.specifiers = []);
        let s = this.startNodeAt(this.state.lastTokStartLoc);
        return this.next(), s.exported = this.parseModuleExportName(), t.specifiers.push(this.finishNode(s, "ExportNamespaceSpecifier")), !0;
      }
      return !1;
    }
    maybeParseExportNamedSpecifiers(t) {
      if (this.match(5)) {
        let r = t;
        r.specifiers || (r.specifiers = []);
        let n = r.exportKind === "type";
        return r.specifiers.push(...this.parseExportSpecifiers(n)), r.source = null, r.declaration = null, this.hasPlugin("importAssertions") &&
        (r.assertions = []), !0;
      }
      return !1;
    }
    maybeParseExportDeclaration(t) {
      return this.shouldParseExportDeclaration() ? (t.specifiers = [], t.source = null, this.hasPlugin("importAssertions") && (t.assertions =
      []), t.declaration = this.parseExportDeclaration(t), !0) : !1;
    }
    isAsyncFunction() {
      if (!this.isContextual(95)) return !1;
      let t = this.nextTokenInLineStart();
      return this.isUnparsedContextual(t, "function");
    }
    parseExportDefaultExpression() {
      let t = this.startNode();
      if (this.match(68))
        return this.next(), this.parseFunction(t, 5);
      if (this.isAsyncFunction())
        return this.next(), this.next(), this.parseFunction(t, 13);
      if (this.match(80))
        return this.parseClass(t, !0, !0);
      if (this.match(26))
        return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === !0 && this.raise(O.DecoratorBeforeExport,
        this.state.startLoc), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(!1), this.startNode()), !0, !0);
      if (this.match(75) || this.match(74) || this.isLet())
        throw this.raise(O.UnsupportedDefaultExport, this.state.startLoc);
      let r = this.parseMaybeAssignAllowIn();
      return this.semicolon(), r;
    }
    parseExportDeclaration(t) {
      return this.match(80) ? this.parseClass(this.startNode(), !0, !1) : this.parseStatementListItem();
    }
    isExportDefaultSpecifier() {
      let {
        type: t
      } = this.state;
      if (Ze(t)) {
        if (t === 95 && !this.state.containsEsc || t === 100)
          return !1;
        if ((t === 130 || t === 129) && !this.state.containsEsc) {
          let {
            type: s
          } = this.lookahead();
          if (Ze(s) && s !== 98 || s === 5)
            return this.expectOnePlugin(["flow", "typescript"]), !1;
        }
      } else if (!this.match(65))
        return !1;
      let r = this.nextTokenStart(), n = this.isUnparsedContextual(r, "from");
      if (this.input.charCodeAt(r) === 44 || Ze(this.state.type) && n)
        return !0;
      if (this.match(65) && n) {
        let s = this.input.charCodeAt(this.nextTokenStartSince(r + 4));
        return s === 34 || s === 39;
      }
      return !1;
    }
    parseExportFrom(t, r) {
      this.eatContextual(98) ? (t.source = this.parseImportSource(), this.checkExport(t), this.maybeParseImportAttributes(t), this.checkJSONModuleImport(
      t)) : r && this.unexpected(), this.semicolon();
    }
    shouldParseExportDeclaration() {
      let {
        type: t
      } = this.state;
      return t === 26 && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (this.getPluginOption("\
decorators", "decoratorsBeforeExport") === !0 && this.raise(O.DecoratorBeforeExport, this.state.startLoc), !0) : this.isContextual(107) ? (this.
      raise(O.UsingDeclarationExport, this.state.startLoc), !0) : this.isContextual(96) && this.startsAwaitUsing() ? (this.raise(O.UsingDeclarationExport,
      this.state.startLoc), !0) : t === 74 || t === 75 || t === 68 || t === 80 || this.isLet() || this.isAsyncFunction();
    }
    checkExport(t, r, n, s) {
      if (r) {
        var a;
        if (n) {
          if (this.checkDuplicateExports(t, "default"), this.hasPlugin("exportDefaultFrom")) {
            var o;
            let l = t.declaration;
            l.type === "Identifier" && l.name === "from" && l.end - l.start === 4 && !((o = l.extra) != null && o.parenthesized) && this.raise(
            O.ExportDefaultFromAsIdentifier, l);
          }
        } else if ((a = t.specifiers) != null && a.length)
          for (let l of t.specifiers) {
            let {
              exported: u
            } = l, c = u.type === "Identifier" ? u.name : u.value;
            if (this.checkDuplicateExports(l, c), !s && l.local) {
              let {
                local: p
              } = l;
              p.type !== "Identifier" ? this.raise(O.ExportBindingIsString, l, {
                localName: p.value,
                exportName: c
              }) : (this.checkReservedWord(p.name, p.loc.start, !0, !1), this.scope.checkLocalExport(p));
            }
          }
        else if (t.declaration) {
          let l = t.declaration;
          if (l.type === "FunctionDeclaration" || l.type === "ClassDeclaration") {
            let {
              id: u
            } = l;
            if (!u) throw new Error("Assertion failure");
            this.checkDuplicateExports(t, u.name);
          } else if (l.type === "VariableDeclaration")
            for (let u of l.declarations)
              this.checkDeclaration(u.id);
        }
      }
    }
    checkDeclaration(t) {
      if (t.type === "Identifier")
        this.checkDuplicateExports(t, t.name);
      else if (t.type === "ObjectPattern")
        for (let r of t.properties)
          this.checkDeclaration(r);
      else if (t.type === "ArrayPattern")
        for (let r of t.elements)
          r && this.checkDeclaration(r);
      else t.type === "ObjectProperty" ? this.checkDeclaration(t.value) : t.type === "RestElement" ? this.checkDeclaration(t.argument) : t.type ===
      "AssignmentPattern" && this.checkDeclaration(t.left);
    }
    checkDuplicateExports(t, r) {
      this.exportedIdentifiers.has(r) && (r === "default" ? this.raise(O.DuplicateDefaultExport, t) : this.raise(O.DuplicateExport, t, {
        exportName: r
      })), this.exportedIdentifiers.add(r);
    }
    parseExportSpecifiers(t) {
      let r = [], n = !0;
      for (this.expect(5); !this.eat(8); ) {
        if (n)
          n = !1;
        else if (this.expect(12), this.eat(8)) break;
        let s = this.isContextual(130), a = this.match(134), o = this.startNode();
        o.local = this.parseModuleExportName(), r.push(this.parseExportSpecifier(o, a, t, s));
      }
      return r;
    }
    parseExportSpecifier(t, r, n, s) {
      return this.eatContextual(93) ? t.exported = this.parseModuleExportName() : r ? t.exported = NK(t.local) : t.exported || (t.exported =
      Dn(t.local)), this.finishNode(t, "ExportSpecifier");
    }
    parseModuleExportName() {
      if (this.match(134)) {
        let t = this.parseStringLiteral(this.state.value), r = tG.exec(t.value);
        return r && this.raise(O.ModuleExportNameHasLoneSurrogate, t, {
          surrogateCharCode: r[0].charCodeAt(0)
        }), t;
      }
      return this.parseIdentifier(!0);
    }
    isJSONModuleImport(t) {
      return t.assertions != null ? t.assertions.some(({
        key: r,
        value: n
      }) => n.value === "json" && (r.type === "Identifier" ? r.name === "type" : r.value === "type")) : !1;
    }
    checkImportReflection(t) {
      let {
        specifiers: r
      } = t, n = r.length === 1 ? r[0].type : null;
      if (t.phase === "source")
        n !== "ImportDefaultSpecifier" && this.raise(O.SourcePhaseImportRequiresDefault, r[0].loc.start);
      else if (t.phase === "defer")
        n !== "ImportNamespaceSpecifier" && this.raise(O.DeferImportRequiresNamespace, r[0].loc.start);
      else if (t.module) {
        var s;
        n !== "ImportDefaultSpecifier" && this.raise(O.ImportReflectionNotBinding, r[0].loc.start), ((s = t.assertions) == null ? void 0 : s.
        length) > 0 && this.raise(O.ImportReflectionHasAssertion, r[0].loc.start);
      }
    }
    checkJSONModuleImport(t) {
      if (this.isJSONModuleImport(t) && t.type !== "ExportAllDeclaration") {
        let {
          specifiers: r
        } = t;
        if (r != null) {
          let n = r.find((s) => {
            let a;
            if (s.type === "ExportSpecifier" ? a = s.local : s.type === "ImportSpecifier" && (a = s.imported), a !== void 0)
              return a.type === "Identifier" ? a.name !== "default" : a.value !== "default";
          });
          n !== void 0 && this.raise(O.ImportJSONBindingNotDefault, n.loc.start);
        }
      }
    }
    isPotentialImportPhase(t) {
      return t ? !1 : this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
    }
    applyImportPhase(t, r, n, s) {
      r || (n === "module" ? (this.expectPlugin("importReflection", s), t.module = !0) : this.hasPlugin("importReflection") && (t.module = !1),
      n === "source" ? (this.expectPlugin("sourcePhaseImports", s), t.phase = "source") : n === "defer" ? (this.expectPlugin("deferredImport\
Evaluation", s), t.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (t.phase = null));
    }
    parseMaybeImportPhase(t, r) {
      if (!this.isPotentialImportPhase(r))
        return this.applyImportPhase(t, r, null), null;
      let n = this.parseIdentifier(!0), {
        type: s
      } = this.state;
      return (Vr(s) ? s !== 98 || this.lookaheadCharCode() === 102 : s !== 12) ? (this.resetPreviousIdentifierLeadingComments(n), this.applyImportPhase(
      t, r, n.name, n.loc.start), null) : (this.applyImportPhase(t, r, null), n);
    }
    isPrecedingIdImportPhase(t) {
      let {
        type: r
      } = this.state;
      return Ze(r) ? r !== 98 || this.lookaheadCharCode() === 102 : r !== 12;
    }
    parseImport(t) {
      return this.match(134) ? this.parseImportSourceAndAttributes(t) : this.parseImportSpecifiersAndAfter(t, this.parseMaybeImportPhase(t, !1));
    }
    parseImportSpecifiersAndAfter(t, r) {
      t.specifiers = [];
      let s = !this.maybeParseDefaultImportSpecifier(t, r) || this.eat(12), a = s && this.maybeParseStarImportSpecifier(t);
      return s && !a && this.parseNamedImportSpecifiers(t), this.expectContextual(98), this.parseImportSourceAndAttributes(t);
    }
    parseImportSourceAndAttributes(t) {
      var r;
      return (r = t.specifiers) != null || (t.specifiers = []), t.source = this.parseImportSource(), this.maybeParseImportAttributes(t), this.
      checkImportReflection(t), this.checkJSONModuleImport(t), this.semicolon(), this.finishNode(t, "ImportDeclaration");
    }
    parseImportSource() {
      return this.match(134) || this.unexpected(), this.parseExprAtom();
    }
    parseImportSpecifierLocal(t, r, n) {
      r.local = this.parseIdentifier(), t.specifiers.push(this.finishImportSpecifier(r, n));
    }
    finishImportSpecifier(t, r, n = 8201) {
      return this.checkLVal(t.local, {
        type: r
      }, n), this.finishNode(t, r);
    }
    parseImportAttributes() {
      this.expect(5);
      let t = [], r = /* @__PURE__ */ new Set();
      do {
        if (this.match(8))
          break;
        let n = this.startNode(), s = this.state.value;
        if (r.has(s) && this.raise(O.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {
          key: s
        }), r.add(s), this.match(134) ? n.key = this.parseStringLiteral(s) : n.key = this.parseIdentifier(!0), this.expect(14), !this.match(
        134))
          throw this.raise(O.ModuleAttributeInvalidValue, this.state.startLoc);
        n.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(n, "ImportAttribute"));
      } while (this.eat(12));
      return this.expect(8), t;
    }
    parseModuleAttributes() {
      let t = [], r = /* @__PURE__ */ new Set();
      do {
        let n = this.startNode();
        if (n.key = this.parseIdentifier(!0), n.key.name !== "type" && this.raise(O.ModuleAttributeDifferentFromType, n.key), r.has(n.key.name) &&
        this.raise(O.ModuleAttributesWithDuplicateKeys, n.key, {
          key: n.key.name
        }), r.add(n.key.name), this.expect(14), !this.match(134))
          throw this.raise(O.ModuleAttributeInvalidValue, this.state.startLoc);
        n.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(n, "ImportAttribute"));
      } while (this.eat(12));
      return t;
    }
    maybeParseImportAttributes(t) {
      let r;
      var n = !1;
      if (this.match(76)) {
        if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40)
          return;
        this.next(), this.hasPlugin("moduleAttributes") ? r = this.parseModuleAttributes() : r = this.parseImportAttributes(), n = !0;
      } else this.isContextual(94) && !this.hasPrecedingLineBreak() ? (!this.hasPlugin("deprecatedImportAssert") && !this.hasPlugin("importA\
ssertions") && this.raise(O.ImportAttributesUseAssert, this.state.startLoc), this.hasPlugin("importAssertions") || this.addExtra(t, "depreca\
tedAssertSyntax", !0), this.next(), r = this.parseImportAttributes()) : r = [];
      !n && this.hasPlugin("importAssertions") ? t.assertions = r : t.attributes = r;
    }
    maybeParseDefaultImportSpecifier(t, r) {
      if (r) {
        let n = this.startNodeAtNode(r);
        return n.local = r, t.specifiers.push(this.finishImportSpecifier(n, "ImportDefaultSpecifier")), !0;
      } else if (Vr(this.state.type))
        return this.parseImportSpecifierLocal(t, this.startNode(), "ImportDefaultSpecifier"), !0;
      return !1;
    }
    maybeParseStarImportSpecifier(t) {
      if (this.match(55)) {
        let r = this.startNode();
        return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(t, r, "ImportNamespaceSpecifier"), !0;
      }
      return !1;
    }
    parseNamedImportSpecifiers(t) {
      let r = !0;
      for (this.expect(5); !this.eat(8); ) {
        if (r)
          r = !1;
        else {
          if (this.eat(14))
            throw this.raise(O.DestructureNamedImport, this.state.startLoc);
          if (this.expect(12), this.eat(8)) break;
        }
        let n = this.startNode(), s = this.match(134), a = this.isContextual(130);
        n.imported = this.parseModuleExportName();
        let o = this.parseImportSpecifier(n, s, t.importKind === "type" || t.importKind === "typeof", a, void 0);
        t.specifiers.push(o);
      }
    }
    parseImportSpecifier(t, r, n, s, a) {
      if (this.eatContextual(93))
        t.local = this.parseIdentifier();
      else {
        let {
          imported: o
        } = t;
        if (r)
          throw this.raise(O.ImportBindingIsString, t, {
            importName: o.value
          });
        this.checkReservedWord(o.name, t.loc.start, !0, !0), t.local || (t.local = Dn(o));
      }
      return this.finishImportSpecifier(t, "ImportSpecifier", a);
    }
    isThisParam(t) {
      return t.type === "Identifier" && t.name === "this";
    }
  }, kl = class extends gh {
    static {
      i(this, "Parser");
    }
    constructor(t, r, n) {
      t = ZK(t), super(t, r), this.options = t, this.initializeScopes(), this.plugins = n, this.filename = t.sourceFilename, this.startIndex =
      t.startIndex;
    }
    getScopeHandler() {
      return Ra;
    }
    parse() {
      this.enterInitialScopes();
      let t = this.startNode(), r = this.startNode();
      return this.nextToken(), t.errors = null, this.parseTopLevel(t, r), t.errors = this.state.errors, t.comments.length = this.state.commentsLen,
      t;
    }
  };
  function nG(e, t) {
    var r;
    if (((r = t) == null ? void 0 : r.sourceType) === "unambiguous") {
      t = Object.assign({}, t);
      try {
        t.sourceType = "module";
        let n = ja(t, e), s = n.parse();
        if (n.sawUnambiguousESM)
          return s;
        if (n.ambiguousScriptDifferentAst)
          try {
            return t.sourceType = "script", ja(t, e).parse();
          } catch {
          }
        else
          s.program.sourceType = "script";
        return s;
      } catch (n) {
        try {
          return t.sourceType = "script", ja(t, e).parse();
        } catch {
        }
        throw n;
      }
    } else
      return ja(t, e).parse();
  }
  i(nG, "parse");
  function sG(e, t) {
    let r = ja(t, e);
    return r.options.strictMode && (r.state.strict = !0), r.getExpression();
  }
  i(sG, "parseExpression");
  function iG(e) {
    let t = {};
    for (let r of Object.keys(e))
      t[r] = vn(e[r]);
    return t;
  }
  i(iG, "generateExportedTokenTypes");
  var aG = iG(eK);
  function ja(e, t) {
    let r = kl, n = /* @__PURE__ */ new Map();
    if (e != null && e.plugins) {
      for (let s of e.plugins) {
        let a, o;
        typeof s == "string" ? a = s : [a, o] = s, n.has(a) || n.set(a, o || {});
      }
      zK(n), r = oG(n);
    }
    return new r(e, t, n);
  }
  i(ja, "getParser");
  var LT = /* @__PURE__ */ new Map();
  function oG(e) {
    let t = [];
    for (let s of XK)
      e.has(s) && t.push(s);
    let r = t.join("|"), n = LT.get(r);
    if (!n) {
      n = kl;
      for (let s of t)
        n = QT[s](n);
      LT.set(r, n);
    }
    return n;
  }
  i(oG, "getParserClass");
  Ua.parse = nG;
  Ua.parseExpression = sG;
  Ua.tokTypes = aG;
});

// ../node_modules/picocolors/picocolors.js
var tS = A((vxe, wh) => {
  var ZT = process.argv || [], Fl = process.env, lG = !("NO_COLOR" in Fl || ZT.includes("--no-color")) && ("FORCE_COLOR" in Fl || ZT.includes(
  "--color") || process.platform === "win32" || le != null && le("tty").isatty(1) && Fl.TERM !== "dumb" || "CI" in Fl), uG = /* @__PURE__ */ i(
  (e, t, r = e) => (n) => {
    let s = "" + n, a = s.indexOf(t, e.length);
    return ~a ? e + cG(s, t, r, a) + t : e + s + t;
  }, "formatter"), cG = /* @__PURE__ */ i((e, t, r, n) => {
    let s = "", a = 0;
    do
      s += e.substring(a, n) + r, a = n + t.length, n = e.indexOf(t, a);
    while (~n);
    return s + e.substring(a);
  }, "replaceClose"), eS = /* @__PURE__ */ i((e = lG) => {
    let t = e ? uG : () => String;
    return {
      isColorSupported: e,
      reset: t("\x1B[0m", "\x1B[0m"),
      bold: t("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
      dim: t("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
      italic: t("\x1B[3m", "\x1B[23m"),
      underline: t("\x1B[4m", "\x1B[24m"),
      inverse: t("\x1B[7m", "\x1B[27m"),
      hidden: t("\x1B[8m", "\x1B[28m"),
      strikethrough: t("\x1B[9m", "\x1B[29m"),
      black: t("\x1B[30m", "\x1B[39m"),
      red: t("\x1B[31m", "\x1B[39m"),
      green: t("\x1B[32m", "\x1B[39m"),
      yellow: t("\x1B[33m", "\x1B[39m"),
      blue: t("\x1B[34m", "\x1B[39m"),
      magenta: t("\x1B[35m", "\x1B[39m"),
      cyan: t("\x1B[36m", "\x1B[39m"),
      white: t("\x1B[37m", "\x1B[39m"),
      gray: t("\x1B[90m", "\x1B[39m"),
      bgBlack: t("\x1B[40m", "\x1B[49m"),
      bgRed: t("\x1B[41m", "\x1B[49m"),
      bgGreen: t("\x1B[42m", "\x1B[49m"),
      bgYellow: t("\x1B[43m", "\x1B[49m"),
      bgBlue: t("\x1B[44m", "\x1B[49m"),
      bgMagenta: t("\x1B[45m", "\x1B[49m"),
      bgCyan: t("\x1B[46m", "\x1B[49m"),
      bgWhite: t("\x1B[47m", "\x1B[49m"),
      blackBright: t("\x1B[90m", "\x1B[39m"),
      redBright: t("\x1B[91m", "\x1B[39m"),
      greenBright: t("\x1B[92m", "\x1B[39m"),
      yellowBright: t("\x1B[93m", "\x1B[39m"),
      blueBright: t("\x1B[94m", "\x1B[39m"),
      magentaBright: t("\x1B[95m", "\x1B[39m"),
      cyanBright: t("\x1B[96m", "\x1B[39m"),
      whiteBright: t("\x1B[97m", "\x1B[39m"),
      bgBlackBright: t("\x1B[100m", "\x1B[49m"),
      bgRedBright: t("\x1B[101m", "\x1B[49m"),
      bgGreenBright: t("\x1B[102m", "\x1B[49m"),
      bgYellowBright: t("\x1B[103m", "\x1B[49m"),
      bgBlueBright: t("\x1B[104m", "\x1B[49m"),
      bgMagentaBright: t("\x1B[105m", "\x1B[49m"),
      bgCyanBright: t("\x1B[106m", "\x1B[49m"),
      bgWhiteBright: t("\x1B[107m", "\x1B[49m")
    };
  }, "createColors");
  wh.exports = eS();
  wh.exports.createColors = eS;
});

// ../node_modules/js-tokens/index.js
var rS = A((jl) => {
  Object.defineProperty(jl, "__esModule", {
    value: !0
  });
  jl.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  jl.matchToToken = function(e) {
    var t = { type: "invalid", value: e[0], closed: void 0 };
    return e[1] ? (t.type = "string", t.closed = !!(e[3] || e[4])) : e[5] ? t.type = "comment" : e[6] ? (t.type = "comment", t.closed = !!e[7]) :
    e[8] ? t.type = "regex" : e[9] ? t.type = "number" : e[10] ? t.type = "name" : e[11] ? t.type = "punctuator" : e[12] && (t.type = "white\
space"), t;
  };
});

// ../node_modules/@babel/code-frame/lib/index.js
var $a = A((Va) => {
  "use strict";
  Object.defineProperty(Va, "__esModule", { value: !0 });
  var Ih = tS(), nS = rS(), sS = di();
  function pG() {
    return typeof process == "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? !1 : Ih.isColorSupported;
  }
  i(pG, "isColorSupported");
  var Ll = /* @__PURE__ */ i((e, t) => (r) => e(t(r)), "compose");
  function oS(e) {
    return {
      keyword: e.cyan,
      capitalized: e.yellow,
      jsxIdentifier: e.yellow,
      punctuator: e.yellow,
      number: e.magenta,
      string: e.green,
      regex: e.magenta,
      comment: e.gray,
      invalid: Ll(Ll(e.white, e.bgRed), e.bold),
      gutter: e.gray,
      marker: Ll(e.red, e.bold),
      message: Ll(e.red, e.bold),
      reset: e.reset
    };
  }
  i(oS, "buildDefs");
  var fG = oS(Ih.createColors(!0)), dG = oS(Ih.createColors(!1));
  function lS(e) {
    return e ? fG : dG;
  }
  i(lS, "getDefs");
  var hG = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]), mG = /\r\n|[\n\r\u2028\u2029]/, yG = /^[()[\]{}]$/, uS;
  {
    let e = /^[a-z][\w-]*$/i, t = /* @__PURE__ */ i(function(r, n, s) {
      if (r.type === "name") {
        if (sS.isKeyword(r.value) || sS.isStrictReservedWord(r.value, !0) || hG.has(r.value))
          return "keyword";
        if (e.test(r.value) && (s[n - 1] === "<" || s.slice(n - 2, n) === "</"))
          return "jsxIdentifier";
        if (r.value[0] !== r.value[0].toLowerCase())
          return "capitalized";
      }
      return r.type === "punctuator" && yG.test(r.value) ? "bracket" : r.type === "invalid" && (r.value === "@" || r.value === "#") ? "punct\
uator" : r.type;
    }, "getTokenType");
    uS = /* @__PURE__ */ i(function* (r) {
      let n;
      for (; n = nS.default.exec(r); ) {
        let s = nS.matchToToken(n);
        yield {
          type: t(s, n.index, r),
          value: s.value
        };
      }
    }, "tokenize");
  }
  function cS(e) {
    if (e === "") return "";
    let t = lS(!0), r = "";
    for (let {
      type: n,
      value: s
    } of uS(e))
      n in t ? r += s.split(mG).map((a) => t[n](a)).join(`
`) : r += s;
    return r;
  }
  i(cS, "highlight");
  var iS = !1, aS = /\r\n|[\n\r\u2028\u2029]/;
  function gG(e, t, r) {
    let n = Object.assign({
      column: 0,
      line: -1
    }, e.start), s = Object.assign({}, n, e.end), {
      linesAbove: a = 2,
      linesBelow: o = 3
    } = r || {}, l = n.line, u = n.column, c = s.line, p = s.column, f = Math.max(l - (a + 1), 0), h = Math.min(t.length, c + o);
    l === -1 && (f = 0), c === -1 && (h = t.length);
    let g = c - l, P = {};
    if (g)
      for (let d = 0; d <= g; d++) {
        let y = d + l;
        if (!u)
          P[y] = !0;
        else if (d === 0) {
          let E = t[y - 1].length;
          P[y] = [u, E - u + 1];
        } else if (d === g)
          P[y] = [0, p];
        else {
          let E = t[y - d].length;
          P[y] = [0, E];
        }
      }
    else
      u === p ? u ? P[l] = [u, 0] : P[l] = !0 : P[l] = [u, p - u];
    return {
      start: f,
      end: h,
      markerLines: P
    };
  }
  i(gG, "getMarkerLines");
  function pS(e, t, r = {}) {
    let n = r.forceColor || pG() && r.highlightCode, s = lS(n), a = e.split(aS), {
      start: o,
      end: l,
      markerLines: u
    } = gG(t, a, r), c = t.start && typeof t.start.column == "number", p = String(l).length, h = (n ? cS(e) : e).split(aS, l).slice(o, l).map(
    (g, P) => {
      let d = o + 1 + P, E = ` ${` ${d}`.slice(-p)} |`, _ = u[d], k = !u[d + 1];
      if (_) {
        let B = "";
        if (Array.isArray(_)) {
          let L = g.slice(0, Math.max(_[0] - 1, 0)).replace(/[^\t]/g, " "), U = _[1] || 1;
          B = [`
 `, s.gutter(E.replace(/\d/g, " ")), " ", L, s.marker("^").repeat(U)].join(""), k && r.message && (B += " " + s.message(r.message));
        }
        return [s.marker(">"), s.gutter(E), g.length > 0 ? ` ${g}` : "", B].join("");
      } else
        return ` ${s.gutter(E)}${g.length > 0 ? ` ${g}` : ""}`;
    }).join(`
`);
    return r.message && !c && (h = `${" ".repeat(p + 1)}${r.message}
${h}`), n ? s.reset(h) : h;
  }
  i(pS, "codeFrameColumns");
  function bG(e, t, r, n = {}) {
    if (!iS) {
      iS = !0;
      let a = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (process.emitWarning)
        process.emitWarning(a, "DeprecationWarning");
      else {
        let o = new Error(a);
        o.name = "DeprecationWarning", console.warn(new Error(a));
      }
    }
    return r = Math.max(r, 0), pS(e, {
      start: {
        column: r,
        line: t
      }
    }, n);
  }
  i(bG, "index");
  Va.codeFrameColumns = pS;
  Va.default = bG;
  Va.highlight = cS;
});

// ../node_modules/@babel/template/lib/parse.js
var Oh = A((_h) => {
  "use strict";
  Object.defineProperty(_h, "__esModule", {
    value: !0
  });
  _h.default = NG;
  var EG = Pe(), TG = Fs(), SG = $a(), {
    isCallExpression: xG,
    isExpressionStatement: vG,
    isFunction: PG,
    isIdentifier: AG,
    isJSXIdentifier: CG,
    isNewExpression: DG,
    isPlaceholder: Ml,
    isStatement: wG,
    isStringLiteral: fS,
    removePropertiesDeep: IG,
    traverse: _G
  } = EG, OG = /^[_$A-Z0-9]+$/;
  function NG(e, t, r) {
    let {
      placeholderWhitelist: n,
      placeholderPattern: s,
      preserveComments: a,
      syntacticPlaceholders: o
    } = r, l = FG(t, r.parser, o);
    IG(l, {
      preserveComments: a
    }), e.validate(l);
    let u = {
      syntactic: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      legacy: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      placeholderWhitelist: n,
      placeholderPattern: s,
      syntacticPlaceholders: o
    };
    return _G(l, BG, u), Object.assign({
      ast: l
    }, u.syntactic.placeholders.length ? u.syntactic : u.legacy);
  }
  i(NG, "parseAndBuildMetadata");
  function BG(e, t, r) {
    var n;
    let s, a = r.syntactic.placeholders.length > 0;
    if (Ml(e)) {
      if (r.syntacticPlaceholders === !1)
        throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
      s = e.name.name, a = !0;
    } else {
      if (a || r.syntacticPlaceholders)
        return;
      if (AG(e) || CG(e))
        s = e.name;
      else if (fS(e))
        s = e.value;
      else
        return;
    }
    if (a && (r.placeholderPattern != null || r.placeholderWhitelist != null))
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    if (!a && (r.placeholderPattern === !1 || !(r.placeholderPattern || OG).test(s)) && !((n = r.placeholderWhitelist) != null && n.has(s)))
      return;
    t = t.slice();
    let {
      node: o,
      key: l
    } = t[t.length - 1], u;
    fS(e) || Ml(e, {
      expectedNode: "StringLiteral"
    }) ? u = "string" : DG(o) && l === "arguments" || xG(o) && l === "arguments" || PG(o) && l === "params" ? u = "param" : vG(o) && !Ml(e) ?
    (u = "statement", t = t.slice(0, -1)) : wG(e) && Ml(e) ? u = "statement" : u = "other";
    let {
      placeholders: c,
      placeholderNames: p
    } = a ? r.syntactic : r.legacy;
    c.push({
      name: s,
      type: u,
      resolve: /* @__PURE__ */ i((f) => kG(f, t), "resolve"),
      isDuplicate: p.has(s)
    }), p.add(s);
  }
  i(BG, "placeholderVisitorHandler");
  function kG(e, t) {
    let r = e;
    for (let a = 0; a < t.length - 1; a++) {
      let {
        key: o,
        index: l
      } = t[a];
      l === void 0 ? r = r[o] : r = r[o][l];
    }
    let {
      key: n,
      index: s
    } = t[t.length - 1];
    return {
      parent: r,
      key: n,
      index: s
    };
  }
  i(kG, "resolveAncestors");
  function FG(e, t, r) {
    let n = (t.plugins || []).slice();
    r !== !1 && n.push("placeholders"), t = Object.assign({
      allowReturnOutsideFunction: !0,
      allowSuperOutsideMethod: !0,
      sourceType: "module"
    }, t, {
      plugins: n
    });
    try {
      return (0, TG.parse)(e, t);
    } catch (s) {
      let a = s.loc;
      throw a && (s.message += `
` + (0, SG.codeFrameColumns)(e, {
        start: a
      }), s.code = "BABEL_TEMPLATE_PARSE_ERROR"), s;
    }
  }
  i(FG, "parseWithCodeFrame");
});

// ../node_modules/@babel/template/lib/populate.js
var Fh = A((kh) => {
  "use strict";
  Object.defineProperty(kh, "__esModule", {
    value: !0
  });
  kh.default = UG;
  var jG = Pe(), {
    blockStatement: LG,
    cloneNode: Bh,
    emptyStatement: MG,
    expressionStatement: Nh,
    identifier: Rl,
    isStatement: dS,
    isStringLiteral: RG,
    stringLiteral: qG,
    validate: hS
  } = jG;
  function UG(e, t) {
    let r = Bh(e.ast);
    return t && (e.placeholders.forEach((n) => {
      if (!hasOwnProperty.call(t, n.name)) {
        let s = n.name;
        throw new Error(`Error: No substitution given for "${s}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${s}'])}
            - { placeholderPattern: /^${s}$/ }`);
      }
    }), Object.keys(t).forEach((n) => {
      if (!e.placeholderNames.has(n))
        throw new Error(`Unknown substitution "${n}" given`);
    })), e.placeholders.slice().reverse().forEach((n) => {
      try {
        VG(n, r, t && t[n.name] || null);
      } catch (s) {
        throw s.message = `@babel/template placeholder "${n.name}": ${s.message}`, s;
      }
    }), r;
  }
  i(UG, "populatePlaceholders");
  function VG(e, t, r) {
    e.isDuplicate && (Array.isArray(r) ? r = r.map((l) => Bh(l)) : typeof r == "object" && (r = Bh(r)));
    let {
      parent: n,
      key: s,
      index: a
    } = e.resolve(t);
    if (e.type === "string") {
      if (typeof r == "string" && (r = qG(r)), !r || !RG(r))
        throw new Error("Expected string substitution");
    } else if (e.type === "statement")
      a === void 0 ? r ? Array.isArray(r) ? r = LG(r) : typeof r == "string" ? r = Nh(Rl(r)) : dS(r) || (r = Nh(r)) : r = MG() : r && !Array.
      isArray(r) && (typeof r == "string" && (r = Rl(r)), dS(r) || (r = Nh(r)));
    else if (e.type === "param") {
      if (typeof r == "string" && (r = Rl(r)), a === void 0) throw new Error("Assertion failure.");
    } else if (typeof r == "string" && (r = Rl(r)), Array.isArray(r))
      throw new Error("Cannot replace single expression with an array.");
    function o(l, u, c) {
      let p = l[u];
      l[u] = c, (p.type === "Identifier" || p.type === "Placeholder") && (p.typeAnnotation && (c.typeAnnotation = p.typeAnnotation), p.optional &&
      (c.optional = p.optional), p.decorators && (c.decorators = p.decorators));
    }
    if (i(o, "set"), a === void 0)
      hS(n, s, r), o(n, s, r);
    else {
      let l = n[s].slice();
      e.type === "statement" || e.type === "param" ? r == null ? l.splice(a, 1) : Array.isArray(r) ? l.splice(a, 1, ...r) : o(l, a, r) : o(l,
      a, r), hS(n, s, l), n[s] = l;
    }
  }
  i(VG, "applyReplacement");
});

// ../node_modules/@babel/template/lib/string.js
var mS = A((jh) => {
  "use strict";
  Object.defineProperty(jh, "__esModule", {
    value: !0
  });
  jh.default = GG;
  var $G = Al(), WG = Oh(), KG = Fh();
  function GG(e, t, r) {
    t = e.code(t);
    let n;
    return (s) => {
      let a = (0, $G.normalizeReplacements)(s);
      return n || (n = (0, WG.default)(e, t, r)), e.unwrap((0, KG.default)(n, a));
    };
  }
  i(GG, "stringTemplate");
});

// ../node_modules/@babel/template/lib/literal.js
var yS = A((Lh) => {
  "use strict";
  Object.defineProperty(Lh, "__esModule", {
    value: !0
  });
  Lh.default = zG;
  var HG = Al(), YG = Oh(), JG = Fh();
  function zG(e, t, r) {
    let {
      metadata: n,
      names: s
    } = XG(e, t, r);
    return (a) => {
      let o = {};
      return a.forEach((l, u) => {
        o[s[u]] = l;
      }), (l) => {
        let u = (0, HG.normalizeReplacements)(l);
        return u && Object.keys(u).forEach((c) => {
          if (hasOwnProperty.call(o, c))
            throw new Error("Unexpected replacement overlap.");
        }), e.unwrap((0, JG.default)(n, u ? Object.assign(u, o) : o));
      };
    };
  }
  i(zG, "literalTemplate");
  function XG(e, t, r) {
    let n = "BABEL_TPL$", s = t.join("");
    do
      n = "$$" + n;
    while (s.includes(n));
    let {
      names: a,
      code: o
    } = QG(t, n);
    return {
      metadata: (0, YG.default)(e, e.code(o), {
        parser: r.parser,
        placeholderWhitelist: new Set(a.concat(r.placeholderWhitelist ? Array.from(r.placeholderWhitelist) : [])),
        placeholderPattern: r.placeholderPattern,
        preserveComments: r.preserveComments,
        syntacticPlaceholders: r.syntacticPlaceholders
      }),
      names: a
    };
  }
  i(XG, "buildLiteralData");
  function QG(e, t) {
    let r = [], n = e[0];
    for (let s = 1; s < e.length; s++) {
      let a = `${t}${s - 1}`;
      r.push(a), n += a + e[s];
    }
    return {
      names: r,
      code: n
    };
  }
  i(QG, "buildTemplateCode");
});

// ../node_modules/@babel/template/lib/builder.js
var xS = A((Mh) => {
  "use strict";
  Object.defineProperty(Mh, "__esModule", {
    value: !0
  });
  Mh.default = SS;
  var cn = Al(), gS = mS(), bS = yS(), ES = (0, cn.validate)({
    placeholderPattern: !1
  });
  function SS(e, t) {
    let r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap(), s = t || (0, cn.validate)(null);
    return Object.assign((a, ...o) => {
      if (typeof a == "string") {
        if (o.length > 1) throw new Error("Unexpected extra params.");
        return TS((0, gS.default)(e, a, (0, cn.merge)(s, (0, cn.validate)(o[0]))));
      } else if (Array.isArray(a)) {
        let l = r.get(a);
        return l || (l = (0, bS.default)(e, a, s), r.set(a, l)), TS(l(o));
      } else if (typeof a == "object" && a) {
        if (o.length > 0) throw new Error("Unexpected extra params.");
        return SS(e, (0, cn.merge)(s, (0, cn.validate)(a)));
      }
      throw new Error(`Unexpected template param ${typeof a}`);
    }, {
      ast: /* @__PURE__ */ i((a, ...o) => {
        if (typeof a == "string") {
          if (o.length > 1) throw new Error("Unexpected extra params.");
          return (0, gS.default)(e, a, (0, cn.merge)((0, cn.merge)(s, (0, cn.validate)(o[0])), ES))();
        } else if (Array.isArray(a)) {
          let l = n.get(a);
          return l || (l = (0, bS.default)(e, a, (0, cn.merge)(s, ES)), n.set(a, l)), l(o)();
        }
        throw new Error(`Unexpected template param ${typeof a}`);
      }, "ast")
    });
  }
  i(SS, "createTemplateBuilder");
  function TS(e) {
    let t = "";
    try {
      throw new Error();
    } catch (r) {
      r.stack && (t = r.stack.split(`
`).slice(3).join(`
`));
    }
    return (r) => {
      try {
        return e(r);
      } catch (n) {
        throw n.stack += `
    =============
${t}`, n;
      }
    };
  }
  i(TS, "extendedTrace");
});

// ../node_modules/@babel/template/lib/index.js
var Ai = A((fr) => {
  "use strict";
  Object.defineProperty(fr, "__esModule", {
    value: !0
  });
  fr.statements = fr.statement = fr.smart = fr.program = fr.expression = fr.default = void 0;
  var Wa = xT(), Ka = xS(), Rh = fr.smart = (0, Ka.default)(Wa.smart), ZG = fr.statement = (0, Ka.default)(Wa.statement), eH = fr.statements =
  (0, Ka.default)(Wa.statements), tH = fr.expression = (0, Ka.default)(Wa.expression), rH = fr.program = (0, Ka.default)(Wa.program), Mxe = fr.
  default = Object.assign(Rh.bind(void 0), {
    smart: Rh,
    statement: ZG,
    statements: eH,
    expression: tH,
    program: rH,
    ast: Rh.ast
  });
});

// ../node_modules/@babel/helpers/lib/helpers-generated.js
var vS = A((ql) => {
  "use strict";
  Object.defineProperty(ql, "__esModule", {
    value: !0
  });
  ql.default = void 0;
  var nH = Ai();
  function H(e, t, r) {
    return Object.freeze({
      minVersion: e,
      ast: /* @__PURE__ */ i(() => nH.default.program.ast(t, {
        preserveComments: !0
      }), "ast"),
      metadata: r
    });
  }
  i(H, "helper");
  var sH = ql.default = {
    __proto__: null,
    OverloadYield: H("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", {
      globals: [],
      locals: {
        _OverloadYield: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_OverloadYield",
      dependencies: {}
    }),
    applyDecoratedDescriptor: H("7.0.0-beta.0", 'function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((funct\
ion(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().re\
verse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initi\
alizer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}', {
      globals: ["Object"],
      locals: {
        _applyDecoratedDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_applyDecoratedDescriptor",
      dependencies: {}
    }),
    applyDecs2311: H("7.24.0", 'function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for("Symbol.metadata"),m=Obj\
ect.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length\
;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if("function"!=typeof e&&(r||void 0!==e))throw new TypeError(t+" must "+(n||\
"be")+" a function"+(r?"":" or undefined"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError("At\
tempted to access private element on non-instance")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){retu\
rn function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?"get":j||D?"set":"value";if(f?(l||D?P={get:setFunction\
Name((function(){return v(this)}),r,"get"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?"":F)):l||(P=Object.getOwnPrope\
rtyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error("Decorating two elements with the same name ("+P[F].name+") is not support\
ed yet");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],"A decorator","be",!0),z=n?h[O-1]:void 0,A={},H={kind:["fiel\
d","accessor","method","getter","setter","class"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError("attempted to\
 call addInitializer after decoration was finished");b(t,"An initializer","be",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,"\
class decorators","return")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?funct\
ion(e){return d(e),P.value}:I("get",0,d):function(e){return e[r]}),E||S||(c.set=f?I("set",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.ge\
t,set:P.set}:P[F],H),A.v=1,D){if("object"==typeof N&&N)(c=b(N.get,"accessor.get"))&&(P.get=c),(c=b(N.set,"accessor.set"))&&(P.set=c),(c=b(N.\
init,"accessor.init"))&&k.unshift(c);else if(void 0!==N)throw new TypeError("accessor decorators must return an object with get, set, or ini\
t properties or undefined")}else b(N,(l?"field":"method")+" decorators","return")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s\
,0)),l||w||(f?D?u.splice(-1,0,I("get",s),I("set",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!\
0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<\
n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?"#"+p:toPropertyKey(p),l\
,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,\
get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}', {
      globals: ["Symbol", "Object", "TypeError", "Error"],
      locals: {
        applyDecs2311: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2311",
      dependencies: {
        checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.cons\
equent.body.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.pro\
perties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"],
        toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.al\
ternate.callee"]
      }
    }),
    arrayLikeToArray: H("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[\
e];return n}", {
      globals: ["Array"],
      locals: {
        _arrayLikeToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayLikeToArray",
      dependencies: {}
    }),
    arrayWithHoles: H("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", {
      globals: ["Array"],
      locals: {
        _arrayWithHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithHoles",
      dependencies: {}
    }),
    arrayWithoutHoles: H("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", {
      globals: ["Array"],
      locals: {
        _arrayWithoutHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithoutHoles",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"]
      }
    }),
    assertClassBrand: H("7.24.0", 'function _assertClassBrand(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;th\
row new TypeError("Private element is not present on this object")}', {
      globals: ["TypeError"],
      locals: {
        _assertClassBrand: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertClassBrand",
      dependencies: {}
    }),
    assertThisInitialized: H("7.0.0-beta.0", `function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been in\
itialised - super() hasn't been called");return e}`, {
      globals: ["ReferenceError"],
      locals: {
        _assertThisInitialized: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertThisInitialized",
      dependencies: {}
    }),
    asyncGeneratorDelegate: H("7.0.0-beta.0", 'function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promis\
e((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=func\
tion(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;\
return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}', {
      globals: ["Promise", "Symbol"],
      locals: {
        _asyncGeneratorDelegate: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncGeneratorDelegate",
      dependencies: {
        OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"]
      }
    }),
    asyncIterator: H("7.15.9", 'function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.it\
erator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="\
@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation\
(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((functio\
n(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:nu\
ll,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return v\
oid 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.re\
turn;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}', {
      globals: ["Symbol", "TypeError", "Object", "Promise"],
      locals: {
        _asyncIterator: ["body.0.id"],
        AsyncFromSyncIterator: ["body.1.id", "body.0.body.body.1.body.body.1.consequent.argument.callee", "body.1.body.body.1.argument.expre\
ssions.1.left.object", "body.1.body.body.1.argument.expressions.2.callee", "body.1.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncIterator",
      dependencies: {}
    }),
    asyncToGenerator: H("7.0.0-beta.0", 'function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.\
done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r\
,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_\
throw,"throw",n)}_next(void 0)}))}}', {
      globals: ["Promise"],
      locals: {
        asyncGeneratorStep: ["body.0.id", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.c\
allee", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"],
        _asyncToGenerator: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncToGenerator",
      dependencies: {}
    }),
    awaitAsyncGenerator: H("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", {
      globals: [],
      locals: {
        _awaitAsyncGenerator: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_awaitAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.0.body.body.0.argument.callee"]
      }
    }),
    callSuper: H("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Ref\
lect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", {
      globals: ["Reflect"],
      locals: {
        _callSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_callSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.co\
nsequent.arguments.2.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"],
        possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    checkInRHS: H("7.20.5", `function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(n\
ull!==e?typeof e:"null"));return e}`, {
      globals: ["Object", "TypeError"],
      locals: {
        _checkInRHS: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkInRHS",
      dependencies: {}
    }),
    checkPrivateRedeclaration: H("7.14.1", 'function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the \
same private elements twice on an object")}', {
      globals: ["TypeError"],
      locals: {
        _checkPrivateRedeclaration: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkPrivateRedeclaration",
      dependencies: {}
    }),
    classCallCheck: H("7.0.0-beta.0", 'function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a func\
tion")}', {
      globals: ["TypeError"],
      locals: {
        _classCallCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCallCheck",
      dependencies: {}
    }),
    classNameTDZError: H("7.0.0-beta.0", `function _classNameTDZError(e){throw new ReferenceError('Class "'+e+'" cannot be referenced in com\
puted property keys.')}`, {
      globals: ["ReferenceError"],
      locals: {
        _classNameTDZError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classNameTDZError",
      dependencies: {}
    }),
    classPrivateFieldGet2: H("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", {
      globals: [],
      locals: {
        _classPrivateFieldGet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldGet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    classPrivateFieldInitSpec: H("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", {
      globals: [],
      locals: {
        _classPrivateFieldInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      }
    }),
    classPrivateFieldLooseBase: H("7.0.0-beta.0", 'function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError(\
"attempted to use private field on non-instance");return e}', {
      globals: ["TypeError"],
      locals: {
        _classPrivateFieldBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldBase",
      dependencies: {}
    }),
    classPrivateFieldLooseKey: H("7.0.0-beta.0", 'var id=0;function _classPrivateFieldKey(e){return"__private_"+id+++"_"+e}', {
      globals: [],
      locals: {
        id: ["body.0.declarations.0.id", "body.1.body.body.0.argument.left.left.right.argument", "body.1.body.body.0.argument.left.left.righ\
t.argument"],
        _classPrivateFieldKey: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldKey",
      dependencies: {}
    }),
    classPrivateFieldSet2: H("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", {
      globals: [],
      locals: {
        _classPrivateFieldSet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldSet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      }
    }),
    classPrivateGetter: H("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", {
      globals: [],
      locals: {
        _classPrivateGetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateGetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    classPrivateMethodInitSpec: H("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", {
      globals: [],
      locals: {
        _classPrivateMethodInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      }
    }),
    classPrivateSetter: H("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", {
      globals: [],
      locals: {
        _classPrivateSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateSetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      }
    }),
    classStaticPrivateMethodGet: H("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", {
      globals: [],
      locals: {
        _classStaticPrivateMethodGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateMethodGet",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
      }
    }),
    construct: H("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);va\
r o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", {
      globals: ["Reflect"],
      locals: {
        _construct: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_construct",
      dependencies: {
        isNativeReflectConstruct: ["body.0.body.body.0.test.callee"],
        setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"]
      }
    }),
    createClass: H("7.0.0-beta.0", 'function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.c\
onfigurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineP\
roperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}', {
      globals: ["Object"],
      locals: {
        _defineProperties: ["body.0.id", "body.1.body.body.0.argument.expressions.0.right.callee", "body.1.body.body.0.argument.expressions.\
1.right.callee"],
        _createClass: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createClass",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"]
      }
    }),
    createForOfIteratorHelper: H("7.9.0", 'function _createForOfIteratorHelper(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r[\
"@@iterator"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var n=0,F=function(){\
};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError("Invalid atte\
mpt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;\
return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||\
t.return()}finally{if(u)throw o}}}}', {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelper",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"]
      }
    }),
    createForOfIteratorHelperLoose: H("7.9.0", 'function _createForOfIteratorHelperLoose(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.ite\
rator]||r["@@iterator"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof\
 r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError("Invalid attempt to i\
terate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelperLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelperLoose",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"]
      }
    }),
    createSuper: H("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var\
 s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,\
e)}}", {
      globals: ["Reflect"],
      locals: {
        _createSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.cons\
equent.body.0.declarations.0.init.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"],
        possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"]
      }
    }),
    decorate: H("7.1.5", `function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(\
e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.i\
nitializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return\
 e};var e={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(e,r){["method","field"].forEach((function(t){r\
.forEach((function(r){r.kind===t&&"own"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){v\
ar t=e.prototype;["method","field"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&("static"===o||"prototype"=\
==o)){var n="static"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if("field"==\
=r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}O\
bject.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.\
addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.elem\
ent),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);retu\
rn i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw \
new TypeError("Duplicated element ("+e.key+")");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n\
>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a\
);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPl\
acement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;\
i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elemen\
ts){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new\
 TypeError("Duplicated element ("+e[s].key+")")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.\
key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"\
field"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=th\
is.toElementDescriptor(e);return this.disallowProperty(e,"finisher","An element descriptor"),this.disallowProperty(e,"extras","An element de\
scriptor"),r}),this)},toElementDescriptor:function(e){var r=e.kind+"";if("method"!==r&&"field"!==r)throw new TypeError('An element descripto\
r\\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "'+r+'"');var t=toPropertyK\
ey(e.key),i=e.placement+"";if("static"!==i&&"prototype"!==i&&"own"!==i)throw new TypeError('An element descriptor\\'s .placement property mus\
t be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "'+i+'"');var o=e.descriptor;this.\
disallowProperty(e,"elements","An element descriptor");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return"field"!==r?thi\
s.disallowProperty(e,"initializer","A method descriptor"):(this.disallowProperty(o,"get","The property descriptor of a field descriptor"),th\
is.disallowProperty(o,"set","The property descriptor of a field descriptor"),this.disallowProperty(o,"value","The property descriptor of a f\
ield descriptor"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_o\
ptionalCallableProperty(e,"finisher"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:"class",eleme\
nts:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),r},toCla\
ssDescriptor:function(e){var r=e.kind+"";if("class"!==r)throw new TypeError('A class descriptor\\'s .kind property must be "class", but a dec\
orator created a class descriptor with .kind "'+r+'"');this.disallowProperty(e,"key","A class descriptor"),this.disallowProperty(e,"placemen\
t","A class descriptor"),this.disallowProperty(e,"descriptor","A class descriptor"),this.disallowProperty(e,"initializer","A class descripto\
r"),this.disallowProperty(e,"extras","A class descriptor");var t=_optionalCallableProperty(e,"finisher");return{elements:this.toElementDescr\
iptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if("function"!=\
typeof i)throw new TypeError("Finishers must return a constructor.");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw \
new TypeError(t+" can't have a ."+r+" property.")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);"method"===e.\
kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:"get"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:"set"===e.kind\
?r={set:e.value,configurable:!0,enumerable:!1}:"field"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:"field"===e.kin\
d?"field":"method",key:t,placement:e.static?"static":"field"===e.kind?"own":"prototype",descriptor:r};return e.decorators&&(i.decorators=e.d\
ecorators),"field"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.desc\
riptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return"method"===e.ki\
nd&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if("method"===o.kind&&(i=r.find(isSameElement)))if(_isDataDes\
criptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError("Duplicated methods\
 ("+o.key+") can't be decorated.");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError("Decor\
ators can't be placed on different accessors with for the same property ("+o.key+").");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}\
else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&\
&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&"function"!=typeof t)throw new T\
ypeError("Expected '"+r+"' to be a function");return t}`, {
      globals: ["Object", "TypeError", "Symbol", "ReferenceError"],
      locals: {
        _decorate: ["body.0.id"],
        _getDecoratorsApi: ["body.1.id", "body.0.body.body.0.declarations.0.init.callee", "body.1.body.body.0.expression.left"],
        _createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"],
        _coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"],
        _coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"],
        _hasDecorators: ["body.5.id", "body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.\
body.body.0.test.argument.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee", "body.4.body.body.0.body.\
body.1.consequent.consequent.body.0.test.right.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee", "body.4.bo\
dy.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"],
        _isDataDescriptor: ["body.6.id", "body.4.body.body.0.body.body.1.consequent.test.left.callee", "body.4.body.body.0.body.body.1.conse\
quent.test.right.callee"],
        _optionalCallableProperty: ["body.7.id", "body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties\
.1.value.callee", "body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"]
      },
      exportBindingAssignments: [],
      exportName: "_decorate",
      dependencies: {
        toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"],
        toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.bo\
dy.0.declarations.1.init.callee"]
      }
    }),
    defaults: H("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.get\
OwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", {
      globals: ["Object"],
      locals: {
        _defaults: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defaults",
      dependencies: {}
    }),
    defineAccessor: H("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty\
(r,n,c)}", {
      globals: ["Object"],
      locals: {
        _defineAccessor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineAccessor",
      dependencies: {}
    }),
    defineProperty: H("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enu\
merable:!0,configurable:!0,writable:!0}):e[r]=t,e}", {
      globals: ["Object"],
      locals: {
        _defineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineProperty",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"]
      }
    }),
    extends: H("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.l\
ength;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", {
      globals: ["Object"],
      locals: {
        _extends: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_extends",
      dependencies: {}
    }),
    get: H("7.0.0-beta.0", 'function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=su\
perPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,\
arguments)}', {
      globals: ["Reflect", "Object"],
      locals: {
        _get: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_get",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"]
      }
    }),
    getPrototypeOf: H("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind()\
:function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", {
      globals: ["Object"],
      locals: {
        _getPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_getPrototypeOf",
      dependencies: {}
    }),
    identity: H("7.17.0", "function _identity(t){return t}", {
      globals: [],
      locals: {
        _identity: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_identity",
      dependencies: {}
    }),
    importDeferProxy: H("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=functi\
on(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValu\
e(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:c\
onstValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:const\
Value(!1)})}", {
      globals: ["Proxy", "Reflect"],
      locals: {
        _importDeferProxy: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_importDeferProxy",
      dependencies: {}
    }),
    inherits: H("7.0.0-beta.0", 'function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either\
 be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty\
(t,"prototype",{writable:!1}),e&&setPrototypeOf(t,e)}', {
      globals: ["TypeError", "Object"],
      locals: {
        _inherits: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inherits",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"]
      }
    }),
    inheritsLoose: H("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setProto\
typeOf(t,o)}", {
      globals: ["Object"],
      locals: {
        _inheritsLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inheritsLoose",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"]
      }
    }),
    initializerDefineProperty: H("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.en\
umerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", {
      globals: ["Object"],
      locals: {
        _initializerDefineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerDefineProperty",
      dependencies: {}
    }),
    initializerWarningHelper: H("7.0.0-beta.0", 'function _initializerWarningHelper(r,e){throw Error("Decorating class property failed. Plea\
se ensure that transform-class-properties is enabled and runs after the decorators transform.")}', {
      globals: ["Error"],
      locals: {
        _initializerWarningHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerWarningHelper",
      dependencies: {}
    }),
    instanceof: H("7.0.0-beta.0", 'function _instanceof(n,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.ha\
sInstance](n):n instanceof e}', {
      globals: ["Symbol"],
      locals: {
        _instanceof: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_instanceof",
      dependencies: {}
    }),
    interopRequireDefault: H("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", {
      globals: [],
      locals: {
        _interopRequireDefault: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_interopRequireDefault",
      dependencies: {}
    }),
    interopRequireWildcard: H("7.14.0", 'function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=\
new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)retur\
n e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e)\
;var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u\
)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,\
n),n}', {
      globals: ["WeakMap", "Object"],
      locals: {
        _getRequireWildcardCache: ["body.0.id", "body.1.body.body.2.declarations.0.init.callee", "body.0.body.body.2.argument.callee.left"],
        _interopRequireWildcard: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_interopRequireWildcard",
      dependencies: {}
    }),
    isNativeFunction: H("7.0.0-beta.0", 'function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}cat\
ch(n){return"function"==typeof t}}', {
      globals: ["Function"],
      locals: {
        _isNativeFunction: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_isNativeFunction",
      dependencies: {}
    }),
    isNativeReflectConstruct: H("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(B\
oolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", {
      globals: ["Boolean", "Reflect"],
      locals: {
        _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.callee"],
      exportName: "_isNativeReflectConstruct",
      dependencies: {}
    }),
    iterableToArray: H("7.0.0-beta.0", 'function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@ite\
rator"])return Array.from(r)}', {
      globals: ["Symbol", "Array"],
      locals: {
        _iterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArray",
      dependencies: {}
    }),
    iterableToArrayLimit: H("7.0.0-beta.0", 'function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.ite\
rator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f\
=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u\
))return}finally{if(o)throw n}}return a}}', {
      globals: ["Symbol", "Object"],
      locals: {
        _iterableToArrayLimit: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArrayLimit",
      dependencies: {}
    }),
    jsx: H("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="functio\
n"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:vo\
id 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&\
&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}', {
      globals: ["Symbol", "Array"],
      locals: {
        REACT_ELEMENT_TYPE: ["body.0.declarations.0.id", "body.1.body.body.0.expression.left", "body.1.body.body.4.argument.properties.0.val\
ue", "body.1.body.body.0.expression.right.left"],
        _createRawReactElement: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createRawReactElement",
      dependencies: {}
    }),
    maybeArrayLike: H("7.9.0", 'function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&"number"==typeof a.length){var y=a.length;return ar\
rayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}', {
      globals: ["Array"],
      locals: {
        _maybeArrayLike: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_maybeArrayLike",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"]
      }
    }),
    newArrowCheck: H("7.0.0-beta.0", 'function _newArrowCheck(n,r){if(n!==r)throw new TypeError("Cannot instantiate an arrow function")}', {
      globals: ["TypeError"],
      locals: {
        _newArrowCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_newArrowCheck",
      dependencies: {}
    }),
    nonIterableRest: H("7.0.0-beta.0", 'function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instanc\
e.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["TypeError"],
      locals: {
        _nonIterableRest: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableRest",
      dependencies: {}
    }),
    nonIterableSpread: H("7.0.0-beta.0", 'function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance\
.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["TypeError"],
      locals: {
        _nonIterableSpread: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableSpread",
      dependencies: {}
    }),
    nullishReceiverError: H("7.22.6", 'function _nullishReceiverError(r){throw new TypeError("Cannot set property of null or undefined.")}',
    {
      globals: ["TypeError"],
      locals: {
        _nullishReceiverError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nullishReceiverError",
      dependencies: {}
    }),
    objectDestructuringEmpty: H("7.0.0-beta.0", 'function _objectDestructuringEmpty(t){if(null==t)throw new TypeError("Cannot destructure "+\
t)}', {
      globals: ["TypeError"],
      locals: {
        _objectDestructuringEmpty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectDestructuringEmpty",
      dependencies: {}
    }),
    objectSpread2: H("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbol\
s(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSprea\
d2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProp\
erty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach\
((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", {
      globals: ["Object"],
      locals: {
        ownKeys: ["body.0.id", "body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee", "body.1.body.body.0.body.body.1.\
expression.alternate.alternate.callee.object.callee"],
        _objectSpread2: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectSpread2",
      dependencies: {
        defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"]
      }
    }),
    objectWithoutProperties: H("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutProperties\
Loose(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIs\
Enumerable.call(e,o)&&(i[o]=e[o])}return i}", {
      globals: ["Object"],
      locals: {
        _objectWithoutProperties: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutProperties",
      dependencies: {
        objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"]
      }
    }),
    objectWithoutPropertiesLoose: H("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r\
)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}", {
      globals: [],
      locals: {
        _objectWithoutPropertiesLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutPropertiesLoose",
      dependencies: {}
    }),
    possibleConstructorReturn: H("7.0.0-beta.0", 'function _possibleConstructorReturn(t,e){if(e&&("object"==typeof e||"function"==typeof e))\
return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return assertThisInitialized(t)}', {
      globals: ["TypeError"],
      locals: {
        _possibleConstructorReturn: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_possibleConstructorReturn",
      dependencies: {
        assertThisInitialized: ["body.0.body.body.2.argument.callee"]
      }
    }),
    readOnlyError: H("7.0.0-beta.0", `function _readOnlyError(r){throw new TypeError('"'+r+'" is read-only')}`, {
      globals: ["TypeError"],
      locals: {
        _readOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_readOnlyError",
      dependencies: {}
    }),
    regeneratorRuntime: H("7.18.0", `function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LI\
CENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t\
[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStr\
ingTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}\
catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(\
i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",\
arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={}\
;function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));v\
ar d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype\
=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invo\
ke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;retur\
n h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a\
)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:fun\
ction(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg\
,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Er\
ror("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c\
){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(\
o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p\
.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function ma\
ybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.a\
rg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n\
+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;ret\
urn a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw"\
,r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc\
=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",\
delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function value\
s(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){fo\
r(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new T\
ypeError(typeof e+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFuncti\
onPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displa\
yName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;r\
eturn!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.set\
PrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create\
(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){re\
turn this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);retu\
rn e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator")\
,define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[]\
;for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}r\
eturn next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this\
._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.c\
harAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.\
type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",\
a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("r\
oot"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.cat\
chLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.\
catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abru\
pt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.\
prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.\
type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;retu\
rn"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"n\
ormal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLo\
c===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var \
r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal ca\
tch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.ar\
g=t),y}},e}`, {
      globals: ["Object", "Symbol", "Error", "TypeError", "isNaN", "Promise"],
      locals: {
        _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.expression.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.expression"],
      exportName: "_regeneratorRuntime",
      dependencies: {}
    }),
    set: H("7.0.0-beta.0", 'function set(e,r,t,o){return set="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=\
superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOw\
nPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}f\
unction _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError("failed to set property");return t}', {
      globals: ["Reflect", "Object", "TypeError"],
      locals: {
        set: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.0.test.left.argument.callee", "body.0.body.\
body.0.argument.expressions.0.left"],
        _set: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_set",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"],
        defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"]
      }
    }),
    setFunctionName: H("7.23.6", 'function setFunctionName(e,t,n){"symbol"==typeof t&&(t=(t=t.description)?"["+t+"]":"");try{Object.definePr\
operty(e,"name",{configurable:!0,value:n?n+" "+t:t})}catch(e){}return e}', {
      globals: ["Object"],
      locals: {
        setFunctionName: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "setFunctionName",
      dependencies: {}
    }),
    setPrototypeOf: H("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind\
():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", {
      globals: ["Object"],
      locals: {
        _setPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_setPrototypeOf",
      dependencies: {}
    }),
    skipFirstGeneratorNext: H("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.\
next(),r}}", {
      globals: [],
      locals: {
        _skipFirstGeneratorNext: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_skipFirstGeneratorNext",
      dependencies: {}
    }),
    slicedToArray: H("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableT\
oArray(r,e)||nonIterableRest()}", {
      globals: [],
      locals: {
        _slicedToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_slicedToArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    superPropBase: H("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return \
t}", {
      globals: [],
      locals: {
        _superPropBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropBase",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"]
      }
    }),
    superPropGet: H("7.25.0", 'function _superPropGet(t,o,e,r){var p=get(getPrototypeOf(1&r?t.prototype:t),o,e);return 2&r&&"function"==type\
of p?function(t){return p.apply(e,t)}:p}', {
      globals: [],
      locals: {
        _superPropGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropGet",
      dependencies: {
        get: ["body.0.body.body.0.declarations.0.init.callee"],
        getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"]
      }
    }),
    superPropSet: H("7.25.0", "function _superPropSet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", {
      globals: [],
      locals: {
        _superPropSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropSet",
      dependencies: {
        set: ["body.0.body.body.0.argument.callee"],
        getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    taggedTemplateLiteral: H("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.definePrope\
rties(e,{raw:{value:Object.freeze(t)}}))}", {
      globals: ["Object"],
      locals: {
        _taggedTemplateLiteral: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteral",
      dependencies: {}
    }),
    taggedTemplateLiteralLoose: H("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", {
      globals: [],
      locals: {
        _taggedTemplateLiteralLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteralLoose",
      dependencies: {}
    }),
    tdz: H("7.5.5", 'function _tdzError(e){throw new ReferenceError(e+" is not defined - temporal dead zone")}', {
      globals: ["ReferenceError"],
      locals: {
        _tdzError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_tdzError",
      dependencies: {}
    }),
    temporalRef: H("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", {
      globals: [],
      locals: {
        _temporalRef: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalRef",
      dependencies: {
        temporalUndefined: ["body.0.body.body.0.argument.test.right"],
        tdz: ["body.0.body.body.0.argument.consequent.callee"]
      }
    }),
    temporalUndefined: H("7.0.0-beta.0", "function _temporalUndefined(){}", {
      globals: [],
      locals: {
        _temporalUndefined: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalUndefined",
      dependencies: {}
    }),
    toArray: H("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterabl\
eRest()}", {
      globals: [],
      locals: {
        _toArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    toConsumableArray: H("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterabl\
eToArray(r)||nonIterableSpread()}", {
      globals: [],
      locals: {
        _toConsumableArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toConsumableArray",
      dependencies: {
        arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableSpread: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    toPrimitive: H("7.1.5", 'function toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e\
.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r\
?String:Number)(t)}', {
      globals: ["Symbol", "TypeError", "String", "Number"],
      locals: {
        toPrimitive: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPrimitive",
      dependencies: {}
    }),
    toPropertyKey: H("7.1.5", 'function toPropertyKey(t){var i=toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}', {
      globals: [],
      locals: {
        toPropertyKey: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPropertyKey",
      dependencies: {
        toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    toSetter: H("7.24.0", 'function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},"_",{set:function(o){e[r]=o,\
t.apply(n,e)}})}', {
      globals: ["Object"],
      locals: {
        _toSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toSetter",
      dependencies: {}
    }),
    typeof: H("7.0.0-beta.0", 'function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symb\
ol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symb\
ol":typeof o},_typeof(o)}', {
      globals: ["Symbol"],
      locals: {
        _typeof: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_typeof",
      dependencies: {}
    }),
    unsupportedIterableToArray: H("7.9.0", 'function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return arrayLikeToArray(r,\
a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Argum\
ents"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}', {
      globals: ["Array"],
      locals: {
        _unsupportedIterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_unsupportedIterableToArray",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument\
.expressions.1.alternate.consequent.callee"]
      }
    }),
    usingCtx: H("7.23.9", 'function _usingCtx(){var r="function"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return \
n.name="SuppressedError",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError("using d\
eclarations can only be used with objects, functions, null, or undefined.");if(r)var o=e[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispos\
e")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for("Symbol.dispose")],r))var t=o;if("function"!=typeof o)throw new TypeError("Object is not\
 disposable.");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}\
return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)re\
turn s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}c\
atch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n\
,next()}return next()}}}', {
      globals: ["SuppressedError", "Error", "Object", "TypeError", "Symbol", "Promise"],
      locals: {
        _usingCtx: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_usingCtx",
      dependencies: {}
    }),
    wrapAsyncGenerator: H("7.0.0-beta.0", 'function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,argument\
s))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:\
o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"nor\
mal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:\
!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,\
n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeo\
f e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){ret\
urn this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._i\
nvoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};', {
      globals: ["Promise", "Symbol"],
      locals: {
        _wrapAsyncGenerator: ["body.0.id"],
        AsyncGenerator: ["body.1.id", "body.0.body.body.0.argument.body.body.0.argument.callee", "body.2.expression.expressions.0.left.objec\
t.object", "body.2.expression.expressions.1.left.object.object", "body.2.expression.expressions.2.left.object.object", "body.2.expression.ex\
pressions.3.left.object.object"]
      },
      exportBindingAssignments: [],
      exportName: "_wrapAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"]
      }
    }),
    wrapNativeSuper: H("7.0.0-beta.0", 'function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=fun\
ction(t){if(null===t||!isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a f\
unction");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).c\
onstructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setP\
rototypeOf(Wrapper,t)},_wrapNativeSuper(t)}', {
      globals: ["Map", "TypeError", "Object"],
      locals: {
        _wrapNativeSuper: ["body.0.id", "body.0.body.body.1.argument.expressions.1.callee", "body.0.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"],
      exportName: "_wrapNativeSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"],
        setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"],
        isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"],
        construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"]
      }
    }),
    wrapRegExp: H("7.19.0", 'function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=n\
ew WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildG\
roups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e\
[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=functi\
on(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.p\
rototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/\
g,(function(e,r){var t=o[r];return"$"+(Array.isArray(t)?t.join("$"):t)})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call\
(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}ret\
urn e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}', {
      globals: ["RegExp", "WeakMap", "Object", "Symbol", "Array"],
      locals: {
        _wrapRegExp: ["body.0.id", "body.0.body.body.4.argument.expressions.3.callee.object", "body.0.body.body.0.expression.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.expression"],
      exportName: "_wrapRegExp",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"],
        inherits: ["body.0.body.body.4.argument.expressions.0.callee"]
      }
    }),
    writeOnlyError: H("7.12.13", `function _writeOnlyError(r){throw new TypeError('"'+r+'" is write-only')}`, {
      globals: ["TypeError"],
      locals: {
        _writeOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_writeOnlyError",
      dependencies: {}
    })
  };
  Object.assign(sH, {
    AwaitValue: H("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", {
      globals: [],
      locals: {
        _AwaitValue: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_AwaitValue",
      dependencies: {}
    }),
    applyDecs: H("7.17.8", 'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"g\
etMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.pri\
vate;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_a\
ssertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.publ\
ic={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMa\
pToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.len\
gth;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.fro\
m(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadat\
a||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer\
"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;cas\
e 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:toPropertyKey(t),isSta\
tic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,\
v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function\
(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v\
=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error("attempted to call "+t+" after decoration was finished")}function old_assertMeta\
dataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("fun\
ction"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!\
==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&o\
ld_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,\
"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a)throw new TypeError\
((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function old_getInit(e){var t;return null==(t=e.ini\
t)&&(t=e.initializer)&&void 0!==console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberD\
ec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u="get"):3===o?(c={get:a[3]},u="get"):4===o?(c={set\
:a[3]},u="set"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],"#"+r,"set"),setFunctionName(a[3],"#"+r,u))):0!==o&&(c=Object.getOwnPrope\
rtyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),"function"==typeof h)void 0!==(p=old_member\
Dec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f\
=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1\
===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b)\
))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length\
;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.v\
alue=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}\
))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(va\
r i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(\
v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw \
Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not c\
urrently supported by the decorators plugin. Property name was: "+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}o\
ld_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a]\
.call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{v\
ar c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d\
=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))\
}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyC\
lassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}', {
      globals: ["Object", "Map", "Symbol", "Array", "Error", "TypeError", "console"],
      locals: {
        old_createMetadataMethodsForProperty: ["body.0.id", "body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee", "body\
.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"],
        old_convertMetadataMapToFinal: ["body.1.id", "body.13.body.body.1.argument.expressions.1.callee", "body.13.body.body.1.argument.expr\
essions.3.callee"],
        old_createAddInitializerMethod: ["body.2.id", "body.3.body.body.3.test.expressions.0.right.right.callee", "body.12.body.body.0.conse\
quent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"],
        old_memberDec: ["body.3.id", "body.9.body.body.1.consequent.expression.left.right.right.callee", "body.9.body.body.1.alternate.body.\
body.1.expression.left.right.right.callee"],
        old_assertNotFinished: ["body.4.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee", "\
body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee", "body.2.body.body.0.argument.body.body.0.expres\
sion.expressions.0.callee"],
        old_assertMetadataKey: ["body.5.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee", "\
body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"],
        old_assertCallable: ["body.6.id", "body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee", "body.7.body.body.1.con\
sequent.body.1.expression.expressions.0.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee", "body.7\
.body.body.1.consequent.body.1.expression.expressions.2.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.3.right.\
callee"],
        old_assertValidReturnValue: ["body.7.id", "body.9.body.body.1.consequent.expression.right.expressions.0.callee", "body.9.body.body.1\
.alternate.body.body.1.expression.right.expressions.0.callee", "body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressio\
ns.0.callee"],
        old_getInit: ["body.8.id", "body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.ca\
llee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"],
        old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"],
        old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"],
        old_pushInitializers: ["body.11.id", "body.10.body.body.1.expression.expressions.0.callee", "body.10.body.body.1.expression.expressi\
ons.1.callee"],
        old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"],
        applyDecs: ["body.13.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs",
      dependencies: {
        setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.bo\
dy.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
        toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
      }
    }),
    applyDecs2203: H("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){i\
f(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}functi\
on memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";br\
eak;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)\
),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=fun\
ction(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{retur\
n e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertVa\
lidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with g\
et, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.\
set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"meth\
od")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{ge\
t:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set\
}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),\
0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDe\
c(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g\
&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=type\
of l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.p\
ush(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.ca\
ll(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.definePropert\
y(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){v\
ar a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c\
.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&\
&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public met\
hod/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDe\
c(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-\
1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(\
assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function\
 applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}', {
      globals: ["Error", "TypeError", "Object", "Map", "Array"],
      locals: {
        applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"],
        applyDecs2203Impl: ["body.1.declarations.0.id", "body.2.body.body.0.argument.callee.right.left", "body.2.body.body.0.argument.callee\
.left"],
        applyDecs2203: ["body.2.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2203",
      dependencies: {}
    }),
    applyDecs2203R: H("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t)\
{if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}func\
tion memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";\
break;default:c="field"}var l,u,f={kind:c,name:o?"#"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddIniti\
alizerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!=\
=a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:\
{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}\
function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return\
 an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable\
(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10=\
==e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o\
?(0===a||1===a?(c={get:r[3],set:r[4]},u="get"):3===a?(c={get:r[3]},u="get"):4===a?(c={set:r[3]},u="set"):c={value:r[3]},0!==a&&(1===a&&setFu\
nctionName(r[4],"#"+n,"set"),setFunctionName(r[3],"#"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2\
===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),"function"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0==\
=a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v\
[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(\
void 0===l?l=y:"function"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof \
l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push\
(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(\
e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t\
,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1]\
,p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0=\
==g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated\
 public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}ap\
plyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){fo\
r(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.len\
gth>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializ\
erMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}\
}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}', {
      globals: ["Error", "TypeError", "Object", "Map", "Array"],
      locals: {
        applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
        applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
      },
      exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
      exportName: "applyDecs2203R",
      dependencies: {
        setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "bo\
dy.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
        toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
      }
    }),
    applyDecs2301: H("7.21.0", 'function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){i\
f(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}functi\
on assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r\
,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="f\
ield"}var l,f,p={kind:u,name:s?"#"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,\
d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e)\
{return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivat\
e(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():fu\
nction(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCa\
llable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===\
e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");vo\
id 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.in\
it,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function o\
r void 0")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(\
0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f="get"):3===a?(u={get:r[3]},f="get"):4===a?(u={set:r[3]},f="\
set"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,"#"+n,"set"),setFunctionName(u[f||"value"],"#"+n,f))):0!==a&&(u=Object.getOwnPrope\
rtyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),"function"==typeof g)void 0!==(h=memberDec(\
g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var\
 m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||\
p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:"function"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===\
l)l=function(e,t){return t};else if("function"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}\
else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.s\
et=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((func\
tion(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t\
.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=functi\
on(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b\
&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor.\
 This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y\
,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r\
++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[\
],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}fi\
nally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function\
 applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}', {
      globals: ["Error", "TypeError", "Object", "Map", "Array"],
      locals: {
        applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
        applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
      },
      exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
      exportName: "applyDecs2301",
      dependencies: {
        checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.b\
ody.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "bo\
dy.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
        toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
      }
    }),
    applyDecs2305: H("7.21.0", 'function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}fu\
nction c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if("function"!=typeof e&&(n||void 0!==e))throw new TypeEr\
ror(t+" must "+(r||"be")+" a function"+(n?"":" or undefined"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))\
throw new TypeError("Attempted to access private element on non-instance")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var \
w={},S=[],A=3===o?"get":4===o||d?"set":"value";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,"get"),set:function(e){t[4](thi\
s,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?"":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var\
 D=v[j],E=r?v[j-1]:void 0,I={},O={kind:["field","accessor","method","getter","setter","class"][o],name:n,metadata:a,addInitializer:function(\
e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");s(t,"An initializer","be",!0),c.push(t)}.bind(null\
,I)};try{if(b)(y=s(D.call(E,P,O),"class decorators","return"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),\
w.value}:(o<4&&(k=i(w,"get",m)),3!==o&&(F=i(w,"set",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access\
={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if("object"==typeof \
P&&P)(y=s(P.get,"accessor.get"))&&(w.get=y),(y=s(P.set,"accessor.set"))&&(w.set=y),(y=s(P.init,"accessor.init"))&&S.push(y);else if(void 0!=\
=P)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0")}else s(P,(p?"field":"method"\
)+" decorators","return")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].ca\
ll(e,t);return t})),p||b||(f?d?u.push(i(w,"get"),i(w,"set")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u\
(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}if(arguments.le\
ngth>=6)var l=a[Symbol.metadata||Symbol.for("Symbol.metadata")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=funct\
ion(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p\
)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+"/"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)thr\
ow Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is no\
t currently supported by the decorators plugin. Property name was: "+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?"#"+h:toPropertyKe\
y(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.leng\
th&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}', {
      globals: ["TypeError", "Array", "Object", "Error", "Symbol", "Map"],
      locals: {
        applyDecs2305: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2305",
      dependencies: {
        checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.\
0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"],
        toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alte\
rnate.callee"]
      }
    }),
    classApplyDescriptorDestructureSet: H("7.13.10", 'function _classApplyDescriptorDestructureSet(e,t){if(t.set)return"__destrObj"in t||(t.\
__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError("attempted to set read only private field");retu\
rn t}', {
      globals: ["TypeError"],
      locals: {
        _classApplyDescriptorDestructureSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classApplyDescriptorDestructureSet",
      dependencies: {}
    }),
    classApplyDescriptorGet: H("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", {
      globals: [],
      locals: {
        _classApplyDescriptorGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classApplyDescriptorGet",
      dependencies: {}
    }),
    classApplyDescriptorSet: H("7.13.10", 'function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new T\
ypeError("attempted to set read only private field");t.value=l}}', {
      globals: ["TypeError"],
      locals: {
        _classApplyDescriptorSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classApplyDescriptorSet",
      dependencies: {}
    }),
    classCheckPrivateStaticAccess: H("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", {
      globals: [],
      locals: {
        _classCheckPrivateStaticAccess: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCheckPrivateStaticAccess",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.callee"]
      }
    }),
    classCheckPrivateStaticFieldDescriptor: H("7.13.10", 'function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new Type\
Error("attempted to "+e+" private static field before its declaration")}', {
      globals: ["TypeError"],
      locals: {
        _classCheckPrivateStaticFieldDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCheckPrivateStaticFieldDescriptor",
      dependencies: {}
    }),
    classExtractFieldDescriptor: H("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", {
      globals: [],
      locals: {
        _classExtractFieldDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classExtractFieldDescriptor",
      dependencies: {
        classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"]
      }
    }),
    classPrivateFieldDestructureSet: H("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return clas\
sApplyDescriptorDestructureSet(e,r)}", {
      globals: [],
      locals: {
        _classPrivateFieldDestructureSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldDestructureSet",
      dependencies: {
        classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"],
        classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    classPrivateFieldGet: H("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescripto\
rGet(e,r)}", {
      globals: [],
      locals: {
        _classPrivateFieldGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldGet",
      dependencies: {
        classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"],
        classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    classPrivateFieldSet: H("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescrip\
torSet(e,s,r),r}", {
      globals: [],
      locals: {
        _classPrivateFieldSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldSet",
      dependencies: {
        classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"],
        classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    classPrivateMethodGet: H("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", {
      globals: [],
      locals: {
        _classPrivateMethodGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodGet",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
      }
    }),
    classPrivateMethodSet: H("7.1.6", 'function _classPrivateMethodSet(){throw new TypeError("attempted to reassign private method")}', {
      globals: ["TypeError"],
      locals: {
        _classPrivateMethodSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodSet",
      dependencies: {}
    }),
    classStaticPrivateFieldDestructureSet: H("7.13.10", 'function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t)\
,classCheckPrivateStaticFieldDescriptor(s,"set"),classApplyDescriptorDestructureSet(t,s)}', {
      globals: [],
      locals: {
        _classStaticPrivateFieldDestructureSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateFieldDestructureSet",
      dependencies: {
        classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"],
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
        classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    classStaticPrivateFieldSpecGet: H("7.0.2", 'function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPriva\
teStaticFieldDescriptor(r,"get"),classApplyDescriptorGet(t,r)}', {
      globals: [],
      locals: {
        _classStaticPrivateFieldSpecGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateFieldSpecGet",
      dependencies: {
        classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"],
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
        classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    classStaticPrivateFieldSpecSet: H("7.0.2", 'function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPri\
vateStaticFieldDescriptor(r,"set"),classApplyDescriptorSet(s,r,e),e}', {
      globals: [],
      locals: {
        _classStaticPrivateFieldSpecSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateFieldSpecSet",
      dependencies: {
        classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"],
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
        classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    classStaticPrivateMethodSet: H("7.3.2", 'function _classStaticPrivateMethodSet(){throw new TypeError("attempted to set read only static \
private field")}', {
      globals: ["TypeError"],
      locals: {
        _classStaticPrivateMethodSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateMethodSet",
      dependencies: {}
    }),
    defineEnumerableProperties: H("7.0.0-beta.0", 'function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enu\
merable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(\
r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}',
    {
      globals: ["Object"],
      locals: {
        _defineEnumerableProperties: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineEnumerableProperties",
      dependencies: {}
    }),
    dispose: H("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=Suppressed\
Error:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Obje\
ct.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}funct\
ion _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch\
(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}', {
      globals: ["SuppressedError", "Error", "Object", "Promise"],
      locals: {
        dispose_SuppressedError: ["body.0.id", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object", "body.0.body\
.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value", "body.0.body.body.0.argumen\
t.expressions.1.callee", "body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee", "body.0.body.body.0.argument.expre\
ssions.0.consequent.left", "body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"],
        _dispose: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_dispose",
      dependencies: {}
    }),
    objectSpread: H("7.0.0-beta.0", 'function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments\
[r]):{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e)\
{return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}', {
      globals: ["Object"],
      locals: {
        _objectSpread: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectSpread",
      dependencies: {
        defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"]
      }
    }),
    using: H("7.22.0", 'function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError("using declarations can only be used\
 with objects, functions, null, or undefined.");if(e)var r=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=n[Symbol\
.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.p\
ush({v:n,d:r,a:e}),n}', {
      globals: ["Object", "TypeError", "Symbol"],
      locals: {
        _using: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_using",
      dependencies: {}
    })
  });
});

// ../node_modules/@babel/helpers/lib/index.js
var Uh = A((pn) => {
  "use strict";
  Object.defineProperty(pn, "__esModule", {
    value: !0
  });
  pn.default = void 0;
  pn.get = CS;
  pn.getDependencies = uH;
  pn.list = void 0;
  pn.minVersion = lH;
  var iH = Pe(), AS = vS(), {
    cloneNode: aH,
    identifier: PS
  } = iH;
  function Ul(e, t, r) {
    try {
      let n = t.split("."), s = n.shift();
      for (; n.length > 0; )
        e = e[s], s = n.shift();
      if (arguments.length > 2)
        e[s] = r;
      else
        return e[s];
    } catch (n) {
      throw n.message += ` (when accessing ${t})`, n;
    }
  }
  i(Ul, "deep");
  function oH(e, t, r, n, s, a) {
    let {
      locals: o,
      dependencies: l,
      exportBindingAssignments: u,
      exportName: c
    } = t, p = new Set(n || []);
    r && p.add(r);
    for (let [f, h] of (Object.entries || ((g) => Object.keys(g).map((P) => [P, g[P]])))(o)) {
      let g = f;
      if (r && f === c)
        g = r;
      else
        for (; p.has(g); ) g = "_" + g;
      if (g !== f)
        for (let P of h)
          Ul(e, P, PS(g));
    }
    for (let [f, h] of (Object.entries || ((g) => Object.keys(g).map((P) => [P, g[P]])))(l)) {
      let g = typeof s == "function" && s(f) || PS(f);
      for (let P of h)
        Ul(e, P, aH(g));
    }
    a?.(e, c, (f) => {
      u.forEach((h) => Ul(e, h, f(Ul(e, h))));
    });
  }
  i(oH, "permuteHelperAST");
  var qh = /* @__PURE__ */ Object.create(null);
  function Vl(e) {
    if (!qh[e]) {
      let t = AS.default[e];
      if (!t)
        throw Object.assign(new ReferenceError(`Unknown helper ${e}`), {
          code: "BABEL_HELPER_UNKNOWN",
          helper: e
        });
      qh[e] = {
        minVersion: t.minVersion,
        build(r, n, s, a) {
          let o = t.ast();
          return oH(o, t.metadata, n, s, r, a), {
            nodes: o.body,
            globals: t.metadata.globals
          };
        },
        getDependencies() {
          return Object.keys(t.metadata.dependencies);
        }
      };
    }
    return qh[e];
  }
  i(Vl, "loadHelper");
  function CS(e, t, r, n, s) {
    if (typeof r == "object") {
      let a = r;
      a?.type === "Identifier" ? r = a.name : r = void 0;
    }
    return Vl(e).build(t, r, n, s);
  }
  i(CS, "get");
  function lH(e) {
    return Vl(e).minVersion;
  }
  i(lH, "minVersion");
  function uH(e) {
    return Vl(e).getDependencies();
  }
  i(uH, "getDependencies");
  pn.ensure = (e) => {
    Vl(e);
  };
  var Vxe = pn.list = Object.keys(AS.default).map((e) => e.replace(/^_/, "")), $xe = pn.default = CS;
});

// ../node_modules/@babel/traverse/lib/path/lib/virtual-types.js
var Vh = A((We) => {
  "use strict";
  Object.defineProperty(We, "__esModule", {
    value: !0
  });
  We.Var = We.User = We.Statement = We.SpreadProperty = We.Scope = We.RestProperty = We.ReferencedMemberExpression = We.ReferencedIdentifier =
  We.Referenced = We.Pure = We.NumericLiteralTypeAnnotation = We.Generated = We.ForAwaitStatement = We.Flow = We.Expression = We.ExistentialTypeParam =
  We.BlockScoped = We.BindingIdentifier = void 0;
  var Gxe = We.ReferencedIdentifier = ["Identifier", "JSXIdentifier"], Hxe = We.ReferencedMemberExpression = ["MemberExpression"], Yxe = We.
  BindingIdentifier = ["Identifier"], Jxe = We.Statement = ["Statement"], zxe = We.Expression = ["Expression"], Xxe = We.Scope = ["Scopable",
  "Pattern"], Qxe = We.Referenced = null, Zxe = We.BlockScoped = null, eve = We.Var = ["VariableDeclaration"], tve = We.User = null, rve = We.
  Generated = null, nve = We.Pure = null, sve = We.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"], ive = We.RestProperty =
  ["RestElement"], ave = We.SpreadProperty = ["RestElement"], ove = We.ExistentialTypeParam = ["ExistsTypeAnnotation"], lve = We.NumericLiteralTypeAnnotation =
  ["NumberLiteralTypeAnnotation"], uve = We.ForAwaitStatement = ["ForOfStatement"];
});

// ../node_modules/ms/index.js
var wS = A((pve, DS) => {
  var Ci = 1e3, Di = Ci * 60, wi = Di * 60, js = wi * 24, cH = js * 7, pH = js * 365.25;
  DS.exports = function(e, t) {
    t = t || {};
    var r = typeof e;
    if (r === "string" && e.length > 0)
      return fH(e);
    if (r === "number" && isFinite(e))
      return t.long ? hH(e) : dH(e);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(e)
    );
  };
  function fH(e) {
    if (e = String(e), !(e.length > 100)) {
      var t = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.
      exec(
        e
      );
      if (t) {
        var r = parseFloat(t[1]), n = (t[2] || "ms").toLowerCase();
        switch (n) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return r * pH;
          case "weeks":
          case "week":
          case "w":
            return r * cH;
          case "days":
          case "day":
          case "d":
            return r * js;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return r * wi;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return r * Di;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return r * Ci;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return r;
          default:
            return;
        }
      }
    }
  }
  i(fH, "parse");
  function dH(e) {
    var t = Math.abs(e);
    return t >= js ? Math.round(e / js) + "d" : t >= wi ? Math.round(e / wi) + "h" : t >= Di ? Math.round(e / Di) + "m" : t >= Ci ? Math.round(
    e / Ci) + "s" : e + "ms";
  }
  i(dH, "fmtShort");
  function hH(e) {
    var t = Math.abs(e);
    return t >= js ? $l(e, t, js, "day") : t >= wi ? $l(e, t, wi, "hour") : t >= Di ? $l(e, t, Di, "minute") : t >= Ci ? $l(e, t, Ci, "secon\
d") : e + " ms";
  }
  i(hH, "fmtLong");
  function $l(e, t, r, n) {
    var s = t >= r * 1.5;
    return Math.round(e / r) + " " + n + (s ? "s" : "");
  }
  i($l, "plural");
});

// ../node_modules/debug/src/common.js
var $h = A((dve, IS) => {
  function mH(e) {
    r.debug = r, r.default = r, r.coerce = u, r.disable = a, r.enable = s, r.enabled = o, r.humanize = wS(), r.destroy = c, Object.keys(e).forEach(
    (p) => {
      r[p] = e[p];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(p) {
      let f = 0;
      for (let h = 0; h < p.length; h++)
        f = (f << 5) - f + p.charCodeAt(h), f |= 0;
      return r.colors[Math.abs(f) % r.colors.length];
    }
    i(t, "selectColor"), r.selectColor = t;
    function r(p) {
      let f, h = null, g, P;
      function d(...y) {
        if (!d.enabled)
          return;
        let E = d, _ = Number(/* @__PURE__ */ new Date()), k = _ - (f || _);
        E.diff = k, E.prev = f, E.curr = _, f = _, y[0] = r.coerce(y[0]), typeof y[0] != "string" && y.unshift("%O");
        let B = 0;
        y[0] = y[0].replace(/%([a-zA-Z%])/g, (U, $) => {
          if (U === "%%")
            return "%";
          B++;
          let ee = r.formatters[$];
          if (typeof ee == "function") {
            let W = y[B];
            U = ee.call(E, W), y.splice(B, 1), B--;
          }
          return U;
        }), r.formatArgs.call(E, y), (E.log || r.log).apply(E, y);
      }
      return i(d, "debug"), d.namespace = p, d.useColors = r.useColors(), d.color = r.selectColor(p), d.extend = n, d.destroy = r.destroy, Object.
      defineProperty(d, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: /* @__PURE__ */ i(() => h !== null ? h : (g !== r.namespaces && (g = r.namespaces, P = r.enabled(p)), P), "get"),
        set: /* @__PURE__ */ i((y) => {
          h = y;
        }, "set")
      }), typeof r.init == "function" && r.init(d), d;
    }
    i(r, "createDebug");
    function n(p, f) {
      let h = r(this.namespace + (typeof f > "u" ? ":" : f) + p);
      return h.log = this.log, h;
    }
    i(n, "extend");
    function s(p) {
      r.save(p), r.namespaces = p, r.names = [], r.skips = [];
      let f, h = (typeof p == "string" ? p : "").split(/[\s,]+/), g = h.length;
      for (f = 0; f < g; f++)
        h[f] && (p = h[f].replace(/\*/g, ".*?"), p[0] === "-" ? r.skips.push(new RegExp("^" + p.slice(1) + "$")) : r.names.push(new RegExp("\
^" + p + "$")));
    }
    i(s, "enable");
    function a() {
      let p = [
        ...r.names.map(l),
        ...r.skips.map(l).map((f) => "-" + f)
      ].join(",");
      return r.enable(""), p;
    }
    i(a, "disable");
    function o(p) {
      if (p[p.length - 1] === "*")
        return !0;
      let f, h;
      for (f = 0, h = r.skips.length; f < h; f++)
        if (r.skips[f].test(p))
          return !1;
      for (f = 0, h = r.names.length; f < h; f++)
        if (r.names[f].test(p))
          return !0;
      return !1;
    }
    i(o, "enabled");
    function l(p) {
      return p.toString().substring(2, p.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    i(l, "toNamespace");
    function u(p) {
      return p instanceof Error ? p.stack || p.message : p;
    }
    i(u, "coerce");
    function c() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major versio\
n of `debug`.");
    }
    return i(c, "destroy"), r.enable(r.load()), r;
  }
  i(mH, "setup");
  IS.exports = mH;
});

// ../node_modules/debug/src/browser.js
var _S = A((hr, Wl) => {
  hr.formatArgs = gH;
  hr.save = bH;
  hr.load = EH;
  hr.useColors = yH;
  hr.storage = TH();
  hr.destroy = /* @__PURE__ */ (() => {
    let e = !1;
    return () => {
      e || (e = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the nex\
t major version of `debug`."));
    };
  })();
  hr.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function yH() {
    if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
      return !0;
    if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
      return !1;
    let e;
    return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
    // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator < "u" && navigator.userAgent && (e = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(e[1], 10) >=
    31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  i(yH, "useColors");
  function gH(e) {
    if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" +
    Wl.exports.humanize(this.diff), !this.useColors)
      return;
    let t = "color: " + this.color;
    e.splice(1, 0, t, "color: inherit");
    let r = 0, n = 0;
    e[0].replace(/%[a-zA-Z%]/g, (s) => {
      s !== "%%" && (r++, s === "%c" && (n = r));
    }), e.splice(n, 0, t);
  }
  i(gH, "formatArgs");
  hr.log = console.debug || console.log || (() => {
  });
  function bH(e) {
    try {
      e ? hr.storage.setItem("debug", e) : hr.storage.removeItem("debug");
    } catch {
    }
  }
  i(bH, "save");
  function EH() {
    let e;
    try {
      e = hr.storage.getItem("debug");
    } catch {
    }
    return !e && typeof process < "u" && "env" in process && (e = process.env.DEBUG), e;
  }
  i(EH, "load");
  function TH() {
    try {
      return localStorage;
    } catch {
    }
  }
  i(TH, "localstorage");
  Wl.exports = $h()(hr);
  var { formatters: SH } = Wl.exports;
  SH.j = function(e) {
    try {
      return JSON.stringify(e);
    } catch (t) {
      return "[UnexpectedJSONParseError]: " + t.message;
    }
  };
});

// ../node_modules/has-flag/index.js
var NS = A((yve, OS) => {
  "use strict";
  OS.exports = (e, t = process.argv) => {
    let r = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = t.indexOf(r + e), s = t.indexOf("--");
    return n !== -1 && (s === -1 || n < s);
  };
});

// ../node_modules/supports-color/index.js
var FS = A((gve, kS) => {
  "use strict";
  var xH = le("os"), BS = le("tty"), Cr = NS(), { env: kt } = process, ns;
  Cr("no-color") || Cr("no-colors") || Cr("color=false") || Cr("color=never") ? ns = 0 : (Cr("color") || Cr("colors") || Cr("color=true") ||
  Cr("color=always")) && (ns = 1);
  "FORCE_COLOR" in kt && (kt.FORCE_COLOR === "true" ? ns = 1 : kt.FORCE_COLOR === "false" ? ns = 0 : ns = kt.FORCE_COLOR.length === 0 ? 1 : Math.
  min(parseInt(kt.FORCE_COLOR, 10), 3));
  function Wh(e) {
    return e === 0 ? !1 : {
      level: e,
      hasBasic: !0,
      has256: e >= 2,
      has16m: e >= 3
    };
  }
  i(Wh, "translateLevel");
  function Kh(e, t) {
    if (ns === 0)
      return 0;
    if (Cr("color=16m") || Cr("color=full") || Cr("color=truecolor"))
      return 3;
    if (Cr("color=256"))
      return 2;
    if (e && !t && ns === void 0)
      return 0;
    let r = ns || 0;
    if (kt.TERM === "dumb")
      return r;
    if (process.platform === "win32") {
      let n = xH.release().split(".");
      return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in kt)
      return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((n) => n in kt) || kt.CI_NAME === "codeship" ?
      1 : r;
    if ("TEAMCITY_VERSION" in kt)
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(kt.TEAMCITY_VERSION) ? 1 : 0;
    if (kt.COLORTERM === "truecolor")
      return 3;
    if ("TERM_PROGRAM" in kt) {
      let n = parseInt((kt.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (kt.TERM_PROGRAM) {
        case "iTerm.app":
          return n >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(kt.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(kt.TERM) || "COLORTERM" in
    kt ? 1 : r;
  }
  i(Kh, "supportsColor");
  function vH(e) {
    let t = Kh(e, e && e.isTTY);
    return Wh(t);
  }
  i(vH, "getSupportLevel");
  kS.exports = {
    supportsColor: vH,
    stdout: Wh(Kh(!0, BS.isatty(1))),
    stderr: Wh(Kh(!0, BS.isatty(2)))
  };
});

// ../node_modules/debug/src/node.js
var LS = A((Ft, Gl) => {
  var PH = le("tty"), Kl = le("util");
  Ft.init = OH;
  Ft.log = wH;
  Ft.formatArgs = CH;
  Ft.save = IH;
  Ft.load = _H;
  Ft.useColors = AH;
  Ft.destroy = Kl.deprecate(
    () => {
    },
    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
  );
  Ft.colors = [6, 2, 3, 4, 5, 1];
  try {
    let e = FS();
    e && (e.stderr || e).level >= 2 && (Ft.colors = [
      20,
      21,
      26,
      27,
      32,
      33,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      56,
      57,
      62,
      63,
      68,
      69,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      92,
      93,
      98,
      99,
      112,
      113,
      128,
      129,
      134,
      135,
      148,
      149,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      178,
      179,
      184,
      185,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      214,
      215,
      220,
      221
    ]);
  } catch {
  }
  Ft.inspectOpts = Object.keys(process.env).filter((e) => /^debug_/i.test(e)).reduce((e, t) => {
    let r = t.substring(6).toLowerCase().replace(/_([a-z])/g, (s, a) => a.toUpperCase()), n = process.env[t];
    return /^(yes|on|true|enabled)$/i.test(n) ? n = !0 : /^(no|off|false|disabled)$/i.test(n) ? n = !1 : n === "null" ? n = null : n = Number(
    n), e[r] = n, e;
  }, {});
  function AH() {
    return "colors" in Ft.inspectOpts ? !!Ft.inspectOpts.colors : PH.isatty(process.stderr.fd);
  }
  i(AH, "useColors");
  function CH(e) {
    let { namespace: t, useColors: r } = this;
    if (r) {
      let n = this.color, s = "\x1B[3" + (n < 8 ? n : "8;5;" + n), a = `  ${s};1m${t} \x1B[0m`;
      e[0] = a + e[0].split(`
`).join(`
` + a), e.push(s + "m+" + Gl.exports.humanize(this.diff) + "\x1B[0m");
    } else
      e[0] = DH() + t + " " + e[0];
  }
  i(CH, "formatArgs");
  function DH() {
    return Ft.inspectOpts.hideDate ? "" : (/* @__PURE__ */ new Date()).toISOString() + " ";
  }
  i(DH, "getDate");
  function wH(...e) {
    return process.stderr.write(Kl.formatWithOptions(Ft.inspectOpts, ...e) + `
`);
  }
  i(wH, "log");
  function IH(e) {
    e ? process.env.DEBUG = e : delete process.env.DEBUG;
  }
  i(IH, "save");
  function _H() {
    return process.env.DEBUG;
  }
  i(_H, "load");
  function OH(e) {
    e.inspectOpts = {};
    let t = Object.keys(Ft.inspectOpts);
    for (let r = 0; r < t.length; r++)
      e.inspectOpts[t[r]] = Ft.inspectOpts[t[r]];
  }
  i(OH, "init");
  Gl.exports = $h()(Ft);
  var { formatters: jS } = Gl.exports;
  jS.o = function(e) {
    return this.inspectOpts.colors = this.useColors, Kl.inspect(e, this.inspectOpts).split(`
`).map((t) => t.trim()).join(" ");
  };
  jS.O = function(e) {
    return this.inspectOpts.colors = this.useColors, Kl.inspect(e, this.inspectOpts);
  };
});

// ../node_modules/debug/src/index.js
var Ls = A((Tve, Gh) => {
  typeof process > "u" || process.type === "renderer" || process.browser === !0 || process.__nwjs ? Gh.exports = _S() : Gh.exports = LS();
});

// ../node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js
var Yh = A((It) => {
  "use strict";
  Object.defineProperty(It, "__esModule", {
    value: !0
  });
  It.isBindingIdentifier = eY;
  It.isBlockScoped = iY;
  It.isExpression = rY;
  It.isFlow = cY;
  It.isForAwaitStatement = dY;
  It.isGenerated = lY;
  It.isPure = uY;
  It.isReferenced = sY;
  It.isReferencedIdentifier = QH;
  It.isReferencedMemberExpression = ZH;
  It.isRestProperty = pY;
  It.isScope = nY;
  It.isSpreadProperty = fY;
  It.isStatement = tY;
  It.isUser = oY;
  It.isVar = aY;
  var NH = Pe(), {
    isBinding: BH,
    isBlockScoped: kH,
    isExportDeclaration: FH,
    isExpression: jH,
    isFlow: LH,
    isForStatement: MH,
    isForXStatement: RH,
    isIdentifier: MS,
    isImportDeclaration: qH,
    isImportSpecifier: UH,
    isJSXIdentifier: VH,
    isJSXMemberExpression: $H,
    isMemberExpression: WH,
    isRestElement: RS,
    isReferenced: Hh,
    isScope: KH,
    isStatement: GH,
    isVar: HH,
    isVariableDeclaration: YH,
    react: JH,
    isForOfStatement: zH
  } = NH, {
    isCompatTag: XH
  } = JH;
  function QH(e) {
    let {
      node: t,
      parent: r
    } = this;
    if (!MS(t, e) && !$H(r, e))
      if (VH(t, e)) {
        if (XH(t.name)) return !1;
      } else
        return !1;
    return Hh(t, r, this.parentPath.parent);
  }
  i(QH, "isReferencedIdentifier");
  function ZH() {
    let {
      node: e,
      parent: t
    } = this;
    return WH(e) && Hh(e, t);
  }
  i(ZH, "isReferencedMemberExpression");
  function eY() {
    let {
      node: e,
      parent: t
    } = this, r = this.parentPath.parent;
    return MS(e) && BH(e, t, r);
  }
  i(eY, "isBindingIdentifier");
  function tY() {
    let {
      node: e,
      parent: t
    } = this;
    return GH(e) ? !(YH(e) && (RH(t, {
      left: e
    }) || MH(t, {
      init: e
    }))) : !1;
  }
  i(tY, "isStatement");
  function rY() {
    return this.isIdentifier() ? this.isReferencedIdentifier() : jH(this.node);
  }
  i(rY, "isExpression");
  function nY() {
    return KH(this.node, this.parent);
  }
  i(nY, "isScope");
  function sY() {
    return Hh(this.node, this.parent);
  }
  i(sY, "isReferenced");
  function iY() {
    return kH(this.node);
  }
  i(iY, "isBlockScoped");
  function aY() {
    return HH(this.node);
  }
  i(aY, "isVar");
  function oY() {
    return this.node && !!this.node.loc;
  }
  i(oY, "isUser");
  function lY() {
    return !this.isUser();
  }
  i(lY, "isGenerated");
  function uY(e) {
    return this.scope.isPure(this.node, e);
  }
  i(uY, "isPure");
  function cY() {
    let {
      node: e
    } = this;
    return LH(e) ? !0 : qH(e) ? e.importKind === "type" || e.importKind === "typeof" : FH(e) ? e.exportKind === "type" : UH(e) ? e.importKind ===
    "type" || e.importKind === "typeof" : !1;
  }
  i(cY, "isFlow");
  function pY() {
    var e;
    return RS(this.node) && ((e = this.parentPath) == null ? void 0 : e.isObjectPattern());
  }
  i(pY, "isRestProperty");
  function fY() {
    var e;
    return RS(this.node) && ((e = this.parentPath) == null ? void 0 : e.isObjectExpression());
  }
  i(fY, "isSpreadProperty");
  function dY() {
    return zH(this.node, {
      await: !0
    });
  }
  i(dY, "isForAwaitStatement");
  It.isExistentialTypeParam = /* @__PURE__ */ i(function() {
    throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
  }, "isExistentialTypeParam"), It.isNumericLiteralTypeAnnotation = /* @__PURE__ */ i(function() {
    throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
  }, "isNumericLiteralTypeAnnotation");
});

// ../node_modules/@babel/traverse/lib/visitors.js
var Ha = A((Rs) => {
  "use strict";
  Object.defineProperty(Rs, "__esModule", {
    value: !0
  });
  Rs.environmentVisitor = SY;
  Rs.explode = zS;
  Rs.isExplodedVisitor = JS;
  Rs.merge = QS;
  Rs.verify = XS;
  var YS = Vh(), hY = Yh(), mY = Pe(), qS = fn(), {
    DEPRECATED_KEYS: US,
    DEPRECATED_ALIASES: VS,
    FLIPPED_ALIAS_KEYS: $S,
    TYPES: yY,
    __internal__deprecationWarning: WS
  } = mY;
  function gY(e) {
    return e in YS;
  }
  i(gY, "isVirtualType");
  function JS(e) {
    return e?._exploded;
  }
  i(JS, "isExplodedVisitor");
  function zS(e) {
    if (JS(e)) return e;
    e._exploded = !0;
    for (let t of Object.keys(e)) {
      if (Ms(t)) continue;
      let r = t.split("|");
      if (r.length === 1) continue;
      let n = e[t];
      delete e[t];
      for (let s of r)
        e[s] = n;
    }
    XS(e), delete e.__esModule, bY(e), HS(e);
    for (let t of Object.keys(e)) {
      if (Ms(t) || !gY(t)) continue;
      let r = e[t];
      for (let s of Object.keys(r))
        r[s] = EY(t, r[s]);
      delete e[t];
      let n = YS[t];
      if (n !== null)
        for (let s of n)
          e[s] ? Ga(e[s], r) : e[s] = r;
      else
        Ga(e, r);
    }
    for (let t of Object.keys(e)) {
      if (Ms(t)) continue;
      let r = $S[t];
      if (t in US) {
        let s = US[t];
        WS(t, s, "Visitor "), r = [s];
      } else if (t in VS) {
        let s = VS[t];
        WS(t, s, "Visitor "), r = $S[s];
      }
      if (!r) continue;
      let n = e[t];
      delete e[t];
      for (let s of r) {
        let a = e[s];
        a ? Ga(a, n) : e[s] = Object.assign({}, n);
      }
    }
    for (let t of Object.keys(e))
      Ms(t) || HS(e[t]);
    return e;
  }
  i(zS, "explode$1");
  function XS(e) {
    if (!e._verified) {
      if (typeof e == "function")
        throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Functi\
on }`?");
      for (let t of Object.keys(e)) {
        if ((t === "enter" || t === "exit") && KS(t, e[t]), Ms(t)) continue;
        if (!yY.includes(t))
          throw new Error(`You gave us a visitor for the node type ${t} but it's not a valid type in @babel/traverse 7.25.9`);
        let r = e[t];
        if (typeof r == "object")
          for (let n of Object.keys(r))
            if (n === "enter" || n === "exit")
              KS(`${t}.${n}`, r[n]);
            else
              throw new Error(`You passed \`traverse()\` a visitor object with the property ${t} that has the invalid property ${n}`);
      }
      e._verified = !0;
    }
  }
  i(XS, "verify$1");
  function KS(e, t) {
    let r = [].concat(t);
    for (let n of r)
      if (typeof n != "function")
        throw new TypeError(`Non-function found defined in ${e} with type ${typeof n}`);
  }
  i(KS, "validateVisitorMethods");
  function QS(e, t = [], r) {
    let n = {
      _verified: !0,
      _exploded: !0
    };
    Object.defineProperty(n, "_exploded", {
      enumerable: !1
    }), Object.defineProperty(n, "_verified", {
      enumerable: !1
    });
    for (let s = 0; s < e.length; s++) {
      let a = zS(e[s]), o = t[s], l = a;
      (o || r) && (l = GS(l, o, r)), Ga(n, l);
      for (let u of Object.keys(a)) {
        if (Ms(u)) continue;
        let c = a[u];
        (o || r) && (c = GS(c, o, r));
        let p = n[u] || (n[u] = {});
        Ga(p, c);
      }
    }
    return n;
  }
  i(QS, "merge");
  function GS(e, t, r) {
    let n = {};
    for (let s of ["enter", "exit"]) {
      let a = e[s];
      Array.isArray(a) && (a = a.map(function(o) {
        let l = o;
        return t && (l = /* @__PURE__ */ i(function(u) {
          o.call(t, u, t);
        }, "newFn")), r && (l = r(t?.key, s, l)), l !== o && (l.toString = () => o.toString()), l;
      }), n[s] = a);
    }
    return n;
  }
  i(GS, "wrapWithStateOrWrapper");
  function bY(e) {
    for (let t of Object.keys(e)) {
      if (Ms(t)) continue;
      let r = e[t];
      typeof r == "function" && (e[t] = {
        enter: r
      });
    }
  }
  i(bY, "ensureEntranceObjects");
  function HS(e) {
    e.enter && !Array.isArray(e.enter) && (e.enter = [e.enter]), e.exit && !Array.isArray(e.exit) && (e.exit = [e.exit]);
  }
  i(HS, "ensureCallbackArrays");
  function EY(e, t) {
    let r = `is${e}`, n = hY[r], s = /* @__PURE__ */ i(function(a) {
      if (n.call(a))
        return t.apply(this, arguments);
    }, "newFn");
    return s.toString = () => t.toString(), s;
  }
  i(EY, "wrapCheck");
  function Ms(e) {
    return e[0] === "_" || e === "enter" || e === "exit" || e === "shouldSkip" || e === "denylist" || e === "noScope" || e === "skipKeys" ||
    e === "blacklist";
  }
  i(Ms, "shouldIgnoreKey");
  function Ga(e, t) {
    for (let r of ["enter", "exit"])
      t[r] && (e[r] = [].concat(e[r] || [], t[r]));
  }
  i(Ga, "mergePair");
  var TY = {
    FunctionParent(e) {
      e.isArrowFunctionExpression() || (e.skip(), e.isMethod() && (e.requeueComputedKeyAndDecorators ? e.requeueComputedKeyAndDecorators() :
      qS.requeueComputedKeyAndDecorators.call(e)));
    },
    Property(e) {
      e.isObjectProperty() || (e.skip(), e.requeueComputedKeyAndDecorators ? e.requeueComputedKeyAndDecorators() : qS.requeueComputedKeyAndDecorators.
      call(e));
    }
  };
  function SY(e) {
    return QS([TY, e]);
  }
  i(SY, "environmentVisitor");
});

// ../node_modules/@babel/traverse/lib/scope/lib/renamer.js
var ZS = A((Yl) => {
  "use strict";
  Object.defineProperty(Yl, "__esModule", {
    value: !0
  });
  Yl.default = void 0;
  var Hl = Pe(), xY = Hl, vY = Jl(), PY = Ha(), AY = fn(), {
    getAssignmentIdentifiers: CY
  } = xY, DY = {
    ReferencedIdentifier({
      node: e
    }, t) {
      e.name === t.oldName && (e.name = t.newName);
    },
    Scope(e, t) {
      e.scope.bindingIdentifierEquals(t.oldName, t.binding.identifier) || (e.skip(), e.isMethod() && (e.requeueComputedKeyAndDecorators ? e.
      requeueComputedKeyAndDecorators() : AY.requeueComputedKeyAndDecorators.call(e)));
    },
    ObjectProperty({
      node: e,
      scope: t
    }, r) {
      let {
        name: n
      } = e.key;
      if (e.shorthand && (n === r.oldName || n === r.newName) && t.getBindingIdentifier(n) === r.binding.identifier) {
        e.shorthand = !1;
        {
          var s;
          (s = e.extra) != null && s.shorthand && (e.extra.shorthand = !1);
        }
      }
    },
    "AssignmentExpression|Declaration|VariableDeclarator"(e, t) {
      if (e.isVariableDeclaration()) return;
      let r = e.isAssignmentExpression() ? CY(e.node) : e.getOuterBindingIdentifiers();
      for (let n in r)
        n === t.oldName && (r[n].name = t.newName);
    }
  }, Jh = class {
    static {
      i(this, "Renamer");
    }
    constructor(t, r, n) {
      this.newName = n, this.oldName = r, this.binding = t;
    }
    maybeConvertFromExportDeclaration(t) {
      let r = t.parentPath;
      if (r.isExportDeclaration()) {
        if (r.isExportDefaultDeclaration()) {
          let {
            declaration: n
          } = r.node;
          if (Hl.isDeclaration(n) && !n.id)
            return;
        }
        r.isExportAllDeclaration() || r.splitExportDeclaration();
      }
    }
    maybeConvertFromClassFunctionDeclaration(t) {
      return t;
    }
    maybeConvertFromClassFunctionExpression(t) {
      return t;
    }
    rename() {
      let {
        binding: t,
        oldName: r,
        newName: n
      } = this, {
        scope: s,
        path: a
      } = t, o = a.find((c) => c.isDeclaration() || c.isFunctionExpression() || c.isClassExpression());
      o && o.getOuterBindingIdentifiers()[r] === t.identifier && this.maybeConvertFromExportDeclaration(o);
      let l = arguments[0] || s.block, u = {
        discriminant: !0
      };
      Hl.isMethod(l) && (l.computed && (u.key = !0), Hl.isObjectMethod(l) || (u.decorators = !0)), (0, vY.traverseNode)(l, (0, PY.explode)(DY),
      s, this, s.path, u), arguments[0] || (s.removeOwnBinding(r), s.bindings[n] = t, this.binding.identifier.name = n), o && (this.maybeConvertFromClassFunctionDeclaration(
      a), this.maybeConvertFromClassFunctionExpression(a));
    }
  };
  Yl.default = Jh;
});

// ../node_modules/@babel/traverse/lib/scope/binding.js
var ex = A((zl) => {
  "use strict";
  Object.defineProperty(zl, "__esModule", {
    value: !0
  });
  zl.default = void 0;
  var zh = class {
    static {
      i(this, "Binding");
    }
    constructor({
      identifier: t,
      scope: r,
      path: n,
      kind: s
    }) {
      this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = !0,
      this.referencePaths = [], this.referenced = !1, this.references = 0, this.identifier = t, this.scope = r, this.path = n, this.kind = s,
      (s === "var" || s === "hoisted") && wY(n) && this.reassign(n), this.clearValue();
    }
    deoptValue() {
      this.clearValue(), this.hasDeoptedValue = !0;
    }
    setValue(t) {
      this.hasDeoptedValue || (this.hasValue = !0, this.value = t);
    }
    clearValue() {
      this.hasDeoptedValue = !1, this.hasValue = !1, this.value = null;
    }
    reassign(t) {
      this.constant = !1, !this.constantViolations.includes(t) && this.constantViolations.push(t);
    }
    reference(t) {
      this.referencePaths.includes(t) || (this.referenced = !0, this.references++, this.referencePaths.push(t));
    }
    dereference() {
      this.references--, this.referenced = !!this.references;
    }
  };
  zl.default = zh;
  function wY(e) {
    for (let {
      parentPath: t,
      key: r
    } = e; t; {
      parentPath: t,
      key: r
    } = t) {
      if (t.isFunctionParent()) return !1;
      if (t.isWhile() || t.isForXStatement() || t.isForStatement() && r === "body")
        return !0;
    }
    return !1;
  }
  i(wY, "isDeclaredInLoop");
});

// ../node_modules/@babel/traverse/node_modules/globals/globals.json
var tx = A((Ive, IY) => {
  IY.exports = {
    builtin: {
      Array: !1,
      ArrayBuffer: !1,
      Atomics: !1,
      BigInt: !1,
      BigInt64Array: !1,
      BigUint64Array: !1,
      Boolean: !1,
      constructor: !1,
      DataView: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Float32Array: !1,
      Float64Array: !1,
      Function: !1,
      globalThis: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      Int16Array: !1,
      Int32Array: !1,
      Int8Array: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Map: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      Promise: !1,
      propertyIsEnumerable: !1,
      Proxy: !1,
      RangeError: !1,
      ReferenceError: !1,
      Reflect: !1,
      RegExp: !1,
      Set: !1,
      SharedArrayBuffer: !1,
      String: !1,
      Symbol: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      Uint16Array: !1,
      Uint32Array: !1,
      Uint8Array: !1,
      Uint8ClampedArray: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1,
      WeakMap: !1,
      WeakSet: !1
    },
    es5: {
      Array: !1,
      Boolean: !1,
      constructor: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Function: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      propertyIsEnumerable: !1,
      RangeError: !1,
      ReferenceError: !1,
      RegExp: !1,
      String: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1
    },
    es2015: {
      Array: !1,
      ArrayBuffer: !1,
      Boolean: !1,
      constructor: !1,
      DataView: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Float32Array: !1,
      Float64Array: !1,
      Function: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      Int16Array: !1,
      Int32Array: !1,
      Int8Array: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Map: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      Promise: !1,
      propertyIsEnumerable: !1,
      Proxy: !1,
      RangeError: !1,
      ReferenceError: !1,
      Reflect: !1,
      RegExp: !1,
      Set: !1,
      String: !1,
      Symbol: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      Uint16Array: !1,
      Uint32Array: !1,
      Uint8Array: !1,
      Uint8ClampedArray: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1,
      WeakMap: !1,
      WeakSet: !1
    },
    es2017: {
      Array: !1,
      ArrayBuffer: !1,
      Atomics: !1,
      Boolean: !1,
      constructor: !1,
      DataView: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Float32Array: !1,
      Float64Array: !1,
      Function: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      Int16Array: !1,
      Int32Array: !1,
      Int8Array: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Map: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      Promise: !1,
      propertyIsEnumerable: !1,
      Proxy: !1,
      RangeError: !1,
      ReferenceError: !1,
      Reflect: !1,
      RegExp: !1,
      Set: !1,
      SharedArrayBuffer: !1,
      String: !1,
      Symbol: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      Uint16Array: !1,
      Uint32Array: !1,
      Uint8Array: !1,
      Uint8ClampedArray: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1,
      WeakMap: !1,
      WeakSet: !1
    },
    browser: {
      AbortController: !1,
      AbortSignal: !1,
      addEventListener: !1,
      alert: !1,
      AnalyserNode: !1,
      Animation: !1,
      AnimationEffectReadOnly: !1,
      AnimationEffectTiming: !1,
      AnimationEffectTimingReadOnly: !1,
      AnimationEvent: !1,
      AnimationPlaybackEvent: !1,
      AnimationTimeline: !1,
      applicationCache: !1,
      ApplicationCache: !1,
      ApplicationCacheErrorEvent: !1,
      atob: !1,
      Attr: !1,
      Audio: !1,
      AudioBuffer: !1,
      AudioBufferSourceNode: !1,
      AudioContext: !1,
      AudioDestinationNode: !1,
      AudioListener: !1,
      AudioNode: !1,
      AudioParam: !1,
      AudioProcessingEvent: !1,
      AudioScheduledSourceNode: !1,
      "AudioWorkletGlobalScope ": !1,
      AudioWorkletNode: !1,
      AudioWorkletProcessor: !1,
      BarProp: !1,
      BaseAudioContext: !1,
      BatteryManager: !1,
      BeforeUnloadEvent: !1,
      BiquadFilterNode: !1,
      Blob: !1,
      BlobEvent: !1,
      blur: !1,
      BroadcastChannel: !1,
      btoa: !1,
      BudgetService: !1,
      ByteLengthQueuingStrategy: !1,
      Cache: !1,
      caches: !1,
      CacheStorage: !1,
      cancelAnimationFrame: !1,
      cancelIdleCallback: !1,
      CanvasCaptureMediaStreamTrack: !1,
      CanvasGradient: !1,
      CanvasPattern: !1,
      CanvasRenderingContext2D: !1,
      ChannelMergerNode: !1,
      ChannelSplitterNode: !1,
      CharacterData: !1,
      clearInterval: !1,
      clearTimeout: !1,
      clientInformation: !1,
      ClipboardEvent: !1,
      close: !1,
      closed: !1,
      CloseEvent: !1,
      Comment: !1,
      CompositionEvent: !1,
      confirm: !1,
      console: !1,
      ConstantSourceNode: !1,
      ConvolverNode: !1,
      CountQueuingStrategy: !1,
      createImageBitmap: !1,
      Credential: !1,
      CredentialsContainer: !1,
      crypto: !1,
      Crypto: !1,
      CryptoKey: !1,
      CSS: !1,
      CSSConditionRule: !1,
      CSSFontFaceRule: !1,
      CSSGroupingRule: !1,
      CSSImportRule: !1,
      CSSKeyframeRule: !1,
      CSSKeyframesRule: !1,
      CSSMediaRule: !1,
      CSSNamespaceRule: !1,
      CSSPageRule: !1,
      CSSRule: !1,
      CSSRuleList: !1,
      CSSStyleDeclaration: !1,
      CSSStyleRule: !1,
      CSSStyleSheet: !1,
      CSSSupportsRule: !1,
      CustomElementRegistry: !1,
      customElements: !1,
      CustomEvent: !1,
      DataTransfer: !1,
      DataTransferItem: !1,
      DataTransferItemList: !1,
      defaultstatus: !1,
      defaultStatus: !1,
      DelayNode: !1,
      DeviceMotionEvent: !1,
      DeviceOrientationEvent: !1,
      devicePixelRatio: !1,
      dispatchEvent: !1,
      document: !1,
      Document: !1,
      DocumentFragment: !1,
      DocumentType: !1,
      DOMError: !1,
      DOMException: !1,
      DOMImplementation: !1,
      DOMMatrix: !1,
      DOMMatrixReadOnly: !1,
      DOMParser: !1,
      DOMPoint: !1,
      DOMPointReadOnly: !1,
      DOMQuad: !1,
      DOMRect: !1,
      DOMRectReadOnly: !1,
      DOMStringList: !1,
      DOMStringMap: !1,
      DOMTokenList: !1,
      DragEvent: !1,
      DynamicsCompressorNode: !1,
      Element: !1,
      ErrorEvent: !1,
      event: !1,
      Event: !1,
      EventSource: !1,
      EventTarget: !1,
      external: !1,
      fetch: !1,
      File: !1,
      FileList: !1,
      FileReader: !1,
      find: !1,
      focus: !1,
      FocusEvent: !1,
      FontFace: !1,
      FontFaceSetLoadEvent: !1,
      FormData: !1,
      frameElement: !1,
      frames: !1,
      GainNode: !1,
      Gamepad: !1,
      GamepadButton: !1,
      GamepadEvent: !1,
      getComputedStyle: !1,
      getSelection: !1,
      HashChangeEvent: !1,
      Headers: !1,
      history: !1,
      History: !1,
      HTMLAllCollection: !1,
      HTMLAnchorElement: !1,
      HTMLAreaElement: !1,
      HTMLAudioElement: !1,
      HTMLBaseElement: !1,
      HTMLBodyElement: !1,
      HTMLBRElement: !1,
      HTMLButtonElement: !1,
      HTMLCanvasElement: !1,
      HTMLCollection: !1,
      HTMLContentElement: !1,
      HTMLDataElement: !1,
      HTMLDataListElement: !1,
      HTMLDetailsElement: !1,
      HTMLDialogElement: !1,
      HTMLDirectoryElement: !1,
      HTMLDivElement: !1,
      HTMLDListElement: !1,
      HTMLDocument: !1,
      HTMLElement: !1,
      HTMLEmbedElement: !1,
      HTMLFieldSetElement: !1,
      HTMLFontElement: !1,
      HTMLFormControlsCollection: !1,
      HTMLFormElement: !1,
      HTMLFrameElement: !1,
      HTMLFrameSetElement: !1,
      HTMLHeadElement: !1,
      HTMLHeadingElement: !1,
      HTMLHRElement: !1,
      HTMLHtmlElement: !1,
      HTMLIFrameElement: !1,
      HTMLImageElement: !1,
      HTMLInputElement: !1,
      HTMLLabelElement: !1,
      HTMLLegendElement: !1,
      HTMLLIElement: !1,
      HTMLLinkElement: !1,
      HTMLMapElement: !1,
      HTMLMarqueeElement: !1,
      HTMLMediaElement: !1,
      HTMLMenuElement: !1,
      HTMLMetaElement: !1,
      HTMLMeterElement: !1,
      HTMLModElement: !1,
      HTMLObjectElement: !1,
      HTMLOListElement: !1,
      HTMLOptGroupElement: !1,
      HTMLOptionElement: !1,
      HTMLOptionsCollection: !1,
      HTMLOutputElement: !1,
      HTMLParagraphElement: !1,
      HTMLParamElement: !1,
      HTMLPictureElement: !1,
      HTMLPreElement: !1,
      HTMLProgressElement: !1,
      HTMLQuoteElement: !1,
      HTMLScriptElement: !1,
      HTMLSelectElement: !1,
      HTMLShadowElement: !1,
      HTMLSlotElement: !1,
      HTMLSourceElement: !1,
      HTMLSpanElement: !1,
      HTMLStyleElement: !1,
      HTMLTableCaptionElement: !1,
      HTMLTableCellElement: !1,
      HTMLTableColElement: !1,
      HTMLTableElement: !1,
      HTMLTableRowElement: !1,
      HTMLTableSectionElement: !1,
      HTMLTemplateElement: !1,
      HTMLTextAreaElement: !1,
      HTMLTimeElement: !1,
      HTMLTitleElement: !1,
      HTMLTrackElement: !1,
      HTMLUListElement: !1,
      HTMLUnknownElement: !1,
      HTMLVideoElement: !1,
      IDBCursor: !1,
      IDBCursorWithValue: !1,
      IDBDatabase: !1,
      IDBFactory: !1,
      IDBIndex: !1,
      IDBKeyRange: !1,
      IDBObjectStore: !1,
      IDBOpenDBRequest: !1,
      IDBRequest: !1,
      IDBTransaction: !1,
      IDBVersionChangeEvent: !1,
      IdleDeadline: !1,
      IIRFilterNode: !1,
      Image: !1,
      ImageBitmap: !1,
      ImageBitmapRenderingContext: !1,
      ImageCapture: !1,
      ImageData: !1,
      indexedDB: !1,
      innerHeight: !1,
      innerWidth: !1,
      InputEvent: !1,
      IntersectionObserver: !1,
      IntersectionObserverEntry: !1,
      Intl: !1,
      isSecureContext: !1,
      KeyboardEvent: !1,
      KeyframeEffect: !1,
      KeyframeEffectReadOnly: !1,
      length: !1,
      localStorage: !1,
      location: !0,
      Location: !1,
      locationbar: !1,
      matchMedia: !1,
      MediaDeviceInfo: !1,
      MediaDevices: !1,
      MediaElementAudioSourceNode: !1,
      MediaEncryptedEvent: !1,
      MediaError: !1,
      MediaKeyMessageEvent: !1,
      MediaKeySession: !1,
      MediaKeyStatusMap: !1,
      MediaKeySystemAccess: !1,
      MediaList: !1,
      MediaQueryList: !1,
      MediaQueryListEvent: !1,
      MediaRecorder: !1,
      MediaSettingsRange: !1,
      MediaSource: !1,
      MediaStream: !1,
      MediaStreamAudioDestinationNode: !1,
      MediaStreamAudioSourceNode: !1,
      MediaStreamEvent: !1,
      MediaStreamTrack: !1,
      MediaStreamTrackEvent: !1,
      menubar: !1,
      MessageChannel: !1,
      MessageEvent: !1,
      MessagePort: !1,
      MIDIAccess: !1,
      MIDIConnectionEvent: !1,
      MIDIInput: !1,
      MIDIInputMap: !1,
      MIDIMessageEvent: !1,
      MIDIOutput: !1,
      MIDIOutputMap: !1,
      MIDIPort: !1,
      MimeType: !1,
      MimeTypeArray: !1,
      MouseEvent: !1,
      moveBy: !1,
      moveTo: !1,
      MutationEvent: !1,
      MutationObserver: !1,
      MutationRecord: !1,
      name: !1,
      NamedNodeMap: !1,
      NavigationPreloadManager: !1,
      navigator: !1,
      Navigator: !1,
      NetworkInformation: !1,
      Node: !1,
      NodeFilter: !1,
      NodeIterator: !1,
      NodeList: !1,
      Notification: !1,
      OfflineAudioCompletionEvent: !1,
      OfflineAudioContext: !1,
      offscreenBuffering: !1,
      OffscreenCanvas: !0,
      onabort: !0,
      onafterprint: !0,
      onanimationend: !0,
      onanimationiteration: !0,
      onanimationstart: !0,
      onappinstalled: !0,
      onauxclick: !0,
      onbeforeinstallprompt: !0,
      onbeforeprint: !0,
      onbeforeunload: !0,
      onblur: !0,
      oncancel: !0,
      oncanplay: !0,
      oncanplaythrough: !0,
      onchange: !0,
      onclick: !0,
      onclose: !0,
      oncontextmenu: !0,
      oncuechange: !0,
      ondblclick: !0,
      ondevicemotion: !0,
      ondeviceorientation: !0,
      ondeviceorientationabsolute: !0,
      ondrag: !0,
      ondragend: !0,
      ondragenter: !0,
      ondragleave: !0,
      ondragover: !0,
      ondragstart: !0,
      ondrop: !0,
      ondurationchange: !0,
      onemptied: !0,
      onended: !0,
      onerror: !0,
      onfocus: !0,
      ongotpointercapture: !0,
      onhashchange: !0,
      oninput: !0,
      oninvalid: !0,
      onkeydown: !0,
      onkeypress: !0,
      onkeyup: !0,
      onlanguagechange: !0,
      onload: !0,
      onloadeddata: !0,
      onloadedmetadata: !0,
      onloadstart: !0,
      onlostpointercapture: !0,
      onmessage: !0,
      onmessageerror: !0,
      onmousedown: !0,
      onmouseenter: !0,
      onmouseleave: !0,
      onmousemove: !0,
      onmouseout: !0,
      onmouseover: !0,
      onmouseup: !0,
      onmousewheel: !0,
      onoffline: !0,
      ononline: !0,
      onpagehide: !0,
      onpageshow: !0,
      onpause: !0,
      onplay: !0,
      onplaying: !0,
      onpointercancel: !0,
      onpointerdown: !0,
      onpointerenter: !0,
      onpointerleave: !0,
      onpointermove: !0,
      onpointerout: !0,
      onpointerover: !0,
      onpointerup: !0,
      onpopstate: !0,
      onprogress: !0,
      onratechange: !0,
      onrejectionhandled: !0,
      onreset: !0,
      onresize: !0,
      onscroll: !0,
      onsearch: !0,
      onseeked: !0,
      onseeking: !0,
      onselect: !0,
      onstalled: !0,
      onstorage: !0,
      onsubmit: !0,
      onsuspend: !0,
      ontimeupdate: !0,
      ontoggle: !0,
      ontransitionend: !0,
      onunhandledrejection: !0,
      onunload: !0,
      onvolumechange: !0,
      onwaiting: !0,
      onwheel: !0,
      open: !1,
      openDatabase: !1,
      opener: !1,
      Option: !1,
      origin: !1,
      OscillatorNode: !1,
      outerHeight: !1,
      outerWidth: !1,
      PageTransitionEvent: !1,
      pageXOffset: !1,
      pageYOffset: !1,
      PannerNode: !1,
      parent: !1,
      Path2D: !1,
      PaymentAddress: !1,
      PaymentRequest: !1,
      PaymentRequestUpdateEvent: !1,
      PaymentResponse: !1,
      performance: !1,
      Performance: !1,
      PerformanceEntry: !1,
      PerformanceLongTaskTiming: !1,
      PerformanceMark: !1,
      PerformanceMeasure: !1,
      PerformanceNavigation: !1,
      PerformanceNavigationTiming: !1,
      PerformanceObserver: !1,
      PerformanceObserverEntryList: !1,
      PerformancePaintTiming: !1,
      PerformanceResourceTiming: !1,
      PerformanceTiming: !1,
      PeriodicWave: !1,
      Permissions: !1,
      PermissionStatus: !1,
      personalbar: !1,
      PhotoCapabilities: !1,
      Plugin: !1,
      PluginArray: !1,
      PointerEvent: !1,
      PopStateEvent: !1,
      postMessage: !1,
      Presentation: !1,
      PresentationAvailability: !1,
      PresentationConnection: !1,
      PresentationConnectionAvailableEvent: !1,
      PresentationConnectionCloseEvent: !1,
      PresentationConnectionList: !1,
      PresentationReceiver: !1,
      PresentationRequest: !1,
      print: !1,
      ProcessingInstruction: !1,
      ProgressEvent: !1,
      PromiseRejectionEvent: !1,
      prompt: !1,
      PushManager: !1,
      PushSubscription: !1,
      PushSubscriptionOptions: !1,
      queueMicrotask: !1,
      RadioNodeList: !1,
      Range: !1,
      ReadableStream: !1,
      registerProcessor: !1,
      RemotePlayback: !1,
      removeEventListener: !1,
      Request: !1,
      requestAnimationFrame: !1,
      requestIdleCallback: !1,
      resizeBy: !1,
      ResizeObserver: !1,
      ResizeObserverEntry: !1,
      resizeTo: !1,
      Response: !1,
      RTCCertificate: !1,
      RTCDataChannel: !1,
      RTCDataChannelEvent: !1,
      RTCDtlsTransport: !1,
      RTCIceCandidate: !1,
      RTCIceGatherer: !1,
      RTCIceTransport: !1,
      RTCPeerConnection: !1,
      RTCPeerConnectionIceEvent: !1,
      RTCRtpContributingSource: !1,
      RTCRtpReceiver: !1,
      RTCRtpSender: !1,
      RTCSctpTransport: !1,
      RTCSessionDescription: !1,
      RTCStatsReport: !1,
      RTCTrackEvent: !1,
      screen: !1,
      Screen: !1,
      screenLeft: !1,
      ScreenOrientation: !1,
      screenTop: !1,
      screenX: !1,
      screenY: !1,
      ScriptProcessorNode: !1,
      scroll: !1,
      scrollbars: !1,
      scrollBy: !1,
      scrollTo: !1,
      scrollX: !1,
      scrollY: !1,
      SecurityPolicyViolationEvent: !1,
      Selection: !1,
      self: !1,
      ServiceWorker: !1,
      ServiceWorkerContainer: !1,
      ServiceWorkerRegistration: !1,
      sessionStorage: !1,
      setInterval: !1,
      setTimeout: !1,
      ShadowRoot: !1,
      SharedWorker: !1,
      SourceBuffer: !1,
      SourceBufferList: !1,
      speechSynthesis: !1,
      SpeechSynthesisEvent: !1,
      SpeechSynthesisUtterance: !1,
      StaticRange: !1,
      status: !1,
      statusbar: !1,
      StereoPannerNode: !1,
      stop: !1,
      Storage: !1,
      StorageEvent: !1,
      StorageManager: !1,
      styleMedia: !1,
      StyleSheet: !1,
      StyleSheetList: !1,
      SubtleCrypto: !1,
      SVGAElement: !1,
      SVGAngle: !1,
      SVGAnimatedAngle: !1,
      SVGAnimatedBoolean: !1,
      SVGAnimatedEnumeration: !1,
      SVGAnimatedInteger: !1,
      SVGAnimatedLength: !1,
      SVGAnimatedLengthList: !1,
      SVGAnimatedNumber: !1,
      SVGAnimatedNumberList: !1,
      SVGAnimatedPreserveAspectRatio: !1,
      SVGAnimatedRect: !1,
      SVGAnimatedString: !1,
      SVGAnimatedTransformList: !1,
      SVGAnimateElement: !1,
      SVGAnimateMotionElement: !1,
      SVGAnimateTransformElement: !1,
      SVGAnimationElement: !1,
      SVGCircleElement: !1,
      SVGClipPathElement: !1,
      SVGComponentTransferFunctionElement: !1,
      SVGDefsElement: !1,
      SVGDescElement: !1,
      SVGDiscardElement: !1,
      SVGElement: !1,
      SVGEllipseElement: !1,
      SVGFEBlendElement: !1,
      SVGFEColorMatrixElement: !1,
      SVGFEComponentTransferElement: !1,
      SVGFECompositeElement: !1,
      SVGFEConvolveMatrixElement: !1,
      SVGFEDiffuseLightingElement: !1,
      SVGFEDisplacementMapElement: !1,
      SVGFEDistantLightElement: !1,
      SVGFEDropShadowElement: !1,
      SVGFEFloodElement: !1,
      SVGFEFuncAElement: !1,
      SVGFEFuncBElement: !1,
      SVGFEFuncGElement: !1,
      SVGFEFuncRElement: !1,
      SVGFEGaussianBlurElement: !1,
      SVGFEImageElement: !1,
      SVGFEMergeElement: !1,
      SVGFEMergeNodeElement: !1,
      SVGFEMorphologyElement: !1,
      SVGFEOffsetElement: !1,
      SVGFEPointLightElement: !1,
      SVGFESpecularLightingElement: !1,
      SVGFESpotLightElement: !1,
      SVGFETileElement: !1,
      SVGFETurbulenceElement: !1,
      SVGFilterElement: !1,
      SVGForeignObjectElement: !1,
      SVGGElement: !1,
      SVGGeometryElement: !1,
      SVGGradientElement: !1,
      SVGGraphicsElement: !1,
      SVGImageElement: !1,
      SVGLength: !1,
      SVGLengthList: !1,
      SVGLinearGradientElement: !1,
      SVGLineElement: !1,
      SVGMarkerElement: !1,
      SVGMaskElement: !1,
      SVGMatrix: !1,
      SVGMetadataElement: !1,
      SVGMPathElement: !1,
      SVGNumber: !1,
      SVGNumberList: !1,
      SVGPathElement: !1,
      SVGPatternElement: !1,
      SVGPoint: !1,
      SVGPointList: !1,
      SVGPolygonElement: !1,
      SVGPolylineElement: !1,
      SVGPreserveAspectRatio: !1,
      SVGRadialGradientElement: !1,
      SVGRect: !1,
      SVGRectElement: !1,
      SVGScriptElement: !1,
      SVGSetElement: !1,
      SVGStopElement: !1,
      SVGStringList: !1,
      SVGStyleElement: !1,
      SVGSVGElement: !1,
      SVGSwitchElement: !1,
      SVGSymbolElement: !1,
      SVGTextContentElement: !1,
      SVGTextElement: !1,
      SVGTextPathElement: !1,
      SVGTextPositioningElement: !1,
      SVGTitleElement: !1,
      SVGTransform: !1,
      SVGTransformList: !1,
      SVGTSpanElement: !1,
      SVGUnitTypes: !1,
      SVGUseElement: !1,
      SVGViewElement: !1,
      TaskAttributionTiming: !1,
      Text: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      TextEvent: !1,
      TextMetrics: !1,
      TextTrack: !1,
      TextTrackCue: !1,
      TextTrackCueList: !1,
      TextTrackList: !1,
      TimeRanges: !1,
      toolbar: !1,
      top: !1,
      Touch: !1,
      TouchEvent: !1,
      TouchList: !1,
      TrackEvent: !1,
      TransitionEvent: !1,
      TreeWalker: !1,
      UIEvent: !1,
      URL: !1,
      URLSearchParams: !1,
      ValidityState: !1,
      visualViewport: !1,
      VisualViewport: !1,
      VTTCue: !1,
      WaveShaperNode: !1,
      WebAssembly: !1,
      WebGL2RenderingContext: !1,
      WebGLActiveInfo: !1,
      WebGLBuffer: !1,
      WebGLContextEvent: !1,
      WebGLFramebuffer: !1,
      WebGLProgram: !1,
      WebGLQuery: !1,
      WebGLRenderbuffer: !1,
      WebGLRenderingContext: !1,
      WebGLSampler: !1,
      WebGLShader: !1,
      WebGLShaderPrecisionFormat: !1,
      WebGLSync: !1,
      WebGLTexture: !1,
      WebGLTransformFeedback: !1,
      WebGLUniformLocation: !1,
      WebGLVertexArrayObject: !1,
      WebSocket: !1,
      WheelEvent: !1,
      window: !1,
      Window: !1,
      Worker: !1,
      WritableStream: !1,
      XMLDocument: !1,
      XMLHttpRequest: !1,
      XMLHttpRequestEventTarget: !1,
      XMLHttpRequestUpload: !1,
      XMLSerializer: !1,
      XPathEvaluator: !1,
      XPathExpression: !1,
      XPathResult: !1,
      XSLTProcessor: !1
    },
    worker: {
      addEventListener: !1,
      applicationCache: !1,
      atob: !1,
      Blob: !1,
      BroadcastChannel: !1,
      btoa: !1,
      Cache: !1,
      caches: !1,
      clearInterval: !1,
      clearTimeout: !1,
      close: !0,
      console: !1,
      fetch: !1,
      FileReaderSync: !1,
      FormData: !1,
      Headers: !1,
      IDBCursor: !1,
      IDBCursorWithValue: !1,
      IDBDatabase: !1,
      IDBFactory: !1,
      IDBIndex: !1,
      IDBKeyRange: !1,
      IDBObjectStore: !1,
      IDBOpenDBRequest: !1,
      IDBRequest: !1,
      IDBTransaction: !1,
      IDBVersionChangeEvent: !1,
      ImageData: !1,
      importScripts: !0,
      indexedDB: !1,
      location: !1,
      MessageChannel: !1,
      MessagePort: !1,
      name: !1,
      navigator: !1,
      Notification: !1,
      onclose: !0,
      onconnect: !0,
      onerror: !0,
      onlanguagechange: !0,
      onmessage: !0,
      onoffline: !0,
      ononline: !0,
      onrejectionhandled: !0,
      onunhandledrejection: !0,
      performance: !1,
      Performance: !1,
      PerformanceEntry: !1,
      PerformanceMark: !1,
      PerformanceMeasure: !1,
      PerformanceNavigation: !1,
      PerformanceResourceTiming: !1,
      PerformanceTiming: !1,
      postMessage: !0,
      Promise: !1,
      queueMicrotask: !1,
      removeEventListener: !1,
      Request: !1,
      Response: !1,
      self: !0,
      ServiceWorkerRegistration: !1,
      setInterval: !1,
      setTimeout: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      URL: !1,
      URLSearchParams: !1,
      WebSocket: !1,
      Worker: !1,
      WorkerGlobalScope: !1,
      XMLHttpRequest: !1
    },
    node: {
      __dirname: !1,
      __filename: !1,
      Buffer: !1,
      clearImmediate: !1,
      clearInterval: !1,
      clearTimeout: !1,
      console: !1,
      exports: !0,
      global: !1,
      Intl: !1,
      module: !1,
      process: !1,
      queueMicrotask: !1,
      require: !1,
      setImmediate: !1,
      setInterval: !1,
      setTimeout: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      URL: !1,
      URLSearchParams: !1
    },
    commonjs: {
      exports: !0,
      global: !1,
      module: !1,
      require: !1
    },
    amd: {
      define: !1,
      require: !1
    },
    mocha: {
      after: !1,
      afterEach: !1,
      before: !1,
      beforeEach: !1,
      context: !1,
      describe: !1,
      it: !1,
      mocha: !1,
      run: !1,
      setup: !1,
      specify: !1,
      suite: !1,
      suiteSetup: !1,
      suiteTeardown: !1,
      teardown: !1,
      test: !1,
      xcontext: !1,
      xdescribe: !1,
      xit: !1,
      xspecify: !1
    },
    jasmine: {
      afterAll: !1,
      afterEach: !1,
      beforeAll: !1,
      beforeEach: !1,
      describe: !1,
      expect: !1,
      fail: !1,
      fdescribe: !1,
      fit: !1,
      it: !1,
      jasmine: !1,
      pending: !1,
      runs: !1,
      spyOn: !1,
      spyOnProperty: !1,
      waits: !1,
      waitsFor: !1,
      xdescribe: !1,
      xit: !1
    },
    jest: {
      afterAll: !1,
      afterEach: !1,
      beforeAll: !1,
      beforeEach: !1,
      describe: !1,
      expect: !1,
      fdescribe: !1,
      fit: !1,
      it: !1,
      jest: !1,
      pit: !1,
      require: !1,
      test: !1,
      xdescribe: !1,
      xit: !1,
      xtest: !1
    },
    qunit: {
      asyncTest: !1,
      deepEqual: !1,
      equal: !1,
      expect: !1,
      module: !1,
      notDeepEqual: !1,
      notEqual: !1,
      notOk: !1,
      notPropEqual: !1,
      notStrictEqual: !1,
      ok: !1,
      propEqual: !1,
      QUnit: !1,
      raises: !1,
      start: !1,
      stop: !1,
      strictEqual: !1,
      test: !1,
      throws: !1
    },
    phantomjs: {
      console: !0,
      exports: !0,
      phantom: !0,
      require: !0,
      WebPage: !0
    },
    couch: {
      emit: !1,
      exports: !1,
      getRow: !1,
      log: !1,
      module: !1,
      provides: !1,
      require: !1,
      respond: !1,
      send: !1,
      start: !1,
      sum: !1
    },
    rhino: {
      defineClass: !1,
      deserialize: !1,
      gc: !1,
      help: !1,
      importClass: !1,
      importPackage: !1,
      java: !1,
      load: !1,
      loadClass: !1,
      Packages: !1,
      print: !1,
      quit: !1,
      readFile: !1,
      readUrl: !1,
      runCommand: !1,
      seal: !1,
      serialize: !1,
      spawn: !1,
      sync: !1,
      toint32: !1,
      version: !1
    },
    nashorn: {
      __DIR__: !1,
      __FILE__: !1,
      __LINE__: !1,
      com: !1,
      edu: !1,
      exit: !1,
      java: !1,
      Java: !1,
      javafx: !1,
      JavaImporter: !1,
      javax: !1,
      JSAdapter: !1,
      load: !1,
      loadWithNewGlobal: !1,
      org: !1,
      Packages: !1,
      print: !1,
      quit: !1
    },
    wsh: {
      ActiveXObject: !0,
      Enumerator: !0,
      GetObject: !0,
      ScriptEngine: !0,
      ScriptEngineBuildVersion: !0,
      ScriptEngineMajorVersion: !0,
      ScriptEngineMinorVersion: !0,
      VBArray: !0,
      WScript: !0,
      WSH: !0,
      XDomainRequest: !0
    },
    jquery: {
      $: !1,
      jQuery: !1
    },
    yui: {
      YAHOO: !1,
      YAHOO_config: !1,
      YUI: !1,
      YUI_config: !1
    },
    shelljs: {
      cat: !1,
      cd: !1,
      chmod: !1,
      config: !1,
      cp: !1,
      dirs: !1,
      echo: !1,
      env: !1,
      error: !1,
      exec: !1,
      exit: !1,
      find: !1,
      grep: !1,
      ln: !1,
      ls: !1,
      mkdir: !1,
      mv: !1,
      popd: !1,
      pushd: !1,
      pwd: !1,
      rm: !1,
      sed: !1,
      set: !1,
      target: !1,
      tempdir: !1,
      test: !1,
      touch: !1,
      which: !1
    },
    prototypejs: {
      $: !1,
      $$: !1,
      $A: !1,
      $break: !1,
      $continue: !1,
      $F: !1,
      $H: !1,
      $R: !1,
      $w: !1,
      Abstract: !1,
      Ajax: !1,
      Autocompleter: !1,
      Builder: !1,
      Class: !1,
      Control: !1,
      Draggable: !1,
      Draggables: !1,
      Droppables: !1,
      Effect: !1,
      Element: !1,
      Enumerable: !1,
      Event: !1,
      Field: !1,
      Form: !1,
      Hash: !1,
      Insertion: !1,
      ObjectRange: !1,
      PeriodicalExecuter: !1,
      Position: !1,
      Prototype: !1,
      Scriptaculous: !1,
      Selector: !1,
      Sortable: !1,
      SortableObserver: !1,
      Sound: !1,
      Template: !1,
      Toggle: !1,
      Try: !1
    },
    meteor: {
      _: !1,
      $: !1,
      Accounts: !1,
      AccountsClient: !1,
      AccountsCommon: !1,
      AccountsServer: !1,
      App: !1,
      Assets: !1,
      Blaze: !1,
      check: !1,
      Cordova: !1,
      DDP: !1,
      DDPRateLimiter: !1,
      DDPServer: !1,
      Deps: !1,
      EJSON: !1,
      Email: !1,
      HTTP: !1,
      Log: !1,
      Match: !1,
      Meteor: !1,
      Mongo: !1,
      MongoInternals: !1,
      Npm: !1,
      Package: !1,
      Plugin: !1,
      process: !1,
      Random: !1,
      ReactiveDict: !1,
      ReactiveVar: !1,
      Router: !1,
      ServiceConfiguration: !1,
      Session: !1,
      share: !1,
      Spacebars: !1,
      Template: !1,
      Tinytest: !1,
      Tracker: !1,
      UI: !1,
      Utils: !1,
      WebApp: !1,
      WebAppInternals: !1
    },
    mongo: {
      _isWindows: !1,
      _rand: !1,
      BulkWriteResult: !1,
      cat: !1,
      cd: !1,
      connect: !1,
      db: !1,
      getHostName: !1,
      getMemInfo: !1,
      hostname: !1,
      ISODate: !1,
      listFiles: !1,
      load: !1,
      ls: !1,
      md5sumFile: !1,
      mkdir: !1,
      Mongo: !1,
      NumberInt: !1,
      NumberLong: !1,
      ObjectId: !1,
      PlanCache: !1,
      print: !1,
      printjson: !1,
      pwd: !1,
      quit: !1,
      removeFile: !1,
      rs: !1,
      sh: !1,
      UUID: !1,
      version: !1,
      WriteResult: !1
    },
    applescript: {
      $: !1,
      Application: !1,
      Automation: !1,
      console: !1,
      delay: !1,
      Library: !1,
      ObjC: !1,
      ObjectSpecifier: !1,
      Path: !1,
      Progress: !1,
      Ref: !1
    },
    serviceworker: {
      addEventListener: !1,
      applicationCache: !1,
      atob: !1,
      Blob: !1,
      BroadcastChannel: !1,
      btoa: !1,
      Cache: !1,
      caches: !1,
      CacheStorage: !1,
      clearInterval: !1,
      clearTimeout: !1,
      Client: !1,
      clients: !1,
      Clients: !1,
      close: !0,
      console: !1,
      ExtendableEvent: !1,
      ExtendableMessageEvent: !1,
      fetch: !1,
      FetchEvent: !1,
      FileReaderSync: !1,
      FormData: !1,
      Headers: !1,
      IDBCursor: !1,
      IDBCursorWithValue: !1,
      IDBDatabase: !1,
      IDBFactory: !1,
      IDBIndex: !1,
      IDBKeyRange: !1,
      IDBObjectStore: !1,
      IDBOpenDBRequest: !1,
      IDBRequest: !1,
      IDBTransaction: !1,
      IDBVersionChangeEvent: !1,
      ImageData: !1,
      importScripts: !1,
      indexedDB: !1,
      location: !1,
      MessageChannel: !1,
      MessagePort: !1,
      name: !1,
      navigator: !1,
      Notification: !1,
      onclose: !0,
      onconnect: !0,
      onerror: !0,
      onfetch: !0,
      oninstall: !0,
      onlanguagechange: !0,
      onmessage: !0,
      onmessageerror: !0,
      onnotificationclick: !0,
      onnotificationclose: !0,
      onoffline: !0,
      ononline: !0,
      onpush: !0,
      onpushsubscriptionchange: !0,
      onrejectionhandled: !0,
      onsync: !0,
      onunhandledrejection: !0,
      performance: !1,
      Performance: !1,
      PerformanceEntry: !1,
      PerformanceMark: !1,
      PerformanceMeasure: !1,
      PerformanceNavigation: !1,
      PerformanceResourceTiming: !1,
      PerformanceTiming: !1,
      postMessage: !0,
      Promise: !1,
      queueMicrotask: !1,
      registration: !1,
      removeEventListener: !1,
      Request: !1,
      Response: !1,
      self: !1,
      ServiceWorker: !1,
      ServiceWorkerContainer: !1,
      ServiceWorkerGlobalScope: !1,
      ServiceWorkerMessageEvent: !1,
      ServiceWorkerRegistration: !1,
      setInterval: !1,
      setTimeout: !1,
      skipWaiting: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      URL: !1,
      URLSearchParams: !1,
      WebSocket: !1,
      WindowClient: !1,
      Worker: !1,
      WorkerGlobalScope: !1,
      XMLHttpRequest: !1
    },
    atomtest: {
      advanceClock: !1,
      fakeClearInterval: !1,
      fakeClearTimeout: !1,
      fakeSetInterval: !1,
      fakeSetTimeout: !1,
      resetTimeouts: !1,
      waitsForPromise: !1
    },
    embertest: {
      andThen: !1,
      click: !1,
      currentPath: !1,
      currentRouteName: !1,
      currentURL: !1,
      fillIn: !1,
      find: !1,
      findAll: !1,
      findWithAssert: !1,
      keyEvent: !1,
      pauseTest: !1,
      resumeTest: !1,
      triggerEvent: !1,
      visit: !1,
      wait: !1
    },
    protractor: {
      $: !1,
      $$: !1,
      browser: !1,
      by: !1,
      By: !1,
      DartObject: !1,
      element: !1,
      protractor: !1
    },
    "shared-node-browser": {
      clearInterval: !1,
      clearTimeout: !1,
      console: !1,
      setInterval: !1,
      setTimeout: !1,
      URL: !1,
      URLSearchParams: !1
    },
    webextensions: {
      browser: !1,
      chrome: !1,
      opr: !1
    },
    greasemonkey: {
      cloneInto: !1,
      createObjectIn: !1,
      exportFunction: !1,
      GM: !1,
      GM_addStyle: !1,
      GM_deleteValue: !1,
      GM_getResourceText: !1,
      GM_getResourceURL: !1,
      GM_getValue: !1,
      GM_info: !1,
      GM_listValues: !1,
      GM_log: !1,
      GM_openInTab: !1,
      GM_registerMenuCommand: !1,
      GM_setClipboard: !1,
      GM_setValue: !1,
      GM_xmlhttpRequest: !1,
      unsafeWindow: !1
    },
    devtools: {
      $: !1,
      $_: !1,
      $$: !1,
      $0: !1,
      $1: !1,
      $2: !1,
      $3: !1,
      $4: !1,
      $x: !1,
      chrome: !1,
      clear: !1,
      copy: !1,
      debug: !1,
      dir: !1,
      dirxml: !1,
      getEventListeners: !1,
      inspect: !1,
      keys: !1,
      monitor: !1,
      monitorEvents: !1,
      profile: !1,
      profileEnd: !1,
      queryObjects: !1,
      table: !1,
      undebug: !1,
      unmonitor: !1,
      unmonitorEvents: !1,
      values: !1
    }
  };
});

// ../node_modules/@babel/traverse/node_modules/globals/index.js
var nx = A((_ve, rx) => {
  "use strict";
  rx.exports = tx();
});

// ../node_modules/@babel/traverse/lib/cache.js
var qs = A((mr) => {
  "use strict";
  Object.defineProperty(mr, "__esModule", {
    value: !0
  });
  mr.clear = OY;
  mr.clearPath = sx;
  mr.clearScope = ix;
  mr.getCachedPaths = NY;
  mr.getOrCreateCachedPaths = BY;
  mr.scope = mr.path = void 0;
  var Xl = mr.path = /* @__PURE__ */ new WeakMap(), _Y = mr.scope = /* @__PURE__ */ new WeakMap();
  function OY() {
    sx(), ix();
  }
  i(OY, "clear");
  function sx() {
    mr.path = Xl = /* @__PURE__ */ new WeakMap();
  }
  i(sx, "clearPath");
  function ix() {
    mr.scope = _Y = /* @__PURE__ */ new WeakMap();
  }
  i(ix, "clearScope");
  var Xh = Object.freeze({});
  function NY(e, t) {
    var r, n;
    return e = null, (r = Xl.get((n = e) != null ? n : Xh)) == null ? void 0 : r.get(t);
  }
  i(NY, "getCachedPaths");
  function BY(e, t) {
    var r, n;
    e = null;
    let s = Xl.get((r = e) != null ? r : Xh);
    s || Xl.set((n = e) != null ? n : Xh, s = /* @__PURE__ */ new WeakMap());
    let a = s.get(t);
    return a || s.set(t, a = /* @__PURE__ */ new Map()), a;
  }
  i(BY, "getOrCreateCachedPaths");
});

// ../node_modules/@babel/traverse/lib/scope/index.js
var tm = A((Zl) => {
  "use strict";
  Object.defineProperty(Zl, "__esModule", {
    value: !0
  });
  Zl.default = void 0;
  var kY = ZS(), FY = Dr(), jY = ex(), LY = nx(), hx = Pe(), MY = hx, ax = qs(), RY = Ha(), {
    NOT_LOCAL_BINDING: ox,
    assignmentExpression: qY,
    callExpression: lx,
    cloneNode: ux,
    getBindingIdentifiers: mx,
    identifier: Vs,
    isArrayExpression: yx,
    isBinary: UY,
    isCallExpression: cx,
    isClass: VY,
    isClassBody: $Y,
    isClassDeclaration: WY,
    isExportAllDeclaration: gx,
    isExportDefaultDeclaration: KY,
    isExportNamedDeclaration: Qh,
    isFunctionDeclaration: GY,
    isIdentifier: Us,
    isImportDeclaration: Zh,
    isLiteral: HY,
    isMemberExpression: YY,
    isMethod: JY,
    isModuleSpecifier: zY,
    isNullLiteral: XY,
    isObjectExpression: QY,
    isProperty: ZY,
    isPureish: eJ,
    isRegExpLiteral: tJ,
    isSuper: rJ,
    isTaggedTemplateExpression: nJ,
    isTemplateLiteral: bx,
    isThisExpression: px,
    isUnaryExpression: sJ,
    isVariableDeclaration: iJ,
    expressionStatement: aJ,
    matchesPattern: fx,
    memberExpression: em,
    numericLiteral: oJ,
    toIdentifier: lJ,
    variableDeclaration: uJ,
    variableDeclarator: cJ,
    isRecordExpression: pJ,
    isTupleExpression: fJ,
    isObjectProperty: dJ,
    isTopicReference: dx,
    isMetaProperty: hJ,
    isPrivateName: mJ,
    isExportDeclaration: yJ,
    buildUndefinedNode: gJ,
    sequenceExpression: bJ
  } = hx;
  function ut(e, t) {
    switch (e?.type) {
      default:
        if (Zh(e) || yJ(e)) {
          var r;
          if ((gx(e) || Qh(e) || Zh(e)) && e.source)
            ut(e.source, t);
          else if ((Qh(e) || Zh(e)) && (r = e.specifiers) != null && r.length)
            for (let n of e.specifiers) ut(n, t);
          else (KY(e) || Qh(e)) && e.declaration && ut(e.declaration, t);
        } else zY(e) ? ut(e.local, t) : HY(e) && !XY(e) && !tJ(e) && !bx(e) && t.push(e.value);
        break;
      case "MemberExpression":
      case "OptionalMemberExpression":
      case "JSXMemberExpression":
        ut(e.object, t), ut(e.property, t);
        break;
      case "Identifier":
      case "JSXIdentifier":
        t.push(e.name);
        break;
      case "CallExpression":
      case "OptionalCallExpression":
      case "NewExpression":
        ut(e.callee, t);
        break;
      case "ObjectExpression":
      case "ObjectPattern":
        for (let n of e.properties)
          ut(n, t);
        break;
      case "SpreadElement":
      case "RestElement":
        ut(e.argument, t);
        break;
      case "ObjectProperty":
      case "ObjectMethod":
      case "ClassProperty":
      case "ClassMethod":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
        ut(e.key, t);
        break;
      case "ThisExpression":
        t.push("this");
        break;
      case "Super":
        t.push("super");
        break;
      case "Import":
        t.push("import");
        break;
      case "DoExpression":
        t.push("do");
        break;
      case "YieldExpression":
        t.push("yield"), ut(e.argument, t);
        break;
      case "AwaitExpression":
        t.push("await"), ut(e.argument, t);
        break;
      case "AssignmentExpression":
        ut(e.left, t);
        break;
      case "VariableDeclarator":
        ut(e.id, t);
        break;
      case "FunctionExpression":
      case "FunctionDeclaration":
      case "ClassExpression":
      case "ClassDeclaration":
        ut(e.id, t);
        break;
      case "PrivateName":
        ut(e.id, t);
        break;
      case "ParenthesizedExpression":
        ut(e.expression, t);
        break;
      case "UnaryExpression":
      case "UpdateExpression":
        ut(e.argument, t);
        break;
      case "MetaProperty":
        ut(e.meta, t), ut(e.property, t);
        break;
      case "JSXElement":
        ut(e.openingElement, t);
        break;
      case "JSXOpeningElement":
        ut(e.name, t);
        break;
      case "JSXFragment":
        ut(e.openingFragment, t);
        break;
      case "JSXOpeningFragment":
        t.push("Fragment");
        break;
      case "JSXNamespacedName":
        ut(e.namespace, t), ut(e.name, t);
        break;
    }
  }
  i(ut, "gatherNodeParts");
  var Ql = {
    ForStatement(e) {
      let t = e.get("init");
      if (t.isVar()) {
        let {
          scope: r
        } = e;
        (r.getFunctionParent() || r.getProgramParent()).registerBinding("var", t);
      }
    },
    Declaration(e) {
      if (e.isBlockScoped() || e.isImportDeclaration() || e.isExportDeclaration()) return;
      (e.scope.getFunctionParent() || e.scope.getProgramParent()).registerDeclaration(e);
    },
    ImportDeclaration(e) {
      e.scope.getBlockParent().registerDeclaration(e);
    },
    ReferencedIdentifier(e, t) {
      t.references.push(e);
    },
    ForXStatement(e, t) {
      let r = e.get("left");
      if (r.isPattern() || r.isIdentifier())
        t.constantViolations.push(e);
      else if (r.isVar()) {
        let {
          scope: n
        } = e;
        (n.getFunctionParent() || n.getProgramParent()).registerBinding("var", r);
      }
    },
    ExportDeclaration: {
      exit(e) {
        let {
          node: t,
          scope: r
        } = e;
        if (gx(t)) return;
        let n = t.declaration;
        if (WY(n) || GY(n)) {
          let s = n.id;
          if (!s) return;
          let a = r.getBinding(s.name);
          a?.reference(e);
        } else if (iJ(n))
          for (let s of n.declarations)
            for (let a of Object.keys(mx(s))) {
              let o = r.getBinding(a);
              o?.reference(e);
            }
      }
    },
    LabeledStatement(e) {
      e.scope.getBlockParent().registerDeclaration(e);
    },
    AssignmentExpression(e, t) {
      t.assignments.push(e);
    },
    UpdateExpression(e, t) {
      t.constantViolations.push(e);
    },
    UnaryExpression(e, t) {
      e.node.operator === "delete" && t.constantViolations.push(e);
    },
    BlockScoped(e) {
      let t = e.scope;
      if (t.path === e && (t = t.parent), t.getBlockParent().registerDeclaration(e), e.isClassDeclaration() && e.node.id) {
        let s = e.node.id.name;
        e.scope.bindings[s] = e.scope.parent.getBinding(s);
      }
    },
    CatchClause(e) {
      e.scope.registerBinding("let", e);
    },
    Function(e) {
      let t = e.get("params");
      for (let r of t)
        e.scope.registerBinding("param", r);
      e.isFunctionExpression() && e.node.id && !e.node.id[ox] && e.scope.registerBinding("local", e.get("id"), e);
    },
    ClassExpression(e) {
      e.node.id && !e.node.id[ox] && e.scope.registerBinding("local", e.get("id"), e);
    },
    TSTypeAnnotation(e) {
      e.skip();
    }
  }, EJ = 0, $r = class e {
    static {
      i(this, "Scope");
    }
    constructor(t) {
      this.uid = void 0, this.path = void 0, this.block = void 0, this.inited = void 0, this.labels = void 0, this.bindings = void 0, this.references =
      void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
      let {
        node: r
      } = t, n = ax.scope.get(r);
      if (n?.path === t)
        return n;
      ax.scope.set(r, this), this.uid = EJ++, this.block = r, this.path = t, this.labels = /* @__PURE__ */ new Map(), this.inited = !1;
    }
    get parent() {
      var t;
      let r, n = this.path;
      do {
        var s;
        let a = n.key === "key" || n.listKey === "decorators";
        n = n.parentPath, a && n.isMethod() && (n = n.parentPath), (s = n) != null && s.isScope() && (r = n);
      } while (n && !r);
      return (t = r) == null ? void 0 : t.scope;
    }
    generateDeclaredUidIdentifier(t) {
      let r = this.generateUidIdentifier(t);
      return this.push({
        id: r
      }), ux(r);
    }
    generateUidIdentifier(t) {
      return Vs(this.generateUid(t));
    }
    generateUid(t = "temp") {
      t = lJ(t).replace(/^_+/, "").replace(/\d+$/g, "");
      let r, n = 1;
      do
        r = `_${t}`, n > 1 && (r += n), n++;
      while (this.hasLabel(r) || this.hasBinding(r) || this.hasGlobal(r) || this.hasReference(r));
      let s = this.getProgramParent();
      return s.references[r] = !0, s.uids[r] = !0, r;
    }
    generateUidBasedOnNode(t, r) {
      let n = [];
      ut(t, n);
      let s = n.join("$");
      return s = s.replace(/^_/, "") || r || "ref", this.generateUid(s.slice(0, 20));
    }
    generateUidIdentifierBasedOnNode(t, r) {
      return Vs(this.generateUidBasedOnNode(t, r));
    }
    isStatic(t) {
      if (px(t) || rJ(t) || dx(t))
        return !0;
      if (Us(t)) {
        let r = this.getBinding(t.name);
        return r ? r.constant : this.hasBinding(t.name);
      }
      return !1;
    }
    maybeGenerateMemoised(t, r) {
      if (this.isStatic(t))
        return null;
      {
        let n = this.generateUidIdentifierBasedOnNode(t);
        return r ? n : (this.push({
          id: n
        }), ux(n));
      }
    }
    checkBlockScopedCollisions(t, r, n, s) {
      if (r === "param" || t.kind === "local") return;
      if (r === "let" || t.kind === "let" || t.kind === "const" || t.kind === "module" || t.kind === "param" && r === "const")
        throw this.path.hub.buildError(s, `Duplicate declaration "${n}"`, TypeError);
    }
    rename(t, r) {
      let n = this.getBinding(t);
      n && (r || (r = this.generateUidIdentifier(t).name), new kY.default(n, t, r).rename(arguments[2]));
    }
    dump() {
      let t = "-".repeat(60);
      console.log(t);
      let r = this;
      do {
        console.log("#", r.block.type);
        for (let n of Object.keys(r.bindings)) {
          let s = r.bindings[n];
          console.log(" -", n, {
            constant: s.constant,
            references: s.references,
            violations: s.constantViolations.length,
            kind: s.kind
          });
        }
      } while (r = r.parent);
      console.log(t);
    }
    hasLabel(t) {
      return !!this.getLabel(t);
    }
    getLabel(t) {
      return this.labels.get(t);
    }
    registerLabel(t) {
      this.labels.set(t.node.label.name, t);
    }
    registerDeclaration(t) {
      if (t.isLabeledStatement())
        this.registerLabel(t);
      else if (t.isFunctionDeclaration())
        this.registerBinding("hoisted", t.get("id"), t);
      else if (t.isVariableDeclaration()) {
        let r = t.get("declarations"), {
          kind: n
        } = t.node;
        for (let s of r)
          this.registerBinding(n === "using" || n === "await using" ? "const" : n, s);
      } else if (t.isClassDeclaration()) {
        if (t.node.declare) return;
        this.registerBinding("let", t);
      } else if (t.isImportDeclaration()) {
        let r = t.node.importKind === "type" || t.node.importKind === "typeof", n = t.get("specifiers");
        for (let s of n) {
          let a = r || s.isImportSpecifier() && (s.node.importKind === "type" || s.node.importKind === "typeof");
          this.registerBinding(a ? "unknown" : "module", s);
        }
      } else if (t.isExportDeclaration()) {
        let r = t.get("declaration");
        (r.isClassDeclaration() || r.isFunctionDeclaration() || r.isVariableDeclaration()) && this.registerDeclaration(r);
      } else
        this.registerBinding("unknown", t);
    }
    buildUndefinedNode() {
      return gJ();
    }
    registerConstantViolation(t) {
      let r = t.getAssignmentIdentifiers();
      for (let s of Object.keys(r)) {
        var n;
        (n = this.getBinding(s)) == null || n.reassign(t);
      }
    }
    registerBinding(t, r, n = r) {
      if (!t) throw new ReferenceError("no `kind`");
      if (r.isVariableDeclaration()) {
        let o = r.get("declarations");
        for (let l of o)
          this.registerBinding(t, l);
        return;
      }
      let s = this.getProgramParent(), a = r.getOuterBindingIdentifiers(!0);
      for (let o of Object.keys(a)) {
        s.references[o] = !0;
        for (let l of a[o]) {
          let u = this.getOwnBinding(o);
          if (u) {
            if (u.identifier === l) continue;
            this.checkBlockScopedCollisions(u, t, o, l);
          }
          u ? u.reassign(n) : this.bindings[o] = new jY.default({
            identifier: l,
            scope: this,
            path: n,
            kind: t
          });
        }
      }
    }
    addGlobal(t) {
      this.globals[t.name] = t;
    }
    hasUid(t) {
      let r = this;
      do
        if (r.uids[t]) return !0;
      while (r = r.parent);
      return !1;
    }
    hasGlobal(t) {
      let r = this;
      do
        if (r.globals[t]) return !0;
      while (r = r.parent);
      return !1;
    }
    hasReference(t) {
      return !!this.getProgramParent().references[t];
    }
    isPure(t, r) {
      if (Us(t)) {
        let o = this.getBinding(t.name);
        return o ? r ? o.constant : !0 : !1;
      } else {
        if (px(t) || hJ(t) || dx(t) || mJ(t))
          return !0;
        if (VY(t)) {
          var n;
          return t.superClass && !this.isPure(t.superClass, r) || ((n = t.decorators) == null ? void 0 : n.length) > 0 ? !1 : this.isPure(t.
          body, r);
        } else if ($Y(t)) {
          for (let o of t.body)
            if (!this.isPure(o, r)) return !1;
          return !0;
        } else {
          if (UY(t))
            return this.isPure(t.left, r) && this.isPure(t.right, r);
          if (yx(t) || fJ(t)) {
            for (let o of t.elements)
              if (o !== null && !this.isPure(o, r)) return !1;
            return !0;
          } else if (QY(t) || pJ(t)) {
            for (let o of t.properties)
              if (!this.isPure(o, r)) return !1;
            return !0;
          } else if (JY(t)) {
            var s;
            return !(t.computed && !this.isPure(t.key, r) || ((s = t.decorators) == null ? void 0 : s.length) > 0);
          } else if (ZY(t)) {
            var a;
            return !(t.computed && !this.isPure(t.key, r) || ((a = t.decorators) == null ? void 0 : a.length) > 0 || (dJ(t) || t.static) && t.
            value !== null && !this.isPure(t.value, r));
          } else {
            if (sJ(t))
              return this.isPure(t.argument, r);
            if (bx(t)) {
              for (let o of t.expressions)
                if (!this.isPure(o, r)) return !1;
              return !0;
            } else return nJ(t) ? fx(t.tag, "String.raw") && !this.hasBinding("String", {
              noGlobals: !0
            }) && this.isPure(t.quasi, r) : YY(t) ? !t.computed && Us(t.object) && t.object.name === "Symbol" && Us(t.property) && t.property.
            name !== "for" && !this.hasBinding("Symbol", {
              noGlobals: !0
            }) : cx(t) ? fx(t.callee, "Symbol.for") && !this.hasBinding("Symbol", {
              noGlobals: !0
            }) && t.arguments.length === 1 && MY.isStringLiteral(t.arguments[0]) : eJ(t);
          }
        }
      }
    }
    setData(t, r) {
      return this.data[t] = r;
    }
    getData(t) {
      let r = this;
      do {
        let n = r.data[t];
        if (n != null) return n;
      } while (r = r.parent);
    }
    removeData(t) {
      let r = this;
      do
        r.data[t] != null && (r.data[t] = null);
      while (r = r.parent);
    }
    init() {
      this.inited || (this.inited = !0, this.crawl());
    }
    crawl() {
      let t = this.path;
      this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.
      create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
      let r = this.getProgramParent();
      if (r.crawling) return;
      let n = {
        references: [],
        constantViolations: [],
        assignments: []
      };
      if (this.crawling = !0, t.type !== "Program" && (0, RY.isExplodedVisitor)(Ql)) {
        for (let a of Ql.enter)
          a.call(n, t, n);
        let s = Ql[t.type];
        if (s)
          for (let a of s.enter)
            a.call(n, t, n);
      }
      t.traverse(Ql, n), this.crawling = !1;
      for (let s of n.assignments) {
        let a = s.getAssignmentIdentifiers();
        for (let o of Object.keys(a))
          s.scope.getBinding(o) || r.addGlobal(a[o]);
        s.scope.registerConstantViolation(s);
      }
      for (let s of n.references) {
        let a = s.scope.getBinding(s.node.name);
        a ? a.reference(s) : r.addGlobal(s.node);
      }
      for (let s of n.constantViolations)
        s.scope.registerConstantViolation(s);
    }
    push(t) {
      let r = this.path;
      r.isPattern() ? r = this.getPatternParent().path : !r.isBlockStatement() && !r.isProgram() && (r = this.getBlockParent().path), r.isSwitchStatement() &&
      (r = (this.getFunctionParent() || this.getProgramParent()).path);
      let {
        init: n,
        unique: s,
        kind: a = "var",
        id: o
      } = t;
      if (!n && !s && (a === "var" || a === "let") && r.isFunction() && !r.node.name && cx(r.parent, {
        callee: r.node
      }) && r.parent.arguments.length <= r.node.params.length && Us(o)) {
        r.pushContainer("params", o), r.scope.registerBinding("param", r.get("params")[r.node.params.length - 1]);
        return;
      }
      (r.isLoop() || r.isCatchClause() || r.isFunction()) && (r.ensureBlock(), r = r.get("body"));
      let l = t._blockHoist == null ? 2 : t._blockHoist, u = `declaration:${a}:${l}`, c = !s && r.getData(u);
      if (!c) {
        let h = uJ(a, []);
        h._blockHoist = l, [c] = r.unshiftContainer("body", [h]), s || r.setData(u, c);
      }
      let p = cJ(o, n), f = c.node.declarations.push(p);
      r.scope.registerBinding(a, c.get("declarations")[f - 1]);
    }
    getProgramParent() {
      let t = this;
      do
        if (t.path.isProgram())
          return t;
      while (t = t.parent);
      throw new Error("Couldn't find a Program");
    }
    getFunctionParent() {
      let t = this;
      do
        if (t.path.isFunctionParent())
          return t;
      while (t = t.parent);
      return null;
    }
    getBlockParent() {
      let t = this;
      do
        if (t.path.isBlockParent())
          return t;
      while (t = t.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getPatternParent() {
      let t = this;
      do
        if (!t.path.isPattern())
          return t.getBlockParent();
      while (t = t.parent.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getAllBindings() {
      let t = /* @__PURE__ */ Object.create(null), r = this;
      do {
        for (let n of Object.keys(r.bindings))
          n in t || (t[n] = r.bindings[n]);
        r = r.parent;
      } while (r);
      return t;
    }
    bindingIdentifierEquals(t, r) {
      return this.getBindingIdentifier(t) === r;
    }
    getBinding(t) {
      let r = this, n;
      do {
        let a = r.getOwnBinding(t);
        if (a) {
          var s;
          if (!((s = n) != null && s.isPattern() && a.kind !== "param" && a.kind !== "local"))
            return a;
        } else if (!a && t === "arguments" && r.path.isFunction() && !r.path.isArrowFunctionExpression())
          break;
        n = r.path;
      } while (r = r.parent);
    }
    getOwnBinding(t) {
      return this.bindings[t];
    }
    getBindingIdentifier(t) {
      var r;
      return (r = this.getBinding(t)) == null ? void 0 : r.identifier;
    }
    getOwnBindingIdentifier(t) {
      let r = this.bindings[t];
      return r?.identifier;
    }
    hasOwnBinding(t) {
      return !!this.getOwnBinding(t);
    }
    hasBinding(t, r) {
      if (!t) return !1;
      let n = this;
      do
        if (n.hasOwnBinding(t))
          return !0;
      while (n = n.parent);
      let s, a;
      return typeof r == "object" ? (s = r.noGlobals, a = r.noUids) : typeof r == "boolean" && (s = r), !!(!a && this.hasUid(t) || !s && e.globals.
      includes(t) || !s && e.contextVariables.includes(t));
    }
    parentHasBinding(t, r) {
      var n;
      return (n = this.parent) == null ? void 0 : n.hasBinding(t, r);
    }
    moveBindingTo(t, r) {
      let n = this.getBinding(t);
      n && (n.scope.removeOwnBinding(t), n.scope = r, r.bindings[t] = n);
    }
    removeOwnBinding(t) {
      delete this.bindings[t];
    }
    removeBinding(t) {
      var r;
      (r = this.getBinding(t)) == null || r.scope.removeOwnBinding(t);
      let n = this;
      do
        n.uids[t] && (n.uids[t] = !1);
      while (n = n.parent);
    }
    hoistVariables(t = (r) => this.push({
      id: r
    })) {
      this.crawl();
      let r = /* @__PURE__ */ new Set();
      for (let s of Object.keys(this.bindings)) {
        let a = this.bindings[s];
        if (!a) continue;
        let {
          path: o
        } = a;
        if (!o.isVariableDeclarator()) continue;
        let {
          parent: l,
          parentPath: u
        } = o;
        if (l.kind !== "var" || r.has(l)) continue;
        r.add(o.parent);
        let c, p = [];
        for (let f of l.declarations) {
          var n;
          (n = c) != null || (c = f.id), f.init && p.push(qY("=", f.id, f.init));
          let h = Object.keys(mx(f, !1, !0, !0));
          for (let g of h)
            t(Vs(g), f.init != null);
        }
        if (u.parentPath.isFor({
          left: l
        }))
          u.replaceWith(c);
        else if (p.length === 0)
          u.remove();
        else {
          let f = p.length === 1 ? p[0] : bJ(p);
          u.parentPath.isForStatement({
            init: l
          }) ? u.replaceWith(f) : u.replaceWith(aJ(f));
        }
      }
    }
  };
  Zl.default = $r;
  $r.globals = Object.keys(LY.builtin);
  $r.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
  $r.prototype._renameFromMap = /* @__PURE__ */ i(function(t, r, n, s) {
    t[r] && (t[n] = s, t[r] = null);
  }, "_renameFromMap"), $r.prototype.traverse = function(e, t, r) {
    (0, FY.default)(e, t, this, r, this.path);
  }, $r.prototype._generateUid = /* @__PURE__ */ i(function(t, r) {
    let n = t;
    return r > 1 && (n += r), `_${n}`;
  }, "_generateUid"), $r.prototype.toArray = /* @__PURE__ */ i(function(t, r, n) {
    if (Us(t)) {
      let o = this.getBinding(t.name);
      if (o != null && o.constant && o.path.isGenericType("Array"))
        return t;
    }
    if (yx(t))
      return t;
    if (Us(t, {
      name: "arguments"
    }))
      return lx(em(em(em(Vs("Array"), Vs("prototype")), Vs("slice")), Vs("call")), [t]);
    let s, a = [t];
    return r === !0 ? s = "toConsumableArray" : typeof r == "number" ? (a.push(oJ(r)), s = "slicedToArray") : s = "toArray", n && (a.unshift(
    this.path.hub.addHelper(s)), s = "maybeArrayLike"), lx(this.path.hub.addHelper(s), a);
  }, "toArray"), $r.prototype.getAllBindingsOfKind = /* @__PURE__ */ i(function(...t) {
    let r = /* @__PURE__ */ Object.create(null);
    for (let n of t) {
      let s = this;
      do {
        for (let a of Object.keys(s.bindings)) {
          let o = s.bindings[a];
          o.kind === n && (r[a] = o);
        }
        s = s.parent;
      } while (s);
    }
    return r;
  }, "getAllBindingsOfKind"), Object.defineProperties($r.prototype, {
    parentBlock: {
      configurable: !0,
      enumerable: !0,
      get() {
        return this.path.parent;
      }
    },
    hub: {
      configurable: !0,
      enumerable: !0,
      get() {
        return this.path.hub;
      }
    }
  });
});

// ../node_modules/@jridgewell/set-array/dist/set-array.umd.js
var Tx = A((eu, Ex) => {
  (function(e, t) {
    typeof eu == "object" && typeof Ex < "u" ? t(eu) : typeof define == "function" && define.amd ? define(["exports"], t) : (e = typeof globalThis <
    "u" ? globalThis : e || self, t(e.setArray = {}));
  })(eu, function(e) {
    "use strict";
    class t {
      static {
        i(this, "SetArray");
      }
      constructor() {
        this._indexes = { __proto__: null }, this.array = [];
      }
    }
    function r(l) {
      return l;
    }
    i(r, "cast");
    function n(l, u) {
      return l._indexes[u];
    }
    i(n, "get");
    function s(l, u) {
      let c = n(l, u);
      if (c !== void 0)
        return c;
      let { array: p, _indexes: f } = l, h = p.push(u);
      return f[u] = h - 1;
    }
    i(s, "put");
    function a(l) {
      let { array: u, _indexes: c } = l;
      if (u.length === 0)
        return;
      let p = u.pop();
      c[p] = void 0;
    }
    i(a, "pop");
    function o(l, u) {
      let c = n(l, u);
      if (c === void 0)
        return;
      let { array: p, _indexes: f } = l;
      for (let h = c + 1; h < p.length; h++) {
        let g = p[h];
        p[h - 1] = g, f[g]--;
      }
      f[u] = void 0, p.pop();
    }
    i(o, "remove"), e.SetArray = t, e.get = n, e.pop = a, e.put = s, e.remove = o, Object.defineProperty(e, "__esModule", { value: !0 });
  });
});

// ../node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js
var rm = A((tu, Sx) => {
  (function(e, t) {
    typeof tu == "object" && typeof Sx < "u" ? t(tu) : typeof define == "function" && define.amd ? define(["exports"], t) : (e = typeof globalThis <
    "u" ? globalThis : e || self, t(e.sourcemapCodec = {}));
  })(tu, function(e) {
    "use strict";
    let n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = new Uint8Array(64), a = new Uint8Array(128);
    for (let W = 0; W < n.length; W++) {
      let q = n.charCodeAt(W);
      s[W] = q, a[q] = W;
    }
    function o(W, q) {
      let R = 0, K = 0, pe = 0;
      do {
        let Q = W.next();
        pe = a[Q], R |= (pe & 31) << K, K += 5;
      } while (pe & 32);
      let fe = R & 1;
      return R >>>= 1, fe && (R = -2147483648 | -R), q + R;
    }
    i(o, "decodeInteger");
    function l(W, q, R) {
      let K = q - R;
      K = K < 0 ? -K << 1 | 1 : K << 1;
      do {
        let pe = K & 31;
        K >>>= 5, K > 0 && (pe |= 32), W.write(s[pe]);
      } while (K > 0);
      return q;
    }
    i(l, "encodeInteger");
    function u(W, q) {
      return W.pos >= q ? !1 : W.peek() !== 44;
    }
    i(u, "hasMoreVlq");
    let c = 1024 * 16, p = typeof TextDecoder < "u" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer < "u" ? {
      decode(W) {
        return Buffer.from(W.buffer, W.byteOffset, W.byteLength).toString();
      }
    } : {
      decode(W) {
        let q = "";
        for (let R = 0; R < W.length; R++)
          q += String.fromCharCode(W[R]);
        return q;
      }
    };
    class f {
      static {
        i(this, "StringWriter");
      }
      constructor() {
        this.pos = 0, this.out = "", this.buffer = new Uint8Array(c);
      }
      write(q) {
        let { buffer: R } = this;
        R[this.pos++] = q, this.pos === c && (this.out += p.decode(R), this.pos = 0);
      }
      flush() {
        let { buffer: q, out: R, pos: K } = this;
        return K > 0 ? R + p.decode(q.subarray(0, K)) : R;
      }
    }
    class h {
      static {
        i(this, "StringReader");
      }
      constructor(q) {
        this.pos = 0, this.buffer = q;
      }
      next() {
        return this.buffer.charCodeAt(this.pos++);
      }
      peek() {
        return this.buffer.charCodeAt(this.pos);
      }
      indexOf(q) {
        let { buffer: R, pos: K } = this, pe = R.indexOf(q, K);
        return pe === -1 ? R.length : pe;
      }
    }
    let g = [];
    function P(W) {
      let { length: q } = W, R = new h(W), K = [], pe = [], fe = 0;
      for (; R.pos < q; R.pos++) {
        fe = o(R, fe);
        let Q = o(R, 0);
        if (!u(R, q)) {
          let we = pe.pop();
          we[2] = fe, we[3] = Q;
          continue;
        }
        let X = o(R, 0), Te = o(R, 0) & 1 ? [fe, Q, 0, 0, X, o(R, 0)] : [fe, Q, 0, 0, X], ve = g;
        if (u(R, q)) {
          ve = [];
          do {
            let we = o(R, 0);
            ve.push(we);
          } while (u(R, q));
        }
        Te.vars = ve, K.push(Te), pe.push(Te);
      }
      return K;
    }
    i(P, "decodeOriginalScopes");
    function d(W) {
      let q = new f();
      for (let R = 0; R < W.length; )
        R = y(W, R, q, [0]);
      return q.flush();
    }
    i(d, "encodeOriginalScopes");
    function y(W, q, R, K) {
      let pe = W[q], { 0: fe, 1: Q, 2: X, 3: se, 4: oe, vars: Te } = pe;
      q > 0 && R.write(44), K[0] = l(R, fe, K[0]), l(R, Q, 0), l(R, oe, 0);
      let ve = pe.length === 6 ? 1 : 0;
      l(R, ve, 0), pe.length === 6 && l(R, pe[5], 0);
      for (let we of Te)
        l(R, we, 0);
      for (q++; q < W.length; ) {
        let we = W[q], { 0: me, 1: Be } = we;
        if (me > X || me === X && Be >= se)
          break;
        q = y(W, q, R, K);
      }
      return R.write(44), K[0] = l(R, X, K[0]), l(R, se, 0), q;
    }
    i(y, "_encodeOriginalScopes");
    function E(W) {
      let { length: q } = W, R = new h(W), K = [], pe = [], fe = 0, Q = 0, X = 0, se = 0, oe = 0, Te = 0, ve = 0, we = 0;
      do {
        let me = R.indexOf(";"), Be = 0;
        for (; R.pos < me; R.pos++) {
          if (Be = o(R, Be), !u(R, me)) {
            let wt = pe.pop();
            wt[2] = fe, wt[3] = Be;
            continue;
          }
          let ht = o(R, 0), Ne = ht & 1, ke = ht & 2, pt = ht & 4, Ot = null, Xt = g, Nt;
          if (Ne) {
            let wt = o(R, Q);
            X = o(R, Q === wt ? X : 0), Q = wt, Nt = [fe, Be, 0, 0, wt, X];
          } else
            Nt = [fe, Be, 0, 0];
          if (Nt.isScope = !!pt, ke) {
            let wt = se, cr = oe;
            se = o(R, se);
            let tn = wt === se;
            oe = o(R, tn ? oe : 0), Te = o(R, tn && cr === oe ? Te : 0), Ot = [se, oe, Te];
          }
          if (Nt.callsite = Ot, u(R, me)) {
            Xt = [];
            do {
              ve = fe, we = Be;
              let wt = o(R, 0), cr;
              if (wt < -1) {
                cr = [[o(R, 0)]];
                for (let tn = -1; tn > wt; tn--) {
                  let En = ve;
                  ve = o(R, ve), we = o(R, ve === En ? we : 0);
                  let qr = o(R, 0);
                  cr.push([qr, ve, we]);
                }
              } else
                cr = [[wt]];
              Xt.push(cr);
            } while (u(R, me));
          }
          Nt.bindings = Xt, K.push(Nt), pe.push(Nt);
        }
        fe++, R.pos = me + 1;
      } while (R.pos < q);
      return K;
    }
    i(E, "decodeGeneratedRanges");
    function _(W) {
      if (W.length === 0)
        return "";
      let q = new f();
      for (let R = 0; R < W.length; )
        R = k(W, R, q, [0, 0, 0, 0, 0, 0, 0]);
      return q.flush();
    }
    i(_, "encodeGeneratedRanges");
    function k(W, q, R, K) {
      let pe = W[q], { 0: fe, 1: Q, 2: X, 3: se, isScope: oe, callsite: Te, bindings: ve } = pe;
      K[0] < fe ? (B(R, K[0], fe), K[0] = fe, K[1] = 0) : q > 0 && R.write(44), K[1] = l(R, pe[1], K[1]);
      let we = (pe.length === 6 ? 1 : 0) | (Te ? 2 : 0) | (oe ? 4 : 0);
      if (l(R, we, 0), pe.length === 6) {
        let { 4: me, 5: Be } = pe;
        me !== K[2] && (K[3] = 0), K[2] = l(R, me, K[2]), K[3] = l(R, Be, K[3]);
      }
      if (Te) {
        let { 0: me, 1: Be, 2: ht } = pe.callsite;
        me !== K[4] ? (K[5] = 0, K[6] = 0) : Be !== K[5] && (K[6] = 0), K[4] = l(R, me, K[4]), K[5] = l(R, Be, K[5]), K[6] = l(R, ht, K[6]);
      }
      if (ve)
        for (let me of ve) {
          me.length > 1 && l(R, -me.length, 0);
          let Be = me[0][0];
          l(R, Be, 0);
          let ht = fe, Ne = Q;
          for (let ke = 1; ke < me.length; ke++) {
            let pt = me[ke];
            ht = l(R, pt[1], ht), Ne = l(R, pt[2], Ne), l(R, pt[0], 0);
          }
        }
      for (q++; q < W.length; ) {
        let me = W[q], { 0: Be, 1: ht } = me;
        if (Be > X || Be === X && ht >= se)
          break;
        q = k(W, q, R, K);
      }
      return K[0] < X ? (B(R, K[0], X), K[0] = X, K[1] = 0) : R.write(44), K[1] = l(R, se, K[1]), q;
    }
    i(k, "_encodeGeneratedRanges");
    function B(W, q, R) {
      do
        W.write(59);
      while (++q < R);
    }
    i(B, "catchupLine");
    function L(W) {
      let { length: q } = W, R = new h(W), K = [], pe = 0, fe = 0, Q = 0, X = 0, se = 0;
      do {
        let oe = R.indexOf(";"), Te = [], ve = !0, we = 0;
        for (pe = 0; R.pos < oe; ) {
          let me;
          pe = o(R, pe), pe < we && (ve = !1), we = pe, u(R, oe) ? (fe = o(R, fe), Q = o(R, Q), X = o(R, X), u(R, oe) ? (se = o(R, se), me =
          [pe, fe, Q, X, se]) : me = [pe, fe, Q, X]) : me = [pe], Te.push(me), R.pos++;
        }
        ve || U(Te), K.push(Te), R.pos = oe + 1;
      } while (R.pos <= q);
      return K;
    }
    i(L, "decode");
    function U(W) {
      W.sort($);
    }
    i(U, "sort");
    function $(W, q) {
      return W[0] - q[0];
    }
    i($, "sortComparator");
    function ee(W) {
      let q = new f(), R = 0, K = 0, pe = 0, fe = 0;
      for (let Q = 0; Q < W.length; Q++) {
        let X = W[Q];
        if (Q > 0 && q.write(59), X.length === 0)
          continue;
        let se = 0;
        for (let oe = 0; oe < X.length; oe++) {
          let Te = X[oe];
          oe > 0 && q.write(44), se = l(q, Te[0], se), Te.length !== 1 && (R = l(q, Te[1], R), K = l(q, Te[2], K), pe = l(q, Te[3], pe), Te.
          length !== 4 && (fe = l(q, Te[4], fe)));
        }
      }
      return q.flush();
    }
    i(ee, "encode"), e.decode = L, e.decodeGeneratedRanges = E, e.decodeOriginalScopes = P, e.encode = ee, e.encodeGeneratedRanges = _, e.encodeOriginalScopes =
    d, Object.defineProperty(e, "__esModule", { value: !0 });
  });
});

// ../node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js
var xx = A((nm, sm) => {
  (function(e, t) {
    typeof nm == "object" && typeof sm < "u" ? sm.exports = t() : typeof define == "function" && define.amd ? define(t) : (e = typeof globalThis <
    "u" ? globalThis : e || self, e.resolveURI = t());
  })(nm, function() {
    "use strict";
    let e = /^[\w+.-]+:\/\//, t = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, r = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
    var n;
    (function(E) {
      E[E.Empty = 1] = "Empty", E[E.Hash = 2] = "Hash", E[E.Query = 3] = "Query", E[E.RelativePath = 4] = "RelativePath", E[E.AbsolutePath =
      5] = "AbsolutePath", E[E.SchemeRelative = 6] = "SchemeRelative", E[E.Absolute = 7] = "Absolute";
    })(n || (n = {}));
    function s(E) {
      return e.test(E);
    }
    i(s, "isAbsoluteUrl");
    function a(E) {
      return E.startsWith("//");
    }
    i(a, "isSchemeRelativeUrl");
    function o(E) {
      return E.startsWith("/");
    }
    i(o, "isAbsolutePath");
    function l(E) {
      return E.startsWith("file:");
    }
    i(l, "isFileUrl");
    function u(E) {
      return /^[.?#]/.test(E);
    }
    i(u, "isRelative");
    function c(E) {
      let _ = t.exec(E);
      return f(_[1], _[2] || "", _[3], _[4] || "", _[5] || "/", _[6] || "", _[7] || "");
    }
    i(c, "parseAbsoluteUrl");
    function p(E) {
      let _ = r.exec(E), k = _[2];
      return f("file:", "", _[1] || "", "", o(k) ? k : "/" + k, _[3] || "", _[4] || "");
    }
    i(p, "parseFileUrl");
    function f(E, _, k, B, L, U, $) {
      return {
        scheme: E,
        user: _,
        host: k,
        port: B,
        path: L,
        query: U,
        hash: $,
        type: n.Absolute
      };
    }
    i(f, "makeUrl");
    function h(E) {
      if (a(E)) {
        let k = c("http:" + E);
        return k.scheme = "", k.type = n.SchemeRelative, k;
      }
      if (o(E)) {
        let k = c("http://foo.com" + E);
        return k.scheme = "", k.host = "", k.type = n.AbsolutePath, k;
      }
      if (l(E))
        return p(E);
      if (s(E))
        return c(E);
      let _ = c("http://foo.com/" + E);
      return _.scheme = "", _.host = "", _.type = E ? E.startsWith("?") ? n.Query : E.startsWith("#") ? n.Hash : n.RelativePath : n.Empty, _;
    }
    i(h, "parseUrl");
    function g(E) {
      if (E.endsWith("/.."))
        return E;
      let _ = E.lastIndexOf("/");
      return E.slice(0, _ + 1);
    }
    i(g, "stripPathFilename");
    function P(E, _) {
      d(_, _.type), E.path === "/" ? E.path = _.path : E.path = g(_.path) + E.path;
    }
    i(P, "mergePaths");
    function d(E, _) {
      let k = _ <= n.RelativePath, B = E.path.split("/"), L = 1, U = 0, $ = !1;
      for (let W = 1; W < B.length; W++) {
        let q = B[W];
        if (!q) {
          $ = !0;
          continue;
        }
        if ($ = !1, q !== ".") {
          if (q === "..") {
            U ? ($ = !0, U--, L--) : k && (B[L++] = q);
            continue;
          }
          B[L++] = q, U++;
        }
      }
      let ee = "";
      for (let W = 1; W < L; W++)
        ee += "/" + B[W];
      (!ee || $ && !ee.endsWith("/..")) && (ee += "/"), E.path = ee;
    }
    i(d, "normalizePath");
    function y(E, _) {
      if (!E && !_)
        return "";
      let k = h(E), B = k.type;
      if (_ && B !== n.Absolute) {
        let U = h(_), $ = U.type;
        switch (B) {
          case n.Empty:
            k.hash = U.hash;
          // fall through
          case n.Hash:
            k.query = U.query;
          // fall through
          case n.Query:
          case n.RelativePath:
            P(k, U);
          // fall through
          case n.AbsolutePath:
            k.user = U.user, k.host = U.host, k.port = U.port;
          // fall through
          case n.SchemeRelative:
            k.scheme = U.scheme;
        }
        $ > B && (B = $);
      }
      d(k, B);
      let L = k.query + k.hash;
      switch (B) {
        // This is impossible, because of the empty checks at the start of the function.
        // case UrlType.Empty:
        case n.Hash:
        case n.Query:
          return L;
        case n.RelativePath: {
          let U = k.path.slice(1);
          return U ? u(_ || E) && !u(U) ? "./" + U + L : U + L : L || ".";
        }
        case n.AbsolutePath:
          return k.path + L;
        default:
          return k.scheme + "//" + k.user + k.host + k.port + k.path + L;
      }
    }
    return i(y, "resolve"), y;
  });
});

// ../node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js
var nu = A((ru, vx) => {
  (function(e, t) {
    typeof ru == "object" && typeof vx < "u" ? t(ru, rm(), xx()) : typeof define == "function" && define.amd ? define(["exports", "@jridgewe\
ll/sourcemap-codec", "@jridgewell/resolve-uri"], t) : (e = typeof globalThis < "u" ? globalThis : e || self, t(e.traceMapping = {}, e.sourcemapCodec,
    e.resolveURI));
  })(ru, function(e, t, r) {
    "use strict";
    function n(j, V) {
      return V && !V.endsWith("/") && (V += "/"), r(j, V);
    }
    i(n, "resolve");
    function s(j) {
      if (!j)
        return "";
      let V = j.lastIndexOf("/");
      return j.slice(0, V + 1);
    }
    i(s, "stripFilename");
    let a = 0, o = 1, l = 2, u = 3, c = 4, p = 1, f = 2;
    function h(j, V) {
      let Y = g(j, 0);
      if (Y === j.length)
        return j;
      V || (j = j.slice());
      for (let Z = Y; Z < j.length; Z = g(j, Z + 1))
        j[Z] = d(j[Z], V);
      return j;
    }
    i(h, "maybeSort");
    function g(j, V) {
      for (let Y = V; Y < j.length; Y++)
        if (!P(j[Y]))
          return Y;
      return j.length;
    }
    i(g, "nextUnsortedSegmentLine");
    function P(j) {
      for (let V = 1; V < j.length; V++)
        if (j[V][a] < j[V - 1][a])
          return !1;
      return !0;
    }
    i(P, "isSorted");
    function d(j, V) {
      return V || (j = j.slice()), j.sort(y);
    }
    i(d, "sortSegments");
    function y(j, V) {
      return j[a] - V[a];
    }
    i(y, "sortComparator");
    let E = !1;
    function _(j, V, Y, Z) {
      for (; Y <= Z; ) {
        let he = Y + (Z - Y >> 1), ce = j[he][a] - V;
        if (ce === 0)
          return E = !0, he;
        ce < 0 ? Y = he + 1 : Z = he - 1;
      }
      return E = !1, Y - 1;
    }
    i(_, "binarySearch");
    function k(j, V, Y) {
      for (let Z = Y + 1; Z < j.length && j[Z][a] === V; Y = Z++)
        ;
      return Y;
    }
    i(k, "upperBound");
    function B(j, V, Y) {
      for (let Z = Y - 1; Z >= 0 && j[Z][a] === V; Y = Z--)
        ;
      return Y;
    }
    i(B, "lowerBound");
    function L() {
      return {
        lastKey: -1,
        lastNeedle: -1,
        lastIndex: -1
      };
    }
    i(L, "memoizedState");
    function U(j, V, Y, Z) {
      let { lastKey: he, lastNeedle: ce, lastIndex: Ce } = Y, Fe = 0, _e = j.length - 1;
      if (Z === he) {
        if (V === ce)
          return E = Ce !== -1 && j[Ce][a] === V, Ce;
        V >= ce ? Fe = Ce === -1 ? 0 : Ce : _e = Ce;
      }
      return Y.lastKey = Z, Y.lastNeedle = V, Y.lastIndex = _(j, V, Fe, _e);
    }
    i(U, "memoizedBinarySearch");
    function $(j, V) {
      let Y = V.map(W);
      for (let Z = 0; Z < j.length; Z++) {
        let he = j[Z];
        for (let ce = 0; ce < he.length; ce++) {
          let Ce = he[ce];
          if (Ce.length === 1)
            continue;
          let Fe = Ce[o], _e = Ce[l], je = Ce[u], Ct = Y[Fe], ze = Ct[_e] || (Ct[_e] = []), $e = V[Fe], lt = k(ze, je, U(ze, je, $e, _e));
          $e.lastIndex = ++lt, ee(ze, lt, [je, Z, Ce[a]]);
        }
      }
      return Y;
    }
    i($, "buildBySources");
    function ee(j, V, Y) {
      for (let Z = j.length; Z > V; Z--)
        j[Z] = j[Z - 1];
      j[V] = Y;
    }
    i(ee, "insert");
    function W() {
      return { __proto__: null };
    }
    i(W, "buildNullArray");
    let q = /* @__PURE__ */ i(function(j, V) {
      let Y = R(j);
      if (!("sections" in Y))
        return new ve(Y, V);
      let Z = [], he = [], ce = [], Ce = [], Fe = [];
      K(Y, V, Z, he, ce, Ce, Fe, 0, 0, 1 / 0, 1 / 0);
      let _e = {
        version: 3,
        file: Y.file,
        names: Ce,
        sources: he,
        sourcesContent: ce,
        mappings: Z,
        ignoreList: Fe
      };
      return cr(_e);
    }, "AnyMap");
    function R(j) {
      return typeof j == "string" ? JSON.parse(j) : j;
    }
    i(R, "parse");
    function K(j, V, Y, Z, he, ce, Ce, Fe, _e, je, Ct) {
      let { sections: ze } = j;
      for (let $e = 0; $e < ze.length; $e++) {
        let { map: lt, offset: Tt } = ze[$e], Bt = je, nn = Ct;
        if ($e + 1 < ze.length) {
          let Jn = ze[$e + 1].offset;
          Bt = Math.min(je, Fe + Jn.line), Bt === je ? nn = Math.min(Ct, _e + Jn.column) : Bt < je && (nn = _e + Jn.column);
        }
        pe(lt, V, Y, Z, he, ce, Ce, Fe + Tt.line, _e + Tt.column, Bt, nn);
      }
    }
    i(K, "recurse");
    function pe(j, V, Y, Z, he, ce, Ce, Fe, _e, je, Ct) {
      let ze = R(j);
      if ("sections" in ze)
        return K(...arguments);
      let $e = new ve(ze, V), lt = Z.length, Tt = ce.length, Bt = Be($e), { resolvedSources: nn, sourcesContent: Jn, ignoreList: ma } = $e;
      if (fe(Z, nn), fe(ce, $e.names), Jn)
        fe(he, Jn);
      else
        for (let Qt = 0; Qt < nn.length; Qt++)
          he.push(null);
      if (ma)
        for (let Qt = 0; Qt < ma.length; Qt++)
          Ce.push(ma[Qt] + lt);
      for (let Qt = 0; Qt < Bt.length; Qt++) {
        let pi = Fe + Qt;
        if (pi > je)
          return;
        let ya = Q(Y, pi), hO = Qt === 0 ? _e : 0, S1 = Bt[Qt];
        for (let Mp = 0; Mp < S1.length; Mp++) {
          let Ds = S1[Mp], el = hO + Ds[a];
          if (pi === je && el >= Ct)
            return;
          if (Ds.length === 1) {
            ya.push([el]);
            continue;
          }
          let x1 = lt + Ds[o], v1 = Ds[l], P1 = Ds[u];
          ya.push(Ds.length === 4 ? [el, x1, v1, P1] : [el, x1, v1, P1, Tt + Ds[c]]);
        }
      }
    }
    i(pe, "addSection");
    function fe(j, V) {
      for (let Y = 0; Y < V.length; Y++)
        j.push(V[Y]);
    }
    i(fe, "append");
    function Q(j, V) {
      for (let Y = j.length; Y <= V; Y++)
        j[Y] = [];
      return j[V];
    }
    i(Q, "getLine");
    let X = "`line` must be greater than 0 (lines start at line 1)", se = "`column` must be greater than or equal to 0 (columns start at col\
umn 0)", oe = -1, Te = 1;
    class ve {
      static {
        i(this, "TraceMap");
      }
      constructor(V, Y) {
        let Z = typeof V == "string";
        if (!Z && V._decodedMemo)
          return V;
        let he = Z ? JSON.parse(V) : V, { version: ce, file: Ce, names: Fe, sourceRoot: _e, sources: je, sourcesContent: Ct } = he;
        this.version = ce, this.file = Ce, this.names = Fe || [], this.sourceRoot = _e, this.sources = je, this.sourcesContent = Ct, this.ignoreList =
        he.ignoreList || he.x_google_ignoreList || void 0;
        let ze = n(_e || "", s(Y));
        this.resolvedSources = je.map((lt) => n(lt || "", ze));
        let { mappings: $e } = he;
        typeof $e == "string" ? (this._encoded = $e, this._decoded = void 0) : (this._encoded = void 0, this._decoded = h($e, Z)), this._decodedMemo =
        L(), this._bySources = void 0, this._bySourceMemos = void 0;
      }
    }
    function we(j) {
      return j;
    }
    i(we, "cast");
    function me(j) {
      var V, Y;
      return (V = (Y = j)._encoded) !== null && V !== void 0 ? V : Y._encoded = t.encode(j._decoded);
    }
    i(me, "encodedMappings");
    function Be(j) {
      var V;
      return (V = j)._decoded || (V._decoded = t.decode(j._encoded));
    }
    i(Be, "decodedMappings");
    function ht(j, V, Y) {
      let Z = Be(j);
      if (V >= Z.length)
        return null;
      let he = Z[V], ce = Tn(he, j._decodedMemo, V, Y, Te);
      return ce === -1 ? null : he[ce];
    }
    i(ht, "traceSegment");
    function Ne(j, V) {
      let { line: Y, column: Z, bias: he } = V;
      if (Y--, Y < 0)
        throw new Error(X);
      if (Z < 0)
        throw new Error(se);
      let ce = Be(j);
      if (Y >= ce.length)
        return rn(null, null, null, null);
      let Ce = ce[Y], Fe = Tn(Ce, j._decodedMemo, Y, Z, he || Te);
      if (Fe === -1)
        return rn(null, null, null, null);
      let _e = Ce[Fe];
      if (_e.length === 1)
        return rn(null, null, null, null);
      let { names: je, resolvedSources: Ct } = j;
      return rn(Ct[_e[o]], _e[l] + 1, _e[u], _e.length === 5 ? je[_e[c]] : null);
    }
    i(Ne, "originalPositionFor");
    function ke(j, V) {
      let { source: Y, line: Z, column: he, bias: ce } = V;
      return ne(j, Y, Z, he, ce || Te, !1);
    }
    i(ke, "generatedPositionFor");
    function pt(j, V) {
      let { source: Y, line: Z, column: he, bias: ce } = V;
      return ne(j, Y, Z, he, ce || oe, !0);
    }
    i(pt, "allGeneratedPositionsFor");
    function Ot(j, V) {
      let Y = Be(j), { names: Z, resolvedSources: he } = j;
      for (let ce = 0; ce < Y.length; ce++) {
        let Ce = Y[ce];
        for (let Fe = 0; Fe < Ce.length; Fe++) {
          let _e = Ce[Fe], je = ce + 1, Ct = _e[0], ze = null, $e = null, lt = null, Tt = null;
          _e.length !== 1 && (ze = he[_e[1]], $e = _e[2] + 1, lt = _e[3]), _e.length === 5 && (Tt = Z[_e[4]]), V({
            generatedLine: je,
            generatedColumn: Ct,
            source: ze,
            originalLine: $e,
            originalColumn: lt,
            name: Tt
          });
        }
      }
    }
    i(Ot, "eachMapping");
    function Xt(j, V) {
      let { sources: Y, resolvedSources: Z } = j, he = Y.indexOf(V);
      return he === -1 && (he = Z.indexOf(V)), he;
    }
    i(Xt, "sourceIndex");
    function Nt(j, V) {
      let { sourcesContent: Y } = j;
      if (Y == null)
        return null;
      let Z = Xt(j, V);
      return Z === -1 ? null : Y[Z];
    }
    i(Nt, "sourceContentFor");
    function wt(j, V) {
      let { ignoreList: Y } = j;
      if (Y == null)
        return !1;
      let Z = Xt(j, V);
      return Z === -1 ? !1 : Y.includes(Z);
    }
    i(wt, "isIgnored");
    function cr(j, V) {
      let Y = new ve(qr(j, []), V);
      return Y._decoded = j.mappings, Y;
    }
    i(cr, "presortedDecodedMap");
    function tn(j) {
      return qr(j, Be(j));
    }
    i(tn, "decodedMap");
    function En(j) {
      return qr(j, me(j));
    }
    i(En, "encodedMap");
    function qr(j, V) {
      return {
        version: j.version,
        file: j.file,
        names: j.names,
        sourceRoot: j.sourceRoot,
        sources: j.sources,
        sourcesContent: j.sourcesContent,
        mappings: V,
        ignoreList: j.ignoreList || j.x_google_ignoreList
      };
    }
    i(qr, "clone");
    function rn(j, V, Y, Z) {
      return { source: j, line: V, column: Y, name: Z };
    }
    i(rn, "OMapping");
    function Yn(j, V) {
      return { line: j, column: V };
    }
    i(Yn, "GMapping");
    function Tn(j, V, Y, Z, he) {
      let ce = U(j, Z, V, Y);
      return E ? ce = (he === oe ? k : B)(j, Z, ce) : he === oe && ce++, ce === -1 || ce === j.length ? -1 : ce;
    }
    i(Tn, "traceSegmentInternal");
    function ue(j, V, Y, Z, he) {
      let ce = Tn(j, V, Y, Z, Te);
      if (!E && he === oe && ce++, ce === -1 || ce === j.length)
        return [];
      let Ce = E ? Z : j[ce][a];
      E || (ce = B(j, Ce, ce));
      let Fe = k(j, Ce, ce), _e = [];
      for (; ce <= Fe; ce++) {
        let je = j[ce];
        _e.push(Yn(je[p] + 1, je[f]));
      }
      return _e;
    }
    i(ue, "sliceGeneratedPositions");
    function ne(j, V, Y, Z, he, ce) {
      var Ce;
      if (Y--, Y < 0)
        throw new Error(X);
      if (Z < 0)
        throw new Error(se);
      let { sources: Fe, resolvedSources: _e } = j, je = Fe.indexOf(V);
      if (je === -1 && (je = _e.indexOf(V)), je === -1)
        return ce ? [] : Yn(null, null);
      let ze = ((Ce = j)._bySources || (Ce._bySources = $(Be(j), j._bySourceMemos = Fe.map(L))))[je][Y];
      if (ze == null)
        return ce ? [] : Yn(null, null);
      let $e = j._bySourceMemos[je];
      if (ce)
        return ue(ze, $e, Y, Z, he);
      let lt = Tn(ze, $e, Y, Z, he);
      if (lt === -1)
        return Yn(null, null);
      let Tt = ze[lt];
      return Yn(Tt[p] + 1, Tt[f]);
    }
    i(ne, "generatedPosition"), e.AnyMap = q, e.GREATEST_LOWER_BOUND = Te, e.LEAST_UPPER_BOUND = oe, e.TraceMap = ve, e.allGeneratedPositionsFor =
    pt, e.decodedMap = tn, e.decodedMappings = Be, e.eachMapping = Ot, e.encodedMap = En, e.encodedMappings = me, e.generatedPositionFor = ke,
    e.isIgnored = wt, e.originalPositionFor = Ne, e.presortedDecodedMap = cr, e.sourceContentFor = Nt, e.traceSegment = ht;
  });
});

// ../node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js
var im = A((su, Px) => {
  (function(e, t) {
    typeof su == "object" && typeof Px < "u" ? t(su, Tx(), rm(), nu()) : typeof define == "function" && define.amd ? define(["exports", "@jr\
idgewell/set-array", "@jridgewell/sourcemap-codec", "@jridgewell/trace-mapping"], t) : (e = typeof globalThis < "u" ? globalThis : e || self,
    t(e.genMapping = {}, e.setArray, e.sourcemapCodec, e.traceMapping));
  })(su, function(e, t, r, n) {
    "use strict";
    class p {
      static {
        i(this, "GenMapping");
      }
      constructor({ file: X, sourceRoot: se } = {}) {
        this._names = new t.SetArray(), this._sources = new t.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = X, this.
        sourceRoot = se, this._ignoreList = new t.SetArray();
      }
    }
    function f(Q) {
      return Q;
    }
    i(f, "cast");
    function h(Q, X, se, oe, Te, ve, we, me) {
      return U(!1, Q, X, se, oe, Te, ve, we, me);
    }
    i(h, "addSegment");
    function g(Q, X) {
      return fe(!1, Q, X);
    }
    i(g, "addMapping");
    let P = /* @__PURE__ */ i((Q, X, se, oe, Te, ve, we, me) => U(!0, Q, X, se, oe, Te, ve, we, me), "maybeAddSegment"), d = /* @__PURE__ */ i(
    (Q, X) => fe(!0, Q, X), "maybeAddMapping");
    function y(Q, X, se) {
      let { _sources: oe, _sourcesContent: Te } = Q, ve = t.put(oe, X);
      Te[ve] = se;
    }
    i(y, "setSourceContent");
    function E(Q, X, se = !0) {
      let { _sources: oe, _sourcesContent: Te, _ignoreList: ve } = Q, we = t.put(oe, X);
      we === Te.length && (Te[we] = null), se ? t.put(ve, we) : t.remove(ve, we);
    }
    i(E, "setIgnore");
    function _(Q) {
      let { _mappings: X, _sources: se, _sourcesContent: oe, _names: Te, _ignoreList: ve } = Q;
      return q(X), {
        version: 3,
        file: Q.file || void 0,
        names: Te.array,
        sourceRoot: Q.sourceRoot || void 0,
        sources: se.array,
        sourcesContent: oe,
        mappings: X,
        ignoreList: ve.array
      };
    }
    i(_, "toDecodedMap");
    function k(Q) {
      let X = _(Q);
      return Object.assign(Object.assign({}, X), { mappings: r.encode(X.mappings) });
    }
    i(k, "toEncodedMap");
    function B(Q) {
      let X = new n.TraceMap(Q), se = new p({ file: X.file, sourceRoot: X.sourceRoot });
      return R(se._names, X.names), R(se._sources, X.sources), se._sourcesContent = X.sourcesContent || X.sources.map(() => null), se._mappings =
      n.decodedMappings(X), X.ignoreList && R(se._ignoreList, X.ignoreList), se;
    }
    i(B, "fromMap");
    function L(Q) {
      let X = [], { _mappings: se, _sources: oe, _names: Te } = Q;
      for (let ve = 0; ve < se.length; ve++) {
        let we = se[ve];
        for (let me = 0; me < we.length; me++) {
          let Be = we[me], ht = { line: ve + 1, column: Be[0] }, Ne, ke, pt;
          Be.length !== 1 && (Ne = oe.array[Be[1]], ke = { line: Be[2] + 1, column: Be[3] }, Be.length === 5 && (pt = Te.array[Be[4]])), X.push(
          { generated: ht, source: Ne, original: ke, name: pt });
        }
      }
      return X;
    }
    i(L, "allMappings");
    function U(Q, X, se, oe, Te, ve, we, me, Be) {
      let { _mappings: ht, _sources: Ne, _sourcesContent: ke, _names: pt } = X, Ot = $(ht, se), Xt = ee(Ot, oe);
      if (!Te)
        return Q && K(Ot, Xt) ? void 0 : W(Ot, Xt, [oe]);
      let Nt = t.put(Ne, Te), wt = me ? t.put(pt, me) : -1;
      if (Nt === ke.length && (ke[Nt] = Be ?? null), !(Q && pe(Ot, Xt, Nt, ve, we, wt)))
        return W(Ot, Xt, me ? [oe, Nt, ve, we, wt] : [oe, Nt, ve, we]);
    }
    i(U, "addSegmentInternal");
    function $(Q, X) {
      for (let se = Q.length; se <= X; se++)
        Q[se] = [];
      return Q[X];
    }
    i($, "getLine");
    function ee(Q, X) {
      let se = Q.length;
      for (let oe = se - 1; oe >= 0; se = oe--) {
        let Te = Q[oe];
        if (X >= Te[0])
          break;
      }
      return se;
    }
    i(ee, "getColumnIndex");
    function W(Q, X, se) {
      for (let oe = Q.length; oe > X; oe--)
        Q[oe] = Q[oe - 1];
      Q[X] = se;
    }
    i(W, "insert");
    function q(Q) {
      let { length: X } = Q, se = X;
      for (let oe = se - 1; oe >= 0 && !(Q[oe].length > 0); se = oe, oe--)
        ;
      se < X && (Q.length = se);
    }
    i(q, "removeEmptyFinalLines");
    function R(Q, X) {
      for (let se = 0; se < X.length; se++)
        t.put(Q, X[se]);
    }
    i(R, "putAll");
    function K(Q, X) {
      return X === 0 ? !0 : Q[X - 1].length === 1;
    }
    i(K, "skipSourceless");
    function pe(Q, X, se, oe, Te, ve) {
      if (X === 0)
        return !1;
      let we = Q[X - 1];
      return we.length === 1 ? !1 : se === we[1] && oe === we[2] && Te === we[3] && ve === (we.length === 5 ? we[4] : -1);
    }
    i(pe, "skipSource");
    function fe(Q, X, se) {
      let { generated: oe, source: Te, original: ve, name: we, content: me } = se;
      return Te ? U(Q, X, oe.line - 1, oe.column, Te, ve.line - 1, ve.column, we, me) : U(Q, X, oe.line - 1, oe.column, null, null, null, null,
      null);
    }
    i(fe, "addMappingInternal"), e.GenMapping = p, e.addMapping = g, e.addSegment = h, e.allMappings = L, e.fromMap = B, e.maybeAddMapping =
    d, e.maybeAddSegment = P, e.setIgnore = E, e.setSourceContent = y, e.toDecodedMap = _, e.toEncodedMap = k, Object.defineProperty(e, "__e\
sModule", { value: !0 });
  });
});

// ../node_modules/@babel/generator/lib/source-map.js
var Ax = A((iu) => {
  "use strict";
  Object.defineProperty(iu, "__esModule", {
    value: !0
  });
  iu.default = void 0;
  var ss = im(), am = nu(), om = class {
    static {
      i(this, "SourceMap");
    }
    constructor(t, r) {
      var n;
      this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn =
      0, this._inputMap = void 0;
      let s = this._map = new ss.GenMapping({
        sourceRoot: t.sourceRoot
      });
      if (this._sourceFileName = (n = t.sourceFileName) == null ? void 0 : n.replace(/\\/g, "/"), this._rawMappings = void 0, t.inputSourceMap) {
        this._inputMap = new am.TraceMap(t.inputSourceMap);
        let o = this._inputMap.resolvedSources;
        if (o.length)
          for (let l = 0; l < o.length; l++) {
            var a;
            (0, ss.setSourceContent)(s, o[l], (a = this._inputMap.sourcesContent) == null ? void 0 : a[l]);
          }
      }
      if (typeof r == "string" && !t.inputSourceMap)
        (0, ss.setSourceContent)(s, this._sourceFileName, r);
      else if (typeof r == "object")
        for (let o of Object.keys(r))
          (0, ss.setSourceContent)(s, o.replace(/\\/g, "/"), r[o]);
    }
    get() {
      return (0, ss.toEncodedMap)(this._map);
    }
    getDecoded() {
      return (0, ss.toDecodedMap)(this._map);
    }
    getRawMappings() {
      return this._rawMappings || (this._rawMappings = (0, ss.allMappings)(this._map));
    }
    mark(t, r, n, s, a, o) {
      var l;
      this._rawMappings = void 0;
      let u;
      if (r != null)
        if (this._inputMap) {
          if (u = (0, am.originalPositionFor)(this._inputMap, {
            line: r,
            column: n
          }), !u.name && a) {
            let c = (0, am.originalPositionFor)(this._inputMap, a);
            c.name && (s = c.name);
          }
        } else
          u = {
            source: o?.replace(/\\/g, "/") || this._sourceFileName,
            line: r,
            column: n
          };
      (0, ss.maybeAddMapping)(this._map, {
        name: s,
        generated: t,
        source: (l = u) == null ? void 0 : l.source,
        original: u
      });
    }
  };
  iu.default = om;
});

// ../node_modules/@babel/generator/lib/buffer.js
var Cx = A((au) => {
  "use strict";
  Object.defineProperty(au, "__esModule", {
    value: !0
  });
  au.default = void 0;
  var lm = class {
    static {
      i(this, "Buffer");
    }
    constructor(t, r) {
      this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this.
      _canMarkIdName = !0, this._indentChar = "", this._fastIndentations = [], this._position = {
        line: 1,
        column: 0
      }, this._sourcePosition = {
        identifierName: void 0,
        identifierNamePos: void 0,
        line: void 0,
        column: void 0,
        filename: void 0
      }, this._map = t, this._indentChar = r;
      for (let n = 0; n < 64; n++)
        this._fastIndentations.push(r.repeat(n));
      this._allocQueue();
    }
    _allocQueue() {
      let t = this._queue;
      for (let r = 0; r < 16; r++)
        t.push({
          char: 0,
          repeat: 1,
          line: void 0,
          column: void 0,
          identifierName: void 0,
          identifierNamePos: void 0,
          filename: ""
        });
    }
    _pushQueue(t, r, n, s, a) {
      let o = this._queueCursor;
      o === this._queue.length && this._allocQueue();
      let l = this._queue[o];
      l.char = t, l.repeat = r, l.line = n, l.column = s, l.filename = a, this._queueCursor++;
    }
    _popQueue() {
      if (this._queueCursor === 0)
        throw new Error("Cannot pop from empty queue");
      return this._queue[--this._queueCursor];
    }
    get() {
      this._flush();
      let t = this._map, r = {
        code: (this._buf + this._str).trimRight(),
        decodedMap: t?.getDecoded(),
        get __mergedMap() {
          return this.map;
        },
        get map() {
          let n = t ? t.get() : null;
          return r.map = n, n;
        },
        set map(n) {
          Object.defineProperty(r, "map", {
            value: n,
            writable: !0
          });
        },
        get rawMappings() {
          let n = t?.getRawMappings();
          return r.rawMappings = n, n;
        },
        set rawMappings(n) {
          Object.defineProperty(r, "rawMappings", {
            value: n,
            writable: !0
          });
        }
      };
      return r;
    }
    append(t, r) {
      this._flush(), this._append(t, this._sourcePosition, r);
    }
    appendChar(t) {
      this._flush(), this._appendChar(t, 1, this._sourcePosition);
    }
    queue(t) {
      if (t === 10)
        for (; this._queueCursor !== 0; ) {
          let n = this._queue[this._queueCursor - 1].char;
          if (n !== 32 && n !== 9)
            break;
          this._queueCursor--;
        }
      let r = this._sourcePosition;
      this._pushQueue(t, 1, r.line, r.column, r.filename);
    }
    queueIndentation(t) {
      t !== 0 && this._pushQueue(-1, t, void 0, void 0, void 0);
    }
    _flush() {
      let t = this._queueCursor, r = this._queue;
      for (let n = 0; n < t; n++) {
        let s = r[n];
        this._appendChar(s.char, s.repeat, s);
      }
      this._queueCursor = 0;
    }
    _appendChar(t, r, n) {
      if (this._last = t, t === -1) {
        let s = this._fastIndentations[r];
        s !== void 0 ? this._str += s : this._str += r > 1 ? this._indentChar.repeat(r) : this._indentChar;
      } else
        this._str += r > 1 ? String.fromCharCode(t).repeat(r) : String.fromCharCode(t);
      t !== 10 ? (this._mark(n.line, n.column, n.identifierName, n.identifierNamePos, n.filename), this._position.column += r) : (this._position.
      line++, this._position.column = 0), this._canMarkIdName && (n.identifierName = void 0, n.identifierNamePos = void 0);
    }
    _append(t, r, n) {
      let s = t.length, a = this._position;
      if (this._last = t.charCodeAt(s - 1), ++this._appendCount > 4096 ? (+this._str, this._buf += this._str, this._str = t, this._appendCount =
      0) : this._str += t, !n && !this._map) {
        a.column += s;
        return;
      }
      let {
        column: o,
        identifierName: l,
        identifierNamePos: u,
        filename: c
      } = r, p = r.line;
      (l != null || u != null) && this._canMarkIdName && (r.identifierName = void 0, r.identifierNamePos = void 0);
      let f = t.indexOf(`
`), h = 0;
      for (f !== 0 && this._mark(p, o, l, u, c); f !== -1; )
        a.line++, a.column = 0, h = f + 1, h < s && p !== void 0 && this._mark(++p, 0, null, null, c), f = t.indexOf(`
`, h);
      a.column += s - h;
    }
    _mark(t, r, n, s, a) {
      var o;
      (o = this._map) == null || o.mark(this._position, t, r, n, s, a);
    }
    removeTrailingNewline() {
      let t = this._queueCursor;
      t !== 0 && this._queue[t - 1].char === 10 && this._queueCursor--;
    }
    removeLastSemicolon() {
      let t = this._queueCursor;
      t !== 0 && this._queue[t - 1].char === 59 && this._queueCursor--;
    }
    getLastChar() {
      let t = this._queueCursor;
      return t !== 0 ? this._queue[t - 1].char : this._last;
    }
    getNewlineCount() {
      let t = this._queueCursor, r = 0;
      if (t === 0) return this._last === 10 ? 1 : 0;
      for (let n = t - 1; n >= 0 && this._queue[n].char === 10; n--)
        r++;
      return r === t && this._last === 10 ? r + 1 : r;
    }
    endsWithCharAndNewline() {
      let t = this._queue, r = this._queueCursor;
      if (r !== 0)
        return t[r - 1].char !== 10 ? void 0 : r > 1 ? t[r - 2].char : this._last;
    }
    hasContent() {
      return this._queueCursor !== 0 || !!this._last;
    }
    exactSource(t, r) {
      if (!this._map) {
        r();
        return;
      }
      this.source("start", t);
      let n = t.identifierName, s = this._sourcePosition;
      n && (this._canMarkIdName = !1, s.identifierName = n), r(), n && (this._canMarkIdName = !0, s.identifierName = void 0, s.identifierNamePos =
      void 0), this.source("end", t);
    }
    source(t, r) {
      this._map && this._normalizePosition(t, r, 0);
    }
    sourceWithOffset(t, r, n) {
      this._map && this._normalizePosition(t, r, n);
    }
    _normalizePosition(t, r, n) {
      let s = r[t], a = this._sourcePosition;
      s && (a.line = s.line, a.column = Math.max(s.column + n, 0), a.filename = r.filename);
    }
    getCurrentColumn() {
      let t = this._queue, r = this._queueCursor, n = -1, s = 0;
      for (let a = 0; a < r; a++) {
        let o = t[a];
        o.char === 10 && (n = s), s += o.repeat;
      }
      return n === -1 ? this._position.column + s : s - 1 - n;
    }
    getCurrentLine() {
      let t = 0, r = this._queue;
      for (let n = 0; n < this._queueCursor; n++)
        r[n].char === 10 && t++;
      return this._position.line + t;
    }
  };
  au.default = lm;
});

// ../node_modules/@babel/generator/lib/node/whitespace.js
var Ox = A((lu) => {
  "use strict";
  Object.defineProperty(lu, "__esModule", {
    value: !0
  });
  lu.nodes = void 0;
  var TJ = Pe(), {
    FLIPPED_ALIAS_KEYS: SJ,
    isArrayExpression: xJ,
    isAssignmentExpression: wx,
    isBinary: Ix,
    isBlockStatement: vJ,
    isCallExpression: _x,
    isFunction: Ya,
    isIdentifier: ou,
    isLiteral: PJ,
    isMemberExpression: um,
    isObjectExpression: AJ,
    isOptionalCallExpression: CJ,
    isOptionalMemberExpression: DJ,
    isStringLiteral: wJ
  } = TJ;
  function Ii(e, t) {
    return e && (um(e) || DJ(e) ? (Ii(e.object, t), e.computed && Ii(e.property, t)) : Ix(e) || wx(e) ? (Ii(e.left, t), Ii(e.right, t)) : _x(
    e) || CJ(e) ? (t.hasCall = !0, Ii(e.callee, t)) : Ya(e) ? t.hasFunction = !0 : ou(e) && (t.hasHelper = t.hasHelper || e.callee && wn(e.callee))),
    t;
  }
  i(Ii, "crawlInternal");
  function Dx(e) {
    return Ii(e, {
      hasCall: !1,
      hasFunction: !1,
      hasHelper: !1
    });
  }
  i(Dx, "crawl");
  function wn(e) {
    return e ? um(e) ? wn(e.object) || wn(e.property) : ou(e) ? e.name === "require" || e.name.charCodeAt(0) === 95 : _x(e) ? wn(e.callee) :
    Ix(e) || wx(e) ? ou(e.left) && wn(e.left) || wn(e.right) : !1 : !1;
  }
  i(wn, "isHelper");
  function IJ(e) {
    return PJ(e) || AJ(e) || xJ(e) || ou(e) || um(e);
  }
  i(IJ, "isType");
  var $s = lu.nodes = {
    AssignmentExpression(e) {
      let t = Dx(e.right);
      if (t.hasCall && t.hasHelper || t.hasFunction)
        return t.hasFunction ? 3 : 2;
    },
    SwitchCase(e, t) {
      return (e.consequent.length || t.cases[0] === e ? 1 : 0) | (!e.consequent.length && t.cases[t.cases.length - 1] === e ? 2 : 0);
    },
    LogicalExpression(e) {
      if (Ya(e.left) || Ya(e.right))
        return 2;
    },
    Literal(e) {
      if (wJ(e) && e.value === "use strict")
        return 2;
    },
    CallExpression(e) {
      if (Ya(e.callee) || wn(e))
        return 3;
    },
    OptionalCallExpression(e) {
      if (Ya(e.callee))
        return 3;
    },
    VariableDeclaration(e) {
      for (let t = 0; t < e.declarations.length; t++) {
        let r = e.declarations[t], n = wn(r.id) && !IJ(r.init);
        if (!n && r.init) {
          let s = Dx(r.init);
          n = wn(r.init) && s.hasCall || s.hasFunction;
        }
        if (n)
          return 3;
      }
    },
    IfStatement(e) {
      if (vJ(e.consequent))
        return 3;
    }
  };
  $s.ObjectProperty = $s.ObjectTypeProperty = $s.ObjectMethod = function(e, t) {
    if (t.properties[0] === e)
      return 1;
  };
  $s.ObjectTypeCallProperty = function(e, t) {
    var r;
    if (t.callProperties[0] === e && !((r = t.properties) != null && r.length))
      return 1;
  };
  $s.ObjectTypeIndexer = function(e, t) {
    var r, n;
    if (t.indexers[0] === e && !((r = t.properties) != null && r.length) && !((n = t.callProperties) != null && n.length))
      return 1;
  };
  $s.ObjectTypeInternalSlot = function(e, t) {
    var r, n, s;
    if (t.internalSlots[0] === e && !((r = t.properties) != null && r.length) && !((n = t.callProperties) != null && n.length) && !((s = t.indexers) !=
    null && s.length))
      return 1;
  };
  [["Function", !0], ["Class", !0], ["Loop", !0], ["LabeledStatement", !0], ["SwitchStatement", !0], ["TryStatement", !0]].forEach(function([
  e, t]) {
    [e].concat(SJ[e] || []).forEach(function(r) {
      let n = t ? 3 : 0;
      $s[r] = () => n;
    });
  });
});

// ../node_modules/@babel/generator/lib/node/parentheses.js
var Rx = A((et) => {
  "use strict";
  Object.defineProperty(et, "__esModule", {
    value: !0
  });
  et.AssignmentExpression = nz;
  et.Binary = jx;
  et.BinaryExpression = XJ;
  et.ClassExpression = ez;
  et.ArrowFunctionExpression = et.ConditionalExpression = Mx;
  et.DoExpression = WJ;
  et.FunctionExpression = tz;
  et.FunctionTypeAnnotation = UJ;
  et.Identifier = iz;
  et.LogicalExpression = sz;
  et.NullableTypeAnnotation = qJ;
  et.ObjectExpression = $J;
  et.OptionalIndexedAccessType = GJ;
  et.OptionalCallExpression = et.OptionalMemberExpression = rz;
  et.SequenceExpression = QJ;
  et.TSSatisfiesExpression = et.TSAsExpression = HJ;
  et.TSInferType = JJ;
  et.TSInstantiationExpression = zJ;
  et.UnaryLike = et.TSTypeAssertion = Lx;
  et.TSIntersectionType = et.TSUnionType = YJ;
  et.IntersectionTypeAnnotation = et.UnionTypeAnnotation = KJ;
  et.UpdateExpression = VJ;
  et.AwaitExpression = et.YieldExpression = ZJ;
  var _J = Pe(), wr = is(), {
    isArrayTypeAnnotation: OJ,
    isBinaryExpression: NJ,
    isCallExpression: BJ,
    isForOfStatement: kJ,
    isIndexedAccessType: FJ,
    isMemberExpression: kx,
    isObjectPattern: jJ,
    isOptionalMemberExpression: LJ,
    isYieldExpression: MJ,
    isStatement: RJ
  } = _J, Nx = /* @__PURE__ */ new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!\
=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-",
  8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
  function Bx(e, t) {
    if (t === "BinaryExpression" || t === "LogicalExpression")
      return Nx.get(e.operator);
    if (t === "TSAsExpression" || t === "TSSatisfiesExpression")
      return Nx.get("in");
  }
  i(Bx, "getBinaryPrecedence");
  function cm(e) {
    return e === "TSAsExpression" || e === "TSSatisfiesExpression" || e === "TSTypeAssertion";
  }
  i(cm, "isTSTypeExpression");
  var uu = /* @__PURE__ */ i((e, t) => {
    let r = t.type;
    return (r === "ClassDeclaration" || r === "ClassExpression") && t.superClass === e;
  }, "isClassExtendsClause"), cu = /* @__PURE__ */ i((e, t) => {
    let r = t.type;
    return (r === "MemberExpression" || r === "OptionalMemberExpression") && t.object === e || (r === "CallExpression" || r === "OptionalCal\
lExpression" || r === "NewExpression") && t.callee === e || r === "TaggedTemplateExpression" && t.tag === e || r === "TSNonNullExpression";
  }, "hasPostfixPart");
  function qJ(e, t) {
    return OJ(t);
  }
  i(qJ, "NullableTypeAnnotation");
  function UJ(e, t, r) {
    let n = t.type;
    return n === "UnionTypeAnnotation" || n === "IntersectionTypeAnnotation" || n === "ArrayTypeAnnotation" || !!(r & wr.TokenContext.arrowFlowReturnType);
  }
  i(UJ, "FunctionTypeAnnotation");
  function VJ(e, t) {
    return cu(e, t) || uu(e, t);
  }
  i(VJ, "UpdateExpression");
  function Fx(e) {
    return !!(e & (wr.TokenContext.expressionStatement | wr.TokenContext.arrowBody));
  }
  i(Fx, "needsParenBeforeExpressionBrace");
  function $J(e, t, r) {
    return Fx(r);
  }
  i($J, "ObjectExpression");
  function WJ(e, t, r) {
    return !e.async && !!(r & wr.TokenContext.expressionStatement);
  }
  i(WJ, "DoExpression");
  function jx(e, t) {
    let r = t.type;
    if (e.type === "BinaryExpression" && e.operator === "**" && r === "BinaryExpression" && t.operator === "**")
      return t.left === e;
    if (uu(e, t) || cu(e, t) || r === "UnaryExpression" || r === "SpreadElement" || r === "AwaitExpression")
      return !0;
    let n = Bx(t, r);
    if (n != null) {
      let s = Bx(e, e.type);
      if (n === s && r === "BinaryExpression" && t.right === e || n > s)
        return !0;
    }
  }
  i(jx, "Binary");
  function KJ(e, t) {
    let r = t.type;
    return r === "ArrayTypeAnnotation" || r === "NullableTypeAnnotation" || r === "IntersectionTypeAnnotation" || r === "UnionTypeAnnotation";
  }
  i(KJ, "UnionTypeAnnotation");
  function GJ(e, t) {
    return FJ(t) && t.objectType === e;
  }
  i(GJ, "OptionalIndexedAccessType");
  function HJ(e, t) {
    return (t.type === "AssignmentExpression" || t.type === "AssignmentPattern") && t.left === e || t.type === "BinaryExpression" && (t.operator ===
    "|" || t.operator === "&") && e === t.left ? !0 : jx(e, t);
  }
  i(HJ, "TSAsExpression");
  function YJ(e, t) {
    let r = t.type;
    return r === "TSArrayType" || r === "TSOptionalType" || r === "TSIntersectionType" || r === "TSRestType";
  }
  i(YJ, "TSUnionType");
  function JJ(e, t) {
    let r = t.type;
    return r === "TSArrayType" || r === "TSOptionalType";
  }
  i(JJ, "TSInferType");
  function zJ(e, t) {
    let r = t.type;
    return (r === "CallExpression" || r === "OptionalCallExpression" || r === "NewExpression" || r === "TSInstantiationExpression") && !!t.typeParameters;
  }
  i(zJ, "TSInstantiationExpression");
  function XJ(e, t, r, n) {
    return e.operator === "in" && n;
  }
  i(XJ, "BinaryExpression");
  function QJ(e, t) {
    let r = t.type;
    return r === "SequenceExpression" || r === "ParenthesizedExpression" || r === "MemberExpression" && t.property === e || r === "OptionalM\
emberExpression" && t.property === e || r === "TemplateLiteral" ? !1 : r === "ClassDeclaration" ? !0 : r === "ForOfStatement" ? t.right === e :
    r === "ExportDefaultDeclaration" ? !0 : !RJ(t);
  }
  i(QJ, "SequenceExpression");
  function ZJ(e, t) {
    let r = t.type;
    return r === "BinaryExpression" || r === "LogicalExpression" || r === "UnaryExpression" || r === "SpreadElement" || cu(e, t) || r === "A\
waitExpression" && MJ(e) || r === "ConditionalExpression" && e === t.test || uu(e, t) || cm(r);
  }
  i(ZJ, "YieldExpression");
  function ez(e, t, r) {
    return !!(r & (wr.TokenContext.expressionStatement | wr.TokenContext.exportDefault));
  }
  i(ez, "ClassExpression");
  function Lx(e, t) {
    return cu(e, t) || NJ(t) && t.operator === "**" && t.left === e || uu(e, t);
  }
  i(Lx, "UnaryLike");
  function tz(e, t, r) {
    return !!(r & (wr.TokenContext.expressionStatement | wr.TokenContext.exportDefault));
  }
  i(tz, "FunctionExpression");
  function Mx(e, t) {
    let r = t.type;
    return r === "UnaryExpression" || r === "SpreadElement" || r === "BinaryExpression" || r === "LogicalExpression" || r === "ConditionalEx\
pression" && t.test === e || r === "AwaitExpression" || cm(r) ? !0 : Lx(e, t);
  }
  i(Mx, "ConditionalExpression");
  function rz(e, t) {
    return BJ(t) && t.callee === e || kx(t) && t.object === e;
  }
  i(rz, "OptionalMemberExpression");
  function nz(e, t, r) {
    return Fx(r) && jJ(e.left) ? !0 : Mx(e, t);
  }
  i(nz, "AssignmentExpression");
  function sz(e, t) {
    let r = t.type;
    if (cm(r)) return !0;
    if (r !== "LogicalExpression") return !1;
    switch (e.operator) {
      case "||":
        return t.operator === "??" || t.operator === "&&";
      case "&&":
        return t.operator === "??";
      case "??":
        return t.operator !== "??";
    }
  }
  i(sz, "LogicalExpression");
  function iz(e, t, r, n, s) {
    var a;
    let o = t.type;
    if ((a = e.extra) != null && a.parenthesized && o === "AssignmentExpression" && t.left === e) {
      let l = t.right.type;
      if ((l === "FunctionExpression" || l === "ClassExpression") && t.right.id == null)
        return !0;
    }
    return s && s(e) !== e.name ? !1 : e.name === "let" ? (kx(t, {
      object: e,
      computed: !0
    }) || LJ(t, {
      object: e,
      computed: !0,
      optional: !1
    })) && r & (wr.TokenContext.expressionStatement | wr.TokenContext.forHead | wr.TokenContext.forInHead) ? !0 : !!(r & wr.TokenContext.forOfHead) :
    e.name === "async" && kJ(t, {
      left: e,
      await: !1
    });
  }
  i(iz, "Identifier");
});

// ../node_modules/@babel/generator/lib/node/index.js
var is = A((In) => {
  "use strict";
  Object.defineProperty(In, "__esModule", {
    value: !0
  });
  In.TokenContext = void 0;
  In.isLastChild = Sz;
  In.needsParens = Tz;
  In.needsWhitespace = fm;
  In.needsWhitespaceAfter = Ez;
  In.needsWhitespaceBefore = bz;
  var az = Ox(), oz = Rx(), lz = Pe(), {
    FLIPPED_ALIAS_KEYS: uz,
    VISITOR_KEYS: cz,
    isCallExpression: qx,
    isDecorator: pz,
    isExpressionStatement: fz,
    isMemberExpression: dz,
    isNewExpression: hz,
    isParenthesizedExpression: mz
  } = lz, Yve = In.TokenContext = {
    expressionStatement: 1,
    arrowBody: 2,
    exportDefault: 4,
    forHead: 8,
    forInHead: 16,
    forOfHead: 32,
    arrowFlowReturnType: 64
  };
  function Ux(e) {
    let t = /* @__PURE__ */ new Map();
    function r(n, s) {
      let a = t.get(n);
      t.set(n, a ? function(o, l, u, c, p) {
        var f;
        return (f = a(o, l, u, c, p)) != null ? f : s(o, l, u, c, p);
      } : s);
    }
    i(r, "add");
    for (let n of Object.keys(e)) {
      let s = uz[n];
      if (s)
        for (let a of s)
          r(a, e[n]);
      else
        r(n, e[n]);
    }
    return t;
  }
  i(Ux, "expandAliases");
  var yz = Ux(oz), gz = Ux(az.nodes);
  function Vx(e) {
    return qx(e) ? !0 : dz(e) && Vx(e.object);
  }
  i(Vx, "isOrHasCallExpression");
  function fm(e, t, r) {
    var n;
    if (!e) return !1;
    fz(e) && (e = e.expression);
    let s = (n = gz.get(e.type)) == null ? void 0 : n(e, t);
    return typeof s == "number" ? (s & r) !== 0 : !1;
  }
  i(fm, "needsWhitespace");
  function bz(e, t) {
    return fm(e, t, 1);
  }
  i(bz, "needsWhitespaceBefore");
  function Ez(e, t) {
    return fm(e, t, 2);
  }
  i(Ez, "needsWhitespaceAfter");
  function Tz(e, t, r, n, s) {
    var a;
    return t ? hz(t) && t.callee === e && Vx(e) ? !0 : pz(t) ? !pm(e) && !(qx(e) && pm(e.callee)) && !mz(e) : (a = yz.get(e.type)) == null ?
    void 0 : a(e, t, r, n, s) : !1;
  }
  i(Tz, "needsParens");
  function pm(e) {
    switch (e.type) {
      case "Identifier":
        return !0;
      case "MemberExpression":
        return !e.computed && e.property.type === "Identifier" && pm(e.object);
      default:
        return !1;
    }
  }
  i(pm, "isDecoratorMemberExpression");
  function Sz(e, t) {
    let r = cz[e.type];
    for (let n = r.length - 1; n >= 0; n--) {
      let s = e[r[n]];
      if (s === t)
        return !0;
      if (Array.isArray(s)) {
        let a = s.length - 1;
        for (; a >= 0 && s[a] === null; ) a--;
        return a >= 0 && s[a] === t;
      } else if (s)
        return !1;
    }
    return !1;
  }
  i(Sz, "isLastChild");
});

// ../node_modules/@babel/generator/lib/token-map.js
var $x = A((pu) => {
  "use strict";
  Object.defineProperty(pu, "__esModule", {
    value: !0
  });
  pu.TokenMap = void 0;
  var xz = Pe(), {
    traverseFast: vz,
    VISITOR_KEYS: Pz
  } = xz, dm = class {
    static {
      i(this, "TokenMap");
    }
    constructor(t, r, n) {
      this._tokens = void 0, this._source = void 0, this._nodesToTokenIndexes = /* @__PURE__ */ new Map(), this._nodesOccurrencesCountCache =
      /* @__PURE__ */ new Map(), this._tokensCache = /* @__PURE__ */ new Map(), this._tokens = r, this._source = n, vz(t, (s) => {
        let a = this._getTokensIndexesOfNode(s);
        a.length > 0 && this._nodesToTokenIndexes.set(s, a);
      }), this._tokensCache = null;
    }
    has(t) {
      return this._nodesToTokenIndexes.has(t);
    }
    getIndexes(t) {
      return this._nodesToTokenIndexes.get(t);
    }
    find(t, r) {
      let n = this._nodesToTokenIndexes.get(t);
      if (n)
        for (let s = 0; s < n.length; s++) {
          let a = n[s], o = this._tokens[a];
          if (r(o, a)) return o;
        }
      return null;
    }
    findLastIndex(t, r) {
      let n = this._nodesToTokenIndexes.get(t);
      if (n)
        for (let s = n.length - 1; s >= 0; s--) {
          let a = n[s], o = this._tokens[a];
          if (r(o, a)) return a;
        }
      return -1;
    }
    findMatching(t, r, n = 0) {
      let s = this._nodesToTokenIndexes.get(t);
      if (s) {
        let a = 0, o = n;
        if (o > 1) {
          let l = this._nodesOccurrencesCountCache.get(t);
          l && l.test === r && l.count < o && (a = l.i + 1, n -= l.count + 1);
        }
        for (; a < s.length; a++) {
          let l = this._tokens[s[a]];
          if (this.matchesOriginal(l, r)) {
            if (n === 0)
              return o > 0 && this._nodesOccurrencesCountCache.set(t, {
                test: r,
                count: o,
                i: a
              }), l;
            n--;
          }
        }
      }
      return null;
    }
    matchesOriginal(t, r) {
      return t.end - t.start !== r.length ? !1 : t.value != null ? t.value === r : this._source.startsWith(r, t.start);
    }
    startMatches(t, r) {
      let n = this._nodesToTokenIndexes.get(t);
      if (!n) return !1;
      let s = this._tokens[n[0]];
      return s.start !== t.start ? !1 : this.matchesOriginal(s, r);
    }
    endMatches(t, r) {
      let n = this._nodesToTokenIndexes.get(t);
      if (!n) return !1;
      let s = this._tokens[n[n.length - 1]];
      return s.end !== t.end ? !1 : this.matchesOriginal(s, r);
    }
    _getTokensIndexesOfNode(t) {
      if (t.start == null || t.end == null) return [];
      let {
        first: r,
        last: n
      } = this._findTokensOfNode(t, 0, this._tokens.length - 1), s = r, a = Az(t);
      (t.type === "ExportNamedDeclaration" || t.type === "ExportDefaultDeclaration") && t.declaration && t.declaration.type === "ClassDeclar\
ation" && a.next();
      let o = [];
      for (let l of a) {
        if (l == null || l.start == null || l.end == null) continue;
        let u = this._findTokensOfNode(l, s, n), c = u.first;
        for (let p = s; p < c; p++) o.push(p);
        s = u.last + 1;
      }
      for (let l = s; l <= n; l++) o.push(l);
      return o;
    }
    _findTokensOfNode(t, r, n) {
      let s = this._tokensCache.get(t);
      if (s) return s;
      let a = this._findFirstTokenOfNode(t.start, r, n), o = this._findLastTokenOfNode(t.end, a, n);
      return this._tokensCache.set(t, {
        first: a,
        last: o
      }), {
        first: a,
        last: o
      };
    }
    _findFirstTokenOfNode(t, r, n) {
      for (; r <= n; ) {
        let s = n + r >> 1;
        if (t < this._tokens[s].start)
          n = s - 1;
        else if (t > this._tokens[s].start)
          r = s + 1;
        else
          return s;
      }
      return r;
    }
    _findLastTokenOfNode(t, r, n) {
      for (; r <= n; ) {
        let s = n + r >> 1;
        if (t < this._tokens[s].end)
          n = s - 1;
        else if (t > this._tokens[s].end)
          r = s + 1;
        else
          return s;
      }
      return n;
    }
  };
  pu.TokenMap = dm;
  function* Az(e) {
    if (e.type === "TemplateLiteral") {
      yield e.quasis[0];
      for (let r = 1; r < e.quasis.length; r++)
        yield e.expressions[r - 1], yield e.quasis[r];
      return;
    }
    let t = Pz[e.type];
    for (let r of t) {
      let n = e[r];
      n && (Array.isArray(n) ? yield* n : yield n);
    }
  }
  i(Az, "childrenIterator");
});

// ../node_modules/@babel/generator/lib/generators/template-literals.js
var Wx = A((Ja) => {
  "use strict";
  Object.defineProperty(Ja, "__esModule", {
    value: !0
  });
  Ja.TaggedTemplateExpression = Cz;
  Ja.TemplateElement = Dz;
  Ja.TemplateLiteral = wz;
  function Cz(e) {
    this.print(e.tag), this.print(e.typeParameters), this.print(e.quasi);
  }
  i(Cz, "TaggedTemplateExpression");
  function Dz() {
    throw new Error("TemplateElement printing is handled in TemplateLiteral");
  }
  i(Dz, "TemplateElement");
  function wz(e) {
    let t = e.quasis, r = "`";
    for (let n = 0; n < t.length; n++)
      if (r += t[n].value.raw, n + 1 < t.length && (this.token(r + "${", !0), this.print(e.expressions[n]), r = "}", this.tokenMap)) {
        let s = this.tokenMap.findMatching(e, "}", n);
        s && this._catchUpTo(s.loc.start);
      }
    this.token(r + "`", !0);
  }
  i(wz, "TemplateLiteral");
});

// ../node_modules/@babel/generator/lib/generators/expressions.js
var Gx = A((nt) => {
  "use strict";
  Object.defineProperty(nt, "__esModule", {
    value: !0
  });
  nt.LogicalExpression = nt.BinaryExpression = nt.AssignmentExpression = eX;
  nt.AssignmentPattern = Zz;
  nt.AwaitExpression = Jz;
  nt.BindExpression = tX;
  nt.CallExpression = Hz;
  nt.ConditionalExpression = Mz;
  nt.Decorator = Wz;
  nt.DoExpression = Fz;
  nt.EmptyStatement = Xz;
  nt.ExpressionStatement = Qz;
  nt.Import = Yz;
  nt.MemberExpression = rX;
  nt.MetaProperty = nX;
  nt.ModuleExpression = aX;
  nt.NewExpression = Rz;
  nt.OptionalCallExpression = Gz;
  nt.OptionalMemberExpression = Kz;
  nt.ParenthesizedExpression = jz;
  nt.PrivateName = sX;
  nt.SequenceExpression = qz;
  nt.Super = Vz;
  nt.ThisExpression = Uz;
  nt.UnaryExpression = kz;
  nt.UpdateExpression = Lz;
  nt.V8IntrinsicIdentifier = iX;
  nt.YieldExpression = zz;
  nt._shouldPrintDecoratorsBeforeExport = $z;
  var Iz = Pe(), _z = is(), {
    isCallExpression: Oz,
    isLiteral: Kx,
    isMemberExpression: hm,
    isNewExpression: Nz,
    isPattern: Bz
  } = Iz;
  function kz(e) {
    let {
      operator: t
    } = e;
    t === "void" || t === "delete" || t === "typeof" || t === "throw" ? (this.word(t), this.space()) : this.token(t), this.print(e.argument);
  }
  i(kz, "UnaryExpression");
  function Fz(e) {
    e.async && (this.word("async", !0), this.space()), this.word("do"), this.space(), this.print(e.body);
  }
  i(Fz, "DoExpression");
  function jz(e) {
    this.tokenChar(40);
    let t = this.enterDelimited();
    this.print(e.expression), t(), this.rightParens(e);
  }
  i(jz, "ParenthesizedExpression");
  function Lz(e) {
    e.prefix ? (this.token(e.operator), this.print(e.argument)) : (this.print(e.argument, !0), this.token(e.operator));
  }
  i(Lz, "UpdateExpression");
  function Mz(e) {
    this.print(e.test), this.space(), this.tokenChar(63), this.space(), this.print(e.consequent), this.space(), this.tokenChar(58), this.space(),
    this.print(e.alternate);
  }
  i(Mz, "ConditionalExpression");
  function Rz(e, t) {
    if (this.word("new"), this.space(), this.print(e.callee), this.format.minified && e.arguments.length === 0 && !e.optional && !Oz(t, {
      callee: e
    }) && !hm(t) && !Nz(t) || (this.print(e.typeArguments), this.print(e.typeParameters), e.optional && this.token("?."), e.arguments.length ===
    0 && this.tokenMap && !this.tokenMap.endMatches(e, ")")))
      return;
    this.tokenChar(40);
    let r = this.enterDelimited();
    this.printList(e.arguments, {
      printTrailingSeparator: this.shouldPrintTrailingComma(")")
    }), r(), this.rightParens(e);
  }
  i(Rz, "NewExpression");
  function qz(e) {
    this.printList(e.expressions);
  }
  i(qz, "SequenceExpression");
  function Uz() {
    this.word("this");
  }
  i(Uz, "ThisExpression");
  function Vz() {
    this.word("super");
  }
  i(Vz, "Super");
  function $z(e) {
    return typeof this.format.decoratorsBeforeExport == "boolean" ? this.format.decoratorsBeforeExport : typeof e.start == "number" && e.start ===
    e.declaration.start;
  }
  i($z, "_shouldPrintDecoratorsBeforeExport");
  function Wz(e) {
    this.tokenChar(64), this.print(e.expression), this.newline();
  }
  i(Wz, "Decorator");
  function Kz(e) {
    let {
      computed: t
    } = e, {
      optional: r,
      property: n
    } = e;
    if (this.print(e.object), !t && hm(n))
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    Kx(n) && typeof n.value == "number" && (t = !0), r && this.token("?."), t ? (this.tokenChar(91), this.print(n), this.tokenChar(93)) : (r ||
    this.tokenChar(46), this.print(n));
  }
  i(Kz, "OptionalMemberExpression");
  function Gz(e) {
    this.print(e.callee), this.print(e.typeParameters), e.optional && this.token("?."), this.print(e.typeArguments), this.tokenChar(40);
    let t = this.enterDelimited();
    this.printList(e.arguments), t(), this.rightParens(e);
  }
  i(Gz, "OptionalCallExpression");
  function Hz(e) {
    this.print(e.callee), this.print(e.typeArguments), this.print(e.typeParameters), this.tokenChar(40);
    let t = this.enterDelimited();
    this.printList(e.arguments, {
      printTrailingSeparator: this.shouldPrintTrailingComma(")")
    }), t(), this.rightParens(e);
  }
  i(Hz, "CallExpression");
  function Yz() {
    this.word("import");
  }
  i(Yz, "Import");
  function Jz(e) {
    this.word("await"), e.argument && (this.space(), this.printTerminatorless(e.argument));
  }
  i(Jz, "AwaitExpression");
  function zz(e) {
    this.word("yield", !0), e.delegate ? (this.tokenChar(42), e.argument && (this.space(), this.print(e.argument))) : e.argument && (this.space(),
    this.printTerminatorless(e.argument));
  }
  i(zz, "YieldExpression");
  function Xz() {
    this.semicolon(!0);
  }
  i(Xz, "EmptyStatement");
  function Qz(e) {
    this.tokenContext |= _z.TokenContext.expressionStatement, this.print(e.expression), this.semicolon();
  }
  i(Qz, "ExpressionStatement");
  function Zz(e) {
    this.print(e.left), (e.left.type === "Identifier" || Bz(e.left)) && (e.left.optional && this.tokenChar(63), this.print(e.left.typeAnnotation)),
    this.space(), this.tokenChar(61), this.space(), this.print(e.right);
  }
  i(Zz, "AssignmentPattern");
  function eX(e) {
    this.print(e.left), this.space(), e.operator === "in" || e.operator === "instanceof" ? this.word(e.operator) : (this.token(e.operator), this.
    _endsWithDiv = e.operator === "/"), this.space(), this.print(e.right);
  }
  i(eX, "AssignmentExpression");
  function tX(e) {
    this.print(e.object), this.token("::"), this.print(e.callee);
  }
  i(tX, "BindExpression");
  function rX(e) {
    if (this.print(e.object), !e.computed && hm(e.property))
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    let t = e.computed;
    if (Kx(e.property) && typeof e.property.value == "number" && (t = !0), t) {
      let r = this.enterDelimited();
      this.tokenChar(91), this.print(e.property), this.tokenChar(93), r();
    } else
      this.tokenChar(46), this.print(e.property);
  }
  i(rX, "MemberExpression");
  function nX(e) {
    this.print(e.meta), this.tokenChar(46), this.print(e.property);
  }
  i(nX, "MetaProperty");
  function sX(e) {
    this.tokenChar(35), this.print(e.id);
  }
  i(sX, "PrivateName");
  function iX(e) {
    this.tokenChar(37), this.word(e.name);
  }
  i(iX, "V8IntrinsicIdentifier");
  function aX(e) {
    this.word("module", !0), this.space(), this.tokenChar(123), this.indent();
    let {
      body: t
    } = e;
    (t.body.length || t.directives.length) && this.newline(), this.print(t), this.dedent(), this.rightBrace(e);
  }
  i(aX, "ModuleExpression");
});

// ../node_modules/@babel/generator/lib/generators/statements.js
var zx = A((gt) => {
  "use strict";
  Object.defineProperty(gt, "__esModule", {
    value: !0
  });
  gt.BreakStatement = yX;
  gt.CatchClause = xX;
  gt.ContinueStatement = gX;
  gt.DebuggerStatement = AX;
  gt.DoWhileStatement = mX;
  gt.ForOfStatement = gt.ForInStatement = void 0;
  gt.ForStatement = dX;
  gt.IfStatement = fX;
  gt.LabeledStatement = TX;
  gt.ReturnStatement = bX;
  gt.SwitchCase = PX;
  gt.SwitchStatement = vX;
  gt.ThrowStatement = EX;
  gt.TryStatement = SX;
  gt.VariableDeclaration = CX;
  gt.VariableDeclarator = DX;
  gt.WhileStatement = hX;
  gt.WithStatement = pX;
  var oX = Pe(), mm = is(), {
    isFor: Hx,
    isForStatement: lX,
    isIfStatement: uX,
    isStatement: cX
  } = oX;
  function pX(e) {
    this.word("with"), this.space(), this.tokenChar(40), this.print(e.object), this.tokenChar(41), this.printBlock(e);
  }
  i(pX, "WithStatement");
  function fX(e) {
    this.word("if"), this.space(), this.tokenChar(40), this.print(e.test), this.tokenChar(41), this.space();
    let t = e.alternate && uX(Yx(e.consequent));
    t && (this.tokenChar(123), this.newline(), this.indent()), this.printAndIndentOnComments(e.consequent), t && (this.dedent(), this.newline(),
    this.tokenChar(125)), e.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(
    e.alternate));
  }
  i(fX, "IfStatement");
  function Yx(e) {
    let {
      body: t
    } = e;
    return cX(t) === !1 ? e : Yx(t);
  }
  i(Yx, "getLastStatement");
  function dX(e) {
    this.word("for"), this.space(), this.tokenChar(40);
    {
      let t = this.enterForStatementInit();
      this.tokenContext |= mm.TokenContext.forHead, this.print(e.init), t();
    }
    this.tokenChar(59), e.test && (this.space(), this.print(e.test)), this.token(";", !1, 1), e.update && (this.space(), this.print(e.update)),
    this.tokenChar(41), this.printBlock(e);
  }
  i(dX, "ForStatement");
  function hX(e) {
    this.word("while"), this.space(), this.tokenChar(40), this.print(e.test), this.tokenChar(41), this.printBlock(e);
  }
  i(hX, "WhileStatement");
  function Jx(e) {
    this.word("for"), this.space();
    let t = e.type === "ForOfStatement";
    t && e.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40);
    {
      let r = t ? null : this.enterForStatementInit();
      this.tokenContext |= t ? mm.TokenContext.forOfHead : mm.TokenContext.forInHead, this.print(e.left), r?.();
    }
    this.space(), this.word(t ? "of" : "in"), this.space(), this.print(e.right), this.tokenChar(41), this.printBlock(e);
  }
  i(Jx, "ForXStatement");
  var nPe = gt.ForInStatement = Jx, sPe = gt.ForOfStatement = Jx;
  function mX(e) {
    this.word("do"), this.space(), this.print(e.body), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(e.test),
    this.tokenChar(41), this.semicolon();
  }
  i(mX, "DoWhileStatement");
  function fu(e, t) {
    t && (e.space(), e.printTerminatorless(t)), e.semicolon();
  }
  i(fu, "printStatementAfterKeyword");
  function yX(e) {
    this.word("break"), fu(this, e.label);
  }
  i(yX, "BreakStatement");
  function gX(e) {
    this.word("continue"), fu(this, e.label);
  }
  i(gX, "ContinueStatement");
  function bX(e) {
    this.word("return"), fu(this, e.argument);
  }
  i(bX, "ReturnStatement");
  function EX(e) {
    this.word("throw"), fu(this, e.argument);
  }
  i(EX, "ThrowStatement");
  function TX(e) {
    this.print(e.label), this.tokenChar(58), this.space(), this.print(e.body);
  }
  i(TX, "LabeledStatement");
  function SX(e) {
    this.word("try"), this.space(), this.print(e.block), this.space(), e.handlers ? this.print(e.handlers[0]) : this.print(e.handler), e.finalizer &&
    (this.space(), this.word("finally"), this.space(), this.print(e.finalizer));
  }
  i(SX, "TryStatement");
  function xX(e) {
    this.word("catch"), this.space(), e.param && (this.tokenChar(40), this.print(e.param), this.print(e.param.typeAnnotation), this.tokenChar(
    41), this.space()), this.print(e.body);
  }
  i(xX, "CatchClause");
  function vX(e) {
    this.word("switch"), this.space(), this.tokenChar(40), this.print(e.discriminant), this.tokenChar(41), this.space(), this.tokenChar(123),
    this.printSequence(e.cases, {
      indent: !0,
      addNewlines(t, r) {
        if (!t && e.cases[e.cases.length - 1] === r) return -1;
      }
    }), this.rightBrace(e);
  }
  i(vX, "SwitchStatement");
  function PX(e) {
    e.test ? (this.word("case"), this.space(), this.print(e.test), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58)), e.consequent.
    length && (this.newline(), this.printSequence(e.consequent, {
      indent: !0
    }));
  }
  i(PX, "SwitchCase");
  function AX() {
    this.word("debugger"), this.semicolon();
  }
  i(AX, "DebuggerStatement");
  function CX(e, t) {
    e.declare && (this.word("declare"), this.space());
    let {
      kind: r
    } = e;
    r === "await using" ? (this.word("await"), this.space(), this.word("using", !0)) : this.word(r, r === "using"), this.space();
    let n = !1;
    if (!Hx(t))
      for (let s of e.declarations)
        s.init && (n = !0);
    if (this.printList(e.declarations, {
      separator: n ? function(s) {
        this.token(",", !1, s), this.newline();
      } : void 0,
      indent: e.declarations.length > 1
    }), Hx(t)) {
      if (lX(t)) {
        if (t.init === e) return;
      } else if (t.left === e) return;
    }
    this.semicolon();
  }
  i(CX, "VariableDeclaration");
  function DX(e) {
    this.print(e.id), e.definite && this.tokenChar(33), this.print(e.id.typeAnnotation), e.init && (this.space(), this.tokenChar(61), this.space(),
    this.print(e.init));
  }
  i(DX, "VariableDeclarator");
});

// ../node_modules/@babel/generator/lib/generators/classes.js
var Xx = A((Ir) => {
  "use strict";
  Object.defineProperty(Ir, "__esModule", {
    value: !0
  });
  Ir.ClassAccessorProperty = FX;
  Ir.ClassBody = NX;
  Ir.ClassExpression = Ir.ClassDeclaration = OX;
  Ir.ClassMethod = LX;
  Ir.ClassPrivateMethod = MX;
  Ir.ClassPrivateProperty = jX;
  Ir.ClassProperty = kX;
  Ir.StaticBlock = qX;
  Ir._classMethodHead = RX;
  var wX = Pe(), {
    isExportDefaultDeclaration: IX,
    isExportNamedDeclaration: _X
  } = wX;
  function OX(e, t) {
    (!(IX(t) || _X(t)) || !this._shouldPrintDecoratorsBeforeExport(t)) && this.printJoin(e.decorators), e.declare && (this.word("declare"), this.
    space()), e.abstract && (this.word("abstract"), this.space()), this.word("class"), e.id && (this.space(), this.print(e.id)), this.print(
    e.typeParameters), e.superClass && (this.space(), this.word("extends"), this.space(), this.print(e.superClass), this.print(e.superTypeParameters)),
    e.implements && (this.space(), this.word("implements"), this.space(), this.printList(e.implements)), this.space(), this.print(e.body);
  }
  i(OX, "ClassDeclaration");
  function NX(e) {
    if (this.tokenChar(123), e.body.length === 0)
      this.tokenChar(125);
    else {
      this.newline();
      let t = BX(this, e);
      t?.(-1);
      let r = this.enterDelimited();
      this.printJoin(e.body, {
        statement: !0,
        indent: !0,
        separator: t,
        printTrailingSeparator: !0
      }), r(), this.endsWith(10) || this.newline(), this.rightBrace(e);
    }
  }
  i(NX, "ClassBody");
  function BX(e, t) {
    if (!e.tokenMap || t.start == null || t.end == null)
      return null;
    let r = e.tokenMap.getIndexes(t);
    if (!r) return null;
    let n = 1, s = 0, a = 0, o = /* @__PURE__ */ i(() => {
      for (; a < t.body.length && t.body[a].start == null; )
        a++;
    }, "advanceNextLocIndex");
    return o(), (l) => {
      a <= l && (a = l + 1, o());
      let u = a === t.body.length ? t.end : t.body[a].start, c;
      for (; n < r.length && e.tokenMap.matchesOriginal(c = e._tokens[r[n]], ";") && c.start < u; )
        e.token(";", void 0, s++), n++;
    };
  }
  i(BX, "classBodyEmptySemicolonsPrinter");
  function kX(e) {
    if (this.printJoin(e.decorators), !e.static && !this.format.preserveFormat) {
      var t;
      let r = (t = e.key.loc) == null || (t = t.end) == null ? void 0 : t.line;
      r && this.catchUp(r);
    }
    this.tsPrintClassMemberModifiers(e), e.computed ? (this.tokenChar(91), this.print(e.key), this.tokenChar(93)) : (this._variance(e), this.
    print(e.key)), e.optional && this.tokenChar(63), e.definite && this.tokenChar(33), this.print(e.typeAnnotation), e.value && (this.space(),
    this.tokenChar(61), this.space(), this.print(e.value)), this.semicolon();
  }
  i(kX, "ClassProperty");
  function FX(e) {
    var t;
    this.printJoin(e.decorators);
    let r = (t = e.key.loc) == null || (t = t.end) == null ? void 0 : t.line;
    r && this.catchUp(r), this.tsPrintClassMemberModifiers(e), this.word("accessor", !0), this.space(), e.computed ? (this.tokenChar(91), this.
    print(e.key), this.tokenChar(93)) : (this._variance(e), this.print(e.key)), e.optional && this.tokenChar(63), e.definite && this.tokenChar(
    33), this.print(e.typeAnnotation), e.value && (this.space(), this.tokenChar(61), this.space(), this.print(e.value)), this.semicolon();
  }
  i(FX, "ClassAccessorProperty");
  function jX(e) {
    this.printJoin(e.decorators), e.static && (this.word("static"), this.space()), this.print(e.key), this.print(e.typeAnnotation), e.value &&
    (this.space(), this.tokenChar(61), this.space(), this.print(e.value)), this.semicolon();
  }
  i(jX, "ClassPrivateProperty");
  function LX(e) {
    this._classMethodHead(e), this.space(), this.print(e.body);
  }
  i(LX, "ClassMethod");
  function MX(e) {
    this._classMethodHead(e), this.space(), this.print(e.body);
  }
  i(MX, "ClassPrivateMethod");
  function RX(e) {
    if (this.printJoin(e.decorators), !this.format.preserveFormat) {
      var t;
      let r = (t = e.key.loc) == null || (t = t.end) == null ? void 0 : t.line;
      r && this.catchUp(r);
    }
    this.tsPrintClassMemberModifiers(e), this._methodHead(e);
  }
  i(RX, "_classMethodHead");
  function qX(e) {
    this.word("static"), this.space(), this.tokenChar(123), e.body.length === 0 ? this.tokenChar(125) : (this.newline(), this.printSequence(
    e.body, {
      indent: !0
    }), this.rightBrace(e));
  }
  i(qX, "StaticBlock");
});

// ../node_modules/@babel/generator/lib/generators/methods.js
var Qx = A((_r) => {
  "use strict";
  Object.defineProperty(_r, "__esModule", {
    value: !0
  });
  _r.ArrowFunctionExpression = XX;
  _r.FunctionDeclaration = _r.FunctionExpression = zX;
  _r._functionHead = JX;
  _r._methodHead = HX;
  _r._param = GX;
  _r._parameters = KX;
  _r._params = WX;
  _r._predicate = YX;
  _r._shouldPrintArrowParamsParens = QX;
  var UX = Pe(), VX = is(), {
    isIdentifier: $X
  } = UX;
  function WX(e, t, r) {
    this.print(e.typeParameters);
    let n = ZX.call(this, t, r);
    n && this.sourceIdentifierName(n.name, n.pos), this.tokenChar(40), this._parameters(e.params, ")");
    let s = e.type === "ArrowFunctionExpression";
    this.print(e.returnType, s), this._noLineTerminator = s;
  }
  i(WX, "_params");
  function KX(e, t) {
    let r = this.enterDelimited(), n = this.shouldPrintTrailingComma(t), s = e.length;
    for (let a = 0; a < s; a++)
      this._param(e[a]), (n || a < s - 1) && (this.token(",", null, a), this.space());
    this.token(t), r();
  }
  i(KX, "_parameters");
  function GX(e) {
    this.printJoin(e.decorators), this.print(e), e.optional && this.tokenChar(63), this.print(e.typeAnnotation);
  }
  i(GX, "_param");
  function HX(e) {
    let t = e.kind, r = e.key;
    (t === "get" || t === "set") && (this.word(t), this.space()), e.async && (this.word("async", !0), this.space()), (t === "method" || t ===
    "init") && e.generator && this.tokenChar(42), e.computed ? (this.tokenChar(91), this.print(r), this.tokenChar(93)) : this.print(r), e.optional &&
    this.tokenChar(63), this._params(e, e.computed && e.key.type !== "StringLiteral" ? void 0 : e.key, void 0);
  }
  i(HX, "_methodHead");
  function YX(e, t) {
    e.predicate && (e.returnType || this.tokenChar(58), this.space(), this.print(e.predicate, t));
  }
  i(YX, "_predicate");
  function JX(e, t) {
    e.async && (this.word("async"), this.format.preserveFormat || (this._endsWithInnerRaw = !1), this.space()), this.word("function"), e.generator &&
    (this.format.preserveFormat || (this._endsWithInnerRaw = !1), this.tokenChar(42)), this.space(), e.id && this.print(e.id), this._params(
    e, e.id, t), e.type !== "TSDeclareFunction" && this._predicate(e);
  }
  i(JX, "_functionHead");
  function zX(e, t) {
    this._functionHead(e, t), this.space(), this.print(e.body);
  }
  i(zX, "FunctionExpression");
  function XX(e, t) {
    e.async && (this.word("async", !0), this.space()), this._shouldPrintArrowParamsParens(e) ? this._params(e, void 0, t) : this.print(e.params[0],
    !0), this._predicate(e, !0), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.tokenContext |= VX.TokenContext.
    arrowBody, this.print(e.body);
  }
  i(XX, "ArrowFunctionExpression");
  function QX(e) {
    var t, r;
    if (e.params.length !== 1 || e.typeParameters || e.returnType || e.predicate)
      return !0;
    let n = e.params[0];
    if (!$X(n) || n.typeAnnotation || n.optional || (t = n.leadingComments) != null && t.length || (r = n.trailingComments) != null && r.length)
      return !0;
    if (this.tokenMap) {
      if (e.loc == null || this.tokenMap.findMatching(e, "(") !== null) return !0;
      let s = this.tokenMap.findMatching(e, "=>");
      return s?.loc == null ? !0 : s.loc.start.line !== e.loc.start.line;
    }
    return !!this.format.retainLines;
  }
  i(QX, "_shouldPrintArrowParamsParens");
  function ZX(e, t) {
    let r = e;
    if (!r && t) {
      let u = t.type;
      u === "VariableDeclarator" ? r = t.id : u === "AssignmentExpression" || u === "AssignmentPattern" ? r = t.left : u === "ObjectProperty" ||
      u === "ClassProperty" ? (!t.computed || t.key.type === "StringLiteral") && (r = t.key) : (u === "ClassPrivateProperty" || u === "Class\
AccessorProperty") && (r = t.key);
    }
    if (!r) return;
    let n;
    if (r.type === "Identifier") {
      var s, a;
      n = {
        pos: (s = r.loc) == null ? void 0 : s.start,
        name: ((a = r.loc) == null ? void 0 : a.identifierName) || r.name
      };
    } else if (r.type === "PrivateName") {
      var o;
      n = {
        pos: (o = r.loc) == null ? void 0 : o.start,
        name: "#" + r.id.name
      };
    } else if (r.type === "StringLiteral") {
      var l;
      n = {
        pos: (l = r.loc) == null ? void 0 : l.start,
        name: r.value
      };
    }
    return n;
  }
  i(ZX, "_getFuncIdName");
});

// ../node_modules/@babel/generator/lib/generators/modules.js
var ym = A((ir) => {
  "use strict";
  Object.defineProperty(ir, "__esModule", {
    value: !0
  });
  ir.ExportAllDeclaration = dQ;
  ir.ExportDefaultDeclaration = mQ;
  ir.ExportDefaultSpecifier = uQ;
  ir.ExportNamedDeclaration = hQ;
  ir.ExportNamespaceSpecifier = pQ;
  ir.ExportSpecifier = cQ;
  ir.ImportAttribute = gQ;
  ir.ImportDeclaration = yQ;
  ir.ImportDefaultSpecifier = lQ;
  ir.ImportExpression = EQ;
  ir.ImportNamespaceSpecifier = bQ;
  ir.ImportSpecifier = oQ;
  ir._printAttributes = fQ;
  var eQ = Pe(), tQ = is(), {
    isClassDeclaration: rQ,
    isExportDefaultSpecifier: nQ,
    isExportNamespaceSpecifier: sQ,
    isImportDefaultSpecifier: iQ,
    isImportNamespaceSpecifier: aQ,
    isStatement: ev
  } = eQ;
  function oQ(e) {
    (e.importKind === "type" || e.importKind === "typeof") && (this.word(e.importKind), this.space()), this.print(e.imported), e.local && e.
    local.name !== e.imported.name && (this.space(), this.word("as"), this.space(), this.print(e.local));
  }
  i(oQ, "ImportSpecifier");
  function lQ(e) {
    this.print(e.local);
  }
  i(lQ, "ImportDefaultSpecifier");
  function uQ(e) {
    this.print(e.exported);
  }
  i(uQ, "ExportDefaultSpecifier");
  function cQ(e) {
    e.exportKind === "type" && (this.word("type"), this.space()), this.print(e.local), e.exported && e.local.name !== e.exported.name && (this.
    space(), this.word("as"), this.space(), this.print(e.exported));
  }
  i(cQ, "ExportSpecifier");
  function pQ(e) {
    this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(e.exported);
  }
  i(pQ, "ExportNamespaceSpecifier");
  var Zx = !1;
  function fQ(e, t) {
    let {
      importAttributesKeyword: r
    } = this.format, {
      attributes: n,
      assertions: s
    } = e;
    n && !r && !Zx && (Zx = !0, console.warn('You are using import attributes, without specifying the desired output syntax.\nPlease specify \
the "importAttributesKeyword" generator option, whose value can be one of:\n - "with"        : `import { a } from "b" with { type: "json" };`\
\n - "assert"      : `import { a } from "b" assert { type: "json" };`\n - "with-legacy" : `import { a } from "b" with type: "json";`\n'));
    let a = r === "assert" || !r && s;
    if (this.word(a ? "assert" : "with"), this.space(), !a && r !== "with") {
      this.printList(n || s);
      return;
    }
    let o = t ? 1 : 0;
    this.token("{", null, o), this.space(), this.printList(n || s, {
      printTrailingSeparator: this.shouldPrintTrailingComma("}")
    }), this.space(), this.token("}", null, o);
  }
  i(fQ, "_printAttributes");
  function dQ(e) {
    var t, r;
    this.word("export"), this.space(), e.exportKind === "type" && (this.word("type"), this.space()), this.tokenChar(42), this.space(), this.
    word("from"), this.space(), (t = e.attributes) != null && t.length || (r = e.assertions) != null && r.length ? (this.print(e.source, !0),
    this.space(), this._printAttributes(e, !1)) : this.print(e.source), this.semicolon();
  }
  i(dQ, "ExportAllDeclaration");
  function tv(e, t) {
    rQ(t.declaration) && e._shouldPrintDecoratorsBeforeExport(t) && e.printJoin(t.declaration.decorators);
  }
  i(tv, "maybePrintDecoratorsBeforeExport");
  function hQ(e) {
    if (tv(this, e), this.word("export"), this.space(), e.declaration) {
      let n = e.declaration;
      this.print(n), ev(n) || this.semicolon();
    } else {
      e.exportKind === "type" && (this.word("type"), this.space());
      let n = e.specifiers.slice(0), s = !1;
      for (; ; ) {
        let o = n[0];
        if (nQ(o) || sQ(o))
          s = !0, this.print(n.shift()), n.length && (this.tokenChar(44), this.space());
        else
          break;
      }
      let a = !1;
      if ((n.length || !n.length && !s) && (a = !0, this.tokenChar(123), n.length && (this.space(), this.printList(n, {
        printTrailingSeparator: this.shouldPrintTrailingComma("}")
      }), this.space()), this.tokenChar(125)), e.source) {
        var t, r;
        this.space(), this.word("from"), this.space(), (t = e.attributes) != null && t.length || (r = e.assertions) != null && r.length ? (this.
        print(e.source, !0), this.space(), this._printAttributes(e, a)) : this.print(e.source);
      }
      this.semicolon();
    }
  }
  i(hQ, "ExportNamedDeclaration");
  function mQ(e) {
    tv(this, e), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space(), this.tokenContext |=
    tQ.TokenContext.exportDefault;
    let t = e.declaration;
    this.print(t), ev(t) || this.semicolon();
  }
  i(mQ, "ExportDefaultDeclaration");
  function yQ(e) {
    var t, r;
    this.word("import"), this.space();
    let n = e.importKind === "type" || e.importKind === "typeof";
    n ? (this.noIndentInnerCommentsHere(), this.word(e.importKind), this.space()) : e.module ? (this.noIndentInnerCommentsHere(), this.word(
    "module"), this.space()) : e.phase && (this.noIndentInnerCommentsHere(), this.word(e.phase), this.space());
    let s = e.specifiers.slice(0), a = !!s.length;
    for (; a; ) {
      let l = s[0];
      if (iQ(l) || aQ(l))
        this.print(s.shift()), s.length && (this.tokenChar(44), this.space());
      else
        break;
    }
    let o = !1;
    s.length ? (o = !0, this.tokenChar(123), this.space(), this.printList(s, {
      printTrailingSeparator: this.shouldPrintTrailingComma("}")
    }), this.space(), this.tokenChar(125)) : n && !a && (o = !0, this.tokenChar(123), this.tokenChar(125)), (a || n) && (this.space(), this.
    word("from"), this.space()), (t = e.attributes) != null && t.length || (r = e.assertions) != null && r.length ? (this.print(e.source, !0),
    this.space(), this._printAttributes(e, o)) : this.print(e.source), this.semicolon();
  }
  i(yQ, "ImportDeclaration");
  function gQ(e) {
    this.print(e.key), this.tokenChar(58), this.space(), this.print(e.value);
  }
  i(gQ, "ImportAttribute");
  function bQ(e) {
    this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(e.local);
  }
  i(bQ, "ImportNamespaceSpecifier");
  function EQ(e) {
    this.word("import"), e.phase && (this.tokenChar(46), this.word(e.phase)), this.tokenChar(40), this.print(e.source), e.options != null &&
    (this.tokenChar(44), this.space(), this.print(e.options)), this.tokenChar(41);
  }
  i(EQ, "ImportExpression");
});

// ../node_modules/@babel/generator/node_modules/jsesc/jsesc.js
var iv = A((dPe, sv) => {
  "use strict";
  var rv = {}, TQ = rv.hasOwnProperty, nv = /* @__PURE__ */ i((e, t) => {
    for (let r in e)
      TQ.call(e, r) && t(r, e[r]);
  }, "forOwn"), SQ = /* @__PURE__ */ i((e, t) => (t && nv(t, (r, n) => {
    e[r] = n;
  }), e), "extend"), xQ = /* @__PURE__ */ i((e, t) => {
    let r = e.length, n = -1;
    for (; ++n < r; )
      t(e[n]);
  }, "forEach"), du = /* @__PURE__ */ i((e) => "\\u" + ("0000" + e).slice(-4), "fourHexEscape"), za = /* @__PURE__ */ i((e, t) => {
    let r = e.toString(16);
    return t ? r : r.toUpperCase();
  }, "hexadecimal"), Xa = rv.toString, vQ = Array.isArray, PQ = /* @__PURE__ */ i((e) => typeof Buffer == "function" && Buffer.isBuffer(e), "\
isBuffer"), AQ = /* @__PURE__ */ i((e) => Xa.call(e) == "[object Object]", "isObject"), CQ = /* @__PURE__ */ i((e) => typeof e == "string" ||
  Xa.call(e) == "[object String]", "isString"), DQ = /* @__PURE__ */ i((e) => typeof e == "number" || Xa.call(e) == "[object Number]", "isNu\
mber"), wQ = /* @__PURE__ */ i((e) => typeof e == "function", "isFunction"), IQ = /* @__PURE__ */ i((e) => Xa.call(e) == "[object Map]", "is\
Map"), _Q = /* @__PURE__ */ i((e) => Xa.call(e) == "[object Set]", "isSet"), OQ = {
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t"
    // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
    // '\v': '\\x0B'
  }, NQ = /[\\\b\f\n\r\t]/, BQ = /[0-9]/, kQ = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, FQ = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g,
  jQ = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g, as = /* @__PURE__ */ i((e, t) => {
    let r = /* @__PURE__ */ i(() => {
      c = u, ++t.indentLevel, u = t.indent.repeat(t.indentLevel);
    }, "increaseIndentation"), n = {
      escapeEverything: !1,
      minimal: !1,
      isScriptContext: !1,
      quotes: "single",
      wrap: !1,
      es6: !1,
      json: !1,
      compact: !0,
      lowercaseHex: !1,
      numbers: "decimal",
      indent: "	",
      indentLevel: 0,
      __inline1__: !1,
      __inline2__: !1
    }, s = t && t.json;
    s && (n.quotes = "double", n.wrap = !0), t = SQ(n, t), t.quotes != "single" && t.quotes != "double" && t.quotes != "backtick" && (t.quotes =
    "single");
    let a = t.quotes == "double" ? '"' : t.quotes == "backtick" ? "`" : "'", o = t.compact, l = t.lowercaseHex, u = t.indent.repeat(t.indentLevel),
    c = "", p = t.__inline1__, f = t.__inline2__, h = o ? "" : `
`, g, P = !0, d = t.numbers == "binary", y = t.numbers == "octal", E = t.numbers == "decimal", _ = t.numbers == "hexadecimal";
    if (s && e && wQ(e.toJSON) && (e = e.toJSON()), !CQ(e)) {
      if (IQ(e))
        return e.size == 0 ? "new Map()" : (o || (t.__inline1__ = !0, t.__inline2__ = !1), "new Map(" + as(Array.from(e), t) + ")");
      if (_Q(e))
        return e.size == 0 ? "new Set()" : "new Set(" + as(Array.from(e), t) + ")";
      if (PQ(e))
        return e.length == 0 ? "Buffer.from([])" : "Buffer.from(" + as(Array.from(e), t) + ")";
      if (vQ(e))
        return g = [], t.wrap = !0, p && (t.__inline1__ = !1, t.__inline2__ = !0), f || r(), xQ(e, (B) => {
          P = !1, f && (t.__inline2__ = !1), g.push(
            (o || f ? "" : u) + as(B, t)
          );
        }), P ? "[]" : f ? "[" + g.join(", ") + "]" : "[" + h + g.join("," + h) + h + (o ? "" : c) + "]";
      if (DQ(e)) {
        if (s)
          return JSON.stringify(e);
        if (E)
          return String(e);
        if (_) {
          let B = e.toString(16);
          return l || (B = B.toUpperCase()), "0x" + B;
        }
        if (d)
          return "0b" + e.toString(2);
        if (y)
          return "0o" + e.toString(8);
      } else return AQ(e) ? (g = [], t.wrap = !0, r(), nv(e, (B, L) => {
        P = !1, g.push(
          (o ? "" : u) + as(B, t) + ":" + (o ? "" : " ") + as(L, t)
        );
      }), P ? "{}" : "{" + h + g.join("," + h) + h + (o ? "" : c) + "}") : s ? JSON.stringify(e) || "null" : String(e);
    }
    let k = t.escapeEverything ? FQ : jQ;
    return g = e.replace(k, (B, L, U, $, ee, W) => {
      if (L) {
        if (t.minimal) return L;
        let R = L.charCodeAt(0), K = L.charCodeAt(1);
        if (t.es6) {
          let pe = (R - 55296) * 1024 + K - 56320 + 65536;
          return "\\u{" + za(pe, l) + "}";
        }
        return du(za(R, l)) + du(za(K, l));
      }
      if (U)
        return du(za(U.charCodeAt(0), l));
      if (B == "\0" && !s && !BQ.test(W.charAt(ee + 1)))
        return "\\0";
      if ($)
        return $ == a || t.escapeEverything ? "\\" + $ : $;
      if (NQ.test(B))
        return OQ[B];
      if (t.minimal && !kQ.test(B))
        return B;
      let q = za(B.charCodeAt(0), l);
      return s || q.length > 2 ? du(q) : "\\x" + ("00" + q).slice(-2);
    }), a == "`" && (g = g.replace(/\$\{/g, "\\${")), t.isScriptContext && (g = g.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, s ?
    "\\u003C!--" : "\\x3C!--")), t.wrap && (g = a + g + a), g;
  }, "jsesc");
  as.version = "3.0.2";
  sv.exports = as;
});

// ../node_modules/@babel/generator/lib/generators/types.js
var bm = A((ct) => {
  "use strict";
  Object.defineProperty(ct, "__esModule", {
    value: !0
  });
  ct.ArgumentPlaceholder = UQ;
  ct.ArrayPattern = ct.ArrayExpression = GQ;
  ct.BigIntLiteral = eZ;
  ct.BooleanLiteral = zQ;
  ct.DecimalLiteral = tZ;
  ct.Identifier = qQ;
  ct.NullLiteral = XQ;
  ct.NumericLiteral = QQ;
  ct.ObjectPattern = ct.ObjectExpression = $Q;
  ct.ObjectMethod = WQ;
  ct.ObjectProperty = KQ;
  ct.PipelineBareFunction = sZ;
  ct.PipelinePrimaryTopicReference = iZ;
  ct.PipelineTopicExpression = nZ;
  ct.RecordExpression = HQ;
  ct.RegExpLiteral = JQ;
  ct.SpreadElement = ct.RestElement = VQ;
  ct.StringLiteral = ZQ;
  ct.TopicReference = rZ;
  ct.TupleExpression = YQ;
  ct._getRawIdentifier = RQ;
  var LQ = Pe(), lv = iv(), {
    isAssignmentPattern: MQ,
    isIdentifier: gm
  } = LQ, av = null, hu = "";
  function RQ(e) {
    if (e === av) return hu;
    av = e;
    let {
      name: t
    } = e, r = this.tokenMap.find(e, (n) => n.value === t);
    return r ? (hu = this._originalCode.slice(r.start, r.end), hu) : hu = e.name;
  }
  i(RQ, "_getRawIdentifier");
  function qQ(e) {
    var t;
    this.sourceIdentifierName(((t = e.loc) == null ? void 0 : t.identifierName) || e.name), this.word(this.tokenMap ? this._getRawIdentifier(
    e) : e.name);
  }
  i(qQ, "Identifier");
  function UQ() {
    this.tokenChar(63);
  }
  i(UQ, "ArgumentPlaceholder");
  function VQ(e) {
    this.token("..."), this.print(e.argument);
  }
  i(VQ, "RestElement");
  function $Q(e) {
    let t = e.properties;
    if (this.tokenChar(123), t.length) {
      let r = this.enterDelimited();
      this.space(), this.printList(t, {
        indent: !0,
        statement: !0,
        printTrailingSeparator: this.shouldPrintTrailingComma("}")
      }), this.space(), r();
    }
    this.sourceWithOffset("end", e.loc, -1), this.tokenChar(125);
  }
  i($Q, "ObjectExpression");
  function WQ(e) {
    this.printJoin(e.decorators), this._methodHead(e), this.space(), this.print(e.body);
  }
  i(WQ, "ObjectMethod");
  function KQ(e) {
    if (this.printJoin(e.decorators), e.computed)
      this.tokenChar(91), this.print(e.key), this.tokenChar(93);
    else {
      if (MQ(e.value) && gm(e.key) && e.key.name === e.value.left.name) {
        this.print(e.value);
        return;
      }
      if (this.print(e.key), e.shorthand && gm(e.key) && gm(e.value) && e.key.name === e.value.name)
        return;
    }
    this.tokenChar(58), this.space(), this.print(e.value);
  }
  i(KQ, "ObjectProperty");
  function GQ(e) {
    let t = e.elements, r = t.length;
    this.tokenChar(91);
    let n = this.enterDelimited();
    for (let s = 0; s < t.length; s++) {
      let a = t[s];
      a ? (s > 0 && this.space(), this.print(a), (s < r - 1 || this.shouldPrintTrailingComma("]")) && this.token(",", !1, s)) : this.token("\
,", !1, s);
    }
    n(), this.tokenChar(93);
  }
  i(GQ, "ArrayExpression");
  function HQ(e) {
    let t = e.properties, r, n;
    if (this.format.recordAndTupleSyntaxType === "bar")
      r = "{|", n = "|}";
    else {
      if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null)
        throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)}\
 received).`);
      r = "#{", n = "}";
    }
    this.token(r), t.length && (this.space(), this.printList(t, {
      indent: !0,
      statement: !0,
      printTrailingSeparator: this.shouldPrintTrailingComma(n)
    }), this.space()), this.token(n);
  }
  i(HQ, "RecordExpression");
  function YQ(e) {
    let t = e.elements, r = t.length, n, s;
    if (this.format.recordAndTupleSyntaxType === "bar")
      n = "[|", s = "|]";
    else if (this.format.recordAndTupleSyntaxType === "hash")
      n = "#[", s = "]";
    else
      throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
    this.token(n);
    for (let a = 0; a < t.length; a++) {
      let o = t[a];
      o && (a > 0 && this.space(), this.print(o), (a < r - 1 || this.shouldPrintTrailingComma(s)) && this.token(",", !1, a));
    }
    this.token(s);
  }
  i(YQ, "TupleExpression");
  function JQ(e) {
    this.word(`/${e.pattern}/${e.flags}`);
  }
  i(JQ, "RegExpLiteral");
  function zQ(e) {
    this.word(e.value ? "true" : "false");
  }
  i(zQ, "BooleanLiteral");
  function XQ() {
    this.word("null");
  }
  i(XQ, "NullLiteral");
  function QQ(e) {
    let t = this.getPossibleRaw(e), r = this.format.jsescOption, n = e.value, s = n + "";
    r.numbers ? this.number(lv(n, r), n) : t == null ? this.number(s, n) : this.format.minified ? this.number(t.length < s.length ? t : s, n) :
    this.number(t, n);
  }
  i(QQ, "NumericLiteral");
  function ZQ(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.token(t);
      return;
    }
    let r = lv(e.value, this.format.jsescOption);
    this.token(r);
  }
  i(ZQ, "StringLiteral");
  function eZ(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.word(t);
      return;
    }
    this.word(e.value + "n");
  }
  i(eZ, "BigIntLiteral");
  function tZ(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.word(t);
      return;
    }
    this.word(e.value + "m");
  }
  i(tZ, "DecimalLiteral");
  var ov = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
  function rZ() {
    let {
      topicToken: e
    } = this.format;
    if (ov.has(e))
      this.token(e);
    else {
      let t = JSON.stringify(e), r = Array.from(ov, (n) => JSON.stringify(n));
      throw new Error(`The "topicToken" generator option must be one of ${r.join(", ")} (${t} received instead).`);
    }
  }
  i(rZ, "TopicReference");
  function nZ(e) {
    this.print(e.expression);
  }
  i(nZ, "PipelineTopicExpression");
  function sZ(e) {
    this.print(e.callee);
  }
  i(sZ, "PipelineBareFunction");
  function iZ() {
    this.tokenChar(35);
  }
  i(iZ, "PipelinePrimaryTopicReference");
});

// ../node_modules/@babel/generator/lib/generators/flow.js
var cv = A((de) => {
  "use strict";
  Object.defineProperty(de, "__esModule", {
    value: !0
  });
  de.AnyTypeAnnotation = cZ;
  de.ArrayTypeAnnotation = pZ;
  de.BooleanLiteralTypeAnnotation = dZ;
  de.BooleanTypeAnnotation = fZ;
  de.DeclareClass = mZ;
  de.DeclareExportAllDeclaration = CZ;
  de.DeclareExportDeclaration = AZ;
  de.DeclareFunction = yZ;
  de.DeclareInterface = EZ;
  de.DeclareModule = TZ;
  de.DeclareModuleExports = SZ;
  de.DeclareOpaqueType = vZ;
  de.DeclareTypeAlias = xZ;
  de.DeclareVariable = PZ;
  de.DeclaredPredicate = bZ;
  de.EmptyTypeAnnotation = YZ;
  de.EnumBooleanBody = wZ;
  de.EnumBooleanMember = BZ;
  de.EnumDeclaration = DZ;
  de.EnumDefaultedMember = NZ;
  de.EnumNumberBody = IZ;
  de.EnumNumberMember = kZ;
  de.EnumStringBody = _Z;
  de.EnumStringMember = FZ;
  de.EnumSymbolBody = OZ;
  de.ExistsTypeAnnotation = LZ;
  de.FunctionTypeAnnotation = MZ;
  de.FunctionTypeParam = RZ;
  de.IndexedAccessType = Eee;
  de.InferredPredicate = gZ;
  de.InterfaceDeclaration = $Z;
  de.GenericTypeAnnotation = de.ClassImplements = de.InterfaceExtends = qZ;
  de.InterfaceTypeAnnotation = KZ;
  de.IntersectionTypeAnnotation = GZ;
  de.MixedTypeAnnotation = HZ;
  de.NullLiteralTypeAnnotation = hZ;
  de.NullableTypeAnnotation = JZ;
  Object.defineProperty(de, "NumberLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return uv.NumericLiteral;
    }, "get")
  });
  de.NumberTypeAnnotation = zZ;
  de.ObjectTypeAnnotation = aee;
  de.ObjectTypeCallProperty = lee;
  de.ObjectTypeIndexer = uee;
  de.ObjectTypeInternalSlot = oee;
  de.ObjectTypeProperty = cee;
  de.ObjectTypeSpreadProperty = pee;
  de.OpaqueType = iee;
  de.OptionalIndexedAccessType = Tee;
  de.QualifiedTypeIdentifier = fee;
  Object.defineProperty(de, "StringLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return uv.StringLiteral;
    }, "get")
  });
  de.StringTypeAnnotation = XZ;
  de.SymbolTypeAnnotation = dee;
  de.ThisTypeAnnotation = QZ;
  de.TupleTypeAnnotation = ZZ;
  de.TypeAlias = tee;
  de.TypeAnnotation = ree;
  de.TypeCastExpression = yee;
  de.TypeParameter = see;
  de.TypeParameterDeclaration = de.TypeParameterInstantiation = nee;
  de.TypeofTypeAnnotation = eee;
  de.UnionTypeAnnotation = mee;
  de.Variance = gee;
  de.VoidTypeAnnotation = bee;
  de._interfaceish = UZ;
  de._variance = VZ;
  var aZ = Pe(), oZ = ym(), lZ = is(), uv = bm(), {
    isDeclareExportDeclaration: mu,
    isStatement: uZ
  } = aZ;
  function cZ() {
    this.word("any");
  }
  i(cZ, "AnyTypeAnnotation");
  function pZ(e) {
    this.print(e.elementType, !0), this.tokenChar(91), this.tokenChar(93);
  }
  i(pZ, "ArrayTypeAnnotation");
  function fZ() {
    this.word("boolean");
  }
  i(fZ, "BooleanTypeAnnotation");
  function dZ(e) {
    this.word(e.value ? "true" : "false");
  }
  i(dZ, "BooleanLiteralTypeAnnotation");
  function hZ() {
    this.word("null");
  }
  i(hZ, "NullLiteralTypeAnnotation");
  function mZ(e, t) {
    mu(t) || (this.word("declare"), this.space()), this.word("class"), this.space(), this._interfaceish(e);
  }
  i(mZ, "DeclareClass");
  function yZ(e, t) {
    mu(t) || (this.word("declare"), this.space()), this.word("function"), this.space(), this.print(e.id), this.print(e.id.typeAnnotation.typeAnnotation),
    e.predicate && (this.space(), this.print(e.predicate)), this.semicolon();
  }
  i(yZ, "DeclareFunction");
  function gZ() {
    this.tokenChar(37), this.word("checks");
  }
  i(gZ, "InferredPredicate");
  function bZ(e) {
    this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(e.value), this.tokenChar(41);
  }
  i(bZ, "DeclaredPredicate");
  function EZ(e) {
    this.word("declare"), this.space(), this.InterfaceDeclaration(e);
  }
  i(EZ, "DeclareInterface");
  function TZ(e) {
    this.word("declare"), this.space(), this.word("module"), this.space(), this.print(e.id), this.space(), this.print(e.body);
  }
  i(TZ, "DeclareModule");
  function SZ(e) {
    this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(e.typeAnnotation);
  }
  i(SZ, "DeclareModuleExports");
  function xZ(e) {
    this.word("declare"), this.space(), this.TypeAlias(e);
  }
  i(xZ, "DeclareTypeAlias");
  function vZ(e, t) {
    mu(t) || (this.word("declare"), this.space()), this.OpaqueType(e);
  }
  i(vZ, "DeclareOpaqueType");
  function PZ(e, t) {
    mu(t) || (this.word("declare"), this.space()), this.word("var"), this.space(), this.print(e.id), this.print(e.id.typeAnnotation), this.semicolon();
  }
  i(PZ, "DeclareVariable");
  function AZ(e) {
    this.word("declare"), this.space(), this.word("export"), this.space(), e.default && (this.word("default"), this.space()), jZ.call(this, e);
  }
  i(AZ, "DeclareExportDeclaration");
  function CZ(e) {
    this.word("declare"), this.space(), oZ.ExportAllDeclaration.call(this, e);
  }
  i(CZ, "DeclareExportAllDeclaration");
  function DZ(e) {
    let {
      id: t,
      body: r
    } = e;
    this.word("enum"), this.space(), this.print(t), this.print(r);
  }
  i(DZ, "EnumDeclaration");
  function yu(e, t, r) {
    r && (e.space(), e.word("of"), e.space(), e.word(t)), e.space();
  }
  i(yu, "enumExplicitType");
  function gu(e, t) {
    let {
      members: r
    } = t;
    e.token("{"), e.indent(), e.newline();
    for (let n of r)
      e.print(n), e.newline();
    t.hasUnknownMembers && (e.token("..."), e.newline()), e.dedent(), e.token("}");
  }
  i(gu, "enumBody");
  function wZ(e) {
    let {
      explicitType: t
    } = e;
    yu(this, "boolean", t), gu(this, e);
  }
  i(wZ, "EnumBooleanBody");
  function IZ(e) {
    let {
      explicitType: t
    } = e;
    yu(this, "number", t), gu(this, e);
  }
  i(IZ, "EnumNumberBody");
  function _Z(e) {
    let {
      explicitType: t
    } = e;
    yu(this, "string", t), gu(this, e);
  }
  i(_Z, "EnumStringBody");
  function OZ(e) {
    yu(this, "symbol", !0), gu(this, e);
  }
  i(OZ, "EnumSymbolBody");
  function NZ(e) {
    let {
      id: t
    } = e;
    this.print(t), this.tokenChar(44);
  }
  i(NZ, "EnumDefaultedMember");
  function Em(e, t) {
    e.print(t.id), e.space(), e.token("="), e.space(), e.print(t.init), e.token(",");
  }
  i(Em, "enumInitializedMember");
  function BZ(e) {
    Em(this, e);
  }
  i(BZ, "EnumBooleanMember");
  function kZ(e) {
    Em(this, e);
  }
  i(kZ, "EnumNumberMember");
  function FZ(e) {
    Em(this, e);
  }
  i(FZ, "EnumStringMember");
  function jZ(e) {
    if (e.declaration) {
      let t = e.declaration;
      this.print(t), uZ(t) || this.semicolon();
    } else
      this.tokenChar(123), e.specifiers.length && (this.space(), this.printList(e.specifiers), this.space()), this.tokenChar(125), e.source &&
      (this.space(), this.word("from"), this.space(), this.print(e.source)), this.semicolon();
  }
  i(jZ, "FlowExportDeclaration");
  function LZ() {
    this.tokenChar(42);
  }
  i(LZ, "ExistsTypeAnnotation");
  function MZ(e, t) {
    this.print(e.typeParameters), this.tokenChar(40), e.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(e.this.typeAnnotation),
    (e.params.length || e.rest) && (this.tokenChar(44), this.space())), this.printList(e.params), e.rest && (e.params.length && (this.tokenChar(
    44), this.space()), this.token("..."), this.print(e.rest)), this.tokenChar(41);
    let r = t?.type;
    r != null && (r === "ObjectTypeCallProperty" || r === "ObjectTypeInternalSlot" || r === "DeclareFunction" || r === "ObjectTypeProperty" &&
    t.method) ? this.tokenChar(58) : (this.space(), this.token("=>")), this.space(), this.print(e.returnType);
  }
  i(MZ, "FunctionTypeAnnotation");
  function RZ(e) {
    this.print(e.name), e.optional && this.tokenChar(63), e.name && (this.tokenChar(58), this.space()), this.print(e.typeAnnotation);
  }
  i(RZ, "FunctionTypeParam");
  function qZ(e) {
    this.print(e.id), this.print(e.typeParameters, !0);
  }
  i(qZ, "InterfaceExtends");
  function UZ(e) {
    var t;
    if (this.print(e.id), this.print(e.typeParameters), (t = e.extends) != null && t.length && (this.space(), this.word("extends"), this.space(),
    this.printList(e.extends)), e.type === "DeclareClass") {
      var r, n;
      (r = e.mixins) != null && r.length && (this.space(), this.word("mixins"), this.space(), this.printList(e.mixins)), (n = e.implements) !=
      null && n.length && (this.space(), this.word("implements"), this.space(), this.printList(e.implements));
    }
    this.space(), this.print(e.body);
  }
  i(UZ, "_interfaceish");
  function VZ(e) {
    var t;
    let r = (t = e.variance) == null ? void 0 : t.kind;
    r != null && (r === "plus" ? this.tokenChar(43) : r === "minus" && this.tokenChar(45));
  }
  i(VZ, "_variance");
  function $Z(e) {
    this.word("interface"), this.space(), this._interfaceish(e);
  }
  i($Z, "InterfaceDeclaration");
  function WZ(e) {
    this.space(), this.token("&", !1, e), this.space();
  }
  i(WZ, "andSeparator");
  function KZ(e) {
    var t;
    this.word("interface"), (t = e.extends) != null && t.length && (this.space(), this.word("extends"), this.space(), this.printList(e.extends)),
    this.space(), this.print(e.body);
  }
  i(KZ, "InterfaceTypeAnnotation");
  function GZ(e) {
    this.printJoin(e.types, {
      separator: WZ
    });
  }
  i(GZ, "IntersectionTypeAnnotation");
  function HZ() {
    this.word("mixed");
  }
  i(HZ, "MixedTypeAnnotation");
  function YZ() {
    this.word("empty");
  }
  i(YZ, "EmptyTypeAnnotation");
  function JZ(e) {
    this.tokenChar(63), this.print(e.typeAnnotation);
  }
  i(JZ, "NullableTypeAnnotation");
  function zZ() {
    this.word("number");
  }
  i(zZ, "NumberTypeAnnotation");
  function XZ() {
    this.word("string");
  }
  i(XZ, "StringTypeAnnotation");
  function QZ() {
    this.word("this");
  }
  i(QZ, "ThisTypeAnnotation");
  function ZZ(e) {
    this.tokenChar(91), this.printList(e.types), this.tokenChar(93);
  }
  i(ZZ, "TupleTypeAnnotation");
  function eee(e) {
    this.word("typeof"), this.space(), this.print(e.argument);
  }
  i(eee, "TypeofTypeAnnotation");
  function tee(e) {
    this.word("type"), this.space(), this.print(e.id), this.print(e.typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(
    e.right), this.semicolon();
  }
  i(tee, "TypeAlias");
  function ree(e, t) {
    this.tokenChar(58), this.space(), t.type === "ArrowFunctionExpression" ? this.tokenContext |= lZ.TokenContext.arrowFlowReturnType : e.optional &&
    this.tokenChar(63), this.print(e.typeAnnotation);
  }
  i(ree, "TypeAnnotation");
  function nee(e) {
    this.tokenChar(60), this.printList(e.params, {}), this.tokenChar(62);
  }
  i(nee, "TypeParameterInstantiation");
  function see(e) {
    this._variance(e), this.word(e.name), e.bound && this.print(e.bound), e.default && (this.space(), this.tokenChar(61), this.space(), this.
    print(e.default));
  }
  i(see, "TypeParameter");
  function iee(e) {
    this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(e.id), this.print(e.typeParameters), e.supertype && (this.
    tokenChar(58), this.space(), this.print(e.supertype)), e.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(e.impltype)),
    this.semicolon();
  }
  i(iee, "OpaqueType");
  function aee(e) {
    e.exact ? this.token("{|") : this.tokenChar(123);
    let t = [...e.properties, ...e.callProperties || [], ...e.indexers || [], ...e.internalSlots || []];
    t.length && (this.newline(), this.space(), this.printJoin(t, {
      addNewlines(r) {
        if (r && !t[0]) return 1;
      },
      indent: !0,
      statement: !0,
      iterator: /* @__PURE__ */ i(() => {
        (t.length !== 1 || e.inexact) && (this.tokenChar(44), this.space());
      }, "iterator")
    }), this.space()), e.inexact && (this.indent(), this.token("..."), t.length && this.newline(), this.dedent()), e.exact ? this.token("|}") :
    this.tokenChar(125);
  }
  i(aee, "ObjectTypeAnnotation");
  function oee(e) {
    e.static && (this.word("static"), this.space()), this.tokenChar(91), this.tokenChar(91), this.print(e.id), this.tokenChar(93), this.tokenChar(
    93), e.optional && this.tokenChar(63), e.method || (this.tokenChar(58), this.space()), this.print(e.value);
  }
  i(oee, "ObjectTypeInternalSlot");
  function lee(e) {
    e.static && (this.word("static"), this.space()), this.print(e.value);
  }
  i(lee, "ObjectTypeCallProperty");
  function uee(e) {
    e.static && (this.word("static"), this.space()), this._variance(e), this.tokenChar(91), e.id && (this.print(e.id), this.tokenChar(58), this.
    space()), this.print(e.key), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(e.value);
  }
  i(uee, "ObjectTypeIndexer");
  function cee(e) {
    e.proto && (this.word("proto"), this.space()), e.static && (this.word("static"), this.space()), (e.kind === "get" || e.kind === "set") &&
    (this.word(e.kind), this.space()), this._variance(e), this.print(e.key), e.optional && this.tokenChar(63), e.method || (this.tokenChar(58),
    this.space()), this.print(e.value);
  }
  i(cee, "ObjectTypeProperty");
  function pee(e) {
    this.token("..."), this.print(e.argument);
  }
  i(pee, "ObjectTypeSpreadProperty");
  function fee(e) {
    this.print(e.qualification), this.tokenChar(46), this.print(e.id);
  }
  i(fee, "QualifiedTypeIdentifier");
  function dee() {
    this.word("symbol");
  }
  i(dee, "SymbolTypeAnnotation");
  function hee(e) {
    this.space(), this.token("|", !1, e), this.space();
  }
  i(hee, "orSeparator");
  function mee(e) {
    this.printJoin(e.types, {
      separator: hee
    });
  }
  i(mee, "UnionTypeAnnotation");
  function yee(e) {
    this.tokenChar(40), this.print(e.expression), this.print(e.typeAnnotation), this.tokenChar(41);
  }
  i(yee, "TypeCastExpression");
  function gee(e) {
    e.kind === "plus" ? this.tokenChar(43) : this.tokenChar(45);
  }
  i(gee, "Variance");
  function bee() {
    this.word("void");
  }
  i(bee, "VoidTypeAnnotation");
  function Eee(e) {
    this.print(e.objectType, !0), this.tokenChar(91), this.print(e.indexType), this.tokenChar(93);
  }
  i(Eee, "IndexedAccessType");
  function Tee(e) {
    this.print(e.objectType), e.optional && this.token("?."), this.tokenChar(91), this.print(e.indexType), this.tokenChar(93);
  }
  i(Tee, "OptionalIndexedAccessType");
});

// ../node_modules/@babel/generator/lib/generators/base.js
var pv = A((_n) => {
  "use strict";
  Object.defineProperty(_n, "__esModule", {
    value: !0
  });
  _n.BlockStatement = vee;
  _n.Directive = Pee;
  _n.DirectiveLiteral = Dee;
  _n.File = See;
  _n.InterpreterDirective = wee;
  _n.Placeholder = Iee;
  _n.Program = xee;
  function See(e) {
    e.program && this.print(e.program.interpreter), this.print(e.program);
  }
  i(See, "File");
  function xee(e) {
    var t;
    this.noIndentInnerCommentsHere(), this.printInnerComments();
    let r = (t = e.directives) == null ? void 0 : t.length;
    if (r) {
      var n;
      let s = e.body.length ? 2 : 1;
      this.printSequence(e.directives, {
        trailingCommentsLineOffset: s
      }), (n = e.directives[r - 1].trailingComments) != null && n.length || this.newline(s);
    }
    this.printSequence(e.body);
  }
  i(xee, "Program");
  function vee(e) {
    var t;
    this.tokenChar(123);
    let r = this.enterDelimited(), n = (t = e.directives) == null ? void 0 : t.length;
    if (n) {
      var s;
      let a = e.body.length ? 2 : 1;
      this.printSequence(e.directives, {
        indent: !0,
        trailingCommentsLineOffset: a
      }), (s = e.directives[n - 1].trailingComments) != null && s.length || this.newline(a);
    }
    this.printSequence(e.body, {
      indent: !0
    }), r(), this.rightBrace(e);
  }
  i(vee, "BlockStatement");
  function Pee(e) {
    this.print(e.value), this.semicolon();
  }
  i(Pee, "Directive");
  var Aee = /(?:^|[^\\])(?:\\\\)*'/, Cee = /(?:^|[^\\])(?:\\\\)*"/;
  function Dee(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.token(t);
      return;
    }
    let {
      value: r
    } = e;
    if (!Cee.test(r))
      this.token(`"${r}"`);
    else if (!Aee.test(r))
      this.token(`'${r}'`);
    else
      throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
  }
  i(Dee, "DirectiveLiteral");
  function wee(e) {
    this.token(`#!${e.value}`), this.newline(1, !0);
  }
  i(wee, "InterpreterDirective");
  function Iee(e) {
    this.token("%%"), this.print(e.name), this.token("%%"), e.expectedNode === "Statement" && this.semicolon();
  }
  i(Iee, "Placeholder");
});

// ../node_modules/@babel/generator/lib/generators/jsx.js
var fv = A((qt) => {
  "use strict";
  Object.defineProperty(qt, "__esModule", {
    value: !0
  });
  qt.JSXAttribute = _ee;
  qt.JSXClosingElement = Uee;
  qt.JSXClosingFragment = Kee;
  qt.JSXElement = Mee;
  qt.JSXEmptyExpression = Vee;
  qt.JSXExpressionContainer = Fee;
  qt.JSXFragment = $ee;
  qt.JSXIdentifier = Oee;
  qt.JSXMemberExpression = Bee;
  qt.JSXNamespacedName = Nee;
  qt.JSXOpeningElement = qee;
  qt.JSXOpeningFragment = Wee;
  qt.JSXSpreadAttribute = kee;
  qt.JSXSpreadChild = jee;
  qt.JSXText = Lee;
  function _ee(e) {
    this.print(e.name), e.value && (this.tokenChar(61), this.print(e.value));
  }
  i(_ee, "JSXAttribute");
  function Oee(e) {
    this.word(e.name);
  }
  i(Oee, "JSXIdentifier");
  function Nee(e) {
    this.print(e.namespace), this.tokenChar(58), this.print(e.name);
  }
  i(Nee, "JSXNamespacedName");
  function Bee(e) {
    this.print(e.object), this.tokenChar(46), this.print(e.property);
  }
  i(Bee, "JSXMemberExpression");
  function kee(e) {
    this.tokenChar(123), this.token("..."), this.print(e.argument), this.rightBrace(e);
  }
  i(kee, "JSXSpreadAttribute");
  function Fee(e) {
    this.tokenChar(123), this.print(e.expression), this.rightBrace(e);
  }
  i(Fee, "JSXExpressionContainer");
  function jee(e) {
    this.tokenChar(123), this.token("..."), this.print(e.expression), this.rightBrace(e);
  }
  i(jee, "JSXSpreadChild");
  function Lee(e) {
    let t = this.getPossibleRaw(e);
    t !== void 0 ? this.token(t, !0) : this.token(e.value, !0);
  }
  i(Lee, "JSXText");
  function Mee(e) {
    let t = e.openingElement;
    if (this.print(t), !t.selfClosing) {
      this.indent();
      for (let r of e.children)
        this.print(r);
      this.dedent(), this.print(e.closingElement);
    }
  }
  i(Mee, "JSXElement");
  function Ree() {
    this.space();
  }
  i(Ree, "spaceSeparator");
  function qee(e) {
    this.tokenChar(60), this.print(e.name), this.print(e.typeParameters), e.attributes.length > 0 && (this.space(), this.printJoin(e.attributes,
    {
      separator: Ree
    })), e.selfClosing && (this.space(), this.tokenChar(47)), this.tokenChar(62);
  }
  i(qee, "JSXOpeningElement");
  function Uee(e) {
    this.tokenChar(60), this.tokenChar(47), this.print(e.name), this.tokenChar(62);
  }
  i(Uee, "JSXClosingElement");
  function Vee() {
    this.printInnerComments();
  }
  i(Vee, "JSXEmptyExpression");
  function $ee(e) {
    this.print(e.openingFragment), this.indent();
    for (let t of e.children)
      this.print(t);
    this.dedent(), this.print(e.closingFragment);
  }
  i($ee, "JSXFragment");
  function Wee() {
    this.tokenChar(60), this.tokenChar(62);
  }
  i(Wee, "JSXOpeningFragment");
  function Kee() {
    this.token("</"), this.tokenChar(62);
  }
  i(Kee, "JSXClosingFragment");
});

// ../node_modules/@babel/generator/lib/generators/typescript.js
var yv = A((ae) => {
  "use strict";
  Object.defineProperty(ae, "__esModule", {
    value: !0
  });
  ae.TSAnyKeyword = ite;
  ae.TSArrayType = Cte;
  ae.TSSatisfiesExpression = ae.TSAsExpression = Wte;
  ae.TSBigIntKeyword = ate;
  ae.TSBooleanKeyword = cte;
  ae.TSCallSignatureDeclaration = Zee;
  ae.TSInterfaceHeritage = ae.TSExpressionWithTypeArguments = ae.TSClassImplements = qte;
  ae.TSConditionalType = Bte;
  ae.TSConstructSignatureDeclaration = ete;
  ae.TSConstructorType = Tte;
  ae.TSDeclareFunction = zee;
  ae.TSDeclareMethod = Xee;
  ae.TSEnumDeclaration = Hte;
  ae.TSEnumMember = Yte;
  ae.TSExportAssignment = tre;
  ae.TSExternalModuleReference = Zte;
  ae.TSFunctionType = Ete;
  ae.TSImportEqualsDeclaration = Qte;
  ae.TSImportType = Xte;
  ae.TSIndexSignature = ste;
  ae.TSIndexedAccessType = Lte;
  ae.TSInferType = kte;
  ae.TSInstantiationExpression = Gte;
  ae.TSInterfaceBody = Vte;
  ae.TSInterfaceDeclaration = Ute;
  ae.TSIntersectionType = Nte;
  ae.TSIntrinsicKeyword = gte;
  ae.TSLiteralType = Rte;
  ae.TSMappedType = Mte;
  ae.TSMethodSignature = nte;
  ae.TSModuleBlock = zte;
  ae.TSModuleDeclaration = Jte;
  ae.TSNamedTupleMember = _te;
  ae.TSNamespaceExportDeclaration = rre;
  ae.TSNeverKeyword = yte;
  ae.TSNonNullExpression = ere;
  ae.TSNullKeyword = mte;
  ae.TSNumberKeyword = lte;
  ae.TSObjectKeyword = ute;
  ae.TSOptionalType = wte;
  ae.TSParameterProperty = Jee;
  ae.TSParenthesizedType = Fte;
  ae.TSPropertySignature = tte;
  ae.TSQualifiedName = Qee;
  ae.TSRestType = Ite;
  ae.TSStringKeyword = pte;
  ae.TSSymbolKeyword = fte;
  ae.TSThisType = bte;
  ae.TSTupleType = Dte;
  ae.TSTypeAliasDeclaration = $te;
  ae.TSTypeAnnotation = Gee;
  ae.TSTypeAssertion = Kte;
  ae.TSTypeLiteral = Ate;
  ae.TSTypeOperator = jte;
  ae.TSTypeParameter = Yee;
  ae.TSTypeParameterDeclaration = ae.TSTypeParameterInstantiation = Hee;
  ae.TSTypePredicate = vte;
  ae.TSTypeQuery = Pte;
  ae.TSTypeReference = xte;
  ae.TSUndefinedKeyword = hte;
  ae.TSUnionType = Ote;
  ae.TSUnknownKeyword = ote;
  ae.TSVoidKeyword = dte;
  ae.tsPrintClassMemberModifiers = sre;
  ae.tsPrintFunctionOrConstructorType = Ste;
  ae.tsPrintPropertyOrMethodName = rte;
  ae.tsPrintSignatureDeclarationBase = nre;
  function Gee(e, t) {
    this.token((t.type === "TSFunctionType" || t.type === "TSConstructorType") && t.typeAnnotation === e ? "=>" : ":"), this.space(), e.optional &&
    this.tokenChar(63), this.print(e.typeAnnotation);
  }
  i(Gee, "TSTypeAnnotation");
  function Hee(e, t) {
    this.tokenChar(60);
    let r = t.type === "ArrowFunctionExpression" && e.params.length === 1;
    this.tokenMap && e.start != null && e.end != null && (r && (r = !!this.tokenMap.find(e, (n) => this.tokenMap.matchesOriginal(n, ","))), r ||
    (r = this.shouldPrintTrailingComma(">"))), this.printList(e.params, {
      printTrailingSeparator: r
    }), this.tokenChar(62);
  }
  i(Hee, "TSTypeParameterInstantiation");
  function Yee(e) {
    e.in && (this.word("in"), this.space()), e.out && (this.word("out"), this.space()), this.word(e.name), e.constraint && (this.space(), this.
    word("extends"), this.space(), this.print(e.constraint)), e.default && (this.space(), this.tokenChar(61), this.space(), this.print(e.default));
  }
  i(Yee, "TSTypeParameter");
  function Jee(e) {
    e.accessibility && (this.word(e.accessibility), this.space()), e.readonly && (this.word("readonly"), this.space()), this._param(e.parameter);
  }
  i(Jee, "TSParameterProperty");
  function zee(e, t) {
    e.declare && (this.word("declare"), this.space()), this._functionHead(e, t), this.semicolon();
  }
  i(zee, "TSDeclareFunction");
  function Xee(e) {
    this._classMethodHead(e), this.semicolon();
  }
  i(Xee, "TSDeclareMethod");
  function Qee(e) {
    this.print(e.left), this.tokenChar(46), this.print(e.right);
  }
  i(Qee, "TSQualifiedName");
  function Zee(e) {
    this.tsPrintSignatureDeclarationBase(e), Qa(this, e);
  }
  i(Zee, "TSCallSignatureDeclaration");
  function Qa(e, t) {
    if (!e.tokenMap || !t.start || !t.end) {
      e.semicolon();
      return;
    }
    e.tokenMap.endMatches(t, ",") ? e.token(",") : e.tokenMap.endMatches(t, ";") && e.semicolon();
  }
  i(Qa, "maybePrintTrailingCommaOrSemicolon");
  function ete(e) {
    this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(e), Qa(this, e);
  }
  i(ete, "TSConstructSignatureDeclaration");
  function tte(e) {
    let {
      readonly: t
    } = e;
    t && (this.word("readonly"), this.space()), this.tsPrintPropertyOrMethodName(e), this.print(e.typeAnnotation), Qa(this, e);
  }
  i(tte, "TSPropertySignature");
  function rte(e) {
    e.computed && this.tokenChar(91), this.print(e.key), e.computed && this.tokenChar(93), e.optional && this.tokenChar(63);
  }
  i(rte, "tsPrintPropertyOrMethodName");
  function nte(e) {
    let {
      kind: t
    } = e;
    (t === "set" || t === "get") && (this.word(t), this.space()), this.tsPrintPropertyOrMethodName(e), this.tsPrintSignatureDeclarationBase(
    e), Qa(this, e);
  }
  i(nte, "TSMethodSignature");
  function ste(e) {
    let {
      readonly: t,
      static: r
    } = e;
    r && (this.word("static"), this.space()), t && (this.word("readonly"), this.space()), this.tokenChar(91), this._parameters(e.parameters,
    "]"), this.print(e.typeAnnotation), Qa(this, e);
  }
  i(ste, "TSIndexSignature");
  function ite() {
    this.word("any");
  }
  i(ite, "TSAnyKeyword");
  function ate() {
    this.word("bigint");
  }
  i(ate, "TSBigIntKeyword");
  function ote() {
    this.word("unknown");
  }
  i(ote, "TSUnknownKeyword");
  function lte() {
    this.word("number");
  }
  i(lte, "TSNumberKeyword");
  function ute() {
    this.word("object");
  }
  i(ute, "TSObjectKeyword");
  function cte() {
    this.word("boolean");
  }
  i(cte, "TSBooleanKeyword");
  function pte() {
    this.word("string");
  }
  i(pte, "TSStringKeyword");
  function fte() {
    this.word("symbol");
  }
  i(fte, "TSSymbolKeyword");
  function dte() {
    this.word("void");
  }
  i(dte, "TSVoidKeyword");
  function hte() {
    this.word("undefined");
  }
  i(hte, "TSUndefinedKeyword");
  function mte() {
    this.word("null");
  }
  i(mte, "TSNullKeyword");
  function yte() {
    this.word("never");
  }
  i(yte, "TSNeverKeyword");
  function gte() {
    this.word("intrinsic");
  }
  i(gte, "TSIntrinsicKeyword");
  function bte() {
    this.word("this");
  }
  i(bte, "TSThisType");
  function Ete(e) {
    this.tsPrintFunctionOrConstructorType(e);
  }
  i(Ete, "TSFunctionType");
  function Tte(e) {
    e.abstract && (this.word("abstract"), this.space()), this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(e);
  }
  i(Tte, "TSConstructorType");
  function Ste(e) {
    let {
      typeParameters: t
    } = e, r = e.parameters;
    this.print(t), this.tokenChar(40), this._parameters(r, ")"), this.space();
    let n = e.typeAnnotation;
    this.print(n);
  }
  i(Ste, "tsPrintFunctionOrConstructorType");
  function xte(e) {
    this.print(e.typeName, !!e.typeParameters), this.print(e.typeParameters);
  }
  i(xte, "TSTypeReference");
  function vte(e) {
    e.asserts && (this.word("asserts"), this.space()), this.print(e.parameterName), e.typeAnnotation && (this.space(), this.word("is"), this.
    space(), this.print(e.typeAnnotation.typeAnnotation));
  }
  i(vte, "TSTypePredicate");
  function Pte(e) {
    this.word("typeof"), this.space(), this.print(e.exprName), e.typeParameters && this.print(e.typeParameters);
  }
  i(Pte, "TSTypeQuery");
  function Ate(e) {
    bu(this, e, () => this.printJoin(e.members, {
      indent: !0,
      statement: !0
    }));
  }
  i(Ate, "TSTypeLiteral");
  function Cte(e) {
    this.print(e.elementType, !0), this.tokenChar(91), this.tokenChar(93);
  }
  i(Cte, "TSArrayType");
  function Dte(e) {
    this.tokenChar(91), this.printList(e.elementTypes, {
      printTrailingSeparator: this.shouldPrintTrailingComma("]")
    }), this.tokenChar(93);
  }
  i(Dte, "TSTupleType");
  function wte(e) {
    this.print(e.typeAnnotation), this.tokenChar(63);
  }
  i(wte, "TSOptionalType");
  function Ite(e) {
    this.token("..."), this.print(e.typeAnnotation);
  }
  i(Ite, "TSRestType");
  function _te(e) {
    this.print(e.label), e.optional && this.tokenChar(63), this.tokenChar(58), this.space(), this.print(e.elementType);
  }
  i(_te, "TSNamedTupleMember");
  function Ote(e) {
    mv(this, e, "|");
  }
  i(Ote, "TSUnionType");
  function Nte(e) {
    mv(this, e, "&");
  }
  i(Nte, "TSIntersectionType");
  function mv(e, t, r) {
    var n;
    let s = 0;
    (n = e.tokenMap) != null && n.startMatches(t, r) && (s = 1, e.token(r)), e.printJoin(t.types, {
      separator(a) {
        this.space(), this.token(r, null, a + s), this.space();
      }
    });
  }
  i(mv, "tsPrintUnionOrIntersectionType");
  function Bte(e) {
    this.print(e.checkType), this.space(), this.word("extends"), this.space(), this.print(e.extendsType), this.space(), this.tokenChar(63), this.
    space(), this.print(e.trueType), this.space(), this.tokenChar(58), this.space(), this.print(e.falseType);
  }
  i(Bte, "TSConditionalType");
  function kte(e) {
    this.word("infer"), this.print(e.typeParameter);
  }
  i(kte, "TSInferType");
  function Fte(e) {
    this.tokenChar(40), this.print(e.typeAnnotation), this.tokenChar(41);
  }
  i(Fte, "TSParenthesizedType");
  function jte(e) {
    this.word(e.operator), this.space(), this.print(e.typeAnnotation);
  }
  i(jte, "TSTypeOperator");
  function Lte(e) {
    this.print(e.objectType, !0), this.tokenChar(91), this.print(e.indexType), this.tokenChar(93);
  }
  i(Lte, "TSIndexedAccessType");
  function Mte(e) {
    let {
      nameType: t,
      optional: r,
      readonly: n,
      typeAnnotation: s
    } = e;
    this.tokenChar(123);
    let a = this.enterDelimited();
    this.space(), n && (dv(this, n), this.word("readonly"), this.space()), this.tokenChar(91), this.word(e.typeParameter.name), this.space(),
    this.word("in"), this.space(), this.print(e.typeParameter.constraint), t && (this.space(), this.word("as"), this.space(), this.print(t)),
    this.tokenChar(93), r && (dv(this, r), this.tokenChar(63)), s && (this.tokenChar(58), this.space(), this.print(s)), this.space(), a(), this.
    tokenChar(125);
  }
  i(Mte, "TSMappedType");
  function dv(e, t) {
    t !== !0 && e.token(t);
  }
  i(dv, "tokenIfPlusMinus");
  function Rte(e) {
    this.print(e.literal);
  }
  i(Rte, "TSLiteralType");
  function qte(e) {
    this.print(e.expression), this.print(e.typeParameters);
  }
  i(qte, "TSClassImplements");
  function Ute(e) {
    let {
      declare: t,
      id: r,
      typeParameters: n,
      extends: s,
      body: a
    } = e;
    t && (this.word("declare"), this.space()), this.word("interface"), this.space(), this.print(r), this.print(n), s != null && s.length && (this.
    space(), this.word("extends"), this.space(), this.printList(s)), this.space(), this.print(a);
  }
  i(Ute, "TSInterfaceDeclaration");
  function Vte(e) {
    bu(this, e, () => this.printJoin(e.body, {
      indent: !0,
      statement: !0
    }));
  }
  i(Vte, "TSInterfaceBody");
  function $te(e) {
    let {
      declare: t,
      id: r,
      typeParameters: n,
      typeAnnotation: s
    } = e;
    t && (this.word("declare"), this.space()), this.word("type"), this.space(), this.print(r), this.print(n), this.space(), this.tokenChar(61),
    this.space(), this.print(s), this.semicolon();
  }
  i($te, "TSTypeAliasDeclaration");
  function Wte(e) {
    let {
      type: t,
      expression: r,
      typeAnnotation: n
    } = e;
    this.print(r, !0), this.space(), this.word(t === "TSAsExpression" ? "as" : "satisfies"), this.space(), this.print(n);
  }
  i(Wte, "TSTypeExpression");
  function Kte(e) {
    let {
      typeAnnotation: t,
      expression: r
    } = e;
    this.tokenChar(60), this.print(t), this.tokenChar(62), this.space(), this.print(r);
  }
  i(Kte, "TSTypeAssertion");
  function Gte(e) {
    this.print(e.expression), this.print(e.typeParameters);
  }
  i(Gte, "TSInstantiationExpression");
  function Hte(e) {
    let {
      declare: t,
      const: r,
      id: n,
      members: s
    } = e;
    t && (this.word("declare"), this.space()), r && (this.word("const"), this.space()), this.word("enum"), this.space(), this.print(n), this.
    space(), bu(this, e, () => {
      var a;
      return this.printList(s, {
        indent: !0,
        statement: !0,
        printTrailingSeparator: (a = this.shouldPrintTrailingComma("}")) != null ? a : !0
      });
    });
  }
  i(Hte, "TSEnumDeclaration");
  function Yte(e) {
    let {
      id: t,
      initializer: r
    } = e;
    this.print(t), r && (this.space(), this.tokenChar(61), this.space(), this.print(r));
  }
  i(Yte, "TSEnumMember");
  function Jte(e) {
    let {
      declare: t,
      id: r,
      kind: n
    } = e;
    if (t && (this.word("declare"), this.space()), e.global || (this.word(n ?? (r.type === "Identifier" ? "namespace" : "module")), this.space()),
    this.print(r), !e.body) {
      this.semicolon();
      return;
    }
    let s = e.body;
    for (; s.type === "TSModuleDeclaration"; )
      this.tokenChar(46), this.print(s.id), s = s.body;
    this.space(), this.print(s);
  }
  i(Jte, "TSModuleDeclaration");
  function zte(e) {
    bu(this, e, () => this.printSequence(e.body, {
      indent: !0
    }));
  }
  i(zte, "TSModuleBlock");
  function Xte(e) {
    let {
      argument: t,
      qualifier: r,
      typeParameters: n
    } = e;
    this.word("import"), this.tokenChar(40), this.print(t), this.tokenChar(41), r && (this.tokenChar(46), this.print(r)), n && this.print(n);
  }
  i(Xte, "TSImportType");
  function Qte(e) {
    let {
      isExport: t,
      id: r,
      moduleReference: n
    } = e;
    t && (this.word("export"), this.space()), this.word("import"), this.space(), this.print(r), this.space(), this.tokenChar(61), this.space(),
    this.print(n), this.semicolon();
  }
  i(Qte, "TSImportEqualsDeclaration");
  function Zte(e) {
    this.token("require("), this.print(e.expression), this.tokenChar(41);
  }
  i(Zte, "TSExternalModuleReference");
  function ere(e) {
    this.print(e.expression), this.tokenChar(33);
  }
  i(ere, "TSNonNullExpression");
  function tre(e) {
    this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(e.expression), this.semicolon();
  }
  i(tre, "TSExportAssignment");
  function rre(e) {
    this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(e.id), this.semicolon();
  }
  i(rre, "TSNamespaceExportDeclaration");
  function nre(e) {
    let {
      typeParameters: t
    } = e, r = e.parameters;
    this.print(t), this.tokenChar(40), this._parameters(r, ")");
    let n = e.typeAnnotation;
    this.print(n);
  }
  i(nre, "tsPrintSignatureDeclarationBase");
  function sre(e) {
    let t = e.type === "ClassAccessorProperty" || e.type === "ClassProperty";
    hv(this, e, [t && e.declare && "declare", e.accessibility]), e.static && (this.word("static"), this.space()), hv(this, e, [e.override &&
    "override", e.abstract && "abstract", t && e.readonly && "readonly"]);
  }
  i(sre, "tsPrintClassMemberModifiers");
  function bu(e, t, r) {
    e.token("{");
    let n = e.enterDelimited();
    r(), n(), e.rightBrace(t);
  }
  i(bu, "printBraced");
  function hv(e, t, r) {
    var n;
    let s = /* @__PURE__ */ new Set();
    for (let a of r)
      a && s.add(a);
    (n = e.tokenMap) == null || n.find(t, (a) => {
      if (s.has(a.value))
        return e.token(a.value), e.space(), s.delete(a.value), s.size === 0;
    });
    for (let a of s)
      e.word(a), e.space();
  }
  i(hv, "printModifiersList");
});

// ../node_modules/@babel/generator/lib/generators/index.js
var gv = A((Je) => {
  "use strict";
  Object.defineProperty(Je, "__esModule", {
    value: !0
  });
  var Tm = Wx();
  Object.keys(Tm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === Tm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Tm[e];
      }, "get")
    });
  });
  var Sm = Gx();
  Object.keys(Sm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === Sm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Sm[e];
      }, "get")
    });
  });
  var xm = zx();
  Object.keys(xm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === xm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return xm[e];
      }, "get")
    });
  });
  var vm = Xx();
  Object.keys(vm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === vm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return vm[e];
      }, "get")
    });
  });
  var Pm = Qx();
  Object.keys(Pm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === Pm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Pm[e];
      }, "get")
    });
  });
  var Am = ym();
  Object.keys(Am).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === Am[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Am[e];
      }, "get")
    });
  });
  var Cm = bm();
  Object.keys(Cm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === Cm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Cm[e];
      }, "get")
    });
  });
  var Dm = cv();
  Object.keys(Dm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === Dm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Dm[e];
      }, "get")
    });
  });
  var wm = pv();
  Object.keys(wm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === wm[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return wm[e];
      }, "get")
    });
  });
  var Im = fv();
  Object.keys(Im).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === Im[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return Im[e];
      }, "get")
    });
  });
  var _m = yv();
  Object.keys(_m).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Je && Je[e] === _m[e] || Object.defineProperty(Je, e, {
      enumerable: !0,
      get: /* @__PURE__ */ i(function() {
        return _m[e];
      }, "get")
    });
  });
});

// ../node_modules/@babel/generator/lib/printer.js
var Sv = A((Eu) => {
  "use strict";
  Object.defineProperty(Eu, "__esModule", {
    value: !0
  });
  Eu.default = void 0;
  var ire = Cx(), Ev = is(), are = Pe(), ore = $x(), lre = gv(), {
    isExpression: ure,
    isFunction: cre,
    isStatement: pre,
    isClassBody: fre,
    isTSInterfaceBody: dre,
    isTSEnumDeclaration: hre
  } = are, mre = /e/i, yre = /\.0+$/, Tv = /[\n\r\u2028\u2029]/, gre = /[\n\r\u2028\u2029]|\*\//;
  function bv(e) {
    return e.type === "CommentLine" || Tv.test(e.value);
  }
  i(bv, "commentIsNewline");
  var {
    needsParens: bre
  } = Ev, Za = class {
    static {
      i(this, "Printer");
    }
    constructor(t, r, n, s) {
      this.inForStatementInit = !1, this.tokenContext = 0, this._tokens = null, this._originalCode = null, this._currentNode = null, this._indent =
      0, this._indentRepeat = 0, this._insideAux = !1, this._noLineTerminator = !1, this._noLineTerminatorAfterNode = null, this._printAuxAfterOnNextUserNode =
      !1, this._printedComments = /* @__PURE__ */ new Set(), this._endsWithInteger = !1, this._endsWithWord = !1, this._endsWithDiv = !1, this.
      _lastCommentLine = 0, this._endsWithInnerRaw = !1, this._indentInnerComments = !0, this.tokenMap = null, this._boundGetRawIdentifier =
      this._getRawIdentifier.bind(this), this.format = t, this._tokens = n, this._originalCode = s, this._indentRepeat = t.indent.style.length,
      this._inputMap = r?._inputMap, this._buf = new ire.default(r, t.indent.style[0]);
    }
    enterForStatementInit() {
      return this.inForStatementInit ? () => {
      } : (this.inForStatementInit = !0, () => {
        this.inForStatementInit = !1;
      });
    }
    enterDelimited() {
      let t = this.inForStatementInit, r = this._noLineTerminatorAfterNode;
      return t === !1 && r === null ? () => {
      } : (this.inForStatementInit = !1, this._noLineTerminatorAfterNode = null, () => {
        this.inForStatementInit = t, this._noLineTerminatorAfterNode = r;
      });
    }
    generate(t) {
      return this.format.preserveFormat && (this.tokenMap = new ore.TokenMap(t, this._tokens, this._originalCode)), this.print(t), this._maybeAddAuxComment(),
      this._buf.get();
    }
    indent() {
      let {
        format: t
      } = this;
      t.preserveFormat || t.compact || t.concise || this._indent++;
    }
    dedent() {
      let {
        format: t
      } = this;
      t.preserveFormat || t.compact || t.concise || this._indent--;
    }
    semicolon(t = !1) {
      if (this._maybeAddAuxComment(), t) {
        this._appendChar(59), this._noLineTerminator = !1;
        return;
      }
      if (this.tokenMap) {
        let r = this._currentNode;
        if (r.start != null && r.end != null) {
          if (!this.tokenMap.endMatches(r, ";"))
            return;
          let n = this.tokenMap.getIndexes(this._currentNode);
          this._catchUpTo(this._tokens[n[n.length - 1]].loc.start);
        }
      }
      this._queue(59), this._noLineTerminator = !1;
    }
    rightBrace(t) {
      this.format.minified && this._buf.removeLastSemicolon(), this.sourceWithOffset("end", t.loc, -1), this.tokenChar(125);
    }
    rightParens(t) {
      this.sourceWithOffset("end", t.loc, -1), this.tokenChar(41);
    }
    space(t = !1) {
      let {
        format: r
      } = this;
      if (!(r.compact || r.preserveFormat)) {
        if (t)
          this._space();
        else if (this._buf.hasContent()) {
          let n = this.getLastChar();
          n !== 32 && n !== 10 && this._space();
        }
      }
    }
    word(t, r = !1) {
      this.tokenContext = 0, this._maybePrintInnerComments(t), (this._endsWithWord || this._endsWithDiv && t.charCodeAt(0) === 47) && this._space(),
      this._maybeAddAuxComment(), this._append(t, !1), this._endsWithWord = !0, this._noLineTerminator = r;
    }
    number(t, r) {
      function n(s) {
        if (s.length > 2 && s.charCodeAt(0) === 48) {
          let a = s.charCodeAt(1);
          return a === 98 || a === 111 || a === 120;
        }
        return !1;
      }
      i(n, "isNonDecimalLiteral"), this.word(t), this._endsWithInteger = Number.isInteger(r) && !n(t) && !mre.test(t) && !yre.test(t) && t.charCodeAt(
      t.length - 1) !== 46;
    }
    token(t, r = !1, n = 0) {
      this.tokenContext = 0, this._maybePrintInnerComments(t, n);
      let s = this.getLastChar(), a = t.charCodeAt(0);
      (s === 33 && (t === "--" || a === 61) || a === 43 && s === 43 || a === 45 && s === 45 || a === 46 && this._endsWithInteger) && this._space(),
      this._maybeAddAuxComment(), this._append(t, r, n), this._noLineTerminator = !1;
    }
    tokenChar(t) {
      this.tokenContext = 0, this._maybePrintInnerComments(String.fromCharCode(t));
      let r = this.getLastChar();
      (t === 43 && r === 43 || t === 45 && r === 45 || t === 46 && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this.
      _appendChar(t), this._noLineTerminator = !1;
    }
    newline(t = 1, r) {
      if (!(t <= 0)) {
        if (!r) {
          if (this.format.retainLines || this.format.compact) return;
          if (this.format.concise) {
            this.space();
            return;
          }
        }
        t > 2 && (t = 2), t -= this._buf.getNewlineCount();
        for (let n = 0; n < t; n++)
          this._newline();
      }
    }
    endsWith(t) {
      return this.getLastChar() === t;
    }
    getLastChar() {
      return this._buf.getLastChar();
    }
    endsWithCharAndNewline() {
      return this._buf.endsWithCharAndNewline();
    }
    removeTrailingNewline() {
      this._buf.removeTrailingNewline();
    }
    exactSource(t, r) {
      if (!t) {
        r();
        return;
      }
      this._catchUp("start", t), this._buf.exactSource(t, r);
    }
    source(t, r) {
      r && (this._catchUp(t, r), this._buf.source(t, r));
    }
    sourceWithOffset(t, r, n) {
      !r || this.format.preserveFormat || (this._catchUp(t, r), this._buf.sourceWithOffset(t, r, n));
    }
    sourceIdentifierName(t, r) {
      if (!this._buf._canMarkIdName) return;
      let n = this._buf._sourcePosition;
      n.identifierNamePos = r, n.identifierName = t;
    }
    _space() {
      this._queue(32);
    }
    _newline() {
      this._queue(10);
    }
    _append(t, r, n = 0) {
      if (this.tokenMap) {
        let s = this.tokenMap.findMatching(this._currentNode, t, n);
        s && this._catchUpTo(s.loc.start);
      }
      this._maybeIndent(t.charCodeAt(0)), this._buf.append(t, r), this._endsWithWord = !1, this._endsWithInteger = !1, this._endsWithDiv = !1;
    }
    _appendChar(t) {
      if (this.tokenMap) {
        let r = this.tokenMap.findMatching(this._currentNode, String.fromCharCode(t));
        r && this._catchUpTo(r.loc.start);
      }
      this._maybeIndent(t), this._buf.appendChar(t), this._endsWithWord = !1, this._endsWithInteger = !1, this._endsWithDiv = !1;
    }
    _queue(t) {
      this._maybeIndent(t), this._buf.queue(t), this._endsWithWord = !1, this._endsWithInteger = !1;
    }
    _maybeIndent(t) {
      this._indent && t !== 10 && this.endsWith(10) && this._buf.queueIndentation(this._getIndent());
    }
    _shouldIndent(t) {
      if (this._indent && t !== 10 && this.endsWith(10))
        return !0;
    }
    catchUp(t) {
      if (!this.format.retainLines) return;
      let r = t - this._buf.getCurrentLine();
      for (let n = 0; n < r; n++)
        this._newline();
    }
    _catchUp(t, r) {
      let {
        format: n
      } = this;
      if (!n.preserveFormat) {
        n.retainLines && r != null && r[t] && this.catchUp(r[t].line);
        return;
      }
      let s = r?.[t];
      s != null && this._catchUpTo(s);
    }
    _catchUpTo({
      line: t,
      column: r,
      index: n
    }) {
      let s = t - this._buf.getCurrentLine();
      if (s > 0 && this._noLineTerminator)
        return;
      for (let o = 0; o < s; o++)
        this._newline();
      let a = s > 0 ? r : r - this._buf.getCurrentColumn();
      if (a > 0) {
        let o = this._originalCode ? this._originalCode.slice(n - a, n).replace(/[^\t\x0B\f \xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF]/gu,
        " ") : " ".repeat(a);
        this._append(o, !1);
      }
    }
    _getIndent() {
      return this._indentRepeat * this._indent;
    }
    printTerminatorless(t) {
      this._noLineTerminator = !0, this.print(t);
    }
    print(t, r, n) {
      var s, a, o;
      if (!t) return;
      this._endsWithInnerRaw = !1;
      let l = t.type, u = this.format, c = u.concise;
      t._compact && (u.concise = !0);
      let p = this[l];
      if (p === void 0)
        throw new ReferenceError(`unknown node of type ${JSON.stringify(l)} with constructor ${JSON.stringify(t.constructor.name)}`);
      let f = this._currentNode;
      this._currentNode = t;
      let h = this._insideAux;
      this._insideAux = t.loc == null, this._maybeAddAuxComment(this._insideAux && !h);
      let g = (s = t.extra) == null ? void 0 : s.parenthesized, P = g && u.preserveFormat || g && u.retainFunctionParens && l === "FunctionE\
xpression" || bre(t, f, this.tokenContext, this.inForStatementInit, u.preserveFormat ? this._boundGetRawIdentifier : void 0);
      if (!P && g && (a = t.leadingComments) != null && a.length && t.leadingComments[0].type === "CommentBlock")
        switch (f?.type) {
          case "ExpressionStatement":
          case "VariableDeclarator":
          case "AssignmentExpression":
          case "ReturnStatement":
            break;
          case "CallExpression":
          case "OptionalCallExpression":
          case "NewExpression":
            if (f.callee !== t) break;
          default:
            P = !0;
        }
      let d = !1;
      !P && this._noLineTerminator && ((o = t.leadingComments) != null && o.some(bv) || this.format.retainLines && t.loc && t.loc.start.line >
      this._buf.getCurrentLine()) && (P = !0, d = !0);
      let y, E;
      if (!P && (r || (r = f && this._noLineTerminatorAfterNode === f && Ev.isLastChild(f, t)), r)) {
        var _;
        (_ = t.trailingComments) != null && _.some(bv) ? ure(t) && (P = !0) : (y = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode =
        t);
      }
      P && (this.tokenChar(40), d && this.indent(), this._endsWithInnerRaw = !1, this.inForStatementInit && (E = !0, this.inForStatementInit =
      !1), y = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = null), this._lastCommentLine = 0, this._printLeadingComments(
      t, f);
      let k = l === "Program" || l === "File" ? null : t.loc;
      this.exactSource(k, p.bind(this, t, f)), P ? (this._printTrailingComments(t, f), d && (this.dedent(), this.newline()), this.tokenChar(
      41), this._noLineTerminator = r, E && (this.inForStatementInit = !0)) : r && !this._noLineTerminator ? (this._noLineTerminator = !0, this.
      _printTrailingComments(t, f)) : this._printTrailingComments(t, f, n), this._currentNode = f, u.concise = c, this._insideAux = h, y !==
      void 0 && (this._noLineTerminatorAfterNode = y), this._endsWithInnerRaw = !1;
    }
    _maybeAddAuxComment(t) {
      t && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
    }
    _printAuxBeforeComment() {
      if (this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = !0;
      let t = this.format.auxiliaryCommentBefore;
      t && this._printComment({
        type: "CommentBlock",
        value: t
      }, 0);
    }
    _printAuxAfterComment() {
      if (!this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = !1;
      let t = this.format.auxiliaryCommentAfter;
      t && this._printComment({
        type: "CommentBlock",
        value: t
      }, 0);
    }
    getPossibleRaw(t) {
      let r = t.extra;
      if (r?.raw != null && r.rawValue != null && t.value === r.rawValue)
        return r.raw;
    }
    printJoin(t, r = {}) {
      if (!(t != null && t.length)) return;
      let {
        indent: n
      } = r;
      if (n == null && this.format.retainLines) {
        var s;
        let p = (s = t[0].loc) == null ? void 0 : s.start.line;
        p != null && p !== this._buf.getCurrentLine() && (n = !0);
      }
      n && this.indent();
      let a = {
        addNewlines: r.addNewlines,
        nextNodeStartLine: 0
      }, o = r.separator ? r.separator.bind(this) : null, l = t.length;
      for (let p = 0; p < l; p++) {
        let f = t[p];
        if (f && (r.statement && this._printNewline(p === 0, a), this.print(f, void 0, r.trailingCommentsLineOffset || 0), r.iterator == null ||
        r.iterator(f, p), o != null && (p < l - 1 ? o(p, !1) : r.printTrailingSeparator && o(p, !0)), r.statement)) {
          var u;
          if ((u = f.trailingComments) != null && u.length || (this._lastCommentLine = 0), p + 1 === l)
            this.newline(1);
          else {
            var c;
            let h = t[p + 1];
            a.nextNodeStartLine = ((c = h.loc) == null ? void 0 : c.start.line) || 0, this._printNewline(!0, a);
          }
        }
      }
      n && this.dedent();
    }
    printAndIndentOnComments(t) {
      let r = t.leadingComments && t.leadingComments.length > 0;
      r && this.indent(), this.print(t), r && this.dedent();
    }
    printBlock(t) {
      let r = t.body;
      r.type !== "EmptyStatement" && this.space(), this.print(r);
    }
    _printTrailingComments(t, r, n) {
      let {
        innerComments: s,
        trailingComments: a
      } = t;
      s != null && s.length && this._printComments(2, s, t, r, n), a != null && a.length && this._printComments(2, a, t, r, n);
    }
    _printLeadingComments(t, r) {
      let n = t.leadingComments;
      n != null && n.length && this._printComments(0, n, t, r);
    }
    _maybePrintInnerComments(t, r) {
      if (this._endsWithInnerRaw) {
        var n;
        this.printInnerComments((n = this.tokenMap) == null ? void 0 : n.findMatching(this._currentNode, t, r));
      }
      this._endsWithInnerRaw = !0, this._indentInnerComments = !0;
    }
    printInnerComments(t) {
      let r = this._currentNode, n = r.innerComments;
      if (!(n != null && n.length)) return;
      let s = this.endsWith(32), a = this._indentInnerComments, o = this._printedComments.size;
      a && this.indent(), this._printComments(1, n, r, void 0, void 0, t), s && o !== this._printedComments.size && this.space(), a && this.
      dedent();
    }
    noIndentInnerCommentsHere() {
      this._indentInnerComments = !1;
    }
    printSequence(t, r = {}) {
      var n;
      r.statement = !0, (n = r.indent) != null || (r.indent = !1), this.printJoin(t, r);
    }
    printList(t, r = {}) {
      r.separator == null && (r.separator = Ere), this.printJoin(t, r);
    }
    shouldPrintTrailingComma(t) {
      if (!this.tokenMap) return null;
      let r = this.tokenMap.findLastIndex(this._currentNode, (n) => this.tokenMap.matchesOriginal(n, t));
      return r <= 0 ? null : this.tokenMap.matchesOriginal(this._tokens[r - 1], ",");
    }
    _printNewline(t, r) {
      let n = this.format;
      if (n.retainLines || n.compact) return;
      if (n.concise) {
        this.space();
        return;
      }
      if (!t)
        return;
      let s = r.nextNodeStartLine, a = this._lastCommentLine;
      if (s > 0 && a > 0) {
        let o = s - a;
        if (o >= 0) {
          this.newline(o || 1);
          return;
        }
      }
      this._buf.hasContent() && this.newline(1);
    }
    _shouldPrintComment(t, r) {
      if (t.ignore || this._printedComments.has(t)) return 0;
      if (this._noLineTerminator && gre.test(t.value))
        return 2;
      if (r && this.tokenMap) {
        let n = this.tokenMap.find(this._currentNode, (s) => s.value === t.value);
        if (n && n.start > r.start)
          return 2;
      }
      return this._printedComments.add(t), this.format.shouldPrintComment(t.value) ? 1 : 0;
    }
    _printComment(t, r) {
      let n = this._noLineTerminator, s = t.type === "CommentBlock", a = s && r !== 1 && !this._noLineTerminator;
      a && this._buf.hasContent() && r !== 2 && this.newline(1);
      let o = this.getLastChar();
      o !== 91 && o !== 123 && o !== 40 && this.space();
      let l;
      if (s) {
        if (l = `/*${t.value}*/`, this.format.indent.adjustMultilineComment) {
          var u;
          let c = (u = t.loc) == null ? void 0 : u.start.column;
          if (c) {
            let p = new RegExp("\\n\\s{1," + c + "}", "g");
            l = l.replace(p, `
`);
          }
          if (this.format.concise)
            l = l.replace(/\n(?!$)/g, `
`);
          else {
            let p = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
            (this._shouldIndent(47) || this.format.retainLines) && (p += this._getIndent()), l = l.replace(/\n(?!$)/g, `
${" ".repeat(p)}`);
          }
        }
      } else n ? l = `/*${t.value}*/` : l = `//${t.value}`;
      this._endsWithDiv && this._space(), this.source("start", t.loc), this._append(l, s), !s && !n && this.newline(1, !0), a && r !== 3 && this.
      newline(1);
    }
    _printComments(t, r, n, s, a = 0, o) {
      let l = n.loc, u = r.length, c = !!l, p = c ? l.start.line : 0, f = c ? l.end.line : 0, h = 0, g = 0, P = this._noLineTerminator ? function() {
      } : this.newline.bind(this);
      for (let d = 0; d < u; d++) {
        let y = r[d], E = this._shouldPrintComment(y, o);
        if (E === 2) {
          c = !1;
          break;
        }
        if (c && y.loc && E === 1) {
          let _ = y.loc.start.line, k = y.loc.end.line;
          if (t === 0) {
            let B = 0;
            d === 0 ? this._buf.hasContent() && (y.type === "CommentLine" || _ !== k) && (B = g = 1) : B = _ - h, h = k, P(B), this._printComment(
            y, 1), d + 1 === u && (P(Math.max(p - h, g)), h = p);
          } else if (t === 1) {
            let B = _ - (d === 0 ? p : h);
            h = k, P(B), this._printComment(y, 1), d + 1 === u && (P(Math.min(1, f - h)), h = f);
          } else {
            let B = _ - (d === 0 ? f - a : h);
            h = k, P(B), this._printComment(y, 1);
          }
        } else {
          if (c = !1, E !== 1)
            continue;
          if (u === 1) {
            let _ = y.loc ? y.loc.start.line === y.loc.end.line : !Tv.test(y.value), k = _ && !pre(n) && !fre(s) && !dre(s) && !hre(s);
            t === 0 ? this._printComment(y, k && n.type !== "ObjectExpression" || _ && cre(s, {
              body: n
            }) ? 1 : 0) : k && t === 2 ? this._printComment(y, 1) : this._printComment(y, 0);
          } else t === 1 && !(n.type === "ObjectExpression" && n.properties.length > 1) && n.type !== "ClassBody" && n.type !== "TSInterface\
Body" ? this._printComment(y, d === 0 ? 2 : d === u - 1 ? 3 : 0) : this._printComment(y, 0);
        }
      }
      t === 2 && c && h && (this._lastCommentLine = h);
    }
  };
  Object.assign(Za.prototype, lre);
  Za.prototype.Noop = /* @__PURE__ */ i(function() {
  }, "Noop");
  var DPe = Eu.default = Za;
  function Ere(e, t) {
    this.token(",", !1, e), t || this.space();
  }
  i(Ere, "commaSeparator");
});

// ../node_modules/@babel/generator/lib/index.js
var eo = A((Tu) => {
  "use strict";
  Object.defineProperty(Tu, "__esModule", {
    value: !0
  });
  Tu.default = Tre;
  var xv = Ax(), vv = Sv();
  function Pv(e, t, r) {
    if (t.experimental_preserveFormat) {
      if (typeof e != "string")
        throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");
      if (!t.retainLines)
        throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");
      if (t.compact && t.compact !== "auto")
        throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");
      if (t.minified)
        throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");
      if (t.jsescOption)
        throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");
      if (!Array.isArray(r.tokens))
        throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable t\
he `tokens: true` parser option.");
    }
    let n = {
      auxiliaryCommentBefore: t.auxiliaryCommentBefore,
      auxiliaryCommentAfter: t.auxiliaryCommentAfter,
      shouldPrintComment: t.shouldPrintComment,
      preserveFormat: t.experimental_preserveFormat,
      retainLines: t.retainLines,
      retainFunctionParens: t.retainFunctionParens,
      comments: t.comments == null || t.comments,
      compact: t.compact,
      minified: t.minified,
      concise: t.concise,
      indent: {
        adjustMultilineComment: !0,
        style: "  "
      },
      jsescOption: Object.assign({
        quotes: "double",
        wrap: !0,
        minimal: !1
      }, t.jsescOption),
      topicToken: t.topicToken,
      importAttributesKeyword: t.importAttributesKeyword
    };
    {
      var s;
      n.decoratorsBeforeExport = t.decoratorsBeforeExport, n.jsescOption.json = t.jsonCompatibleStrings, n.recordAndTupleSyntaxType = (s = t.
      recordAndTupleSyntaxType) != null ? s : "hash";
    }
    n.minified ? (n.compact = !0, n.shouldPrintComment = n.shouldPrintComment || (() => n.comments)) : n.shouldPrintComment = n.shouldPrintComment ||
    ((u) => n.comments || u.includes("@license") || u.includes("@preserve")), n.compact === "auto" && (n.compact = typeof e == "string" && e.
    length > 5e5, n.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${t.filename} as it exceeds th\
e max of 500KB.`)), (n.compact || n.preserveFormat) && (n.indent.adjustMultilineComment = !1);
    let {
      auxiliaryCommentBefore: a,
      auxiliaryCommentAfter: o,
      shouldPrintComment: l
    } = n;
    return a && !l(a) && (n.auxiliaryCommentBefore = void 0), o && !l(o) && (n.auxiliaryCommentAfter = void 0), n;
  }
  i(Pv, "normalizeOptions");
  Tu.CodeGenerator = class {
    static {
      i(this, "CodeGenerator");
    }
    constructor(t, r = {}, n) {
      this._ast = void 0, this._format = void 0, this._map = void 0, this._ast = t, this._format = Pv(n, r, t), this._map = r.sourceMaps ? new xv.
      default(r, n) : null;
    }
    generate() {
      return new vv.default(this._format, this._map).generate(this._ast);
    }
  };
  function Tre(e, t = {}, r) {
    let n = Pv(r, t, e), s = t.sourceMaps ? new xv.default(t, r) : null;
    return new vv.default(n, s, e.tokens, typeof r == "string" ? r : null).generate(e);
  }
  i(Tre, "generate");
});

// ../node_modules/@babel/traverse/lib/path/ancestry.js
var Av = A((Or) => {
  "use strict";
  Object.defineProperty(Or, "__esModule", {
    value: !0
  });
  Or.find = Pre;
  Or.findParent = vre;
  Or.getAncestry = Ire;
  Or.getDeepestCommonAncestorFrom = wre;
  Or.getEarliestCommonAncestorFrom = Dre;
  Or.getFunctionParent = Are;
  Or.getStatementParent = Cre;
  Or.inType = Nre;
  Or.isAncestor = _re;
  Or.isDescendant = Ore;
  var Sre = Pe(), {
    VISITOR_KEYS: xre
  } = Sre;
  function vre(e) {
    let t = this;
    for (; t = t.parentPath; )
      if (e(t)) return t;
    return null;
  }
  i(vre, "findParent");
  function Pre(e) {
    let t = this;
    do
      if (e(t)) return t;
    while (t = t.parentPath);
    return null;
  }
  i(Pre, "find");
  function Are() {
    return this.findParent((e) => e.isFunction());
  }
  i(Are, "getFunctionParent");
  function Cre() {
    let e = this;
    do {
      if (!e.parentPath || Array.isArray(e.container) && e.isStatement())
        break;
      e = e.parentPath;
    } while (e);
    if (e && (e.isProgram() || e.isFile()))
      throw new Error("File/Program node, we can't possibly find a statement parent to this");
    return e;
  }
  i(Cre, "getStatementParent");
  function Dre(e) {
    return this.getDeepestCommonAncestorFrom(e, function(t, r, n) {
      let s, a = xre[t.type];
      for (let o of n) {
        let l = o[r + 1];
        if (!s) {
          s = l;
          continue;
        }
        if (l.listKey && s.listKey === l.listKey && l.key < s.key) {
          s = l;
          continue;
        }
        let u = a.indexOf(s.parentKey), c = a.indexOf(l.parentKey);
        u > c && (s = l);
      }
      return s;
    });
  }
  i(Dre, "getEarliestCommonAncestorFrom");
  function wre(e, t) {
    if (!e.length)
      return this;
    if (e.length === 1)
      return e[0];
    let r = 1 / 0, n, s, a = e.map((l) => {
      let u = [];
      do
        u.unshift(l);
      while ((l = l.parentPath) && l !== this);
      return u.length < r && (r = u.length), u;
    }), o = a[0];
    e: for (let l = 0; l < r; l++) {
      let u = o[l];
      for (let c of a)
        if (c[l] !== u)
          break e;
      n = l, s = u;
    }
    if (s)
      return t ? t(s, n, a) : s;
    throw new Error("Couldn't find intersection");
  }
  i(wre, "getDeepestCommonAncestorFrom");
  function Ire() {
    let e = this, t = [];
    do
      t.push(e);
    while (e = e.parentPath);
    return t;
  }
  i(Ire, "getAncestry");
  function _re(e) {
    return e.isDescendant(this);
  }
  i(_re, "isAncestor");
  function Ore(e) {
    return !!this.findParent((t) => t === e);
  }
  i(Ore, "isDescendant");
  function Nre(...e) {
    let t = this;
    for (; t; ) {
      for (let r of e)
        if (t.node.type === r) return !0;
      t = t.parentPath;
    }
    return !1;
  }
  i(Nre, "inType");
});

// ../node_modules/@babel/traverse/lib/path/inference/util.js
var Nm = A((Om) => {
  "use strict";
  Object.defineProperty(Om, "__esModule", {
    value: !0
  });
  Om.createUnionType = Lre;
  var Bre = Pe(), {
    createFlowUnionType: Cv,
    createTSUnionType: Dv,
    createUnionTypeAnnotation: kre,
    isFlowType: Fre,
    isTSType: jre
  } = Bre;
  function Lre(e) {
    {
      if (e.every((t) => Fre(t)))
        return Cv ? Cv(e) : kre(e);
      if (e.every((t) => jre(t)) && Dv)
        return Dv(e);
    }
  }
  i(Lre, "createUnionType");
});

// ../node_modules/@babel/traverse/lib/path/inference/inferer-reference.js
var Nv = A((Bm) => {
  "use strict";
  Object.defineProperty(Bm, "__esModule", {
    value: !0
  });
  Bm.default = Vre;
  var Mre = Pe(), Iv = Nm(), {
    BOOLEAN_NUMBER_BINARY_OPERATORS: Rre,
    createTypeAnnotationBasedOnTypeof: qre,
    numberTypeAnnotation: _v,
    voidTypeAnnotation: Ure
  } = Mre;
  function Vre(e) {
    if (!this.isReferenced()) return;
    let t = this.scope.getBinding(e.name);
    if (t)
      return t.identifier.typeAnnotation ? t.identifier.typeAnnotation : $re(t, this, e.name);
    if (e.name === "undefined")
      return Ure();
    if (e.name === "NaN" || e.name === "Infinity")
      return _v();
    e.name;
  }
  i(Vre, "_default");
  function $re(e, t, r) {
    let n = [], s = [], a = wv(e, t, s), o = Ov(e, t, r);
    if (o) {
      let l = wv(e, o.ifStatement);
      a = a.filter((u) => !l.includes(u)), n.push(o.typeAnnotation);
    }
    if (a.length) {
      a.push(...s);
      for (let l of a)
        n.push(l.getTypeAnnotation());
    }
    if (n.length)
      return (0, Iv.createUnionType)(n);
  }
  i($re, "getTypeAnnotationBindingConstantViolations");
  function wv(e, t, r) {
    let n = e.constantViolations.slice();
    return n.unshift(e.path), n.filter((s) => {
      s = s.resolve();
      let a = s._guessExecutionStatusRelativeTo(t);
      return r && a === "unknown" && r.push(s), a === "before";
    });
  }
  i(wv, "getConstantViolationsBefore");
  function Wre(e, t) {
    let r = t.node.operator, n = t.get("right").resolve(), s = t.get("left").resolve(), a;
    if (s.isIdentifier({
      name: e
    }) ? a = n : n.isIdentifier({
      name: e
    }) && (a = s), a)
      return r === "===" ? a.getTypeAnnotation() : Rre.includes(r) ? _v() : void 0;
    if (r !== "===" && r !== "==") return;
    let o, l;
    if (s.isUnaryExpression({
      operator: "typeof"
    }) ? (o = s, l = n) : n.isUnaryExpression({
      operator: "typeof"
    }) && (o = n, l = s), !o || !o.get("argument").isIdentifier({
      name: e
    }) || (l = l.resolve(), !l.isLiteral())) return;
    let u = l.node.value;
    if (typeof u == "string")
      return qre(u);
  }
  i(Wre, "inferAnnotationFromBinaryExpression");
  function Kre(e, t, r) {
    let n;
    for (; n = t.parentPath; ) {
      if (n.isIfStatement() || n.isConditionalExpression())
        return t.key === "test" ? void 0 : n;
      if (n.isFunction() && n.parentPath.scope.getBinding(r) !== e)
        return;
      t = n;
    }
  }
  i(Kre, "getParentConditionalPath");
  function Ov(e, t, r) {
    let n = Kre(e, t, r);
    if (!n) return;
    let a = [n.get("test")], o = [];
    for (let l = 0; l < a.length; l++) {
      let u = a[l];
      if (u.isLogicalExpression())
        u.node.operator === "&&" && (a.push(u.get("left")), a.push(u.get("right")));
      else if (u.isBinaryExpression()) {
        let c = Wre(r, u);
        c && o.push(c);
      }
    }
    return o.length ? {
      typeAnnotation: (0, Iv.createUnionType)(o),
      ifStatement: n
    } : Ov(e, n, r);
  }
  i(Ov, "getConditionalAnnotation");
});

// ../node_modules/@babel/traverse/lib/path/inference/inferers.js
var qv = A((tt) => {
  "use strict";
  Object.defineProperty(tt, "__esModule", {
    value: !0
  });
  tt.ArrayExpression = Lv;
  tt.AssignmentExpression = hne;
  tt.BinaryExpression = une;
  tt.BooleanLiteral = bne;
  tt.CallExpression = Dne;
  tt.ConditionalExpression = pne;
  tt.ClassDeclaration = tt.ClassExpression = tt.FunctionDeclaration = tt.ArrowFunctionExpression = tt.FunctionExpression = xne;
  Object.defineProperty(tt, "Identifier", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Hre.default;
    }, "get")
  });
  tt.LogicalExpression = cne;
  tt.NewExpression = ane;
  tt.NullLiteral = Ene;
  tt.NumericLiteral = gne;
  tt.ObjectExpression = Sne;
  tt.ParenthesizedExpression = dne;
  tt.RegExpLiteral = Tne;
  tt.RestElement = Mv;
  tt.SequenceExpression = fne;
  tt.StringLiteral = yne;
  tt.TSAsExpression = jv;
  tt.TSNonNullExpression = ine;
  tt.TaggedTemplateExpression = wne;
  tt.TemplateLiteral = one;
  tt.TypeCastExpression = Fv;
  tt.UnaryExpression = lne;
  tt.UpdateExpression = mne;
  tt.VariableDeclarator = sne;
  var Gre = Pe(), Hre = Nv(), kv = Nm(), {
    BOOLEAN_BINARY_OPERATORS: Yre,
    BOOLEAN_UNARY_OPERATORS: Jre,
    NUMBER_BINARY_OPERATORS: zre,
    NUMBER_UNARY_OPERATORS: Xre,
    STRING_UNARY_OPERATORS: Qre,
    anyTypeAnnotation: Bv,
    arrayTypeAnnotation: km,
    booleanTypeAnnotation: Fm,
    buildMatchMemberExpression: Su,
    genericTypeAnnotation: os,
    identifier: Ws,
    nullLiteralTypeAnnotation: Zre,
    numberTypeAnnotation: _i,
    stringTypeAnnotation: Ks,
    tupleTypeAnnotation: ene,
    unionTypeAnnotation: tne,
    voidTypeAnnotation: rne,
    isIdentifier: nne
  } = Gre;
  function sne() {
    if (this.get("id").isIdentifier())
      return this.get("init").getTypeAnnotation();
  }
  i(sne, "VariableDeclarator");
  function Fv(e) {
    return e.typeAnnotation;
  }
  i(Fv, "TypeCastExpression");
  Fv.validParent = !0;
  function jv(e) {
    return e.typeAnnotation;
  }
  i(jv, "TSAsExpression");
  jv.validParent = !0;
  function ine() {
    return this.get("expression").getTypeAnnotation();
  }
  i(ine, "TSNonNullExpression");
  function ane(e) {
    if (e.callee.type === "Identifier")
      return os(e.callee);
  }
  i(ane, "NewExpression");
  function one() {
    return Ks();
  }
  i(one, "TemplateLiteral");
  function lne(e) {
    let t = e.operator;
    if (t === "void")
      return rne();
    if (Xre.includes(t))
      return _i();
    if (Qre.includes(t))
      return Ks();
    if (Jre.includes(t))
      return Fm();
  }
  i(lne, "UnaryExpression");
  function une(e) {
    let t = e.operator;
    if (zre.includes(t))
      return _i();
    if (Yre.includes(t))
      return Fm();
    if (t === "+") {
      let r = this.get("right"), n = this.get("left");
      return n.isBaseType("number") && r.isBaseType("number") ? _i() : n.isBaseType("string") || r.isBaseType("string") ? Ks() : tne([Ks(), _i()]);
    }
  }
  i(une, "BinaryExpression");
  function cne() {
    let e = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
    return (0, kv.createUnionType)(e);
  }
  i(cne, "LogicalExpression");
  function pne() {
    let e = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
    return (0, kv.createUnionType)(e);
  }
  i(pne, "ConditionalExpression");
  function fne() {
    return this.get("expressions").pop().getTypeAnnotation();
  }
  i(fne, "SequenceExpression");
  function dne() {
    return this.get("expression").getTypeAnnotation();
  }
  i(dne, "ParenthesizedExpression");
  function hne() {
    return this.get("right").getTypeAnnotation();
  }
  i(hne, "AssignmentExpression");
  function mne(e) {
    let t = e.operator;
    if (t === "++" || t === "--")
      return _i();
  }
  i(mne, "UpdateExpression");
  function yne() {
    return Ks();
  }
  i(yne, "StringLiteral");
  function gne() {
    return _i();
  }
  i(gne, "NumericLiteral");
  function bne() {
    return Fm();
  }
  i(bne, "BooleanLiteral");
  function Ene() {
    return Zre();
  }
  i(Ene, "NullLiteral");
  function Tne() {
    return os(Ws("RegExp"));
  }
  i(Tne, "RegExpLiteral");
  function Sne() {
    return os(Ws("Object"));
  }
  i(Sne, "ObjectExpression");
  function Lv() {
    return os(Ws("Array"));
  }
  i(Lv, "ArrayExpression");
  function Mv() {
    return Lv();
  }
  i(Mv, "RestElement");
  Mv.validParent = !0;
  function xne() {
    return os(Ws("Function"));
  }
  i(xne, "Func");
  var vne = Su("Array.from"), Pne = Su("Object.keys"), Ane = Su("Object.values"), Cne = Su("Object.entries");
  function Dne() {
    let {
      callee: e
    } = this.node;
    return Pne(e) ? km(Ks()) : vne(e) || Ane(e) || nne(e, {
      name: "Array"
    }) ? km(Bv()) : Cne(e) ? km(ene([Ks(), Bv()])) : Rv(this.get("callee"));
  }
  i(Dne, "CallExpression");
  function wne() {
    return Rv(this.get("tag"));
  }
  i(wne, "TaggedTemplateExpression");
  function Rv(e) {
    if (e = e.resolve(), e.isFunction()) {
      let {
        node: t
      } = e;
      if (t.async)
        return t.generator ? os(Ws("AsyncIterator")) : os(Ws("Promise"));
      if (t.generator)
        return os(Ws("Iterator"));
      if (e.node.returnType)
        return e.node.returnType;
    }
  }
  i(Rv, "resolveCall");
});

// ../node_modules/@babel/traverse/lib/path/inference/index.js
var Kv = A((ls) => {
  "use strict";
  Object.defineProperty(ls, "__esModule", {
    value: !0
  });
  ls._getTypeAnnotation = Wv;
  ls.baseTypeStrictlyMatches = zne;
  ls.couldBeBaseType = Jne;
  ls.getTypeAnnotation = Hne;
  ls.isBaseType = Yne;
  ls.isGenericType = Xne;
  var Uv = qv(), Ine = Pe(), {
    anyTypeAnnotation: $v,
    isAnyTypeAnnotation: xu,
    isArrayTypeAnnotation: _ne,
    isBooleanTypeAnnotation: One,
    isEmptyTypeAnnotation: Nne,
    isFlowBaseAnnotation: Bne,
    isGenericTypeAnnotation: kne,
    isIdentifier: Vv,
    isMixedTypeAnnotation: Fne,
    isNumberTypeAnnotation: jne,
    isStringTypeAnnotation: Lne,
    isTSArrayType: Mne,
    isTSTypeAnnotation: Rne,
    isTSTypeReference: qne,
    isTupleTypeAnnotation: Une,
    isTypeAnnotation: Vne,
    isUnionTypeAnnotation: $ne,
    isVoidTypeAnnotation: Wne,
    stringTypeAnnotation: Kne,
    voidTypeAnnotation: Gne
  } = Ine;
  function Hne() {
    let e = this.getData("typeAnnotation");
    return e != null || (e = Wv.call(this) || $v(), (Vne(e) || Rne(e)) && (e = e.typeAnnotation), this.setData("typeAnnotation", e)), e;
  }
  i(Hne, "getTypeAnnotation");
  var jm = /* @__PURE__ */ new WeakSet();
  function Wv() {
    let e = this.node;
    if (!e)
      if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
        let r = this.parentPath.parentPath, n = r.parentPath;
        return r.key === "left" && n.isForInStatement() ? Kne() : r.key === "left" && n.isForOfStatement() ? $v() : Gne();
      } else
        return;
    if (e.typeAnnotation)
      return e.typeAnnotation;
    if (!jm.has(e)) {
      jm.add(e);
      try {
        var t;
        let r = Uv[e.type];
        if (r)
          return r.call(this, e);
        if (r = Uv[this.parentPath.type], (t = r) != null && t.validParent)
          return this.parentPath.getTypeAnnotation();
      } finally {
        jm.delete(e);
      }
    }
  }
  i(Wv, "_getTypeAnnotation");
  function Yne(e, t) {
    return Lm(e, this.getTypeAnnotation(), t);
  }
  i(Yne, "isBaseType");
  function Lm(e, t, r) {
    if (e === "string")
      return Lne(t);
    if (e === "number")
      return jne(t);
    if (e === "boolean")
      return One(t);
    if (e === "any")
      return xu(t);
    if (e === "mixed")
      return Fne(t);
    if (e === "empty")
      return Nne(t);
    if (e === "void")
      return Wne(t);
    if (r)
      return !1;
    throw new Error(`Unknown base type ${e}`);
  }
  i(Lm, "_isBaseType");
  function Jne(e) {
    let t = this.getTypeAnnotation();
    if (xu(t)) return !0;
    if ($ne(t)) {
      for (let r of t.types)
        if (xu(r) || Lm(e, r, !0))
          return !0;
      return !1;
    } else
      return Lm(e, t, !0);
  }
  i(Jne, "couldBeBaseType");
  function zne(e) {
    let t = this.getTypeAnnotation(), r = e.getTypeAnnotation();
    return !xu(t) && Bne(t) ? r.type === t.type : !1;
  }
  i(zne, "baseTypeStrictlyMatches");
  function Xne(e) {
    let t = this.getTypeAnnotation();
    return e === "Array" && (Mne(t) || _ne(t) || Une(t)) ? !0 : kne(t) && Vv(t.id, {
      name: e
    }) || qne(t) && Vv(t.typeName, {
      name: e
    });
  }
  i(Xne, "isGenericType");
});

// ../node_modules/@babel/traverse/lib/path/lib/hoister.js
var Hv = A((vu) => {
  "use strict";
  Object.defineProperty(vu, "__esModule", {
    value: !0
  });
  vu.default = void 0;
  var Gv = Pe(), Qne = Gv, {
    react: Zne
  } = Gv, {
    cloneNode: ese,
    jsxExpressionContainer: tse,
    variableDeclaration: rse,
    variableDeclarator: nse
  } = Qne, sse = {
    ReferencedIdentifier(e, t) {
      if (e.isJSXIdentifier() && Zne.isCompatTag(e.node.name) && !e.parentPath.isJSXMemberExpression())
        return;
      if (e.node.name === "this") {
        let n = e.scope;
        do
          if (n.path.isFunction() && !n.path.isArrowFunctionExpression())
            break;
        while (n = n.parent);
        n && t.breakOnScopePaths.push(n.path);
      }
      let r = e.scope.getBinding(e.node.name);
      if (r) {
        for (let n of r.constantViolations)
          if (n.scope !== r.path.scope) {
            t.mutableBinding = !0, e.stop();
            return;
          }
        r === t.scope.getBinding(e.node.name) && (t.bindings[e.node.name] = r);
      }
    }
  }, Mm = class {
    static {
      i(this, "PathHoister");
    }
    constructor(t, r) {
      this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.
      path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = !1, this.scopes = [],
      this.scope = r, this.path = t, this.attachAfter = !1;
    }
    isCompatibleScope(t) {
      for (let r of Object.keys(this.bindings)) {
        let n = this.bindings[r];
        if (!t.bindingIdentifierEquals(r, n.identifier))
          return !1;
      }
      return !0;
    }
    getCompatibleScopes() {
      let t = this.path.scope;
      do {
        if (this.isCompatibleScope(t))
          this.scopes.push(t);
        else
          break;
        if (this.breakOnScopePaths.includes(t.path))
          break;
      } while (t = t.parent);
    }
    getAttachmentPath() {
      let t = this._getAttachmentPath();
      if (!t) return;
      let r = t.scope;
      if (r.path === t && (r = t.scope.parent), r.path.isProgram() || r.path.isFunction())
        for (let n of Object.keys(this.bindings)) {
          if (!r.hasOwnBinding(n)) continue;
          let s = this.bindings[n];
          if (s.kind === "param" || s.path.parentKey === "params")
            continue;
          if (this.getAttachmentParentForPath(s.path).key >= t.key) {
            this.attachAfter = !0, t = s.path;
            for (let o of s.constantViolations)
              this.getAttachmentParentForPath(o).key > t.key && (t = o);
          }
        }
      return t;
    }
    _getAttachmentPath() {
      let r = this.scopes.pop();
      if (r) {
        if (r.path.isFunction())
          if (this.hasOwnParamBindings(r)) {
            if (this.scope === r) return;
            let n = r.path.get("body").get("body");
            for (let s = 0; s < n.length; s++)
              if (!n[s].node._blockHoist)
                return n[s];
          } else
            return this.getNextScopeAttachmentParent();
        else if (r.path.isProgram())
          return this.getNextScopeAttachmentParent();
      }
    }
    getNextScopeAttachmentParent() {
      let t = this.scopes.pop();
      if (t) return this.getAttachmentParentForPath(t.path);
    }
    getAttachmentParentForPath(t) {
      do
        if (!t.parentPath || Array.isArray(t.container) && t.isStatement())
          return t;
      while (t = t.parentPath);
    }
    hasOwnParamBindings(t) {
      for (let r of Object.keys(this.bindings)) {
        if (!t.hasOwnBinding(r)) continue;
        let n = this.bindings[r];
        if (n.kind === "param" && n.constant) return !0;
      }
      return !1;
    }
    run() {
      if (this.path.traverse(sse, this), this.mutableBinding) return;
      this.getCompatibleScopes();
      let t = this.getAttachmentPath();
      if (!t || t.getFunctionParent() === this.path.getFunctionParent()) return;
      let r = t.scope.generateUidIdentifier("ref"), n = nse(r, this.path.node), s = this.attachAfter ? "insertAfter" : "insertBefore", [a] = t[s](
      [t.isVariableDeclarator() ? n : rse("var", [n])]), o = this.path.parentPath;
      return o.isJSXElement() && this.path.container === o.node.children && (r = tse(r)), this.path.replaceWith(ese(r)), t.isVariableDeclarator() ?
      a.get("init") : a.get("declarations.0.init");
    }
  };
  vu.default = Mm;
});

// ../node_modules/@babel/traverse/lib/path/lib/removal-hooks.js
var Yv = A((Pu) => {
  "use strict";
  Object.defineProperty(Pu, "__esModule", {
    value: !0
  });
  Pu.hooks = void 0;
  var KPe = Pu.hooks = [function(e, t) {
    if (e.key === "test" && (t.isWhile() || t.isSwitchCase()) || e.key === "declaration" && t.isExportDeclaration() || e.key === "body" && t.
    isLabeledStatement() || e.listKey === "declarations" && t.isVariableDeclaration() && t.node.declarations.length === 1 || e.key === "expr\
ession" && t.isExpressionStatement())
      return t.remove(), !0;
  }, function(e, t) {
    if (t.isSequenceExpression() && t.node.expressions.length === 1)
      return t.replaceWith(t.node.expressions[0]), !0;
  }, function(e, t) {
    if (t.isBinary())
      return e.key === "left" ? t.replaceWith(t.node.right) : t.replaceWith(t.node.left), !0;
  }, function(e, t) {
    if (t.isIfStatement() && e.key === "consequent" || e.key === "body" && (t.isLoop() || t.isArrowFunctionExpression()))
      return e.replaceWith({
        type: "BlockStatement",
        body: []
      }), !0;
  }];
});

// ../node_modules/@babel/traverse/lib/path/removal.js
var Au = A((us) => {
  "use strict";
  Object.defineProperty(us, "__esModule", {
    value: !0
  });
  us._assertUnremoved = Zv;
  us._callRemovalHooks = Xv;
  us._markRemoved = Rm;
  us._remove = Qv;
  us._removeFromScope = zv;
  us.remove = fse;
  var ise = Yv(), ase = qs(), ose = qm(), Jv = cs(), lse = Pe(), use = Cu(), cse = fn(), {
    getBindingIdentifiers: pse
  } = lse;
  function fse() {
    var e;
    if (Zv.call(this), cse.resync.call(this), Xv.call(this)) {
      Rm.call(this);
      return;
    }
    (e = this.opts) != null && e.noScope || zv.call(this), this.shareCommentsWithSiblings(), Qv.call(this), Rm.call(this);
  }
  i(fse, "remove");
  function zv() {
    let e = pse(this.node, !1, !1, !0);
    Object.keys(e).forEach((t) => this.scope.removeBinding(t));
  }
  i(zv, "_removeFromScope");
  function Xv() {
    if (this.parentPath) {
      for (let e of ise.hooks)
        if (e(this, this.parentPath)) return !0;
    }
  }
  i(Xv, "_callRemovalHooks");
  function Qv() {
    Array.isArray(this.container) ? (this.container.splice(this.key, 1), use.updateSiblingKeys.call(this, this.key, -1)) : ose._replaceWith.
    call(this, null);
  }
  i(Qv, "_remove");
  function Rm() {
    this._traverseFlags |= Jv.SHOULD_SKIP | Jv.REMOVED, this.parent && (0, ase.getCachedPaths)(this.hub, this.parent).delete(this.node), this.
    node = null;
  }
  i(Rm, "_markRemoved");
  function Zv() {
    if (this.removed)
      throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
  }
  i(Zv, "_assertUnremoved");
});

// ../node_modules/@babel/traverse/lib/path/modification.js
var Cu = A((Nr) => {
  "use strict";
  Object.defineProperty(Nr, "__esModule", {
    value: !0
  });
  Nr._containerInsert = Km;
  Nr._containerInsertAfter = rP;
  Nr._containerInsertBefore = Gm;
  Nr._verifyNodeList = to;
  Nr.insertAfter = Ise;
  Nr.insertBefore = Dse;
  Nr.pushContainer = Ose;
  Nr.unshiftContainer = _se;
  Nr.updateSiblingKeys = iP;
  var dse = qs(), hse = Hv(), Wm = cs(), Um = fn(), Du = Au(), mse = Pe(), {
    arrowFunctionExpression: yse,
    assertExpression: gse,
    assignmentExpression: bse,
    blockStatement: eP,
    callExpression: Ese,
    cloneNode: Vm,
    expressionStatement: $m,
    isAssignmentExpression: Tse,
    isCallExpression: Sse,
    isExportNamedDeclaration: tP,
    isExpression: xse,
    isIdentifier: vse,
    isSequenceExpression: Pse,
    isSuper: Ase,
    thisExpression: Cse
  } = mse;
  function Dse(e) {
    Du._assertUnremoved.call(this);
    let t = to.call(this, e), {
      parentPath: r,
      parent: n
    } = this;
    if (r.isExpressionStatement() || r.isLabeledStatement() || tP(n) || r.isExportDefaultDeclaration() && this.isDeclaration())
      return r.insertBefore(t);
    if (this.isNodeType("Expression") && !this.isJSXElement() || r.isForStatement() && this.key === "init")
      return this.node && t.push(this.node), this.replaceExpressionWithStatements(t);
    if (Array.isArray(this.container))
      return Gm.call(this, t);
    if (this.isStatementOrBlock()) {
      let s = this.node, a = s && (!this.isExpressionStatement() || s.expression != null);
      return this.replaceWith(eP(a ? [s] : [])), this.unshiftContainer("body", t);
    } else
      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
  }
  i(Dse, "insertBefore");
  function Km(e, t) {
    iP.call(this, e, t.length);
    let r = [];
    this.container.splice(e, 0, ...t);
    for (let a = 0; a < t.length; a++) {
      var n;
      let o = e + a, l = this.getSibling(o);
      r.push(l), (n = this.context) != null && n.queue && Um.pushContext.call(l, this.context);
    }
    let s = Um._getQueueContexts.call(this);
    for (let a of r) {
      Um.setScope.call(a), a.debug("Inserted.");
      for (let o of s)
        o.maybeQueue(a, !0);
    }
    return r;
  }
  i(Km, "_containerInsert");
  function Gm(e) {
    return Km.call(this, this.key, e);
  }
  i(Gm, "_containerInsertBefore");
  function rP(e) {
    return Km.call(this, this.key + 1, e);
  }
  i(rP, "_containerInsertAfter");
  var nP = /* @__PURE__ */ i((e) => e[e.length - 1], "last");
  function sP(e) {
    return Pse(e.parent) && (nP(e.parent.expressions) !== e.node || sP(e.parentPath));
  }
  i(sP, "isHiddenInSequenceExpression");
  function wse(e, t) {
    if (!Tse(e) || !vse(e.left))
      return !1;
    let r = t.getBlockParent();
    return r.hasOwnBinding(e.left.name) && r.getOwnBinding(e.left.name).constantViolations.length <= 1;
  }
  i(wse, "isAlmostConstantAssignment");
  function Ise(e) {
    if (Du._assertUnremoved.call(this), this.isSequenceExpression())
      return nP(this.get("expressions")).insertAfter(e);
    let t = to.call(this, e), {
      parentPath: r,
      parent: n
    } = this;
    if (r.isExpressionStatement() || r.isLabeledStatement() || tP(n) || r.isExportDefaultDeclaration() && this.isDeclaration())
      return r.insertAfter(t.map((s) => xse(s) ? $m(s) : s));
    if (this.isNodeType("Expression") && !this.isJSXElement() && !r.isJSXElement() || r.isForStatement() && this.key === "init") {
      let s = this;
      if (s.node) {
        let a = s.node, {
          scope: o
        } = this;
        if (o.path.isPattern())
          return gse(a), s.replaceWith(Ese(yse([], a), [])), s.get("callee.body").insertAfter(t), [s];
        if (sP(s))
          t.unshift(a);
        else if (Sse(a) && Ase(a.callee))
          t.unshift(a), t.push(Cse());
        else if (wse(a, o))
          t.unshift(a), t.push(Vm(a.left));
        else if (o.isPure(a, !0))
          t.push(a);
        else {
          r.isMethod({
            computed: !0,
            key: a
          }) && (o = o.parent);
          let l = o.generateDeclaredUidIdentifier();
          t.unshift($m(bse("=", Vm(l), a))), t.push($m(Vm(l)));
        }
      }
      return this.replaceExpressionWithStatements(t);
    } else {
      if (Array.isArray(this.container))
        return rP.call(this, t);
      if (this.isStatementOrBlock()) {
        let s = this.node, a = s && (!this.isExpressionStatement() || s.expression != null);
        return this.replaceWith(eP(a ? [s] : [])), this.pushContainer("body", t);
      } else
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
  }
  i(Ise, "insertAfter");
  function iP(e, t) {
    if (!this.parent) return;
    let r = (0, dse.getCachedPaths)(this.hub, this.parent) || [];
    for (let [, n] of r)
      typeof n.key == "number" && n.container === this.container && n.key >= e && (n.key += t);
  }
  i(iP, "updateSiblingKeys");
  function to(e) {
    if (!e)
      return [];
    Array.isArray(e) || (e = [e]);
    for (let t = 0; t < e.length; t++) {
      let r = e[t], n;
      if (r ? typeof r != "object" ? n = "contains a non-object node" : r.type ? r instanceof Wm.default && (n = "has a NodePath when it exp\
ected a raw object") : n = "without a type" : n = "has falsy node", n) {
        let s = Array.isArray(r) ? "array" : typeof r;
        throw new Error(`Node list ${n} with the index of ${t} and type of ${s}`);
      }
    }
    return e;
  }
  i(to, "_verifyNodeList");
  function _se(e, t) {
    Du._assertUnremoved.call(this), t = to.call(this, t);
    let r = Wm.default.get({
      parentPath: this,
      parent: this.node,
      container: this.node[e],
      listKey: e,
      key: 0
    }).setContext(this.context);
    return Gm.call(r, t);
  }
  i(_se, "unshiftContainer");
  function Ose(e, t) {
    Du._assertUnremoved.call(this);
    let r = to.call(this, t), n = this.node[e];
    return Wm.default.get({
      parentPath: this,
      parent: this.node,
      container: n,
      listKey: e,
      key: n.length
    }).setContext(this.context).replaceWithMultiple(r);
  }
  i(Ose, "pushContainer");
  Nr.hoist = /* @__PURE__ */ i(function(t = this.scope) {
    return new hse.default(this, t).run();
  }, "hoist");
});

// ../node_modules/@babel/traverse/lib/path/replacement.js
var qm = A((ps) => {
  "use strict";
  Object.defineProperty(ps, "__esModule", {
    value: !0
  });
  ps._replaceWith = dP;
  ps.replaceExpressionWithStatements = iie;
  ps.replaceInline = aie;
  ps.replaceWith = sie;
  ps.replaceWithMultiple = rie;
  ps.replaceWithSourceString = nie;
  var Nse = $a(), Ym = Dr(), Bse = cs(), cP = qs(), Jm = Cu(), kse = Fs(), Fse = Pe(), Oi = fn(), {
    FUNCTION_TYPES: aP,
    arrowFunctionExpression: jse,
    assignmentExpression: pP,
    awaitExpression: Lse,
    blockStatement: Mse,
    buildUndefinedNode: Hm,
    callExpression: Rse,
    cloneNode: zm,
    conditionalExpression: qse,
    expressionStatement: Use,
    getBindingIdentifiers: Vse,
    identifier: $se,
    inheritLeadingComments: Wse,
    inheritTrailingComments: Kse,
    inheritsComments: Gse,
    isBlockStatement: Hse,
    isEmptyStatement: oP,
    isExpression: fP,
    isExpressionStatement: Yse,
    isIfStatement: Jse,
    isProgram: zse,
    isStatement: Xse,
    isVariableDeclaration: Qse,
    removeComments: Zse,
    returnStatement: lP,
    sequenceExpression: eie,
    validate: uP,
    yieldExpression: tie
  } = Fse;
  function rie(e) {
    var t;
    Oi.resync.call(this), e = Jm._verifyNodeList.call(this, e), Wse(e[0], this.node), Kse(e[e.length - 1], this.node), (t = (0, cP.getCachedPaths)(
    this.hub, this.parent)) == null || t.delete(this.node), this.node = this.container[this.key] = null;
    let r = this.insertAfter(e);
    return this.node ? this.requeue() : this.remove(), r;
  }
  i(rie, "replaceWithMultiple");
  function nie(e) {
    Oi.resync.call(this);
    let t;
    try {
      e = `(${e})`, t = (0, kse.parse)(e);
    } catch (n) {
      let s = n.loc;
      throw s && (n.message += ` - make sure this is an expression.
` + (0, Nse.codeFrameColumns)(e, {
        start: {
          line: s.line,
          column: s.column + 1
        }
      }), n.code = "BABEL_REPLACE_SOURCE_ERROR"), n;
    }
    let r = t.program.body[0].expression;
    return Ym.default.removeProperties(r), this.replaceWith(r);
  }
  i(nie, "replaceWithSourceString");
  function sie(e) {
    if (Oi.resync.call(this), this.removed)
      throw new Error("You can't replace this node, we've already removed it");
    let t = e instanceof Bse.default ? e.node : e;
    if (!t)
      throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
    if (this.node === t)
      return [this];
    if (this.isProgram() && !zse(t))
      throw new Error("You can only replace a Program root node with another Program node");
    if (Array.isArray(t))
      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
    if (typeof t == "string")
      throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
    let r = "";
    if (this.isNodeType("Statement") && fP(t) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(
    t) && !this.parentPath.isExportDefaultDeclaration() && (t = Use(t), r = "expression"), this.isNodeType("Expression") && Xse(t) && !this.
    canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(t))
      return this.replaceExpressionWithStatements([t]);
    let n = this.node;
    return n && (Gse(t, n), Zse(n)), dP.call(this, t), this.type = t.type, Oi.setScope.call(this), this.requeue(), [r ? this.get(r) : this];
  }
  i(sie, "replaceWith");
  function dP(e) {
    var t;
    if (!this.container)
      throw new ReferenceError("Container is falsy");
    this.inList ? uP(this.parent, this.key, [e]) : uP(this.parent, this.key, e), this.debug(`Replace with ${e?.type}`), (t = (0, cP.getCachedPaths)(
    this.hub, this.parent)) == null || t.set(e, this).delete(this.node), this.node = this.container[this.key] = e;
  }
  i(dP, "_replaceWith");
  function iie(e) {
    Oi.resync.call(this);
    let t = [], r = wu(e, t);
    if (r) {
      for (let h of t) this.scope.push({
        id: h
      });
      return this.replaceWith(r)[0].get("expressions");
    }
    let n = this.getFunctionParent(), s = n?.node.async, a = n?.node.generator, o = jse([], Mse(e));
    this.replaceWith(Rse(o, []));
    let l = this.get("callee");
    l.get("body").scope.hoistVariables((h) => this.scope.push({
      id: h
    }));
    let u = l.getCompletionRecords();
    for (let h of u) {
      if (!h.isExpressionStatement()) continue;
      let g = h.findParent((P) => P.isLoop());
      if (g) {
        let P = g.getData("expressionReplacementReturnUid");
        P ? P = $se(P.name) : (P = l.scope.generateDeclaredUidIdentifier("ret"), l.get("body").pushContainer("body", lP(zm(P))), g.setData("\
expressionReplacementReturnUid", P)), h.get("expression").replaceWith(pP("=", zm(P), h.node.expression));
      } else
        h.replaceWith(lP(h.node.expression));
    }
    l.arrowFunctionToExpression();
    let c = l, p = s && Ym.default.hasType(this.get("callee.body").node, "AwaitExpression", aP), f = a && Ym.default.hasType(this.get("calle\
e.body").node, "YieldExpression", aP);
    return p && (c.set("async", !0), f || this.replaceWith(Lse(this.node))), f && (c.set("generator", !0), this.replaceWith(tie(this.node, !0))),
    c.get("body.body");
  }
  i(iie, "replaceExpressionWithStatements");
  function wu(e, t) {
    let r = [], n = !0;
    for (let s of e)
      if (oP(s) || (n = !1), fP(s))
        r.push(s);
      else if (Yse(s))
        r.push(s.expression);
      else if (Qse(s)) {
        if (s.kind !== "var") return;
        for (let a of s.declarations) {
          let o = Vse(a);
          for (let l of Object.keys(o))
            t.push(zm(o[l]));
          a.init && r.push(pP("=", a.id, a.init));
        }
        n = !0;
      } else if (Jse(s)) {
        let a = s.consequent ? wu([s.consequent], t) : Hm(), o = s.alternate ? wu([s.alternate], t) : Hm();
        if (!a || !o) return;
        r.push(qse(s.test, a, o));
      } else if (Hse(s)) {
        let a = wu(s.body, t);
        if (!a) return;
        r.push(a);
      } else if (oP(s))
        e.indexOf(s) === 0 && (n = !0);
      else
        return;
    return n && r.push(Hm()), r.length === 1 ? r[0] : eie(r);
  }
  i(wu, "gatherSequenceExpressions");
  function aie(e) {
    if (Oi.resync.call(this), Array.isArray(e))
      if (Array.isArray(this.container)) {
        e = Jm._verifyNodeList.call(this, e);
        let t = Jm._containerInsertAfter.call(this, e);
        return this.remove(), t;
      } else
        return this.replaceWithMultiple(e);
    else
      return this.replaceWith(e);
  }
  i(aie, "replaceInline");
});

// ../node_modules/@babel/traverse/lib/path/evaluation.js
var gP = A((Iu) => {
  "use strict";
  Object.defineProperty(Iu, "__esModule", {
    value: !0
  });
  Iu.evaluate = hie;
  Iu.evaluateTruthy = fie;
  var oie = ["Number", "String", "Math"], lie = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeUR\
I", "encodeURIComponent", null, null], uie = ["random"];
  function hP(e) {
    return oie.includes(e);
  }
  i(hP, "isValidObjectCallee");
  function cie(e) {
    return lie.includes(e);
  }
  i(cie, "isValidIdentifierCallee");
  function pie(e) {
    return uie.includes(e);
  }
  i(pie, "isInvalidMethod");
  function fie() {
    let e = this.evaluate();
    if (e.confident) return !!e.value;
  }
  i(fie, "evaluateTruthy");
  function On(e, t) {
    t.confident && (t.deoptPath = e, t.confident = !1);
  }
  i(On, "deopt");
  var mP = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", 1 / 0], ["NaN", NaN]]);
  function ar(e, t) {
    let {
      node: r
    } = e, {
      seen: n
    } = t;
    if (n.has(r)) {
      let s = n.get(r);
      if (s.resolved)
        return s.value;
      On(e, t);
      return;
    } else {
      let s = {
        resolved: !1
      };
      n.set(r, s);
      let a = die(e, t);
      return t.confident && (s.resolved = !0, s.value = a), a;
    }
  }
  i(ar, "evaluateCached");
  function die(e, t) {
    if (t.confident) {
      if (e.isSequenceExpression()) {
        let r = e.get("expressions");
        return ar(r[r.length - 1], t);
      }
      if (e.isStringLiteral() || e.isNumericLiteral() || e.isBooleanLiteral())
        return e.node.value;
      if (e.isNullLiteral())
        return null;
      if (e.isTemplateLiteral())
        return yP(e, e.node.quasis, t);
      if (e.isTaggedTemplateExpression() && e.get("tag").isMemberExpression()) {
        let r = e.get("tag.object"), {
          node: {
            name: n
          }
        } = r, s = e.get("tag.property");
        if (r.isIdentifier() && n === "String" && !e.scope.getBinding(n) && s.isIdentifier() && s.node.name === "raw")
          return yP(e, e.node.quasi.quasis, t, !0);
      }
      if (e.isConditionalExpression()) {
        let r = ar(e.get("test"), t);
        return t.confident ? ar(r ? e.get("consequent") : e.get("alternate"), t) : void 0;
      }
      if (e.isExpressionWrapper())
        return ar(e.get("expression"), t);
      if (e.isMemberExpression() && !e.parentPath.isCallExpression({
        callee: e.node
      })) {
        let r = e.get("property"), n = e.get("object");
        if (n.isLiteral()) {
          let s = n.node.value, a = typeof s, o = null;
          if (e.node.computed) {
            if (o = ar(r, t), !t.confident) return;
          } else r.isIdentifier() && (o = r.node.name);
          if ((a === "number" || a === "string") && o != null && (typeof o == "number" || typeof o == "string"))
            return s[o];
        }
      }
      if (e.isReferencedIdentifier()) {
        let r = e.scope.getBinding(e.node.name);
        if (r) {
          if (r.constantViolations.length > 0 || e.node.start < r.path.node.end) {
            On(r.path, t);
            return;
          }
          if (r.hasValue)
            return r.value;
        }
        let n = e.node.name;
        if (mP.has(n)) {
          if (!r)
            return mP.get(n);
          On(r.path, t);
          return;
        }
        let s = e.resolve();
        if (s === e) {
          On(e, t);
          return;
        } else
          return ar(s, t);
      }
      if (e.isUnaryExpression({
        prefix: !0
      })) {
        if (e.node.operator === "void")
          return;
        let r = e.get("argument");
        if (e.node.operator === "typeof" && (r.isFunction() || r.isClass()))
          return "function";
        let n = ar(r, t);
        if (!t.confident) return;
        switch (e.node.operator) {
          case "!":
            return !n;
          case "+":
            return +n;
          case "-":
            return -n;
          case "~":
            return ~n;
          case "typeof":
            return typeof n;
        }
      }
      if (e.isArrayExpression()) {
        let r = [], n = e.get("elements");
        for (let s of n) {
          let a = s.evaluate();
          if (a.confident)
            r.push(a.value);
          else {
            On(a.deopt, t);
            return;
          }
        }
        return r;
      }
      if (e.isObjectExpression()) {
        let r = {}, n = e.get("properties");
        for (let s of n) {
          if (s.isObjectMethod() || s.isSpreadElement()) {
            On(s, t);
            return;
          }
          let a = s.get("key"), o;
          if (s.node.computed) {
            if (o = a.evaluate(), !o.confident) {
              On(o.deopt, t);
              return;
            }
            o = o.value;
          } else a.isIdentifier() ? o = a.node.name : o = a.node.value;
          let u = s.get("value").evaluate();
          if (!u.confident) {
            On(u.deopt, t);
            return;
          }
          u = u.value, r[o] = u;
        }
        return r;
      }
      if (e.isLogicalExpression()) {
        let r = t.confident, n = ar(e.get("left"), t), s = t.confident;
        t.confident = r;
        let a = ar(e.get("right"), t), o = t.confident;
        switch (e.node.operator) {
          case "||":
            return t.confident = s && (!!n || o), t.confident ? n || a : void 0;
          case "&&":
            return t.confident = s && (!n || o), t.confident ? n && a : void 0;
          case "??":
            return t.confident = s && (n != null || o), t.confident ? n ?? a : void 0;
        }
      }
      if (e.isBinaryExpression()) {
        let r = ar(e.get("left"), t);
        if (!t.confident) return;
        let n = ar(e.get("right"), t);
        if (!t.confident) return;
        switch (e.node.operator) {
          case "-":
            return r - n;
          case "+":
            return r + n;
          case "/":
            return r / n;
          case "*":
            return r * n;
          case "%":
            return r % n;
          case "**":
            return Math.pow(r, n);
          case "<":
            return r < n;
          case ">":
            return r > n;
          case "<=":
            return r <= n;
          case ">=":
            return r >= n;
          case "==":
            return r == n;
          case "!=":
            return r != n;
          case "===":
            return r === n;
          case "!==":
            return r !== n;
          case "|":
            return r | n;
          case "&":
            return r & n;
          case "^":
            return r ^ n;
          case "<<":
            return r << n;
          case ">>":
            return r >> n;
          case ">>>":
            return r >>> n;
        }
      }
      if (e.isCallExpression()) {
        let r = e.get("callee"), n, s;
        if (r.isIdentifier() && !e.scope.getBinding(r.node.name) && (hP(r.node.name) || cie(r.node.name)) && (s = global[r.node.name]), r.isMemberExpression()) {
          let a = r.get("object"), o = r.get("property");
          if (a.isIdentifier() && o.isIdentifier() && hP(a.node.name) && !pie(o.node.name)) {
            n = global[a.node.name];
            let l = o.node.name;
            hasOwnProperty.call(n, l) && (s = n[l]);
          }
          if (a.isLiteral() && o.isIdentifier()) {
            let l = typeof a.node.value;
            (l === "string" || l === "number") && (n = a.node.value, s = n[o.node.name]);
          }
        }
        if (s) {
          let a = e.get("arguments").map((o) => ar(o, t));
          return t.confident ? s.apply(n, a) : void 0;
        }
      }
      On(e, t);
    }
  }
  i(die, "_evaluate");
  function yP(e, t, r, n = !1) {
    let s = "", a = 0, o = e.isTemplateLiteral() ? e.get("expressions") : e.get("quasi.expressions");
    for (let l of t) {
      if (!r.confident) break;
      s += n ? l.value.raw : l.value.cooked;
      let u = o[a++];
      u && (s += String(ar(u, r)));
    }
    if (r.confident)
      return s;
  }
  i(yP, "evaluateQuasis");
  function hie() {
    let e = {
      confident: !0,
      deoptPath: null,
      seen: /* @__PURE__ */ new Map()
    }, t = ar(this, e);
    return e.confident || (t = void 0), {
      confident: e.confident,
      deopt: e.deoptPath,
      value: t
    };
  }
  i(hie, "evaluate");
});

// ../node_modules/@babel/traverse/lib/path/conversion.js
var AP = A((Nn) => {
  "use strict";
  Object.defineProperty(Nn, "__esModule", {
    value: !0
  });
  Nn.arrowFunctionToExpression = Wie;
  Nn.ensureBlock = Uie;
  Nn.ensureFunctionName = rae;
  Nn.splitExportDeclaration = eae;
  Nn.toComputedKey = qie;
  Nn.unwrapFunctionEnvironment = Vie;
  var mie = Pe(), yie = Ai(), Zm = Ha(), gie = fn(), {
    arrowFunctionExpression: ey,
    assignmentExpression: Gs,
    binaryExpression: Xm,
    blockStatement: bie,
    callExpression: Ni,
    conditionalExpression: Eie,
    expressionStatement: TP,
    identifier: it,
    isIdentifier: Tie,
    jsxIdentifier: Sie,
    logicalExpression: xie,
    LOGICAL_OPERATORS: vie,
    memberExpression: Wr,
    metaProperty: Pie,
    numericLiteral: Aie,
    objectExpression: Cie,
    restElement: Die,
    returnStatement: wie,
    sequenceExpression: Iie,
    spreadElement: _ie,
    stringLiteral: SP,
    super: Qm,
    thisExpression: ro,
    toExpression: xP,
    unaryExpression: Oie,
    toBindingIdentifierName: Nie,
    isFunction: Bie,
    isAssignmentPattern: kie,
    isRestElement: Fie,
    getFunctionName: jie,
    cloneNode: Hs,
    variableDeclaration: Lie,
    variableDeclarator: Mie,
    exportNamedDeclaration: bP,
    exportSpecifier: EP,
    inherits: Rie
  } = mie;
  function qie() {
    let e;
    if (this.isMemberExpression())
      e = this.node.property;
    else if (this.isProperty() || this.isMethod())
      e = this.node.key;
    else
      throw new ReferenceError("todo");
    return this.node.computed || Tie(e) && (e = SP(e.name)), e;
  }
  i(qie, "toComputedKey");
  function Uie() {
    let e = this.get("body"), t = e.node;
    if (Array.isArray(e))
      throw new Error("Can't convert array path to a block statement");
    if (!t)
      throw new Error("Can't convert node without a body");
    if (e.isBlockStatement())
      return t;
    let r = [], n = "body", s, a;
    e.isStatement() ? (a = "body", s = 0, r.push(e.node)) : (n += ".body.0", this.isFunction() ? (s = "argument", r.push(wie(e.node))) : (s =
    "expression", r.push(TP(e.node)))), this.node.body = bie(r);
    let o = this.get(n);
    return gie.setup.call(e, o, a ? o.node[a] : o.node, a, s), this.node;
  }
  i(Uie, "ensureBlock");
  Nn.arrowFunctionToShadowed = function() {
    this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
  };
  function Vie() {
    if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration())
      throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
    vP(this);
  }
  i(Vie, "unwrapFunctionEnvironment");
  function $ie(e, t) {
    e.node.type = t;
  }
  i($ie, "setType");
  function Wie({
    allowInsertArrow: e = !0,
    allowInsertArrowWithRest: t = e,
    noNewArrows: r = !((n) => (n = arguments[0]) == null ? void 0 : n.specCompliant)()
  } = {}) {
    if (!this.isArrowFunctionExpression())
      throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
    let n = this;
    if (!r) {
      var s;
      n = (s = n.ensureFunctionName(!1)) != null ? s : n;
    }
    let {
      thisBinding: a,
      fnPath: o
    } = vP(n, r, e, t);
    if (o.ensureBlock(), $ie(o, "FunctionExpression"), !r) {
      let l = a ? null : o.scope.generateUidIdentifier("arrowCheckId");
      return l && o.parentPath.scope.push({
        id: l,
        init: Cie([])
      }), o.get("body").unshiftContainer("body", TP(Ni(this.hub.addHelper("newArrowCheck"), [ro(), it(l ? l.name : a)]))), o.replaceWith(Ni(
      Wr(o.node, it("bind")), [l ? it(l.name) : ro()])), o.get("callee.object");
    }
    return o;
  }
  i(Wie, "arrowFunctionToExpression");
  var Kie = (0, Zm.environmentVisitor)({
    CallExpression(e, {
      allSuperCalls: t
    }) {
      e.get("callee").isSuper() && t.push(e);
    }
  });
  function vP(e, t = !0, r = !0, n = !0) {
    let s, a = e.findParent((g) => {
      if (g.isArrowFunctionExpression()) {
        var P;
        return (P = s) != null || (s = g), !1;
      }
      return g.isFunction() || g.isProgram() || g.isClassProperty({
        static: !1
      }) || g.isClassPrivateProperty({
        static: !1
      });
    }), o = a.isClassMethod({
      kind: "constructor"
    });
    if (a.isClassProperty() || a.isClassPrivateProperty())
      if (s)
        a = s;
      else if (r)
        e.replaceWith(Ni(ey([], xP(e.node)), [])), a = e.get("callee"), e = a.get("body");
      else
        throw e.buildCodeFrameError("Unable to transform arrow inside class property");
    let {
      thisPaths: l,
      argumentsPaths: u,
      newTargetPaths: c,
      superProps: p,
      superCalls: f
    } = Zie(e);
    if (o && f.length > 0) {
      if (!r)
        throw f[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an a\
rrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      if (!n)
        throw f[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow \
function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration\
.");
      let g = [];
      a.traverse(Kie, {
        allSuperCalls: g
      });
      let P = zie(a);
      g.forEach((d) => {
        let y = it(P);
        y.loc = d.node.callee.loc, d.get("callee").replaceWith(y);
      });
    }
    if (u.length > 0) {
      let g = no(a, "arguments", () => {
        let P = /* @__PURE__ */ i(() => it("arguments"), "args");
        return a.scope.path.isProgram() ? Eie(Xm("===", Oie("typeof", P()), SP("undefined")), a.scope.buildUndefinedNode(), P()) : P();
      });
      u.forEach((P) => {
        let d = it(g);
        d.loc = P.node.loc, P.replaceWith(d);
      });
    }
    if (c.length > 0) {
      let g = no(a, "newtarget", () => Pie(it("new"), it("target")));
      c.forEach((P) => {
        let d = it(g);
        d.loc = P.node.loc, P.replaceWith(d);
      });
    }
    if (p.length > 0) {
      if (!r)
        throw p[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in a\
n arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      p.reduce((P, d) => P.concat(Hie(d)), []).forEach((P) => {
        let d = P.node.computed ? "" : P.get("property").node.name, y = P.parentPath, E = y.isAssignmentExpression({
          left: P.node
        }), _ = y.isCallExpression({
          callee: P.node
        }), k = y.isTaggedTemplateExpression({
          tag: P.node
        }), B = Xie(a, E, d), L = [];
        if (P.node.computed && L.push(P.get("property").node), E) {
          let $ = y.node.right;
          L.push($);
        }
        let U = Ni(it(B), L);
        _ ? (y.unshiftContainer("arguments", ro()), P.replaceWith(Wr(U, it("call"))), l.push(y.get("arguments.0"))) : E ? y.replaceWith(U) :
        k ? (P.replaceWith(Ni(Wr(U, it("bind"), !1), [ro()])), l.push(P.get("arguments.0"))) : P.replaceWith(U);
      });
    }
    let h;
    return (l.length > 0 || !t) && (h = Jie(a, o), (t || o && PP(a)) && (l.forEach((g) => {
      let P = g.isJSX() ? Sie(h) : it(h);
      P.loc = g.node.loc, g.replaceWith(P);
    }), t || (h = null))), {
      thisBinding: h,
      fnPath: e
    };
  }
  i(vP, "hoistFunctionEnvironment");
  function Gie(e) {
    return vie.includes(e);
  }
  i(Gie, "isLogicalOp");
  function Hie(e) {
    if (e.parentPath.isAssignmentExpression() && e.parentPath.node.operator !== "=") {
      let r = e.parentPath, n = r.node.operator.slice(0, -1), s = r.node.right, a = Gie(n);
      if (e.node.computed) {
        let o = e.scope.generateDeclaredUidIdentifier("tmp"), l = e.node.object, u = e.node.property;
        r.get("left").replaceWith(Wr(l, Gs("=", o, u), !0)), r.get("right").replaceWith(t(a ? "=" : n, Wr(l, it(o.name), !0), s));
      } else {
        let o = e.node.object, l = e.node.property;
        r.get("left").replaceWith(Wr(o, l)), r.get("right").replaceWith(t(a ? "=" : n, Wr(o, it(l.name)), s));
      }
      return a ? r.replaceWith(xie(n, r.node.left, r.node.right)) : r.node.operator = "=", [r.get("left"), r.get("right").get("left")];
    } else if (e.parentPath.isUpdateExpression()) {
      let r = e.parentPath, n = e.scope.generateDeclaredUidIdentifier("tmp"), s = e.node.computed ? e.scope.generateDeclaredUidIdentifier("p\
rop") : null, a = [Gs("=", n, Wr(e.node.object, s ? Gs("=", s, e.node.property) : e.node.property, e.node.computed)), Gs("=", Wr(e.node.object,
      s ? it(s.name) : e.node.property, e.node.computed), Xm(e.parentPath.node.operator[0], it(n.name), Aie(1)))];
      e.parentPath.node.prefix || a.push(it(n.name)), r.replaceWith(Iie(a));
      let o = r.get("expressions.0.right"), l = r.get("expressions.1.left");
      return [o, l];
    }
    return [e];
    function t(r, n, s) {
      return r === "=" ? Gs("=", n, s) : Xm(r, n, s);
    }
  }
  i(Hie, "standardizeSuperProperty");
  function PP(e) {
    return e.isClassMethod() && !!e.parentPath.parentPath.node.superClass;
  }
  i(PP, "hasSuperClass");
  var Yie = (0, Zm.environmentVisitor)({
    CallExpression(e, {
      supers: t,
      thisBinding: r
    }) {
      e.get("callee").isSuper() && (t.has(e.node) || (t.add(e.node), e.replaceWithMultiple([e.node, Gs("=", it(r), it("this"))])));
    }
  });
  function Jie(e, t) {
    return no(e, "this", (r) => {
      if (!t || !PP(e)) return ro();
      e.traverse(Yie, {
        supers: /* @__PURE__ */ new WeakSet(),
        thisBinding: r
      });
    });
  }
  i(Jie, "getThisBinding");
  function zie(e) {
    return no(e, "supercall", () => {
      let t = e.scope.generateUidIdentifier("args");
      return ey([Die(t)], Ni(Qm(), [_ie(it(t.name))]));
    });
  }
  i(zie, "getSuperBinding");
  function Xie(e, t, r) {
    return no(e, `superprop_${t ? "set" : "get"}:${r || ""}`, () => {
      let s = [], a;
      if (r)
        a = Wr(Qm(), it(r));
      else {
        let o = e.scope.generateUidIdentifier("prop");
        s.unshift(o), a = Wr(Qm(), it(o.name), !0);
      }
      if (t) {
        let o = e.scope.generateUidIdentifier("value");
        s.push(o), a = Gs("=", a, it(o.name));
      }
      return ey(s, a);
    });
  }
  i(Xie, "getSuperPropBinding");
  function no(e, t, r) {
    let n = "binding:" + t, s = e.getData(n);
    if (!s) {
      let a = e.scope.generateUidIdentifier(t);
      s = a.name, e.setData(n, s), e.scope.push({
        id: a,
        init: r(s)
      });
    }
    return s;
  }
  i(no, "getBinding");
  var Qie = (0, Zm.environmentVisitor)({
    ThisExpression(e, {
      thisPaths: t
    }) {
      t.push(e);
    },
    JSXIdentifier(e, {
      thisPaths: t
    }) {
      e.node.name === "this" && (!e.parentPath.isJSXMemberExpression({
        object: e.node
      }) && !e.parentPath.isJSXOpeningElement({
        name: e.node
      }) || t.push(e));
    },
    CallExpression(e, {
      superCalls: t
    }) {
      e.get("callee").isSuper() && t.push(e);
    },
    MemberExpression(e, {
      superProps: t
    }) {
      e.get("object").isSuper() && t.push(e);
    },
    Identifier(e, {
      argumentsPaths: t
    }) {
      if (!e.isReferencedIdentifier({
        name: "arguments"
      })) return;
      let r = e.scope;
      do {
        if (r.hasOwnBinding("arguments")) {
          r.rename("arguments");
          return;
        }
        if (r.path.isFunction() && !r.path.isArrowFunctionExpression())
          break;
      } while (r = r.parent);
      t.push(e);
    },
    MetaProperty(e, {
      newTargetPaths: t
    }) {
      e.get("meta").isIdentifier({
        name: "new"
      }) && e.get("property").isIdentifier({
        name: "target"
      }) && t.push(e);
    }
  });
  function Zie(e) {
    let t = [], r = [], n = [], s = [], a = [];
    return e.traverse(Qie, {
      thisPaths: t,
      argumentsPaths: r,
      newTargetPaths: n,
      superProps: s,
      superCalls: a
    }), {
      thisPaths: t,
      argumentsPaths: r,
      newTargetPaths: n,
      superProps: s,
      superCalls: a
    };
  }
  i(Zie, "getScopeInformation");
  function eae() {
    if (!this.isExportDeclaration() || this.isExportAllDeclaration())
      throw new Error("Only default and named export declarations can be split.");
    if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0)
      throw new Error("It doesn't make sense to split exported specifiers.");
    let e = this.get("declaration");
    if (this.isExportDefaultDeclaration()) {
      let s = e.isFunctionDeclaration() || e.isClassDeclaration(), a = e.isFunctionExpression() || e.isClassExpression(), o = e.isScope() ? e.
      scope.parent : e.scope, l = e.node.id, u = !1;
      l ? a && o.hasBinding(l.name) && (u = !0, l = o.generateUidIdentifier(l.name)) : (u = !0, l = o.generateUidIdentifier("default"), (s ||
      a) && (e.node.id = Hs(l)));
      let c = s ? e.node : Lie("var", [Mie(Hs(l), e.node)]), p = bP(null, [EP(Hs(l), it("default"))]);
      return this.insertAfter(p), this.replaceWith(c), u && o.registerDeclaration(this), this;
    } else if (this.get("specifiers").length > 0)
      throw new Error("It doesn't make sense to split exported specifiers.");
    let t = e.getOuterBindingIdentifiers(), r = Object.keys(t).map((s) => EP(it(s), it(s))), n = bP(null, r);
    return this.insertAfter(n), this.replaceWith(e.node), this;
  }
  i(eae, "splitExportDeclaration");
  var tae = {
    "ReferencedIdentifier|BindingIdentifier"(e, t) {
      e.node.name === t.name && (t.needsRename = !0, e.stop());
    },
    Scope(e, t) {
      e.scope.hasOwnBinding(t.name) && e.skip();
    }
  };
  function rae(e) {
    if (this.node.id) return this;
    let t = jie(this.node, this.parent);
    if (t == null) return this;
    let {
      name: r
    } = t;
    if (!e && /[\uD800-\uDFFF]/.test(r) || r.startsWith("get ") || r.startsWith("set "))
      return null;
    r = Nie(r.replace(/[/ ]/g, "_"));
    let n = it(r);
    Rie(n, t.originalNode);
    let s = {
      needsRename: !1,
      name: r
    }, {
      scope: a
    } = this, o = a.getOwnBinding(r);
    if (o ? o.kind === "param" && (s.needsRename = !0) : (a.parent.hasBinding(r) || a.hasGlobal(r)) && this.traverse(tae, s), !s.needsRename)
      return this.node.id = n, a.getProgramParent().references[n.name] = !0, this;
    if (a.hasBinding(n.name) && !a.hasGlobal(n.name))
      return a.rename(n.name), this.node.id = n, a.getProgramParent().references[n.name] = !0, this;
    if (!Bie(this.node)) return null;
    let l = a.generateUidIdentifier(n.name), u = [];
    for (let p = 0, f = nae(this.node); p < f; p++)
      u.push(a.generateUidIdentifier("x"));
    let c = yie.default.expression.ast`
    (function (${l}) {
      function ${n}(${u}) {
        return ${Hs(l)}.apply(this, arguments);
      }

      ${Hs(n)}.toString = function () {
        return ${Hs(l)}.toString();
      }

      return ${Hs(n)};
    })(${xP(this.node)})
  `;
    return this.replaceWith(c)[0].get("arguments.0");
  }
  i(rae, "ensureFunctionName");
  function nae(e) {
    let t = e.params.findIndex((r) => kie(r) || Fie(r));
    return t === -1 ? e.params.length : t;
  }
  i(nae, "getFunctionArity");
});

// ../node_modules/@babel/traverse/lib/path/introspection.js
var OP = A((xt) => {
  "use strict";
  Object.defineProperty(xt, "__esModule", {
    value: !0
  });
  xt._guessExecutionStatusRelativeTo = Pae;
  xt._resolve = _P;
  xt.canHaveVariableDeclarationOrExpression = yae;
  xt.canSwapBetweenExpressionAndStatement = gae;
  xt.getSource = Sae;
  xt.isCompletionRecord = bae;
  xt.isConstantExpression = wae;
  xt.isInStrictMode = Iae;
  xt.isNodeType = mae;
  xt.isStatementOrBlock = Eae;
  xt.isStatic = hae;
  xt.matchesPattern = dae;
  xt.referencesImport = Tae;
  xt.resolve = Dae;
  xt.willIMaybeExecuteBefore = xae;
  var sae = Pe(), {
    STATEMENT_OR_BLOCK_KEYS: iae,
    VISITOR_KEYS: aae,
    isBlockStatement: IP,
    isExpression: oae,
    isIdentifier: lae,
    isLiteral: uae,
    isStringLiteral: cae,
    isType: pae,
    matchesPattern: fae
  } = sae;
  function dae(e, t) {
    return fae(this.node, e, t);
  }
  i(dae, "matchesPattern");
  xt.has = /* @__PURE__ */ i(function(t) {
    var r;
    let n = (r = this.node) == null ? void 0 : r[t];
    return n && Array.isArray(n) ? !!n.length : !!n;
  }, "has");
  function hae() {
    return this.scope.isStatic(this.node);
  }
  i(hae, "isStatic");
  xt.is = xt.has, xt.isnt = /* @__PURE__ */ i(function(t) {
    return !this.has(t);
  }, "isnt"), xt.equals = /* @__PURE__ */ i(function(t, r) {
    return this.node[t] === r;
  }, "equals");
  function mae(e) {
    return pae(this.type, e);
  }
  i(mae, "isNodeType");
  function yae() {
    return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
  }
  i(yae, "canHaveVariableDeclarationOrExpression");
  function gae(e) {
    return this.key !== "body" || !this.parentPath.isArrowFunctionExpression() ? !1 : this.isExpression() ? IP(e) : this.isBlockStatement() ?
    oae(e) : !1;
  }
  i(gae, "canSwapBetweenExpressionAndStatement");
  function bae(e) {
    let t = this, r = !0;
    do {
      let {
        type: n,
        container: s
      } = t;
      if (!r && (t.isFunction() || n === "StaticBlock"))
        return !!e;
      if (r = !1, Array.isArray(s) && t.key !== s.length - 1)
        return !1;
    } while ((t = t.parentPath) && !t.isProgram() && !t.isDoExpression());
    return !0;
  }
  i(bae, "isCompletionRecord");
  function Eae() {
    return this.parentPath.isLabeledStatement() || IP(this.container) ? !1 : iae.includes(this.key);
  }
  i(Eae, "isStatementOrBlock");
  function Tae(e, t) {
    if (!this.isReferencedIdentifier()) {
      if (this.isJSXMemberExpression() && this.node.property.name === t || (this.isMemberExpression() || this.isOptionalMemberExpression()) &&
      (this.node.computed ? cae(this.node.property, {
        value: t
      }) : this.node.property.name === t)) {
        let a = this.get("object");
        return a.isReferencedIdentifier() && a.referencesImport(e, "*");
      }
      return !1;
    }
    let r = this.scope.getBinding(this.node.name);
    if (!r || r.kind !== "module") return !1;
    let n = r.path, s = n.parentPath;
    if (!s.isImportDeclaration()) return !1;
    if (s.node.source.value === e) {
      if (!t) return !0;
    } else
      return !1;
    return !!(n.isImportDefaultSpecifier() && t === "default" || n.isImportNamespaceSpecifier() && t === "*" || n.isImportSpecifier() && lae(
    n.node.imported, {
      name: t
    }));
  }
  i(Tae, "referencesImport");
  function Sae() {
    let e = this.node;
    if (e.end) {
      let t = this.hub.getCode();
      if (t) return t.slice(e.start, e.end);
    }
    return "";
  }
  i(Sae, "getSource");
  function xae(e) {
    return this._guessExecutionStatusRelativeTo(e) !== "after";
  }
  i(xae, "willIMaybeExecuteBefore");
  function CP(e) {
    return e.isProgram() ? e : (e.parentPath.scope.getFunctionParent() || e.parentPath.scope.getProgramParent()).path;
  }
  i(CP, "getOuterFunction");
  function vae(e, t) {
    switch (e) {
      case "LogicalExpression":
        return t === "right";
      case "ConditionalExpression":
      case "IfStatement":
        return t === "consequent" || t === "alternate";
      case "WhileStatement":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForOfStatement":
        return t === "body";
      case "ForStatement":
        return t === "body" || t === "update";
      case "SwitchStatement":
        return t === "cases";
      case "TryStatement":
        return t === "handler";
      case "AssignmentPattern":
        return t === "right";
      case "OptionalMemberExpression":
        return t === "property";
      case "OptionalCallExpression":
        return t === "arguments";
      default:
        return !1;
    }
  }
  i(vae, "isExecutionUncertain");
  function DP(e, t) {
    for (let r = 0; r < t; r++) {
      let n = e[r];
      if (vae(n.parent.type, n.parentKey))
        return !0;
    }
    return !1;
  }
  i(DP, "isExecutionUncertainInList");
  var wP = Symbol();
  function Pae(e) {
    return ty(this, e, /* @__PURE__ */ new Map());
  }
  i(Pae, "_guessExecutionStatusRelativeTo");
  function ty(e, t, r) {
    let n = {
      this: CP(e),
      target: CP(t)
    };
    if (n.target.node !== n.this.node)
      return Cae(e, n.target, r);
    let s = {
      target: t.getAncestry(),
      this: e.getAncestry()
    };
    if (s.target.includes(e)) return "after";
    if (s.this.includes(t)) return "before";
    let a, o = {
      target: 0,
      this: 0
    };
    for (; !a && o.this < s.this.length; ) {
      let p = s.this[o.this];
      o.target = s.target.indexOf(p), o.target >= 0 ? a = p : o.this++;
    }
    if (!a)
      throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
    if (DP(s.this, o.this - 1) || DP(s.target, o.target - 1))
      return "unknown";
    let l = {
      this: s.this[o.this - 1],
      target: s.target[o.target - 1]
    };
    if (l.target.listKey && l.this.listKey && l.target.container === l.this.container)
      return l.target.key > l.this.key ? "before" : "after";
    let u = aae[a.type], c = {
      this: u.indexOf(l.this.parentKey),
      target: u.indexOf(l.target.parentKey)
    };
    return c.target > c.this ? "before" : "after";
  }
  i(ty, "_guessExecutionStatusRelativeToCached");
  function Aae(e, t, r) {
    if (t.isFunctionDeclaration()) {
      if (t.parentPath.isExportDeclaration())
        return "unknown";
    } else return ty(e, t, r) === "before" ? "before" : "unknown";
    let n = t.scope.getBinding(t.node.id.name);
    if (!n.references) return "before";
    let s = n.referencePaths, a;
    for (let o of s) {
      if (!!o.find((c) => c.node === t.node)) continue;
      if (o.key !== "callee" || !o.parentPath.isCallExpression())
        return "unknown";
      let u = ty(e, o, r);
      if (a && a !== u)
        return "unknown";
      a = u;
    }
    return a;
  }
  i(Aae, "_guessExecutionStatusRelativeToDifferentFunctionsInternal");
  function Cae(e, t, r) {
    let n = r.get(e.node), s;
    if (!n)
      r.set(e.node, n = /* @__PURE__ */ new Map());
    else if (s = n.get(t.node))
      return s === wP ? "unknown" : s;
    n.set(t.node, wP);
    let a = Aae(e, t, r);
    return n.set(t.node, a), a;
  }
  i(Cae, "_guessExecutionStatusRelativeToDifferentFunctionsCached");
  function Dae(e, t) {
    return _P.call(this, e, t) || this;
  }
  i(Dae, "resolve");
  function _P(e, t) {
    var r;
    if (!((r = t) != null && r.includes(this)))
      if (t = t || [], t.push(this), this.isVariableDeclarator()) {
        if (this.get("id").isIdentifier())
          return this.get("init").resolve(e, t);
      } else if (this.isReferencedIdentifier()) {
        let n = this.scope.getBinding(this.node.name);
        if (!n || !n.constant || n.kind === "module") return;
        if (n.path !== this) {
          let s = n.path.resolve(e, t);
          return this.find((a) => a.node === s.node) ? void 0 : s;
        }
      } else {
        if (this.isTypeCastExpression())
          return this.get("expression").resolve(e, t);
        if (e && this.isMemberExpression()) {
          let n = this.toComputedKey();
          if (!uae(n)) return;
          let s = n.value, a = this.get("object").resolve(e, t);
          if (a.isObjectExpression()) {
            let o = a.get("properties");
            for (let l of o) {
              if (!l.isProperty()) continue;
              let u = l.get("key"), c = l.isnt("computed") && u.isIdentifier({
                name: s
              });
              if (c = c || u.isLiteral({
                value: s
              }), c) return l.get("value").resolve(e, t);
            }
          } else if (a.isArrayExpression() && !isNaN(+s)) {
            let l = a.get("elements")[s];
            if (l) return l.resolve(e, t);
          }
        }
      }
  }
  i(_P, "_resolve");
  function wae() {
    if (this.isIdentifier()) {
      let e = this.scope.getBinding(this.node.name);
      return e ? e.constant : !1;
    }
    if (this.isLiteral())
      return this.isRegExpLiteral() ? !1 : this.isTemplateLiteral() ? this.get("expressions").every((e) => e.isConstantExpression()) : !0;
    if (this.isUnaryExpression())
      return this.node.operator !== "void" ? !1 : this.get("argument").isConstantExpression();
    if (this.isBinaryExpression()) {
      let {
        operator: e
      } = this.node;
      return e !== "in" && e !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
    }
    return this.isMemberExpression() ? !this.node.computed && this.get("object").isIdentifier({
      name: "Symbol"
    }) && !this.scope.hasBinding("Symbol", {
      noGlobals: !0
    }) : this.isCallExpression() ? this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding(
    "Symbol", {
      noGlobals: !0
    }) && this.get("arguments")[0].isStringLiteral() : !1;
  }
  i(wae, "isConstantExpression");
  function Iae() {
    return !!(this.isProgram() ? this : this.parentPath).find((r) => {
      if (r.isProgram({
        sourceType: "module"
      }) || r.isClass()) return !0;
      if (r.isArrowFunctionExpression() && !r.get("body").isBlockStatement())
        return !1;
      let n;
      if (r.isFunction())
        n = r.node.body;
      else if (r.isProgram())
        n = r.node;
      else
        return !1;
      for (let s of n.directives)
        if (s.value.value === "use strict")
          return !0;
    });
  }
  i(Iae, "isInStrictMode");
});

// ../node_modules/@babel/traverse/lib/path/family.js
var jP = A((Ut) => {
  "use strict";
  Object.defineProperty(Ut, "__esModule", {
    value: !0
  });
  Ut._getKey = kP;
  Ut._getPattern = FP;
  Ut.get = Gae;
  Ut.getAllNextSiblings = Wae;
  Ut.getAllPrevSiblings = Kae;
  Ut.getAssignmentIdentifiers = Hae;
  Ut.getBindingIdentifierPaths = zae;
  Ut.getBindingIdentifiers = Yae;
  Ut.getCompletionRecords = qae;
  Ut.getNextSibling = $ae;
  Ut.getOpposite = Lae;
  Ut.getOuterBindingIdentifierPaths = Xae;
  Ut.getOuterBindingIdentifiers = Jae;
  Ut.getPrevSibling = Vae;
  Ut.getSibling = Uae;
  var ny = cs(), _ae = Pe(), {
    getAssignmentIdentifiers: Oae,
    getBindingIdentifiers: BP,
    getOuterBindingIdentifiers: Nae,
    numericLiteral: Bae,
    unaryExpression: kae
  } = _ae, sy = 0, so = 1;
  function Fae(e) {
    return {
      type: sy,
      path: e
    };
  }
  i(Fae, "NormalCompletion");
  function jae(e) {
    return {
      type: so,
      path: e
    };
  }
  i(jae, "BreakCompletion");
  function Lae() {
    return this.key === "left" ? this.getSibling("right") : this.key === "right" ? this.getSibling("left") : null;
  }
  i(Lae, "getOpposite");
  function Bi(e, t, r) {
    return e && t.push(...ki(e, r)), t;
  }
  i(Bi, "addCompletionRecords");
  function Mae(e, t, r) {
    let n = [];
    for (let s = 0; s < e.length; s++) {
      let a = e[s], o = ki(a, r), l = [], u = [];
      for (let c of o)
        c.type === sy && l.push(c), c.type === so && u.push(c);
      l.length && (n = l), t.push(...u);
    }
    return t.push(...n), t;
  }
  i(Mae, "completionRecordForSwitch");
  function Rae(e) {
    e.forEach((t) => {
      t.type = so;
    });
  }
  i(Rae, "normalCompletionToBreak");
  function ry(e, t) {
    e.forEach((r) => {
      r.path.isBreakStatement({
        label: null
      }) && (t ? r.path.replaceWith(kae("void", Bae(0))) : r.path.remove());
    });
  }
  i(ry, "replaceBreakStatementInBreakCompletion");
  function NP(e, t) {
    let r = [];
    if (t.canHaveBreak) {
      let n = [];
      for (let s = 0; s < e.length; s++) {
        let a = e[s], o = Object.assign({}, t, {
          inCaseClause: !1
        });
        a.isBlockStatement() && (t.inCaseClause || t.shouldPopulateBreak) ? o.shouldPopulateBreak = !0 : o.shouldPopulateBreak = !1;
        let l = ki(a, o);
        if (l.length > 0 && l.every((u) => u.type === so)) {
          n.length > 0 && l.every((u) => u.path.isBreakStatement({
            label: null
          })) ? (Rae(n), r.push(...n), n.some((u) => u.path.isDeclaration()) && (r.push(...l), ry(l, !0)), ry(l, !1)) : (r.push(...l), t.shouldPopulateBreak ||
          ry(l, !0));
          break;
        }
        if (s === e.length - 1)
          r.push(...l);
        else {
          n = [];
          for (let u = 0; u < l.length; u++) {
            let c = l[u];
            c.type === so && r.push(c), c.type === sy && n.push(c);
          }
        }
      }
    } else if (e.length)
      for (let n = e.length - 1; n >= 0; n--) {
        let s = ki(e[n], t);
        if (s.length > 1 || s.length === 1 && !s[0].path.isVariableDeclaration()) {
          r.push(...s);
          break;
        }
      }
    return r;
  }
  i(NP, "getStatementListCompletion");
  function ki(e, t) {
    let r = [];
    if (e.isIfStatement())
      r = Bi(e.get("consequent"), r, t), r = Bi(e.get("alternate"), r, t);
    else {
      if (e.isDoExpression() || e.isFor() || e.isWhile() || e.isLabeledStatement())
        return Bi(e.get("body"), r, t);
      if (e.isProgram() || e.isBlockStatement())
        return NP(e.get("body"), t);
      if (e.isFunction())
        return ki(e.get("body"), t);
      if (e.isTryStatement())
        r = Bi(e.get("block"), r, t), r = Bi(e.get("handler"), r, t);
      else {
        if (e.isCatchClause())
          return Bi(e.get("body"), r, t);
        if (e.isSwitchStatement())
          return Mae(e.get("cases"), r, t);
        if (e.isSwitchCase())
          return NP(e.get("consequent"), {
            canHaveBreak: !0,
            shouldPopulateBreak: !1,
            inCaseClause: !0
          });
        e.isBreakStatement() ? r.push(jae(e)) : r.push(Fae(e));
      }
    }
    return r;
  }
  i(ki, "_getCompletionRecords");
  function qae() {
    return ki(this, {
      canHaveBreak: !1,
      shouldPopulateBreak: !1,
      inCaseClause: !1
    }).map((t) => t.path);
  }
  i(qae, "getCompletionRecords");
  function Uae(e) {
    return ny.default.get({
      parentPath: this.parentPath,
      parent: this.parent,
      container: this.container,
      listKey: this.listKey,
      key: e
    }).setContext(this.context);
  }
  i(Uae, "getSibling");
  function Vae() {
    return this.getSibling(this.key - 1);
  }
  i(Vae, "getPrevSibling");
  function $ae() {
    return this.getSibling(this.key + 1);
  }
  i($ae, "getNextSibling");
  function Wae() {
    let e = this.key, t = this.getSibling(++e), r = [];
    for (; t.node; )
      r.push(t), t = this.getSibling(++e);
    return r;
  }
  i(Wae, "getAllNextSiblings");
  function Kae() {
    let e = this.key, t = this.getSibling(--e), r = [];
    for (; t.node; )
      r.push(t), t = this.getSibling(--e);
    return r;
  }
  i(Kae, "getAllPrevSiblings");
  function Gae(e, t = !0) {
    t === !0 && (t = this.context);
    let r = e.split(".");
    return r.length === 1 ? kP.call(this, e, t) : FP.call(this, r, t);
  }
  i(Gae, "get");
  function kP(e, t) {
    let r = this.node, n = r[e];
    return Array.isArray(n) ? n.map((s, a) => ny.default.get({
      listKey: e,
      parentPath: this,
      parent: r,
      container: n,
      key: a
    }).setContext(t)) : ny.default.get({
      parentPath: this,
      parent: r,
      container: r,
      key: e
    }).setContext(t);
  }
  i(kP, "_getKey");
  function FP(e, t) {
    let r = this;
    for (let n of e)
      n === "." ? r = r.parentPath : Array.isArray(r) ? r = r[n] : r = r.get(n, t);
    return r;
  }
  i(FP, "_getPattern");
  function Hae() {
    return Oae(this.node);
  }
  i(Hae, "getAssignmentIdentifiers");
  function Yae(e) {
    return BP(this.node, e);
  }
  i(Yae, "getBindingIdentifiers");
  function Jae(e) {
    return Nae(this.node, e);
  }
  i(Jae, "getOuterBindingIdentifiers");
  function zae(e = !1, t = !1) {
    let n = [this], s = /* @__PURE__ */ Object.create(null);
    for (; n.length; ) {
      let a = n.shift();
      if (!a || !a.node) continue;
      let o = BP.keys[a.node.type];
      if (a.isIdentifier()) {
        e ? (s[a.node.name] = s[a.node.name] || []).push(a) : s[a.node.name] = a;
        continue;
      }
      if (a.isExportDeclaration()) {
        let l = a.get("declaration");
        l.isDeclaration() && n.push(l);
        continue;
      }
      if (t) {
        if (a.isFunctionDeclaration()) {
          n.push(a.get("id"));
          continue;
        }
        if (a.isFunctionExpression())
          continue;
      }
      if (o)
        for (let l = 0; l < o.length; l++) {
          let u = o[l], c = a.get(u);
          Array.isArray(c) ? n.push(...c) : c.node && n.push(c);
        }
    }
    return s;
  }
  i(zae, "getBindingIdentifierPaths");
  function Xae(e = !1) {
    return this.getBindingIdentifierPaths(e, !0);
  }
  i(Xae, "getOuterBindingIdentifierPaths");
});

// ../node_modules/@babel/traverse/lib/path/comments.js
var MP = A((io) => {
  "use strict";
  Object.defineProperty(io, "__esModule", {
    value: !0
  });
  io.addComment = roe;
  io.addComments = noe;
  io.shareCommentsWithSiblings = toe;
  var Qae = Pe(), {
    addComment: Zae,
    addComments: eoe
  } = Qae;
  function toe() {
    if (typeof this.key == "string") return;
    let e = this.node;
    if (!e) return;
    let t = e.trailingComments, r = e.leadingComments;
    if (!t && !r) return;
    let n = this.getSibling(this.key - 1), s = this.getSibling(this.key + 1), a = !!n.node, o = !!s.node;
    a && (r && n.addComments("trailing", LP(r, n.node.trailingComments)), t && !o && n.addComments("trailing", t)), o && (t && s.addComments(
    "leading", LP(t, s.node.leadingComments)), r && !a && s.addComments("leading", r));
  }
  i(toe, "shareCommentsWithSiblings");
  function LP(e, t) {
    if (!(t != null && t.length)) return e;
    let r = new Set(t);
    return e.filter((n) => !r.has(n));
  }
  i(LP, "removeIfExisting");
  function roe(e, t, r) {
    Zae(this.node, e, t, r);
  }
  i(roe, "addComment");
  function noe(e, t) {
    eoe(this.node, e, t);
  }
  i(noe, "addComments");
});

// ../node_modules/@babel/traverse/lib/path/index.js
var cs = A((mn) => {
  "use strict";
  Object.defineProperty(mn, "__esModule", {
    value: !0
  });
  mn.default = mn.SHOULD_STOP = mn.SHOULD_SKIP = mn.REMOVED = void 0;
  var soe = Vh(), ioe = Ls(), aoe = Dr(), ooe = tm(), UP = Pe(), _u = UP, loe = qs(), uoe = eo(), dn = Av(), Fi = Kv(), ji = qm(), RP = gP(),
  Ys = AP(), Dt = OP(), VP = fn(), vt = VP, Li = Au(), hn = Cu(), or = jP(), iy = MP(), coe = Yh(), {
    validate: poe
  } = UP, qP = ioe("babel"), uAe = mn.REMOVED = 1, cAe = mn.SHOULD_STOP = 2, pAe = mn.SHOULD_SKIP = 4, Bn = mn.default = class $P {
    static {
      i(this, "NodePath");
    }
    constructor(t, r) {
      this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container =
      null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = r, this.hub = t, this.data = null, this.
      context = null, this.scope = null;
    }
    get removed() {
      return (this._traverseFlags & 1) > 0;
    }
    set removed(t) {
      t ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
    }
    get shouldStop() {
      return (this._traverseFlags & 2) > 0;
    }
    set shouldStop(t) {
      t ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
    }
    get shouldSkip() {
      return (this._traverseFlags & 4) > 0;
    }
    set shouldSkip(t) {
      t ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
    }
    static get({
      hub: t,
      parentPath: r,
      parent: n,
      container: s,
      listKey: a,
      key: o
    }) {
      if (!t && r && (t = r.hub), !n)
        throw new Error("To get a node path the parent needs to exist");
      let l = s[o], u = loe.getOrCreateCachedPaths(t, n), c = u.get(l);
      return c || (c = new $P(t, n), l && u.set(l, c)), VP.setup.call(c, r, s, a, o), c;
    }
    getScope(t) {
      return this.isScope() ? new ooe.default(this) : t;
    }
    setData(t, r) {
      return this.data == null && (this.data = /* @__PURE__ */ Object.create(null)), this.data[t] = r;
    }
    getData(t, r) {
      this.data == null && (this.data = /* @__PURE__ */ Object.create(null));
      let n = this.data[t];
      return n === void 0 && r !== void 0 && (n = this.data[t] = r), n;
    }
    hasNode() {
      return this.node != null;
    }
    buildCodeFrameError(t, r = SyntaxError) {
      return this.hub.buildError(this.node, t, r);
    }
    traverse(t, r) {
      (0, aoe.default)(this.node, t, this.scope, r, this);
    }
    set(t, r) {
      poe(this.node, t, r), this.node[t] = r;
    }
    getPathLocation() {
      let t = [], r = this;
      do {
        let n = r.key;
        r.inList && (n = `${r.listKey}[${n}]`), t.unshift(n);
      } while (r = r.parentPath);
      return t.join(".");
    }
    debug(t) {
      qP.enabled && qP(`${this.getPathLocation()} ${this.type}: ${t}`);
    }
    toString() {
      return (0, uoe.default)(this.node).code;
    }
    get inList() {
      return !!this.listKey;
    }
    set inList(t) {
      t || (this.listKey = null);
    }
    get parentKey() {
      return this.listKey || this.key;
    }
  }, foe = {
    findParent: dn.findParent,
    find: dn.find,
    getFunctionParent: dn.getFunctionParent,
    getStatementParent: dn.getStatementParent,
    getEarliestCommonAncestorFrom: dn.getEarliestCommonAncestorFrom,
    getDeepestCommonAncestorFrom: dn.getDeepestCommonAncestorFrom,
    getAncestry: dn.getAncestry,
    isAncestor: dn.isAncestor,
    isDescendant: dn.isDescendant,
    inType: dn.inType,
    getTypeAnnotation: Fi.getTypeAnnotation,
    isBaseType: Fi.isBaseType,
    couldBeBaseType: Fi.couldBeBaseType,
    baseTypeStrictlyMatches: Fi.baseTypeStrictlyMatches,
    isGenericType: Fi.isGenericType,
    replaceWithMultiple: ji.replaceWithMultiple,
    replaceWithSourceString: ji.replaceWithSourceString,
    replaceWith: ji.replaceWith,
    replaceExpressionWithStatements: ji.replaceExpressionWithStatements,
    replaceInline: ji.replaceInline,
    evaluateTruthy: RP.evaluateTruthy,
    evaluate: RP.evaluate,
    toComputedKey: Ys.toComputedKey,
    ensureBlock: Ys.ensureBlock,
    unwrapFunctionEnvironment: Ys.unwrapFunctionEnvironment,
    arrowFunctionToExpression: Ys.arrowFunctionToExpression,
    splitExportDeclaration: Ys.splitExportDeclaration,
    ensureFunctionName: Ys.ensureFunctionName,
    matchesPattern: Dt.matchesPattern,
    isStatic: Dt.isStatic,
    isNodeType: Dt.isNodeType,
    canHaveVariableDeclarationOrExpression: Dt.canHaveVariableDeclarationOrExpression,
    canSwapBetweenExpressionAndStatement: Dt.canSwapBetweenExpressionAndStatement,
    isCompletionRecord: Dt.isCompletionRecord,
    isStatementOrBlock: Dt.isStatementOrBlock,
    referencesImport: Dt.referencesImport,
    getSource: Dt.getSource,
    willIMaybeExecuteBefore: Dt.willIMaybeExecuteBefore,
    _guessExecutionStatusRelativeTo: Dt._guessExecutionStatusRelativeTo,
    resolve: Dt.resolve,
    isConstantExpression: Dt.isConstantExpression,
    isInStrictMode: Dt.isInStrictMode,
    isDenylisted: vt.isDenylisted,
    visit: vt.visit,
    skip: vt.skip,
    skipKey: vt.skipKey,
    stop: vt.stop,
    setContext: vt.setContext,
    requeue: vt.requeue,
    requeueComputedKeyAndDecorators: vt.requeueComputedKeyAndDecorators,
    remove: Li.remove,
    insertBefore: hn.insertBefore,
    insertAfter: hn.insertAfter,
    unshiftContainer: hn.unshiftContainer,
    pushContainer: hn.pushContainer,
    getOpposite: or.getOpposite,
    getCompletionRecords: or.getCompletionRecords,
    getSibling: or.getSibling,
    getPrevSibling: or.getPrevSibling,
    getNextSibling: or.getNextSibling,
    getAllNextSiblings: or.getAllNextSiblings,
    getAllPrevSiblings: or.getAllPrevSiblings,
    get: or.get,
    getAssignmentIdentifiers: or.getAssignmentIdentifiers,
    getBindingIdentifiers: or.getBindingIdentifiers,
    getOuterBindingIdentifiers: or.getOuterBindingIdentifiers,
    getBindingIdentifierPaths: or.getBindingIdentifierPaths,
    getOuterBindingIdentifierPaths: or.getOuterBindingIdentifierPaths,
    shareCommentsWithSiblings: iy.shareCommentsWithSiblings,
    addComment: iy.addComment,
    addComments: iy.addComments
  };
  Object.assign(Bn.prototype, foe);
  Bn.prototype.arrowFunctionToShadowed = Ys.arrowFunctionToShadowed, Object.assign(Bn.prototype, {
    has: Dt.has,
    is: Dt.is,
    isnt: Dt.isnt,
    equals: Dt.equals,
    hoist: hn.hoist,
    updateSiblingKeys: hn.updateSiblingKeys,
    call: vt.call,
    isBlacklisted: vt.isBlacklisted,
    setScope: vt.setScope,
    resync: vt.resync,
    popContext: vt.popContext,
    pushContext: vt.pushContext,
    setup: vt.setup,
    setKey: vt.setKey
  });
  Bn.prototype._guessExecutionStatusRelativeToDifferentFunctions = Dt._guessExecutionStatusRelativeTo, Bn.prototype._guessExecutionStatusRelativeToDifferentFunctions =
  Dt._guessExecutionStatusRelativeTo, Object.assign(Bn.prototype, {
    _getTypeAnnotation: Fi._getTypeAnnotation,
    _replaceWith: ji._replaceWith,
    _resolve: Dt._resolve,
    _call: vt._call,
    _resyncParent: vt._resyncParent,
    _resyncKey: vt._resyncKey,
    _resyncList: vt._resyncList,
    _resyncRemoved: vt._resyncRemoved,
    _getQueueContexts: vt._getQueueContexts,
    _removeFromScope: Li._removeFromScope,
    _callRemovalHooks: Li._callRemovalHooks,
    _remove: Li._remove,
    _markRemoved: Li._markRemoved,
    _assertUnremoved: Li._assertUnremoved,
    _containerInsert: hn._containerInsert,
    _containerInsertBefore: hn._containerInsertBefore,
    _containerInsertAfter: hn._containerInsertAfter,
    _verifyNodeList: hn._verifyNodeList,
    _getKey: or._getKey,
    _getPattern: or._getPattern
  });
  for (let e of _u.TYPES) {
    let t = `is${e}`, r = _u[t];
    Bn.prototype[t] = function(n) {
      return r(this.node, n);
    }, Bn.prototype[`assert${e}`] = function(n) {
      if (!r(this.node, n))
        throw new TypeError(`Expected node path of type ${e}`);
    };
  }
  Object.assign(Bn.prototype, coe);
  for (let e of Object.keys(soe))
    e[0] !== "_" && (_u.TYPES.includes(e) || _u.TYPES.push(e));
});

// ../node_modules/@babel/traverse/lib/context.js
var WP = A((Ou) => {
  "use strict";
  Object.defineProperty(Ou, "__esModule", {
    value: !0
  });
  Ou.default = void 0;
  var doe = cs(), hoe = Pe(), ay = fn(), {
    VISITOR_KEYS: moe
  } = hoe, oy = class {
    static {
      i(this, "TraversalContext");
    }
    constructor(t, r, n, s) {
      this.queue = null, this.priorityQueue = null, this.parentPath = s, this.scope = t, this.state = n, this.opts = r;
    }
    shouldVisit(t) {
      let r = this.opts;
      if (r.enter || r.exit || r[t.type]) return !0;
      let n = moe[t.type];
      if (!(n != null && n.length)) return !1;
      for (let s of n)
        if (t[s])
          return !0;
      return !1;
    }
    create(t, r, n, s) {
      return doe.default.get({
        parentPath: this.parentPath,
        parent: t,
        container: r,
        key: n,
        listKey: s
      });
    }
    maybeQueue(t, r) {
      this.queue && (r ? this.queue.push(t) : this.priorityQueue.push(t));
    }
    visitMultiple(t, r, n) {
      if (t.length === 0) return !1;
      let s = [];
      for (let a = 0; a < t.length; a++) {
        let o = t[a];
        o && this.shouldVisit(o) && s.push(this.create(r, t, a, n));
      }
      return this.visitQueue(s);
    }
    visitSingle(t, r) {
      return this.shouldVisit(t[r]) ? this.visitQueue([this.create(t, t, r)]) : !1;
    }
    visitQueue(t) {
      this.queue = t, this.priorityQueue = [];
      let r = /* @__PURE__ */ new WeakSet(), n = !1, s = 0;
      for (; s < t.length; ) {
        let a = t[s];
        if (s++, ay.resync.call(a), (a.contexts.length === 0 || a.contexts[a.contexts.length - 1] !== this) && ay.pushContext.call(a, this),
        a.key === null) continue;
        let {
          node: o
        } = a;
        if (!r.has(o)) {
          if (o && r.add(o), a.visit()) {
            n = !0;
            break;
          }
          if (this.priorityQueue.length && (n = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = t, n))
            break;
        }
      }
      for (let a = 0; a < s; a++)
        ay.popContext.call(t[a]);
      return this.queue = null, n;
    }
    visit(t, r) {
      let n = t[r];
      return n ? Array.isArray(n) ? this.visitMultiple(n, t, r) : this.visitSingle(t, r) : !1;
    }
  };
  Ou.default = oy;
});

// ../node_modules/@babel/traverse/lib/traverse-node.js
var Jl = A((ly) => {
  "use strict";
  Object.defineProperty(ly, "__esModule", {
    value: !0
  });
  ly.traverseNode = Eoe;
  var yoe = WP(), goe = Pe(), {
    VISITOR_KEYS: boe
  } = goe;
  function Eoe(e, t, r, n, s, a, o) {
    let l = boe[e.type];
    if (!l) return !1;
    let u = new yoe.default(r, t, n, s);
    if (o)
      return a != null && a[s.parentKey] ? !1 : u.visitQueue([s]);
    for (let c of l)
      if (!(a != null && a[c]) && u.visit(e, c))
        return !0;
    return !1;
  }
  i(Eoe, "traverseNode");
});

// ../node_modules/@babel/traverse/lib/path/context.js
var fn = A((mt) => {
  "use strict";
  Object.defineProperty(mt, "__esModule", {
    value: !0
  });
  mt._call = cy;
  mt._getQueueContexts = Foe;
  mt._resyncKey = zP;
  mt._resyncList = XP;
  mt._resyncParent = JP;
  mt._resyncRemoved = Ioe;
  mt.call = uy;
  mt.isDenylisted = HP;
  mt.popContext = _oe;
  mt.pushContext = Ooe;
  mt.requeue = Boe;
  mt.requeueComputedKeyAndDecorators = koe;
  mt.resync = woe;
  mt.setContext = Doe;
  mt.setKey = Nu;
  mt.setScope = YP;
  mt.setup = Noe;
  mt.skip = Poe;
  mt.skipKey = Aoe;
  mt.stop = Coe;
  mt.visit = voe;
  var Toe = Jl(), KP = cs(), Soe = Au(), xoe = Pe();
  function uy(e) {
    let t = this.opts;
    if (this.debug(e), this.node && cy.call(this, t[e]))
      return !0;
    if (this.node) {
      var r;
      return cy.call(this, (r = t[this.node.type]) == null ? void 0 : r[e]);
    }
    return !1;
  }
  i(uy, "call");
  function cy(e) {
    if (!e) return !1;
    for (let t of e) {
      if (!t) continue;
      let r = this.node;
      if (!r) return !0;
      let n = t.call(this.state, this, this.state);
      if (n && typeof n == "object" && typeof n.then == "function")
        throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not suppo\
rt. If you're using a published plugin, you may need to upgrade your @babel/core version.");
      if (n)
        throw new Error(`Unexpected return value from visitor method ${t}`);
      if (this.node !== r || this._traverseFlags > 0) return !0;
    }
    return !1;
  }
  i(cy, "_call");
  function HP() {
    var e;
    let t = (e = this.opts.denylist) != null ? e : this.opts.blacklist;
    return t?.includes(this.node.type);
  }
  i(HP, "isDenylisted");
  mt.isBlacklisted = HP;
  function GP(e, t) {
    e.context !== t && (e.context = t, e.state = t.state, e.opts = t.opts);
  }
  i(GP, "restoreContext");
  function voe() {
    var e, t;
    if (!this.node || this.isDenylisted() || (e = (t = this.opts).shouldSkip) != null && e.call(t, this))
      return !1;
    let r = this.context;
    return this.shouldSkip || uy.call(this, "enter") ? (this.debug("Skip..."), this.shouldStop) : (GP(this, r), this.debug("Recursing into..\
."), this.shouldStop = (0, Toe.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), GP(this, r), uy.call(this, "\
exit"), this.shouldStop);
  }
  i(voe, "visit");
  function Poe() {
    this.shouldSkip = !0;
  }
  i(Poe, "skip");
  function Aoe(e) {
    this.skipKeys == null && (this.skipKeys = {}), this.skipKeys[e] = !0;
  }
  i(Aoe, "skipKey");
  function Coe() {
    this._traverseFlags |= KP.SHOULD_SKIP | KP.SHOULD_STOP;
  }
  i(Coe, "stop");
  function YP() {
    var e, t;
    if ((e = this.opts) != null && e.noScope) return;
    let r = this.parentPath;
    ((this.key === "key" || this.listKey === "decorators") && r.isMethod() || this.key === "discriminant" && r.isSwitchStatement()) && (r = r.
    parentPath);
    let n;
    for (; r && !n; ) {
      var s;
      if ((s = r.opts) != null && s.noScope) return;
      n = r.scope, r = r.parentPath;
    }
    this.scope = this.getScope(n), (t = this.scope) == null || t.init();
  }
  i(YP, "setScope");
  function Doe(e) {
    return this.skipKeys != null && (this.skipKeys = {}), this._traverseFlags = 0, e && (this.context = e, this.state = e.state, this.opts =
    e.opts), YP.call(this), this;
  }
  i(Doe, "setContext");
  function woe() {
    this.removed || (JP.call(this), XP.call(this), zP.call(this));
  }
  i(woe, "resync");
  function JP() {
    this.parentPath && (this.parent = this.parentPath.node);
  }
  i(JP, "_resyncParent");
  function zP() {
    if (this.container && this.node !== this.container[this.key]) {
      if (Array.isArray(this.container)) {
        for (let e = 0; e < this.container.length; e++)
          if (this.container[e] === this.node) {
            Nu.call(this, e);
            return;
          }
      } else
        for (let e of Object.keys(this.container))
          if (this.container[e] === this.node) {
            Nu.call(this, e);
            return;
          }
      this.key = null;
    }
  }
  i(zP, "_resyncKey");
  function XP() {
    if (!this.parent || !this.inList) return;
    let e = this.parent[this.listKey];
    this.container !== e && (this.container = e || null);
  }
  i(XP, "_resyncList");
  function Ioe() {
    (this.key == null || !this.container || this.container[this.key] !== this.node) && Soe._markRemoved.call(this);
  }
  i(Ioe, "_resyncRemoved");
  function _oe() {
    this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
  }
  i(_oe, "popContext");
  function Ooe(e) {
    this.contexts.push(e), this.setContext(e);
  }
  i(Ooe, "pushContext");
  function Noe(e, t, r, n) {
    this.listKey = r, this.container = t, this.parentPath = e || this.parentPath, Nu.call(this, n);
  }
  i(Noe, "setup");
  function Nu(e) {
    var t;
    this.key = e, this.node = this.container[this.key], this.type = (t = this.node) == null ? void 0 : t.type;
  }
  i(Nu, "setKey");
  function Boe(e = this) {
    if (e.removed) return;
    let t = this.contexts;
    for (let r of t)
      r.maybeQueue(e);
  }
  i(Boe, "requeue");
  function koe() {
    let {
      context: e,
      node: t
    } = this;
    if (!xoe.isPrivate(t) && t.computed && e.maybeQueue(this.get("key")), t.decorators)
      for (let r of this.get("decorators"))
        e.maybeQueue(r);
  }
  i(koe, "requeueComputedKeyAndDecorators");
  function Foe() {
    let e = this, t = this.contexts;
    for (; !t.length && (e = e.parentPath, !!e); )
      t = e.contexts;
    return t;
  }
  i(Foe, "_getQueueContexts");
});

// ../node_modules/@babel/traverse/lib/hub.js
var QP = A((Bu) => {
  "use strict";
  Object.defineProperty(Bu, "__esModule", {
    value: !0
  });
  Bu.default = void 0;
  var py = class {
    static {
      i(this, "Hub");
    }
    getCode() {
    }
    getScope() {
    }
    addHelper() {
      throw new Error("Helpers are not supported by the default hub.");
    }
    buildError(t, r, n = TypeError) {
      return new n(r);
    }
  };
  Bu.default = py;
});

// ../node_modules/@babel/traverse/lib/index.js
var Dr = A((kn) => {
  "use strict";
  Object.defineProperty(kn, "__esModule", {
    value: !0
  });
  Object.defineProperty(kn, "Hub", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return qoe.default;
    }, "get")
  });
  Object.defineProperty(kn, "NodePath", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Moe.default;
    }, "get")
  });
  Object.defineProperty(kn, "Scope", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Roe.default;
    }, "get")
  });
  kn.visitors = kn.default = void 0;
  fn();
  var ao = Ha();
  kn.visitors = ao;
  var joe = Pe(), Loe = qs(), ZP = Jl(), Moe = cs(), Roe = tm(), qoe = QP(), {
    VISITOR_KEYS: Uoe,
    removeProperties: Voe,
    traverseFast: eA
  } = joe;
  function Br(e, t = {}, r, n, s, a) {
    if (e) {
      if (!t.noScope && !r && e.type !== "Program" && e.type !== "File")
        throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${e.
        type} node without passing scope and parentPath.`);
      if (!s && a)
        throw new Error("visitSelf can only be used when providing a NodePath.");
      Uoe[e.type] && (ao.explode(t), (0, ZP.traverseNode)(e, t, r, n, s, null, a));
    }
  }
  i(Br, "traverse");
  var xAe = kn.default = Br;
  Br.visitors = ao;
  Br.verify = ao.verify;
  Br.explode = ao.explode;
  Br.cheap = function(e, t) {
    eA(e, t);
  };
  Br.node = function(e, t, r, n, s, a) {
    (0, ZP.traverseNode)(e, t, r, n, s, a);
  };
  Br.clearNode = function(e, t) {
    Voe(e, t);
  };
  Br.removeProperties = function(e, t) {
    return eA(e, Br.clearNode, t), e;
  };
  function $oe(e, t) {
    e.node.type === t.type && (t.has = !0, e.stop());
  }
  i($oe, "hasDenylistedType");
  Br.hasType = function(e, t, r) {
    if (r != null && r.includes(e.type)) return !1;
    if (e.type === t) return !0;
    let n = {
      has: !1,
      type: t
    };
    return Br(e, {
      noScope: !0,
      denylist: r,
      enter: $oe
    }, null, n), n.has;
  };
  Br.cache = Loe;
});

// ../node_modules/@babel/helper-module-imports/lib/import-builder.js
var nA = A((Fu) => {
  "use strict";
  Object.defineProperty(Fu, "__esModule", {
    value: !0
  });
  Fu.default = void 0;
  var Kr = le("assert"), Woe = Pe(), {
    callExpression: fy,
    cloneNode: ku,
    expressionStatement: tA,
    identifier: oo,
    importDeclaration: Koe,
    importDefaultSpecifier: Goe,
    importNamespaceSpecifier: Hoe,
    importSpecifier: Yoe,
    memberExpression: dy,
    stringLiteral: rA,
    variableDeclaration: Joe,
    variableDeclarator: zoe
  } = Woe, hy = class {
    static {
      i(this, "ImportBuilder");
    }
    constructor(t, r, n) {
      this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = r, this._hub = n, this._importedSource = t;
    }
    done() {
      return {
        statements: this._statements,
        resultName: this._resultName
      };
    }
    import() {
      return this._statements.push(Koe([], rA(this._importedSource))), this;
    }
    require() {
      return this._statements.push(tA(fy(oo("require"), [rA(this._importedSource)]))), this;
    }
    namespace(t = "namespace") {
      let r = this._scope.generateUidIdentifier(t), n = this._statements[this._statements.length - 1];
      return Kr(n.type === "ImportDeclaration"), Kr(n.specifiers.length === 0), n.specifiers = [Hoe(r)], this._resultName = ku(r), this;
    }
    default(t) {
      let r = this._scope.generateUidIdentifier(t), n = this._statements[this._statements.length - 1];
      return Kr(n.type === "ImportDeclaration"), Kr(n.specifiers.length === 0), n.specifiers = [Goe(r)], this._resultName = ku(r), this;
    }
    named(t, r) {
      if (r === "default") return this.default(t);
      let n = this._scope.generateUidIdentifier(t), s = this._statements[this._statements.length - 1];
      return Kr(s.type === "ImportDeclaration"), Kr(s.specifiers.length === 0), s.specifiers = [Yoe(n, oo(r))], this._resultName = ku(n), this;
    }
    var(t) {
      let r = this._scope.generateUidIdentifier(t), n = this._statements[this._statements.length - 1];
      return n.type !== "ExpressionStatement" && (Kr(this._resultName), n = tA(this._resultName), this._statements.push(n)), this._statements[this.
      _statements.length - 1] = Joe("var", [zoe(r, n.expression)]), this._resultName = ku(r), this;
    }
    defaultInterop() {
      return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
    wildcardInterop() {
      return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
    _interop(t) {
      let r = this._statements[this._statements.length - 1];
      return r.type === "ExpressionStatement" ? r.expression = fy(t, [r.expression]) : r.type === "VariableDeclaration" ? (Kr(r.declarations.
      length === 1), r.declarations[0].init = fy(t, [r.declarations[0].init])) : Kr.fail("Unexpected type."), this;
    }
    prop(t) {
      let r = this._statements[this._statements.length - 1];
      return r.type === "ExpressionStatement" ? r.expression = dy(r.expression, oo(t)) : r.type === "VariableDeclaration" ? (Kr(r.declarations.
      length === 1), r.declarations[0].init = dy(r.declarations[0].init, oo(t))) : Kr.fail("Unexpected type:" + r.type), this;
    }
    read(t) {
      this._resultName = dy(this._resultName, oo(t));
    }
  };
  Fu.default = hy;
});

// ../node_modules/@babel/helper-module-imports/lib/is-module.js
var yy = A((my) => {
  "use strict";
  Object.defineProperty(my, "__esModule", {
    value: !0
  });
  my.default = Xoe;
  function Xoe(e) {
    return e.node.sourceType === "module";
  }
  i(Xoe, "isModule");
});

// ../node_modules/@babel/helper-module-imports/lib/import-injector.js
var uA = A((Lu) => {
  "use strict";
  Object.defineProperty(Lu, "__esModule", {
    value: !0
  });
  Lu.default = void 0;
  var sA = le("assert"), Qoe = Pe(), Zoe = nA(), ele = yy(), {
    identifier: tle,
    importSpecifier: rle,
    numericLiteral: nle,
    sequenceExpression: sle,
    isImportDeclaration: iA
  } = Qoe, gy = class {
    static {
      i(this, "ImportInjector");
    }
    constructor(t, r, n) {
      this._defaultOpts = {
        importedSource: null,
        importedType: "commonjs",
        importedInterop: "babel",
        importingInterop: "babel",
        ensureLiveReference: !1,
        ensureNoContext: !1,
        importPosition: "before"
      };
      let s = t.find((a) => a.isProgram());
      this._programPath = s, this._programScope = s.scope, this._hub = s.hub, this._defaultOpts = this._applyDefaults(r, n, !0);
    }
    addDefault(t, r) {
      return this.addNamed("default", t, r);
    }
    addNamed(t, r, n) {
      return sA(typeof t == "string"), this._generateImport(this._applyDefaults(r, n), t);
    }
    addNamespace(t, r) {
      return this._generateImport(this._applyDefaults(t, r), null);
    }
    addSideEffect(t, r) {
      return this._generateImport(this._applyDefaults(t, r), void 0);
    }
    _applyDefaults(t, r, n = !1) {
      let s;
      return typeof t == "string" ? s = Object.assign({}, this._defaultOpts, {
        importedSource: t
      }, r) : (sA(!r, "Unexpected secondary arguments."), s = Object.assign({}, this._defaultOpts, t)), !n && r && (r.nameHint !== void 0 &&
      (s.nameHint = r.nameHint), r.blockHoist !== void 0 && (s.blockHoist = r.blockHoist)), s;
    }
    _generateImport(t, r) {
      let n = r === "default", s = !!r && !n, a = r === null, {
        importedSource: o,
        importedType: l,
        importedInterop: u,
        importingInterop: c,
        ensureLiveReference: p,
        ensureNoContext: f,
        nameHint: h,
        importPosition: g,
        blockHoist: P
      } = t, d = h || r, y = (0, ele.default)(this._programPath), E = y && c === "node", _ = y && c === "babel";
      if (g === "after" && !y)
        throw new Error('"importPosition": "after" is only supported in modules');
      let k = new Zoe.default(o, this._programScope, this._hub);
      if (l === "es6") {
        if (!E && !_)
          throw new Error("Cannot import an ES6 module from CommonJS");
        k.import(), a ? k.namespace(h || o) : (n || s) && k.named(d, r);
      } else {
        if (l !== "commonjs")
          throw new Error(`Unexpected interopType "${l}"`);
        if (u === "babel")
          if (E) {
            d = d !== "default" ? d : o;
            let U = `${o}$es6Default`;
            k.import(), a ? k.default(U).var(d || o).wildcardInterop() : n ? p ? k.default(U).var(d || o).defaultInterop().read("default") :
            k.default(U).var(d).defaultInterop().prop(r) : s && k.default(U).read(r);
          } else _ ? (k.import(), a ? k.namespace(d || o) : (n || s) && k.named(d, r)) : (k.require(), a ? k.var(d || o).wildcardInterop() :
          (n || s) && p ? n ? (d = d !== "default" ? d : o, k.var(d).read(r), k.defaultInterop()) : k.var(o).read(r) : n ? k.var(d).defaultInterop().
          prop(r) : s && k.var(d).prop(r));
        else if (u === "compiled")
          E ? (k.import(), a ? k.default(d || o) : (n || s) && k.default(o).read(d)) : _ ? (k.import(), a ? k.namespace(d || o) : (n || s) &&
          k.named(d, r)) : (k.require(), a ? k.var(d || o) : (n || s) && (p ? k.var(o).read(d) : k.prop(r).var(d)));
        else if (u === "uncompiled") {
          if (n && p)
            throw new Error("No live reference for commonjs default");
          E ? (k.import(), a ? k.default(d || o) : n ? k.default(d) : s && k.default(o).read(d)) : _ ? (k.import(), a ? k.default(d || o) : n ?
          k.default(d) : s && k.named(d, r)) : (k.require(), a ? k.var(d || o) : n ? k.var(d) : s && (p ? k.var(o).read(d) : k.var(d).prop(r)));
        } else
          throw new Error(`Unknown importedInterop "${u}".`);
      }
      let {
        statements: B,
        resultName: L
      } = k.done();
      return this._insertStatements(B, g, P), (n || s) && f && L.type !== "Identifier" ? sle([nle(0), L]) : L;
    }
    _insertStatements(t, r = "before", n = 3) {
      if (r === "after") {
        if (this._insertStatementsAfter(t)) return;
      } else if (this._insertStatementsBefore(t, n)) return;
      this._programPath.unshiftContainer("body", t);
    }
    _insertStatementsBefore(t, r) {
      if (t.length === 1 && iA(t[0]) && ju(t[0])) {
        let s = this._programPath.get("body").find((a) => a.isImportDeclaration() && ju(a.node));
        if (s?.node.source.value === t[0].source.value && lA(s.node, t[0]))
          return !0;
      }
      t.forEach((s) => {
        s._blockHoist = r;
      });
      let n = this._programPath.get("body").find((s) => {
        let a = s.node._blockHoist;
        return Number.isFinite(a) && a < 4;
      });
      return n ? (n.insertBefore(t), !0) : !1;
    }
    _insertStatementsAfter(t) {
      let r = new Set(t), n = /* @__PURE__ */ new Map();
      for (let a of t)
        if (iA(a) && ju(a)) {
          let o = a.source.value;
          n.has(o) || n.set(o, []), n.get(o).push(a);
        }
      let s = null;
      for (let a of this._programPath.get("body"))
        if (a.isImportDeclaration() && ju(a.node)) {
          s = a;
          let o = a.node.source.value, l = n.get(o);
          if (!l) continue;
          for (let u of l)
            r.has(u) && lA(a.node, u) && r.delete(u);
        }
      return r.size === 0 ? !0 : (s && s.insertAfter(Array.from(r)), !!s);
    }
  };
  Lu.default = gy;
  function ju(e) {
    return e.importKind !== "type" && e.importKind !== "typeof";
  }
  i(ju, "isValueImport");
  function aA(e) {
    return e.specifiers.length === 1 && e.specifiers[0].type === "ImportNamespaceSpecifier" || e.specifiers.length === 2 && e.specifiers[1].
    type === "ImportNamespaceSpecifier";
  }
  i(aA, "hasNamespaceImport");
  function oA(e) {
    return e.specifiers.length > 0 && e.specifiers[0].type === "ImportDefaultSpecifier";
  }
  i(oA, "hasDefaultImport");
  function lA(e, t) {
    return e.specifiers.length ? t.specifiers.length ? aA(e) || aA(t) ? !1 : (oA(t) && (oA(e) ? t.specifiers[0] = rle(t.specifiers[0].local,
    tle("default")) : e.specifiers.unshift(t.specifiers.shift())), e.specifiers.push(...t.specifiers), !0) : !0 : (e.specifiers = t.specifiers,
    !0);
  }
  i(lA, "maybeAppendImportSpecifiers");
});

// ../node_modules/@babel/helper-module-imports/lib/index.js
var cA = A((fs) => {
  "use strict";
  Object.defineProperty(fs, "__esModule", {
    value: !0
  });
  Object.defineProperty(fs, "ImportInjector", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return lo.default;
    }, "get")
  });
  fs.addDefault = ale;
  fs.addNamed = ole;
  fs.addNamespace = lle;
  fs.addSideEffect = ule;
  Object.defineProperty(fs, "isModule", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return ile.default;
    }, "get")
  });
  var lo = uA(), ile = yy();
  function ale(e, t, r) {
    return new lo.default(e).addDefault(t, r);
  }
  i(ale, "addDefault");
  function ole(e, t, r, n) {
    return new lo.default(e).addNamed(t, r, n);
  }
  i(ole, "addNamed");
  function lle(e, t, r) {
    return new lo.default(e).addNamespace(t, r);
  }
  i(lle, "addNamespace");
  function ule(e, t, r) {
    return new lo.default(e).addSideEffect(t, r);
  }
  i(ule, "addSideEffect");
});

// ../node_modules/@babel/helper-module-transforms/lib/rewrite-this.js
var dA = A((by) => {
  "use strict";
  Object.defineProperty(by, "__esModule", {
    value: !0
  });
  by.default = cle;
  var pA = bt(), fA = Dr(), Mu;
  function cle(e) {
    Mu || (Mu = fA.visitors.environmentVisitor({
      ThisExpression(t) {
        t.replaceWith(pA.types.unaryExpression("void", pA.types.numericLiteral(0), !0));
      }
    }), Mu.noScope = !0), (0, fA.default)(e.node, Mu);
  }
  i(cle, "rewriteThis");
});

// ../node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js
var hA = A((Ey) => {
  "use strict";
  Object.defineProperty(Ey, "__esModule", {
    value: !0
  });
  Ey.default = fle;
  var Ie = bt();
  function ple(e) {
    do
      switch (e.parent.type) {
        case "TSTypeAnnotation":
        case "TSTypeAliasDeclaration":
        case "TSTypeReference":
        case "TypeAnnotation":
        case "TypeAlias":
          return !0;
        case "ExportSpecifier":
          return e.parentPath.parent.exportKind === "type";
        default:
          if (e.parentPath.isStatement() || e.parentPath.isExpression())
            return !1;
      }
    while (e = e.parentPath);
  }
  i(ple, "isInType");
  function fle(e, t, r) {
    let n = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ i((u) => {
      e.requeue(u);
    }, "requeueInParent");
    for (let [u, c] of t.source) {
      for (let [p, f] of c.imports)
        n.set(p, [u, f, null]);
      for (let p of c.importsNamespace)
        n.set(p, [u, null, p]);
    }
    for (let [u, c] of t.local) {
      let p = s.get(u);
      p || (p = [], s.set(u, p)), p.push(...c.names);
    }
    let o = {
      metadata: t,
      requeueInParent: a,
      scope: e.scope,
      exported: s
    };
    e.traverse(dle, o);
    let l = {
      seen: /* @__PURE__ */ new WeakSet(),
      metadata: t,
      requeueInParent: a,
      scope: e.scope,
      imported: n,
      exported: s,
      buildImportReference([u, c, p], f) {
        let h = t.source.get(u);
        if (h.referenced = !0, p) {
          if (h.wrap) {
            var g;
            f = (g = r(f, h.wrap)) != null ? g : f;
          }
          return f;
        }
        let P = Ie.types.identifier(h.name);
        if (h.wrap) {
          var d;
          P = (d = r(P, h.wrap)) != null ? d : P;
        }
        if (c === "default" && h.interop === "node-default")
          return P;
        let y = t.stringSpecifiers.has(c);
        return Ie.types.memberExpression(P, y ? Ie.types.stringLiteral(c) : Ie.types.identifier(c), y);
      }
    };
    e.traverse(hle, l);
  }
  i(fle, "rewriteLiveReferences");
  var dle = {
    Scope(e) {
      e.skip();
    },
    ClassDeclaration(e) {
      let {
        requeueInParent: t,
        exported: r,
        metadata: n
      } = this, {
        id: s
      } = e.node;
      if (!s) throw new Error("Expected class to have a name");
      let a = s.name, o = r.get(a) || [];
      if (o.length > 0) {
        let l = Ie.types.expressionStatement(Js(n, o, Ie.types.identifier(a), e.scope));
        l._blockHoist = e.node._blockHoist, t(e.insertAfter(l)[0]);
      }
    },
    VariableDeclaration(e) {
      let {
        requeueInParent: t,
        exported: r,
        metadata: n
      } = this, s = e.node.kind === "var";
      for (let a of e.get("declarations")) {
        let {
          id: o
        } = a.node, {
          init: l
        } = a.node;
        if (Ie.types.isIdentifier(o) && r.has(o.name) && !Ie.types.isArrowFunctionExpression(l) && (!Ie.types.isFunctionExpression(l) || l.id) &&
        (!Ie.types.isClassExpression(l) || l.id)) {
          if (!l) {
            if (s)
              continue;
            l = e.scope.buildUndefinedNode();
          }
          a.node.init = Js(n, r.get(o.name), l, e.scope), t(a.get("init"));
        } else
          for (let u of Object.keys(a.getOuterBindingIdentifiers()))
            if (r.has(u)) {
              let c = Ie.types.expressionStatement(Js(n, r.get(u), Ie.types.identifier(u), e.scope));
              c._blockHoist = e.node._blockHoist, t(e.insertAfter(c)[0]);
            }
      }
    }
  }, Js = /* @__PURE__ */ i((e, t, r, n) => {
    let s = e.exportName;
    for (let a = n; a != null; a = a.parent)
      a.hasOwnBinding(s) && a.rename(s);
    return (t || []).reduce((a, o) => {
      let {
        stringSpecifiers: l
      } = e, u = l.has(o);
      return Ie.types.assignmentExpression("=", Ie.types.memberExpression(Ie.types.identifier(s), u ? Ie.types.stringLiteral(o) : Ie.types.identifier(
      o), u), a);
    }, r);
  }, "buildBindingExportAssignmentExpression"), Ru = /* @__PURE__ */ i((e) => Ie.template.expression.ast`
    (function() {
      throw new Error('"' + '${e}' + '" is read-only.');
    })()
  `, "buildImportThrow"), hle = {
    ReferencedIdentifier(e) {
      let {
        seen: t,
        buildImportReference: r,
        scope: n,
        imported: s,
        requeueInParent: a
      } = this;
      if (t.has(e.node)) return;
      t.add(e.node);
      let o = e.node.name, l = s.get(o);
      if (l) {
        if (ple(e))
          throw e.buildCodeFrameError(`Cannot transform the imported binding "${o}" since it's also used in a type annotation. Please strip \
type annotations using @babel/preset-typescript or @babel/preset-flow.`);
        let u = e.scope.getBinding(o);
        if (n.getBinding(o) !== u) return;
        let p = r(l, e.node);
        if (p.loc = e.node.loc, (e.parentPath.isCallExpression({
          callee: e.node
        }) || e.parentPath.isOptionalCallExpression({
          callee: e.node
        }) || e.parentPath.isTaggedTemplateExpression({
          tag: e.node
        })) && Ie.types.isMemberExpression(p))
          e.replaceWith(Ie.types.sequenceExpression([Ie.types.numericLiteral(0), p]));
        else if (e.isJSXIdentifier() && Ie.types.isMemberExpression(p)) {
          let {
            object: f,
            property: h
          } = p;
          e.replaceWith(Ie.types.jsxMemberExpression(Ie.types.jsxIdentifier(f.name), Ie.types.jsxIdentifier(h.name)));
        } else
          e.replaceWith(p);
        a(e), e.skip();
      }
    },
    UpdateExpression(e) {
      let {
        scope: t,
        seen: r,
        imported: n,
        exported: s,
        requeueInParent: a,
        buildImportReference: o
      } = this;
      if (r.has(e.node)) return;
      r.add(e.node);
      let l = e.get("argument");
      if (l.isMemberExpression()) return;
      let u = e.node;
      if (l.isIdentifier()) {
        let c = l.node.name;
        if (t.getBinding(c) !== e.scope.getBinding(c))
          return;
        let p = s.get(c), f = n.get(c);
        if (p?.length > 0 || f)
          if (f)
            e.replaceWith(Ie.types.assignmentExpression(u.operator[0] + "=", o(f, l.node), Ru(c)));
          else if (u.prefix)
            e.replaceWith(Js(this.metadata, p, Ie.types.cloneNode(u), e.scope));
          else {
            let h = t.generateDeclaredUidIdentifier(c);
            e.replaceWith(Ie.types.sequenceExpression([Ie.types.assignmentExpression("=", Ie.types.cloneNode(h), Ie.types.cloneNode(u)), Js(
            this.metadata, p, Ie.types.identifier(c), e.scope), Ie.types.cloneNode(h)]));
          }
      }
      a(e), e.skip();
    },
    AssignmentExpression: {
      exit(e) {
        let {
          scope: t,
          seen: r,
          imported: n,
          exported: s,
          requeueInParent: a,
          buildImportReference: o
        } = this;
        if (r.has(e.node)) return;
        r.add(e.node);
        let l = e.get("left");
        if (!l.isMemberExpression())
          if (l.isIdentifier()) {
            let u = l.node.name;
            if (t.getBinding(u) !== e.scope.getBinding(u))
              return;
            let c = s.get(u), p = n.get(u);
            if (c?.length > 0 || p) {
              let f = e.node;
              p && (f.left = o(p, l.node), f.right = Ie.types.sequenceExpression([f.right, Ru(u)]));
              let {
                operator: h
              } = f, g;
              h === "=" ? g = f : h === "&&=" || h === "||=" || h === "??=" ? g = Ie.types.assignmentExpression("=", f.left, Ie.types.logicalExpression(
              h.slice(0, -1), Ie.types.cloneNode(f.left), f.right)) : g = Ie.types.assignmentExpression("=", f.left, Ie.types.binaryExpression(
              h.slice(0, -1), Ie.types.cloneNode(f.left), f.right)), e.replaceWith(Js(this.metadata, c, g, e.scope)), a(e), e.skip();
            }
          } else {
            let u = l.getOuterBindingIdentifiers(), c = Object.keys(u).filter((h) => t.getBinding(h) === e.scope.getBinding(h)), p = c.find(
            (h) => n.has(h));
            p && (e.node.right = Ie.types.sequenceExpression([e.node.right, Ru(p)]));
            let f = [];
            if (c.forEach((h) => {
              let g = s.get(h) || [];
              g.length > 0 && f.push(Js(this.metadata, g, Ie.types.identifier(h), e.scope));
            }), f.length > 0) {
              let h = Ie.types.sequenceExpression(f);
              e.parentPath.isExpressionStatement() && (h = Ie.types.expressionStatement(h), h._blockHoist = e.parentPath.node._blockHoist);
              let g = e.insertAfter(h)[0];
              a(g);
            }
          }
      }
    },
    ForXStatement(e) {
      let {
        scope: t,
        node: r
      } = e, {
        left: n
      } = r, {
        exported: s,
        imported: a,
        scope: o
      } = this;
      if (!Ie.types.isVariableDeclaration(n)) {
        let l = !1, u, c = e.get("body").scope;
        for (let h of Object.keys(Ie.types.getOuterBindingIdentifiers(n)))
          o.getBinding(h) === t.getBinding(h) && (s.has(h) && (l = !0, c.hasOwnBinding(h) && c.rename(h)), a.has(h) && !u && (u = h));
        if (!l && !u)
          return;
        e.ensureBlock();
        let p = e.get("body"), f = t.generateUidIdentifierBasedOnNode(n);
        e.get("left").replaceWith(Ie.types.variableDeclaration("let", [Ie.types.variableDeclarator(Ie.types.cloneNode(f))])), t.registerDeclaration(
        e.get("left")), l && p.unshiftContainer("body", Ie.types.expressionStatement(Ie.types.assignmentExpression("=", n, f))), u && p.unshiftContainer(
        "body", Ie.types.expressionStatement(Ru(u)));
      }
    }
  };
});

// ../node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js
var Ty = A((Mi) => {
  "use strict";
  Object.defineProperty(Mi, "__esModule", {
    value: !0
  });
  Mi.default = Ele;
  Mi.hasExports = yle;
  Mi.isSideEffectImport = gle;
  Mi.validateImportInteropOption = yA;
  var mA = le("path"), mle = di();
  function yle(e) {
    return e.hasExports;
  }
  i(yle, "hasExports");
  function gle(e) {
    return e.imports.size === 0 && e.importsNamespace.size === 0 && e.reexports.size === 0 && e.reexportNamespace.size === 0 && !e.reexportAll;
  }
  i(gle, "isSideEffectImport");
  function yA(e) {
    if (typeof e != "function" && e !== "none" && e !== "babel" && e !== "node")
      throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${e}).`);
    return e;
  }
  i(yA, "validateImportInteropOption");
  function ble(e, t, r) {
    return typeof e == "function" ? yA(e(t, r)) : e;
  }
  i(ble, "resolveImportInterop");
  function Ele(e, t, {
    importInterop: r,
    initializeReexports: n = !1,
    getWrapperPayload: s,
    esNamespaceOnly: a = !1,
    filename: o
  }) {
    t || (t = e.scope.generateUidIdentifier("exports").name);
    let l = /* @__PURE__ */ new Set();
    xle(e);
    let {
      local: u,
      sources: c,
      hasExports: p
    } = Tle(e, {
      initializeReexports: n,
      getWrapperPayload: s
    }, l);
    vle(e);
    for (let [f, h] of c) {
      let {
        importsNamespace: g,
        imports: P
      } = h;
      if (g.size > 0 && P.size === 0) {
        let [y] = g;
        h.name = y;
      }
      let d = ble(r, f, o);
      d === "none" ? h.interop = "none" : d === "node" && h.interop === "namespace" ? h.interop = "node-namespace" : d === "node" && h.interop ===
      "default" ? h.interop = "node-default" : a && h.interop === "namespace" && (h.interop = "default");
    }
    return {
      exportName: t,
      exportNameListName: null,
      hasExports: p,
      local: u,
      source: c,
      stringSpecifiers: l
    };
  }
  i(Ele, "normalizeModuleAndLoadMetadata");
  function qu(e, t) {
    if (e.isIdentifier())
      return e.node.name;
    if (e.isStringLiteral()) {
      let r = e.node.value;
      return (0, mle.isIdentifierName)(r) || t.add(r), r;
    } else
      throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${e.node.type}`);
  }
  i(qu, "getExportSpecifierName");
  function gA(e) {
    if (!e.isExportSpecifier())
      throw e.isExportNamespaceSpecifier() ? e.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform\
-export-namespace-from`.") : e.buildCodeFrameError("Unexpected export specifier type");
  }
  i(gA, "assertExportSpecifier");
  function Tle(e, {
    getWrapperPayload: t,
    initializeReexports: r
  }, n) {
    let s = Sle(e, r, n), a = /* @__PURE__ */ new Map(), o = /* @__PURE__ */ new Map(), l = /* @__PURE__ */ i((c, p) => {
      let f = c.value, h = o.get(f);
      return h ? a.get(f).push(p) : (h = {
        name: e.scope.generateUidIdentifier((0, mA.basename)(f, (0, mA.extname)(f))).name,
        interop: "none",
        loc: null,
        imports: /* @__PURE__ */ new Map(),
        importsNamespace: /* @__PURE__ */ new Set(),
        reexports: /* @__PURE__ */ new Map(),
        reexportNamespace: /* @__PURE__ */ new Set(),
        reexportAll: null,
        wrap: null,
        get lazy() {
          return this.wrap === "lazy";
        },
        referenced: !1
      }, o.set(f, h), a.set(f, [p])), h;
    }, "getData"), u = !1;
    e.get("body").forEach((c) => {
      if (c.isImportDeclaration()) {
        let p = l(c.node.source, c.node);
        p.loc || (p.loc = c.node.loc), c.get("specifiers").forEach((f) => {
          if (f.isImportDefaultSpecifier()) {
            let h = f.get("local").node.name;
            p.imports.set(h, "default");
            let g = s.get(h);
            g && (s.delete(h), g.names.forEach((P) => {
              p.reexports.set(P, "default");
            }), p.referenced = !0);
          } else if (f.isImportNamespaceSpecifier()) {
            let h = f.get("local").node.name;
            p.importsNamespace.add(h);
            let g = s.get(h);
            g && (s.delete(h), g.names.forEach((P) => {
              p.reexportNamespace.add(P);
            }), p.referenced = !0);
          } else if (f.isImportSpecifier()) {
            let h = qu(f.get("imported"), n), g = f.get("local").node.name;
            p.imports.set(g, h);
            let P = s.get(g);
            P && (s.delete(g), P.names.forEach((d) => {
              p.reexports.set(d, h);
            }), p.referenced = !0);
          }
        });
      } else if (c.isExportAllDeclaration()) {
        u = !0;
        let p = l(c.node.source, c.node);
        p.loc || (p.loc = c.node.loc), p.reexportAll = {
          loc: c.node.loc
        }, p.referenced = !0;
      } else if (c.isExportNamedDeclaration() && c.node.source) {
        u = !0;
        let p = l(c.node.source, c.node);
        p.loc || (p.loc = c.node.loc), c.get("specifiers").forEach((f) => {
          gA(f);
          let h = qu(f.get("local"), n), g = qu(f.get("exported"), n);
          if (p.reexports.set(g, h), p.referenced = !0, g === "__esModule")
            throw f.get("exported").buildCodeFrameError('Illegal export "__esModule".');
        });
      } else (c.isExportNamedDeclaration() || c.isExportDefaultDeclaration()) && (u = !0);
    });
    for (let c of o.values()) {
      let p = !1, f = !1;
      c.importsNamespace.size > 0 && (p = !0, f = !0), c.reexportAll && (f = !0);
      for (let h of c.imports.values())
        h === "default" ? p = !0 : f = !0;
      for (let h of c.reexports.values())
        h === "default" ? p = !0 : f = !0;
      p && f ? c.interop = "namespace" : p && (c.interop = "default");
    }
    if (t)
      for (let [c, p] of o)
        p.wrap = t(c, p, a.get(c));
    return {
      hasExports: u,
      local: s,
      sources: o
    };
  }
  i(Tle, "getModuleMetadata");
  function Sle(e, t, r) {
    let n = /* @__PURE__ */ new Map();
    e.get("body").forEach((o) => {
      let l;
      if (o.isImportDeclaration())
        l = "import";
      else {
        if (o.isExportDefaultDeclaration() && (o = o.get("declaration")), o.isExportNamedDeclaration()) {
          if (o.node.declaration)
            o = o.get("declaration");
          else if (t && o.node.source && o.get("source").isStringLiteral()) {
            o.get("specifiers").forEach((u) => {
              gA(u), n.set(u.get("local").node.name, "block");
            });
            return;
          }
        }
        if (o.isFunctionDeclaration())
          l = "hoisted";
        else if (o.isClassDeclaration())
          l = "block";
        else if (o.isVariableDeclaration({
          kind: "var"
        }))
          l = "var";
        else if (o.isVariableDeclaration())
          l = "block";
        else
          return;
      }
      Object.keys(o.getOuterBindingIdentifiers()).forEach((u) => {
        n.set(u, l);
      });
    });
    let s = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ i((o) => {
      let l = o.node.name, u = s.get(l);
      if (!u) {
        let c = n.get(l);
        if (c === void 0)
          throw o.buildCodeFrameError(`Exporting local "${l}", which is not declared.`);
        u = {
          names: [],
          kind: c
        }, s.set(l, u);
      }
      return u;
    }, "getLocalMetadata");
    return e.get("body").forEach((o) => {
      if (o.isExportNamedDeclaration() && (t || !o.node.source))
        if (o.node.declaration) {
          let l = o.get("declaration"), u = l.getOuterBindingIdentifierPaths();
          Object.keys(u).forEach((c) => {
            if (c === "__esModule")
              throw l.buildCodeFrameError('Illegal export "__esModule".');
            a(u[c]).names.push(c);
          });
        } else
          o.get("specifiers").forEach((l) => {
            let u = l.get("local"), c = l.get("exported"), p = a(u), f = qu(c, r);
            if (f === "__esModule")
              throw c.buildCodeFrameError('Illegal export "__esModule".');
            p.names.push(f);
          });
      else if (o.isExportDefaultDeclaration()) {
        let l = o.get("declaration");
        if (l.isFunctionDeclaration() || l.isClassDeclaration())
          a(l.get("id")).names.push("default");
        else
          throw l.buildCodeFrameError("Unexpected default expression export.");
      }
    }), s;
  }
  i(Sle, "getLocalExportMetadata");
  function xle(e) {
    e.get("body").forEach((t) => {
      if (t.isExportDefaultDeclaration()) {
        {
          var r;
          (r = t.splitExportDeclaration) != null || (t.splitExportDeclaration = Dr().NodePath.prototype.splitExportDeclaration);
        }
        t.splitExportDeclaration();
      }
    });
  }
  i(xle, "nameAnonymousExports");
  function vle(e) {
    e.get("body").forEach((t) => {
      if (t.isImportDeclaration())
        t.remove();
      else if (t.isExportNamedDeclaration())
        t.node.declaration ? (t.node.declaration._blockHoist = t.node._blockHoist, t.replaceWith(t.node.declaration)) : t.remove();
      else if (t.isExportDefaultDeclaration()) {
        let r = t.get("declaration");
        if (r.isFunctionDeclaration() || r.isClassDeclaration())
          r._blockHoist = t.node._blockHoist, t.replaceWith(r);
        else
          throw r.buildCodeFrameError("Unexpected default expression export.");
      } else t.isExportAllDeclaration() && t.remove();
    });
  }
  i(vle, "removeImportExportDeclarations");
});

// ../node_modules/@babel/helper-module-transforms/lib/lazy-modules.js
var bA = A((Uu) => {
  "use strict";
  Object.defineProperty(Uu, "__esModule", {
    value: !0
  });
  Uu.toGetWrapperPayload = Cle;
  Uu.wrapReference = Dle;
  var Ple = bt(), Ale = Ty();
  function Cle(e) {
    return (t, r) => {
      if (e === !1 || (0, Ale.isSideEffectImport)(r) || r.reexportAll) return null;
      if (e === !0)
        return t.includes(".") ? null : "lazy";
      if (Array.isArray(e))
        return e.includes(t) ? "lazy" : null;
      if (typeof e == "function")
        return e(t) ? "lazy" : null;
      throw new Error(".lazy must be a boolean, string array, or function");
    };
  }
  i(Cle, "toGetWrapperPayload");
  function Dle(e, t) {
    return t === "lazy" ? Ple.types.callExpression(e, []) : null;
  }
  i(Dle, "wrapReference");
});

// ../node_modules/@babel/helper-module-transforms/lib/dynamic-import.js
var Sy = A((Vu) => {
  "use strict";
  Object.defineProperty(Vu, "__esModule", {
    value: !0
  });
  Vu.buildDynamicImport = wle;
  var Vt = bt();
  Vu.getDynamicImportSource = /* @__PURE__ */ i(function(t) {
    let [r] = t.arguments;
    return Vt.types.isStringLiteral(r) || Vt.types.isTemplateLiteral(r) ? r : Vt.template.expression.ast`\`\${${r}}\``;
  }, "getDynamicImportSource");
  function wle(e, t, r, n) {
    let s = Vt.types.isCallExpression(e) ? e.arguments[0] : e.source;
    if (Vt.types.isStringLiteral(s) || Vt.types.isTemplateLiteral(s) && s.quasis.length === 0)
      return t ? Vt.template.expression.ast`
        Promise.resolve().then(() => ${n(s)})
      ` : n(s);
    let a = Vt.types.isTemplateLiteral(s) ? Vt.types.identifier("specifier") : Vt.types.templateLiteral([Vt.types.templateElement({
      raw: ""
    }), Vt.types.templateElement({
      raw: ""
    })], [Vt.types.identifier("specifier")]);
    return t ? Vt.template.expression.ast`
      (specifier =>
        new Promise(r => r(${a}))
          .then(s => ${n(Vt.types.identifier("s"))})
      )(${s})
    ` : r ? Vt.template.expression.ast`
      (specifier =>
        new Promise(r => r(${n(a)}))
      )(${s})
    ` : Vt.template.expression.ast`
      (specifier => ${n(a)})(${s})
    `;
  }
  i(wle, "buildDynamicImport");
});

// ../node_modules/@babel/helper-module-transforms/lib/get-module-name.js
var EA = A(($u) => {
  "use strict";
  Object.defineProperty($u, "__esModule", {
    value: !0
  });
  $u.default = xy;
  {
    let e = xy;
    $u.default = xy = /* @__PURE__ */ i(function(r, n) {
      var s, a, o, l;
      return e(r, {
        moduleId: (s = n.moduleId) != null ? s : r.moduleId,
        moduleIds: (a = n.moduleIds) != null ? a : r.moduleIds,
        getModuleId: (o = n.getModuleId) != null ? o : r.getModuleId,
        moduleRoot: (l = n.moduleRoot) != null ? l : r.moduleRoot
      });
    }, "getModuleName");
  }
  function xy(e, t) {
    let {
      filename: r,
      filenameRelative: n = r,
      sourceRoot: s = t.moduleRoot
    } = e, {
      moduleId: a,
      moduleIds: o = !!a,
      getModuleId: l,
      moduleRoot: u = s
    } = t;
    if (!o) return null;
    if (a != null && !l)
      return a;
    let c = u != null ? u + "/" : "";
    if (n) {
      let p = s != null ? new RegExp("^" + s + "/?") : "";
      c += n.replace(p, "").replace(/\.\w*$/, "");
    }
    return c = c.replace(/\\/g, "/"), l && l(c) || c;
  }
  i(xy, "getModuleName");
});

// ../node_modules/@babel/helper-module-transforms/lib/index.js
var co = A((yr) => {
  "use strict";
  Object.defineProperty(yr, "__esModule", {
    value: !0
  });
  Object.defineProperty(yr, "buildDynamicImport", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Ole.buildDynamicImport;
    }, "get")
  });
  yr.buildNamespaceInitStatements = jle;
  yr.ensureStatementsHoisted = kle;
  Object.defineProperty(yr, "getModuleName", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Nle.default;
    }, "get")
  });
  Object.defineProperty(yr, "hasExports", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return uo.hasExports;
    }, "get")
  });
  Object.defineProperty(yr, "isModule", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return TA.isModule;
    }, "get")
  });
  Object.defineProperty(yr, "isSideEffectImport", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return uo.isSideEffectImport;
    }, "get")
  });
  yr.rewriteModuleStatementsAndPrepareHeader = Ble;
  Object.defineProperty(yr, "rewriteThis", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return SA.default;
    }, "get")
  });
  yr.wrapInterop = Fle;
  var Ile = le("assert"), Ke = bt(), TA = cA(), SA = dA(), _le = hA(), uo = Ty(), Cy = bA(), Ole = Sy(), Nle = EA();
  yr.getDynamicImportSource = Sy().getDynamicImportSource;
  function Ble(e, {
    exportName: t,
    strict: r,
    allowTopLevelThis: n,
    strictMode: s,
    noInterop: a,
    importInterop: o = a ? "none" : "babel",
    lazy: l,
    getWrapperPayload: u = Cy.toGetWrapperPayload(l ?? !1),
    wrapReference: c = Cy.wrapReference,
    esNamespaceOnly: p,
    filename: f,
    constantReexports: h = arguments[1].loose,
    enumerableModuleMeta: g = arguments[1].loose,
    noIncompleteNsImportDetection: P
  }) {
    (0, uo.validateImportInteropOption)(o), Ile((0, TA.isModule)(e), "Cannot process module statements in a script"), e.node.sourceType = "s\
cript";
    let d = (0, uo.default)(e, t, {
      importInterop: o,
      initializeReexports: h,
      getWrapperPayload: u,
      esNamespaceOnly: p,
      filename: f
    });
    n || (0, SA.default)(e), (0, _le.default)(e, d, c), s !== !1 && (e.node.directives.some((k) => k.value.value === "use strict") || e.unshiftContainer(
    "directives", Ke.types.directive(Ke.types.directiveLiteral("use strict"))));
    let y = [];
    (0, uo.hasExports)(d) && !r && y.push(Lle(d, g));
    let E = Rle(e, d);
    return E && (d.exportNameListName = E.name, y.push(E.statement)), y.push(...qle(e, d, c, h, P)), {
      meta: d,
      headers: y
    };
  }
  i(Ble, "rewriteModuleStatementsAndPrepareHeader");
  function kle(e) {
    e.forEach((t) => {
      t._blockHoist = 3;
    });
  }
  i(kle, "ensureStatementsHoisted");
  function Fle(e, t, r) {
    if (r === "none")
      return null;
    if (r === "node-namespace")
      return Ke.types.callExpression(e.hub.addHelper("interopRequireWildcard"), [t, Ke.types.booleanLiteral(!0)]);
    if (r === "node-default")
      return null;
    let n;
    if (r === "default")
      n = "interopRequireDefault";
    else if (r === "namespace")
      n = "interopRequireWildcard";
    else
      throw new Error(`Unknown interop: ${r}`);
    return Ke.types.callExpression(e.hub.addHelper(n), [t]);
  }
  i(Fle, "wrapInterop");
  function jle(e, t, r = !1, n = Cy.wrapReference) {
    var s;
    let a = [], o = Ke.types.identifier(t.name);
    for (let u of t.importsNamespace)
      u !== t.name && a.push(Ke.template.statement`var NAME = SOURCE;`({
        NAME: u,
        SOURCE: Ke.types.cloneNode(o)
      }));
    let l = (s = n(o, t.wrap)) != null ? s : o;
    r && a.push(...xA(e, t, !0, n));
    for (let u of t.reexportNamespace)
      a.push((Ke.types.isIdentifier(l) ? Ke.template.statement`EXPORTS.NAME = NAMESPACE;` : Ke.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `)({
        EXPORTS: e.exportName,
        NAME: u,
        NAMESPACE: Ke.types.cloneNode(l)
      }));
    if (t.reexportAll) {
      let u = Mle(e, Ke.types.cloneNode(l), r);
      u.loc = t.reexportAll.loc, a.push(u);
    }
    return a;
  }
  i(jle, "buildNamespaceInitStatements");
  var vy = {
    constant: /* @__PURE__ */ i(({
      exports: e,
      exportName: t,
      namespaceImport: r
    }) => Ke.template.statement.ast`
      ${e}.${t} = ${r};
    `, "constant"),
    constantComputed: /* @__PURE__ */ i(({
      exports: e,
      exportName: t,
      namespaceImport: r
    }) => Ke.template.statement.ast`
      ${e}["${t}"] = ${r};
    `, "constantComputed"),
    spec: /* @__PURE__ */ i(({
      exports: e,
      exportName: t,
      namespaceImport: r
    }) => Ke.template.statement.ast`
      Object.defineProperty(${e}, "${t}", {
        enumerable: true,
        get: function() {
          return ${r};
        },
      });
    `, "spec")
  };
  function xA(e, t, r, n) {
    var s;
    let a = Ke.types.identifier(t.name);
    a = (s = n(a, t.wrap)) != null ? s : a;
    let {
      stringSpecifiers: o
    } = e;
    return Array.from(t.reexports, ([l, u]) => {
      let c = Ke.types.cloneNode(a);
      u === "default" && t.interop === "node-default" || (o.has(u) ? c = Ke.types.memberExpression(c, Ke.types.stringLiteral(u), !0) : c = Ke.
      types.memberExpression(c, Ke.types.identifier(u)));
      let p = {
        exports: e.exportName,
        exportName: l,
        namespaceImport: c
      };
      return r || Ke.types.isIdentifier(c) ? o.has(l) ? vy.constantComputed(p) : vy.constant(p) : vy.spec(p);
    });
  }
  i(xA, "buildReexportsFromMeta");
  function Lle(e, t = !1) {
    return (t ? Ke.template.statement`
        EXPORTS.__esModule = true;
      ` : Ke.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({
      EXPORTS: e.exportName
    });
  }
  i(Lle, "buildESModuleHeader");
  function Mle(e, t, r) {
    return (r ? Ke.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : Ke.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
      NAMESPACE: t,
      EXPORTS: e.exportName,
      VERIFY_NAME_LIST: e.exportNameListName ? (0, Ke.template)`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({
        EXPORTS_LIST: e.exportNameListName
      }) : null
    });
  }
  i(Mle, "buildNamespaceReexport");
  function Rle(e, t) {
    let r = /* @__PURE__ */ Object.create(null);
    for (let a of t.local.values())
      for (let o of a.names)
        r[o] = !0;
    let n = !1;
    for (let a of t.source.values()) {
      for (let o of a.reexports.keys())
        r[o] = !0;
      for (let o of a.reexportNamespace)
        r[o] = !0;
      n = n || !!a.reexportAll;
    }
    if (!n || Object.keys(r).length === 0) return null;
    let s = e.scope.generateUidIdentifier("exportNames");
    return delete r.default, {
      name: s.name,
      statement: Ke.types.variableDeclaration("var", [Ke.types.variableDeclarator(s, Ke.types.valueToNode(r))])
    };
  }
  i(Rle, "buildExportNameListDeclaration");
  function qle(e, t, r, n = !1, s = !1) {
    let a = [];
    for (let [l, u] of t.local)
      if (u.kind !== "import") {
        if (u.kind === "hoisted")
          a.push([u.names[0], Ay(t, u.names, Ke.types.identifier(l))]);
        else if (!s)
          for (let c of u.names)
            a.push([c, null]);
      }
    for (let l of t.source.values()) {
      if (!n) {
        let u = xA(t, l, !1, r), c = [...l.reexports.keys()];
        for (let p = 0; p < u.length; p++)
          a.push([c[p], u[p]]);
      }
      if (!s)
        for (let u of l.reexportNamespace)
          a.push([u, null]);
    }
    a.sort(([l], [u]) => l < u ? -1 : u < l ? 1 : 0);
    let o = [];
    if (s)
      for (let [, l] of a)
        o.push(l);
    else
      for (let u = 0; u < a.length; u += 100) {
        let c = [];
        for (let p = 0; p < 100 && u + p < a.length; p++) {
          let [f, h] = a[u + p];
          h !== null ? (c.length > 0 && (o.push(Ay(t, c, e.scope.buildUndefinedNode())), c = []), o.push(h)) : c.push(f);
        }
        c.length > 0 && o.push(Ay(t, c, e.scope.buildUndefinedNode()));
      }
    return o;
  }
  i(qle, "buildExportInitializationStatements");
  var Py = {
    computed: /* @__PURE__ */ i(({
      exports: e,
      name: t,
      value: r
    }) => Ke.template.expression.ast`${e}["${t}"] = ${r}`, "computed"),
    default: /* @__PURE__ */ i(({
      exports: e,
      name: t,
      value: r
    }) => Ke.template.expression.ast`${e}.${t} = ${r}`, "default"),
    define: /* @__PURE__ */ i(({
      exports: e,
      name: t,
      value: r
    }) => Ke.template.expression.ast`
      Object.defineProperty(${e}, "${t}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${t}"] = ${r}`, "define")
  };
  function Ay(e, t, r) {
    let {
      stringSpecifiers: n,
      exportName: s
    } = e;
    return Ke.types.expressionStatement(t.reduce((a, o) => {
      let l = {
        exports: s,
        name: o,
        value: a
      };
      return o === "__proto__" ? Py.define(l) : n.has(o) ? Py.computed(l) : Py.default(l);
    }, r));
  }
  i(Ay, "buildInitStatement");
});

// ../node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs
var PA = A((vA) => {
  vA.getModuleName = () => co().getModuleName;
});

// ../node_modules/@babel/core/lib/transformation/file/file.js
var wy = A((Ku) => {
  "use strict";
  Object.defineProperty(Ku, "__esModule", {
    value: !0
  });
  Ku.default = void 0;
  function po() {
    let e = Uh();
    return po = /* @__PURE__ */ i(function() {
      return e;
    }, "helpers"), e;
  }
  i(po, "helpers");
  function Dy() {
    let e = Dr();
    return Dy = /* @__PURE__ */ i(function() {
      return e;
    }, "_traverse"), e;
  }
  i(Dy, "_traverse");
  function AA() {
    let e = $a();
    return AA = /* @__PURE__ */ i(function() {
      return e;
    }, "_codeFrame"), e;
  }
  i(AA, "_codeFrame");
  function CA() {
    let e = Pe();
    return CA = /* @__PURE__ */ i(function() {
      return e;
    }, "_t"), e;
  }
  i(CA, "_t");
  function Wu() {
    let e = le("semver");
    return Wu = /* @__PURE__ */ i(function() {
      return e;
    }, "_semver"), e;
  }
  i(Wu, "_semver");
  var Ule = Vle(PA(), !0);
  function DA(e) {
    if (typeof WeakMap != "function") return null;
    var t = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap();
    return (DA = /* @__PURE__ */ i(function(n) {
      return n ? r : t;
    }, "_getRequireWildcardCache"))(e);
  }
  i(DA, "_getRequireWildcardCache");
  function Vle(e, t) {
    if (!t && e && e.__esModule) return e;
    if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
    var r = DA(t);
    if (r && r.has(e)) return r.get(e);
    var n = { __proto__: null }, s = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var a in e) if (a !== "default" && {}.hasOwnProperty.call(e, a)) {
      var o = s ? Object.getOwnPropertyDescriptor(e, a) : null;
      o && (o.get || o.set) ? Object.defineProperty(n, a, o) : n[a] = e[a];
    }
    return n.default = e, r && r.set(e, n), n;
  }
  i(Vle, "_interopRequireWildcard");
  var {
    cloneNode: $le,
    interpreterDirective: Wle
  } = CA(), Kle = {
    enter(e, t) {
      let r = e.node.loc;
      r && (t.loc = r, e.stop());
    }
  }, Ri = class {
    static {
      i(this, "File");
    }
    constructor(t, {
      code: r,
      ast: n,
      inputMap: s
    }) {
      this._map = /* @__PURE__ */ new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope =
      void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = {
        file: this,
        getCode: /* @__PURE__ */ i(() => this.code, "getCode"),
        getScope: /* @__PURE__ */ i(() => this.scope, "getScope"),
        addHelper: this.addHelper.bind(this),
        buildError: this.buildCodeFrameError.bind(this)
      }, this.opts = t, this.code = r, this.ast = n, this.inputMap = s, this.path = Dy().NodePath.get({
        hub: this.hub,
        parentPath: null,
        parent: this.ast,
        container: this.ast,
        key: "program"
      }).setContext(), this.scope = this.path.scope;
    }
    get shebang() {
      let {
        interpreter: t
      } = this.path.node;
      return t ? t.value : "";
    }
    set shebang(t) {
      t ? this.path.get("interpreter").replaceWith(Wle(t)) : this.path.get("interpreter").remove();
    }
    set(t, r) {
      if (t === "helpersNamespace")
        throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-\
helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to \
explore using 'helperGenerator' alongside 'file.availableHelper()'.");
      this._map.set(t, r);
    }
    get(t) {
      return this._map.get(t);
    }
    has(t) {
      return this._map.has(t);
    }
    availableHelper(t, r) {
      let n;
      try {
        n = po().minVersion(t);
      } catch (s) {
        if (s.code !== "BABEL_HELPER_UNKNOWN") throw s;
        return !1;
      }
      return typeof r != "string" ? !0 : (Wu().valid(r) && (r = `^${r}`), !Wu().intersects(`<${n}`, r) && !Wu().intersects(">=8.0.0", r));
    }
    addHelper(t) {
      let r = this.declarations[t];
      if (r) return $le(r);
      let n = this.get("helperGenerator");
      if (n) {
        let c = n(t);
        if (c) return c;
      }
      po().minVersion(t);
      let s = this.declarations[t] = this.scope.generateUidIdentifier(t), a = {};
      for (let c of po().getDependencies(t))
        a[c] = this.addHelper(c);
      let {
        nodes: o,
        globals: l
      } = po().get(t, (c) => a[c], s.name, Object.keys(this.scope.getAllBindings()));
      l.forEach((c) => {
        this.path.scope.hasBinding(c, !0) && this.path.scope.rename(c);
      }), o.forEach((c) => {
        c._compact = !0;
      });
      let u = this.path.unshiftContainer("body", o);
      for (let c of u)
        c.isVariableDeclaration() && this.scope.registerDeclaration(c);
      return s;
    }
    buildCodeFrameError(t, r, n = SyntaxError) {
      let s = t?.loc;
      if (!s && t) {
        let a = {
          loc: null
        };
        (0, Dy().default)(t, Kle, this.scope, a), s = a.loc;
        let o = "This is an error on an internal node. Probably an internal error.";
        s && (o += " Location has been estimated."), r += ` (${o})`;
      }
      if (s) {
        let {
          highlightCode: a = !0
        } = this.opts;
        r += `
` + (0, AA().codeFrameColumns)(this.code, {
          start: {
            line: s.start.line,
            column: s.start.column + 1
          },
          end: s.end && s.start.line === s.end.line ? {
            line: s.end.line,
            column: s.end.column + 1
          } : void 0
        }, {
          highlightCode: a
        });
      }
      return new n(r);
    }
  };
  Ku.default = Ri;
  Ri.prototype.addImport = /* @__PURE__ */ i(function() {
    throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-mo\
dule-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
  }, "addImport"), Ri.prototype.addTemplateObject = /* @__PURE__ */ i(function() {
    throw new Error("This function has been moved into the template literal transform itself.");
  }, "addTemplateObject"), Ri.prototype.getModuleName = /* @__PURE__ */ i(function() {
    return Ule.getModuleName()(this.opts, this.opts);
  }, "getModuleName");
});

// ../node_modules/@babel/core/lib/tools/build-external-helpers.js
var NA = A((Fy) => {
  "use strict";
  Object.defineProperty(Fy, "__esModule", {
    value: !0
  });
  Fy.default = oue;
  function Iy() {
    let e = Uh();
    return Iy = /* @__PURE__ */ i(function() {
      return e;
    }, "helpers"), e;
  }
  i(Iy, "helpers");
  function wA() {
    let e = eo();
    return wA = /* @__PURE__ */ i(function() {
      return e;
    }, "_generator"), e;
  }
  i(wA, "_generator");
  function IA() {
    let e = Ai();
    return IA = /* @__PURE__ */ i(function() {
      return e;
    }, "_template"), e;
  }
  i(IA, "_template");
  function _A() {
    let e = Pe();
    return _A = /* @__PURE__ */ i(function() {
      return e;
    }, "_t"), e;
  }
  i(_A, "_t");
  var {
    arrayExpression: Gle,
    assignmentExpression: Gu,
    binaryExpression: Hle,
    blockStatement: Yle,
    callExpression: Jle,
    cloneNode: zle,
    conditionalExpression: Xle,
    exportNamedDeclaration: Qle,
    exportSpecifier: Zle,
    expressionStatement: _y,
    functionExpression: eue,
    identifier: $t,
    memberExpression: Oy,
    objectExpression: Ny,
    program: Hu,
    stringLiteral: OA,
    unaryExpression: tue,
    variableDeclaration: By,
    variableDeclarator: ky
  } = _A(), rue = /* @__PURE__ */ i((e) => IA().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(e), "buildUmdWrapper");
  function nue(e) {
    let t = $t("babelHelpers"), r = [], n = eue(null, [$t("global")], Yle(r)), s = Hu([_y(Jle(n, [Xle(Hle("===", tue("typeof", $t("global")),
    OA("undefined")), $t("self"), $t("global"))]))]);
    return r.push(By("var", [ky(t, Gu("=", Oy($t("global"), t), Ny([])))])), Yu(r, t, e), s;
  }
  i(nue, "buildGlobal");
  function sue(e) {
    let t = [], r = Yu(t, null, e);
    return t.unshift(Qle(null, Object.keys(r).map((n) => Zle(zle(r[n]), $t(n))))), Hu(t, [], "module");
  }
  i(sue, "buildModule");
  function iue(e) {
    let t = $t("babelHelpers"), r = [];
    return r.push(By("var", [ky(t, $t("global"))])), Yu(r, t, e), Hu([rue({
      FACTORY_PARAMETERS: $t("global"),
      BROWSER_ARGUMENTS: Gu("=", Oy($t("root"), t), Ny([])),
      COMMON_ARGUMENTS: $t("exports"),
      AMD_ARGUMENTS: Gle([OA("exports")]),
      FACTORY_BODY: r,
      UMD_ROOT: $t("this")
    })]);
  }
  i(iue, "buildUmd");
  function aue(e) {
    let t = $t("babelHelpers"), r = [];
    r.push(By("var", [ky(t, Ny([]))]));
    let n = Hu(r);
    return Yu(r, t, e), r.push(_y(t)), n;
  }
  i(aue, "buildVar");
  function Yu(e, t, r) {
    let n = /* @__PURE__ */ i((a) => t ? Oy(t, $t(a)) : $t(`_${a}`), "getHelperReference"), s = {};
    return Iy().list.forEach(function(a) {
      if (r && !r.includes(a)) return;
      let o = s[a] = n(a), {
        nodes: l
      } = Iy().get(a, n, t ? null : `_${a}`, [], t ? (u, c, p) => {
        p((f) => Gu("=", o, f)), u.body.push(_y(Gu("=", o, $t(c))));
      } : null);
      e.push(...l);
    }), s;
  }
  i(Yu, "buildHelpers");
  function oue(e, t = "global") {
    let r, n = {
      global: nue,
      module: sue,
      umd: iue,
      var: aue
    }[t];
    if (n)
      r = n(e);
    else
      throw new Error(`Unsupported output type ${t}`);
    return (0, wA().default)(r).code;
  }
  i(oue, "_default");
});

// ../node_modules/gensync/index.js
var gr = A((QAe, qA) => {
  "use strict";
  var kA = Symbol.for("gensync:v1:start"), FA = Symbol.for("gensync:v1:suspend"), lue = "GENSYNC_EXPECTED_START", uue = "GENSYNC_EXPECTED_SU\
SPEND", jA = "GENSYNC_OPTIONS_ERROR", BA = "GENSYNC_RACE_NONEMPTY", cue = "GENSYNC_ERRBACK_NO_CALLBACK";
  qA.exports = Object.assign(
    /* @__PURE__ */ i(function(t) {
      let r = t;
      return typeof t != "function" ? r = fue(t) : r = due(t), Object.assign(r, pue(r));
    }, "gensync"),
    {
      all: jy({
        name: "all",
        arity: 1,
        sync: /* @__PURE__ */ i(function(e) {
          return Array.from(e[0]).map((r) => Ly(r));
        }, "sync"),
        async: /* @__PURE__ */ i(function(e, t, r) {
          let n = Array.from(e[0]);
          if (n.length === 0) {
            Promise.resolve().then(() => t([]));
            return;
          }
          let s = 0, a = n.map(() => {
          });
          n.forEach((o, l) => {
            Ju(
              o,
              (u) => {
                a[l] = u, s += 1, s === a.length && t(a);
              },
              r
            );
          });
        }, "async")
      }),
      race: jy({
        name: "race",
        arity: 1,
        sync: /* @__PURE__ */ i(function(e) {
          let t = Array.from(e[0]);
          if (t.length === 0)
            throw zs("Must race at least 1 item", BA);
          return Ly(t[0]);
        }, "sync"),
        async: /* @__PURE__ */ i(function(e, t, r) {
          let n = Array.from(e[0]);
          if (n.length === 0)
            throw zs("Must race at least 1 item", BA);
          for (let s of n)
            Ju(s, t, r);
        }, "async")
      })
    }
  );
  function pue(e) {
    return {
      sync: /* @__PURE__ */ i(function(...r) {
        return Ly(e.apply(this, r));
      }, "sync"),
      async: /* @__PURE__ */ i(function(...r) {
        return new Promise((n, s) => {
          Ju(e.apply(this, r), n, s);
        });
      }, "async"),
      errback: /* @__PURE__ */ i(function(...r) {
        let n = r.pop();
        if (typeof n != "function")
          throw zs(
            "Asynchronous function called without callback",
            cue
          );
        let s;
        try {
          s = e.apply(this, r);
        } catch (a) {
          n(a);
          return;
        }
        Ju(s, (a) => n(void 0, a), (a) => n(a));
      }, "errback")
    };
  }
  i(pue, "makeFunctionAPI");
  function fo(e, t, r, n) {
    if (typeof r === e || n && typeof r > "u")
      return;
    let s;
    throw n ? s = `Expected opts.${t} to be either a ${e}, or undefined.` : s = `Expected opts.${t} to be a ${e}.`, zs(s, jA);
  }
  i(fo, "assertTypeof");
  function zs(e, t) {
    return Object.assign(new Error(e), { code: t });
  }
  i(zs, "makeError");
  function fue({ name: e, arity: t, sync: r, async: n, errback: s }) {
    if (fo(
      "string",
      "name",
      e,
      !0
      /* allowUndefined */
    ), fo(
      "number",
      "arity",
      t,
      !0
      /* allowUndefined */
    ), fo("function", "sync", r), fo(
      "function",
      "async",
      n,
      !0
      /* allowUndefined */
    ), fo(
      "function",
      "errback",
      s,
      !0
      /* allowUndefined */
    ), n && s)
      throw zs(
        "Expected one of either opts.async or opts.errback, but got _both_.",
        jA
      );
    if (typeof e != "string") {
      let a;
      s && s.name && s.name !== "errback" && (a = s.name), n && n.name && n.name !== "async" && (a = n.name.replace(/Async$/, "")), r && r.name &&
      r.name !== "sync" && (a = r.name.replace(/Sync$/, "")), typeof a == "string" && (e = a);
    }
    return typeof t != "number" && (t = r.length), jy({
      name: e,
      arity: t,
      sync: /* @__PURE__ */ i(function(a) {
        return r.apply(this, a);
      }, "sync"),
      async: /* @__PURE__ */ i(function(a, o, l) {
        n ? n.apply(this, a).then(o, l) : s ? s.call(this, ...a, (u, c) => {
          u == null ? o(c) : l(u);
        }) : o(r.apply(this, a));
      }, "async")
    });
  }
  i(fue, "newGenerator");
  function due(e) {
    return RA(e.name, e.length, function(...t) {
      return e.apply(this, t);
    });
  }
  i(due, "wrapGenerator");
  function jy({ name: e, arity: t, sync: r, async: n }) {
    return RA(e, t, function* (...s) {
      let a = yield kA;
      if (!a)
        return r.call(this, s);
      let o;
      try {
        n.call(
          this,
          s,
          (l) => {
            o || (o = { value: l }, a());
          },
          (l) => {
            o || (o = { err: l }, a());
          }
        );
      } catch (l) {
        o = { err: l }, a();
      }
      if (yield FA, o.hasOwnProperty("err"))
        throw o.err;
      return o.value;
    });
  }
  i(jy, "buildOperation");
  function Ly(e) {
    let t;
    for (; !({ value: t } = e.next()).done; )
      LA(t, e);
    return t;
  }
  i(Ly, "evaluateSync");
  function Ju(e, t, r) {
    (/* @__PURE__ */ i(function n() {
      try {
        let s;
        for (; !({ value: s } = e.next()).done; ) {
          LA(s, e);
          let a = !0, o = !1, l = e.next(() => {
            a ? o = !0 : n();
          });
          if (a = !1, hue(l, e), !o)
            return;
        }
        return t(s);
      } catch (s) {
        return r(s);
      }
    }, "step"))();
  }
  i(Ju, "evaluateAsync");
  function LA(e, t) {
    e !== kA && MA(
      t,
      zs(
        `Got unexpected yielded value in gensync generator: ${JSON.stringify(
          e
        )}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,
        lue
      )
    );
  }
  i(LA, "assertStart");
  function hue({ value: e, done: t }, r) {
    !t && e === FA || MA(
      r,
      zs(
        t ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(
          e
        )}. If you get this, it is probably a gensync bug.`,
        uue
      )
    );
  }
  i(hue, "assertSuspend");
  function MA(e, t) {
    throw e.throw && e.throw(t), t;
  }
  i(MA, "throwError");
  function RA(e, t, r) {
    if (typeof e == "string") {
      let n = Object.getOwnPropertyDescriptor(r, "name");
      (!n || n.configurable) && Object.defineProperty(
        r,
        "name",
        Object.assign(n || {}, {
          configurable: !0,
          value: e
        })
      );
    }
    if (typeof t == "number") {
      let n = Object.getOwnPropertyDescriptor(r, "length");
      (!n || n.configurable) && Object.defineProperty(
        r,
        "length",
        Object.assign(n || {}, {
          configurable: !0,
          value: t
        })
      );
    }
    return r;
  }
  i(RA, "setFunctionMetadata");
});

// ../node_modules/@babel/core/lib/gensync-utils/async.js
var hs = A((Gr) => {
  "use strict";
  Object.defineProperty(Gr, "__esModule", {
    value: !0
  });
  Gr.forwardAsync = gue;
  Gr.isAsync = void 0;
  Gr.isThenable = WA;
  Gr.maybeAsync = mue;
  Gr.waitFor = Gr.onFirstPause = void 0;
  function ds() {
    let e = gr();
    return ds = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(ds, "_gensync");
  function UA(e, t, r, n, s, a, o) {
    try {
      var l = e[a](o), u = l.value;
    } catch (c) {
      return void r(c);
    }
    l.done ? t(u) : Promise.resolve(u).then(n, s);
  }
  i(UA, "asyncGeneratorStep");
  function $A(e) {
    return function() {
      var t = this, r = arguments;
      return new Promise(function(n, s) {
        var a = e.apply(t, r);
        function o(u) {
          UA(a, n, s, o, l, "next", u);
        }
        i(o, "_next");
        function l(u) {
          UA(a, n, s, o, l, "throw", u);
        }
        i(l, "_throw"), o(void 0);
      });
    };
  }
  i($A, "_asyncToGenerator");
  var VA = ds()(function* (e) {
    return yield* e;
  }), eCe = Gr.isAsync = ds()({
    sync: /* @__PURE__ */ i(() => !1, "sync"),
    errback: /* @__PURE__ */ i((e) => e(null, !0), "errback")
  });
  function mue(e, t) {
    return ds()({
      sync(...r) {
        let n = e.apply(this, r);
        if (WA(n)) throw new Error(t);
        return n;
      },
      async(...r) {
        return Promise.resolve(e.apply(this, r));
      }
    });
  }
  i(mue, "maybeAsync");
  var yue = ds()({
    sync: /* @__PURE__ */ i((e) => e("sync"), "sync"),
    async: function() {
      var e = $A(function* (t) {
        return t("async");
      });
      return /* @__PURE__ */ i(function(r) {
        return e.apply(this, arguments);
      }, "async");
    }()
  });
  function gue(e, t) {
    let r = ds()(e);
    return yue((n) => {
      let s = r[n];
      return t(s);
    });
  }
  i(gue, "forwardAsync");
  var tCe = Gr.onFirstPause = ds()({
    name: "onFirstPause",
    arity: 2,
    sync: /* @__PURE__ */ i(function(e) {
      return VA.sync(e);
    }, "sync"),
    errback: /* @__PURE__ */ i(function(e, t, r) {
      let n = !1;
      VA.errback(e, (s, a) => {
        n = !0, r(s, a);
      }), n || t();
    }, "errback")
  }), rCe = Gr.waitFor = ds()({
    sync: /* @__PURE__ */ i((e) => e, "sync"),
    async: function() {
      var e = $A(function* (t) {
        return t;
      });
      return /* @__PURE__ */ i(function(r) {
        return e.apply(this, arguments);
      }, "async");
    }()
  });
  function WA(e) {
    return !!e && (typeof e == "object" || typeof e == "function") && !!e.then && typeof e.then == "function";
  }
  i(WA, "isThenable");
});

// ../node_modules/@babel/core/lib/config/util.js
var Xu = A((zu) => {
  "use strict";
  Object.defineProperty(zu, "__esModule", {
    value: !0
  });
  zu.isIterableIterator = Tue;
  zu.mergeOptions = bue;
  function bue(e, t) {
    for (let r of Object.keys(t))
      if ((r === "parserOpts" || r === "generatorOpts" || r === "assumptions") && t[r]) {
        let n = t[r], s = e[r] || (e[r] = {});
        Eue(s, n);
      } else {
        let n = t[r];
        n !== void 0 && (e[r] = n);
      }
  }
  i(bue, "mergeOptions");
  function Eue(e, t) {
    for (let r of Object.keys(t)) {
      let n = t[r];
      n !== void 0 && (e[r] = n);
    }
  }
  i(Eue, "mergeDefaultFields");
  function Tue(e) {
    return !!e && typeof e.next == "function" && typeof e[Symbol.iterator] == "function";
  }
  i(Tue, "isIterableIterator");
});

// ../node_modules/@babel/core/lib/config/caching.js
var Qs = A((Xs) => {
  "use strict";
  Object.defineProperty(Xs, "__esModule", {
    value: !0
  });
  Xs.assertSimpleType = Qu;
  Xs.makeStrongCache = JA;
  Xs.makeStrongCacheSync = Pue;
  Xs.makeWeakCache = YA;
  Xs.makeWeakCacheSync = vue;
  function GA() {
    let e = gr();
    return GA = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(GA, "_gensync");
  var qi = hs(), Sue = Xu(), HA = /* @__PURE__ */ i((e) => GA()(e).sync, "synchronize");
  function* xue() {
    return !0;
  }
  i(xue, "genTrue");
  function YA(e) {
    return zA(WeakMap, e);
  }
  i(YA, "makeWeakCache");
  function vue(e) {
    return HA(YA(e));
  }
  i(vue, "makeWeakCacheSync");
  function JA(e) {
    return zA(Map, e);
  }
  i(JA, "makeStrongCache");
  function Pue(e) {
    return HA(JA(e));
  }
  i(Pue, "makeStrongCacheSync");
  function zA(e, t) {
    let r = new e(), n = new e(), s = new e();
    return /* @__PURE__ */ i(function* (o, l) {
      let u = yield* (0, qi.isAsync)(), c = u ? n : r, p = yield* Aue(u, c, s, o, l);
      if (p.valid) return p.value;
      let f = new My(l), h = t(o, f), g, P;
      return (0, Sue.isIterableIterator)(h) ? P = yield* (0, qi.onFirstPause)(h, () => {
        g = Cue(f, s, o);
      }) : P = h, XA(c, f, o, P), g && (s.delete(o), g.release(P)), P;
    }, "cachedFunction");
  }
  i(zA, "makeCachedFunction");
  function* KA(e, t, r) {
    let n = e.get(t);
    if (n) {
      for (let {
        value: s,
        valid: a
      } of n)
        if (yield* a(r)) return {
          valid: !0,
          value: s
        };
    }
    return {
      valid: !1,
      value: null
    };
  }
  i(KA, "getCachedValue");
  function* Aue(e, t, r, n, s) {
    let a = yield* KA(t, n, s);
    if (a.valid)
      return a;
    if (e) {
      let o = yield* KA(r, n, s);
      if (o.valid)
        return {
          valid: !0,
          value: yield* (0, qi.waitFor)(o.value.promise)
        };
    }
    return {
      valid: !1,
      value: null
    };
  }
  i(Aue, "getCachedValueOrWait");
  function Cue(e, t, r) {
    let n = new Ry();
    return XA(t, e, r, n), n;
  }
  i(Cue, "setupAsyncLocks");
  function XA(e, t, r, n) {
    t.configured() || t.forever();
    let s = e.get(r);
    switch (t.deactivate(), t.mode()) {
      case "forever":
        s = [{
          value: n,
          valid: xue
        }], e.set(r, s);
        break;
      case "invalidate":
        s = [{
          value: n,
          valid: t.validator()
        }], e.set(r, s);
        break;
      case "valid":
        s ? s.push({
          value: n,
          valid: t.validator()
        }) : (s = [{
          value: n,
          valid: t.validator()
        }], e.set(r, s));
    }
  }
  i(XA, "updateFunctionCache");
  var My = class {
    static {
      i(this, "CacheConfigurator");
    }
    constructor(t) {
      this._active = !0, this._never = !1, this._forever = !1, this._invalidate = !1, this._configured = !1, this._pairs = [], this._data = void 0,
      this._data = t;
    }
    simple() {
      return Due(this);
    }
    mode() {
      return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
    }
    forever() {
      if (!this._active)
        throw new Error("Cannot change caching after evaluation has completed.");
      if (this._never)
        throw new Error("Caching has already been configured with .never()");
      this._forever = !0, this._configured = !0;
    }
    never() {
      if (!this._active)
        throw new Error("Cannot change caching after evaluation has completed.");
      if (this._forever)
        throw new Error("Caching has already been configured with .forever()");
      this._never = !0, this._configured = !0;
    }
    using(t) {
      if (!this._active)
        throw new Error("Cannot change caching after evaluation has completed.");
      if (this._never || this._forever)
        throw new Error("Caching has already been configured with .never or .forever()");
      this._configured = !0;
      let r = t(this._data), n = (0, qi.maybeAsync)(t, "You appear to be using an async cache handler, but Babel has been called synchronous\
ly");
      return (0, qi.isThenable)(r) ? r.then((s) => (this._pairs.push([s, n]), s)) : (this._pairs.push([r, n]), r);
    }
    invalidate(t) {
      return this._invalidate = !0, this.using(t);
    }
    validator() {
      let t = this._pairs;
      return function* (r) {
        for (let [n, s] of t)
          if (n !== (yield* s(r))) return !1;
        return !0;
      };
    }
    deactivate() {
      this._active = !1;
    }
    configured() {
      return this._configured;
    }
  };
  function Due(e) {
    function t(r) {
      if (typeof r == "boolean") {
        r ? e.forever() : e.never();
        return;
      }
      return e.using(() => Qu(r()));
    }
    return i(t, "cacheFn"), t.forever = () => e.forever(), t.never = () => e.never(), t.using = (r) => e.using(() => Qu(r())), t.invalidate =
    (r) => e.invalidate(() => Qu(r())), t;
  }
  i(Due, "makeSimpleConfigurator");
  function Qu(e) {
    if ((0, qi.isThenable)(e))
      throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add suppo\
rt for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchron\
ously handle your caching logic.");
    if (e != null && typeof e != "string" && typeof e != "boolean" && typeof e != "number")
      throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
    return e;
  }
  i(Qu, "assertSimpleType");
  var Ry = class {
    static {
      i(this, "Lock");
    }
    constructor() {
      this.released = !1, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((t) => {
        this._resolve = t;
      });
    }
    release(t) {
      this.released = !0, this._resolve(t);
    }
  };
});

// ../node_modules/@babel/core/lib/gensync-utils/fs.js
var Zu = A((Ui) => {
  "use strict";
  Object.defineProperty(Ui, "__esModule", {
    value: !0
  });
  Ui.stat = Ui.readFile = void 0;
  function ho() {
    let e = le("fs");
    return ho = /* @__PURE__ */ i(function() {
      return e;
    }, "_fs"), e;
  }
  i(ho, "_fs");
  function qy() {
    let e = gr();
    return qy = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(qy, "_gensync");
  var uCe = Ui.readFile = qy()({
    sync: ho().readFileSync,
    errback: ho().readFile
  }), cCe = Ui.stat = qy()({
    sync: ho().statSync,
    errback: ho().stat
  });
});

// ../node_modules/@babel/core/lib/config/files/utils.js
var $y = A((Vy) => {
  "use strict";
  Object.defineProperty(Vy, "__esModule", {
    value: !0
  });
  Vy.makeStaticFileCache = _ue;
  var wue = Qs(), Iue = Zu();
  function Uy() {
    let e = le("fs");
    return Uy = /* @__PURE__ */ i(function() {
      return e;
    }, "_fs2"), e;
  }
  i(Uy, "_fs2");
  function _ue(e) {
    return (0, wue.makeStrongCache)(function* (t, r) {
      return r.invalidate(() => Oue(t)) === null ? null : e(t, yield* Iue.readFile(t, "utf8"));
    });
  }
  i(_ue, "makeStaticFileCache");
  function Oue(e) {
    if (!Uy().existsSync(e)) return null;
    try {
      return +Uy().statSync(e).mtime;
    } catch (t) {
      if (t.code !== "ENOENT" && t.code !== "ENOTDIR") throw t;
    }
    return null;
  }
  i(Oue, "fileMtime");
});

// ../node_modules/@babel/core/lib/errors/rewrite-stack-trace.js
var Fn = A((Vi) => {
  "use strict";
  Object.defineProperty(Vi, "__esModule", {
    value: !0
  });
  Vi.beginHiddenCallStack = Fue;
  Vi.endHiddenCallStack = jue;
  Vi.expectedError = kue;
  Vi.injectVirtualStackFrame = Bue;
  var QA, ZA = Function.call.bind(Error.prototype.toString), tc = !!Error.captureStackTrace && ((QA = Object.getOwnPropertyDescriptor(Error,
  "stackTraceLimit")) == null ? void 0 : QA.writable) === !0, eC = "startHiding - secret - don't use this - v1", tC = "stopHiding - secret -\
 don't use this - v1", rC = /* @__PURE__ */ new WeakSet(), ec = /* @__PURE__ */ new WeakMap();
  function Nue(e) {
    return /* @__PURE__ */ Object.create({
      isNative: /* @__PURE__ */ i(() => !1, "isNative"),
      isConstructor: /* @__PURE__ */ i(() => !1, "isConstructor"),
      isToplevel: /* @__PURE__ */ i(() => !0, "isToplevel"),
      getFileName: /* @__PURE__ */ i(() => e, "getFileName"),
      getLineNumber: /* @__PURE__ */ i(() => {
      }, "getLineNumber"),
      getColumnNumber: /* @__PURE__ */ i(() => {
      }, "getColumnNumber"),
      getFunctionName: /* @__PURE__ */ i(() => {
      }, "getFunctionName"),
      getMethodName: /* @__PURE__ */ i(() => {
      }, "getMethodName"),
      getTypeName: /* @__PURE__ */ i(() => {
      }, "getTypeName"),
      toString: /* @__PURE__ */ i(() => e, "toString")
    });
  }
  i(Nue, "CallSite");
  function Bue(e, t) {
    if (!tc) return;
    let r = ec.get(e);
    return r || ec.set(e, r = []), r.push(Nue(t)), e;
  }
  i(Bue, "injectVirtualStackFrame");
  function kue(e) {
    if (tc)
      return rC.add(e), e;
  }
  i(kue, "expectedError");
  function Fue(e) {
    return tc ? Object.defineProperty(function(...t) {
      return nC(), e(...t);
    }, "name", {
      value: tC
    }) : e;
  }
  i(Fue, "beginHiddenCallStack");
  function jue(e) {
    return tc ? Object.defineProperty(function(...t) {
      return e(...t);
    }, "name", {
      value: eC
    }) : e;
  }
  i(jue, "endHiddenCallStack");
  function nC() {
    nC = /* @__PURE__ */ i(() => {
    }, "setupPrepareStackTrace");
    let {
      prepareStackTrace: e = Lue
    } = Error, t = 50;
    Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, t)), Error.prepareStackTrace = /* @__PURE__ */ i(function(n, s) {
      let a = [], l = rC.has(n) ? "hiding" : "unknown";
      for (let u = 0; u < s.length; u++) {
        let c = s[u].getFunctionName();
        if (c === eC)
          l = "hiding";
        else if (c === tC) {
          if (l === "hiding")
            l = "showing", ec.has(n) && a.unshift(...ec.get(n));
          else if (l === "unknown") {
            a = s;
            break;
          }
        } else l !== "hiding" && a.push(s[u]);
      }
      return e(n, a);
    }, "stackTraceRewriter");
  }
  i(nC, "setupPrepareStackTrace");
  function Lue(e, t) {
    return t.length === 0 ? ZA(e) : `${ZA(e)}
    at ${t.join(`
    at `)}`;
  }
  i(Lue, "defaultPrepareStackTrace");
});

// ../node_modules/@babel/core/lib/errors/config-error.js
var Zs = A((rc) => {
  "use strict";
  Object.defineProperty(rc, "__esModule", {
    value: !0
  });
  rc.default = void 0;
  var sC = Fn(), Wy = class extends Error {
    static {
      i(this, "ConfigError");
    }
    constructor(t, r) {
      super(t), (0, sC.expectedError)(this), r && (0, sC.injectVirtualStackFrame)(this, r);
    }
  };
  rc.default = Wy;
});

// ../node_modules/@babel/core/lib/config/files/package.js
var iC = A((Gy) => {
  "use strict";
  Object.defineProperty(Gy, "__esModule", {
    value: !0
  });
  Gy.findPackageData = Uue;
  function $i() {
    let e = le("path");
    return $i = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i($i, "_path");
  var Mue = $y(), Ky = Zs(), Rue = "package.json", que = (0, Mue.makeStaticFileCache)((e, t) => {
    let r;
    try {
      r = JSON.parse(t);
    } catch (n) {
      throw new Ky.default(`Error while parsing JSON - ${n.message}`, e);
    }
    if (!r) throw new Error(`${e}: No config detected`);
    if (typeof r != "object")
      throw new Ky.default(`Config returned typeof ${typeof r}`, e);
    if (Array.isArray(r))
      throw new Ky.default("Expected config object but found array", e);
    return {
      filepath: e,
      dirname: $i().dirname(e),
      options: r
    };
  });
  function* Uue(e) {
    let t = null, r = [], n = !0, s = $i().dirname(e);
    for (; !t && $i().basename(s) !== "node_modules"; ) {
      r.push(s), t = yield* que($i().join(s, Rue));
      let a = $i().dirname(s);
      if (s === a) {
        n = !1;
        break;
      }
      s = a;
    }
    return {
      filepath: e,
      directories: r,
      pkg: t,
      isPackage: n
    };
  }
  i(Uue, "findPackageData");
});

// ../node_modules/json5/lib/unicode.js
var aC = A((SCe, nc) => {
  nc.exports.Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  nc.exports.ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
  nc.exports.ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
});

// ../node_modules/json5/lib/util.js
var Yy = A((xCe, oC) => {
  var Hy = aC();
  oC.exports = {
    isSpaceSeparator(e) {
      return typeof e == "string" && Hy.Space_Separator.test(e);
    },
    isIdStartChar(e) {
      return typeof e == "string" && (e >= "a" && e <= "z" || e >= "A" && e <= "Z" || e === "$" || e === "_" || Hy.ID_Start.test(e));
    },
    isIdContinueChar(e) {
      return typeof e == "string" && (e >= "a" && e <= "z" || e >= "A" && e <= "Z" || e >= "0" && e <= "9" || e === "$" || e === "_" || e ===
      "\u200C" || e === "\u200D" || Hy.ID_Continue.test(e));
    },
    isDigit(e) {
      return typeof e == "string" && /[0-9]/.test(e);
    },
    isHexDigit(e) {
      return typeof e == "string" && /[0-9A-Fa-f]/.test(e);
    }
  };
});

// ../node_modules/json5/lib/parse.js
var fC = A((vCe, pC) => {
  var jt = Yy(), zy, lr, Ln, ic, ms, Hr, Lt, Zy, yo;
  pC.exports = /* @__PURE__ */ i(function(t, r) {
    zy = String(t), lr = "start", Ln = [], ic = 0, ms = 1, Hr = 0, Lt = void 0, Zy = void 0, yo = void 0;
    do
      Lt = Vue(), Kue[lr]();
    while (Lt.type !== "eof");
    return typeof r == "function" ? Xy({ "": yo }, "", r) : yo;
  }, "parse");
  function Xy(e, t, r) {
    let n = e[t];
    if (n != null && typeof n == "object")
      if (Array.isArray(n))
        for (let s = 0; s < n.length; s++) {
          let a = String(s), o = Xy(n, a, r);
          o === void 0 ? delete n[a] : Object.defineProperty(n, a, {
            value: o,
            writable: !0,
            enumerable: !0,
            configurable: !0
          });
        }
      else
        for (let s in n) {
          let a = Xy(n, s, r);
          a === void 0 ? delete n[s] : Object.defineProperty(n, s, {
            value: a,
            writable: !0,
            enumerable: !0,
            configurable: !0
          });
        }
    return r.call(e, t, n);
  }
  i(Xy, "internalize");
  var qe, Le, mo, jn, Ge;
  function Vue() {
    for (qe = "default", Le = "", mo = !1, jn = 1; ; ) {
      Ge = Mn();
      let e = uC[qe]();
      if (e)
        return e;
    }
  }
  i(Vue, "lex");
  function Mn() {
    if (zy[ic])
      return String.fromCodePoint(zy.codePointAt(ic));
  }
  i(Mn, "peek");
  function J() {
    let e = Mn();
    return e === `
` ? (ms++, Hr = 0) : e ? Hr += e.length : Hr++, e && (ic += e.length), e;
  }
  i(J, "read");
  var uC = {
    default() {
      switch (Ge) {
        case "	":
        case "\v":
        case "\f":
        case " ":
        case "\xA0":
        case "\uFEFF":
        case `
`:
        case "\r":
        case "\u2028":
        case "\u2029":
          J();
          return;
        case "/":
          J(), qe = "comment";
          return;
        case void 0:
          return J(), ft("eof");
      }
      if (jt.isSpaceSeparator(Ge)) {
        J();
        return;
      }
      return uC[lr]();
    },
    comment() {
      switch (Ge) {
        case "*":
          J(), qe = "multiLineComment";
          return;
        case "/":
          J(), qe = "singleLineComment";
          return;
      }
      throw dt(J());
    },
    multiLineComment() {
      switch (Ge) {
        case "*":
          J(), qe = "multiLineCommentAsterisk";
          return;
        case void 0:
          throw dt(J());
      }
      J();
    },
    multiLineCommentAsterisk() {
      switch (Ge) {
        case "*":
          J();
          return;
        case "/":
          J(), qe = "default";
          return;
        case void 0:
          throw dt(J());
      }
      J(), qe = "multiLineComment";
    },
    singleLineComment() {
      switch (Ge) {
        case `
`:
        case "\r":
        case "\u2028":
        case "\u2029":
          J(), qe = "default";
          return;
        case void 0:
          return J(), ft("eof");
      }
      J();
    },
    value() {
      switch (Ge) {
        case "{":
        case "[":
          return ft("punctuator", J());
        case "n":
          return J(), ei("ull"), ft("null", null);
        case "t":
          return J(), ei("rue"), ft("boolean", !0);
        case "f":
          return J(), ei("alse"), ft("boolean", !1);
        case "-":
        case "+":
          J() === "-" && (jn = -1), qe = "sign";
          return;
        case ".":
          Le = J(), qe = "decimalPointLeading";
          return;
        case "0":
          Le = J(), qe = "zero";
          return;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          Le = J(), qe = "decimalInteger";
          return;
        case "I":
          return J(), ei("nfinity"), ft("numeric", 1 / 0);
        case "N":
          return J(), ei("aN"), ft("numeric", NaN);
        case '"':
        case "'":
          mo = J() === '"', Le = "", qe = "string";
          return;
      }
      throw dt(J());
    },
    identifierNameStartEscape() {
      if (Ge !== "u")
        throw dt(J());
      J();
      let e = Qy();
      switch (e) {
        case "$":
        case "_":
          break;
        default:
          if (!jt.isIdStartChar(e))
            throw lC();
          break;
      }
      Le += e, qe = "identifierName";
    },
    identifierName() {
      switch (Ge) {
        case "$":
        case "_":
        case "\u200C":
        case "\u200D":
          Le += J();
          return;
        case "\\":
          J(), qe = "identifierNameEscape";
          return;
      }
      if (jt.isIdContinueChar(Ge)) {
        Le += J();
        return;
      }
      return ft("identifier", Le);
    },
    identifierNameEscape() {
      if (Ge !== "u")
        throw dt(J());
      J();
      let e = Qy();
      switch (e) {
        case "$":
        case "_":
        case "\u200C":
        case "\u200D":
          break;
        default:
          if (!jt.isIdContinueChar(e))
            throw lC();
          break;
      }
      Le += e, qe = "identifierName";
    },
    sign() {
      switch (Ge) {
        case ".":
          Le = J(), qe = "decimalPointLeading";
          return;
        case "0":
          Le = J(), qe = "zero";
          return;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          Le = J(), qe = "decimalInteger";
          return;
        case "I":
          return J(), ei("nfinity"), ft("numeric", jn * (1 / 0));
        case "N":
          return J(), ei("aN"), ft("numeric", NaN);
      }
      throw dt(J());
    },
    zero() {
      switch (Ge) {
        case ".":
          Le += J(), qe = "decimalPoint";
          return;
        case "e":
        case "E":
          Le += J(), qe = "decimalExponent";
          return;
        case "x":
        case "X":
          Le += J(), qe = "hexadecimal";
          return;
      }
      return ft("numeric", jn * 0);
    },
    decimalInteger() {
      switch (Ge) {
        case ".":
          Le += J(), qe = "decimalPoint";
          return;
        case "e":
        case "E":
          Le += J(), qe = "decimalExponent";
          return;
      }
      if (jt.isDigit(Ge)) {
        Le += J();
        return;
      }
      return ft("numeric", jn * Number(Le));
    },
    decimalPointLeading() {
      if (jt.isDigit(Ge)) {
        Le += J(), qe = "decimalFraction";
        return;
      }
      throw dt(J());
    },
    decimalPoint() {
      switch (Ge) {
        case "e":
        case "E":
          Le += J(), qe = "decimalExponent";
          return;
      }
      if (jt.isDigit(Ge)) {
        Le += J(), qe = "decimalFraction";
        return;
      }
      return ft("numeric", jn * Number(Le));
    },
    decimalFraction() {
      switch (Ge) {
        case "e":
        case "E":
          Le += J(), qe = "decimalExponent";
          return;
      }
      if (jt.isDigit(Ge)) {
        Le += J();
        return;
      }
      return ft("numeric", jn * Number(Le));
    },
    decimalExponent() {
      switch (Ge) {
        case "+":
        case "-":
          Le += J(), qe = "decimalExponentSign";
          return;
      }
      if (jt.isDigit(Ge)) {
        Le += J(), qe = "decimalExponentInteger";
        return;
      }
      throw dt(J());
    },
    decimalExponentSign() {
      if (jt.isDigit(Ge)) {
        Le += J(), qe = "decimalExponentInteger";
        return;
      }
      throw dt(J());
    },
    decimalExponentInteger() {
      if (jt.isDigit(Ge)) {
        Le += J();
        return;
      }
      return ft("numeric", jn * Number(Le));
    },
    hexadecimal() {
      if (jt.isHexDigit(Ge)) {
        Le += J(), qe = "hexadecimalInteger";
        return;
      }
      throw dt(J());
    },
    hexadecimalInteger() {
      if (jt.isHexDigit(Ge)) {
        Le += J();
        return;
      }
      return ft("numeric", jn * Number(Le));
    },
    string() {
      switch (Ge) {
        case "\\":
          J(), Le += $ue();
          return;
        case '"':
          if (mo)
            return J(), ft("string", Le);
          Le += J();
          return;
        case "'":
          if (!mo)
            return J(), ft("string", Le);
          Le += J();
          return;
        case `
`:
        case "\r":
          throw dt(J());
        case "\u2028":
        case "\u2029":
          Gue(Ge);
          break;
        case void 0:
          throw dt(J());
      }
      Le += J();
    },
    start() {
      switch (Ge) {
        case "{":
        case "[":
          return ft("punctuator", J());
      }
      qe = "value";
    },
    beforePropertyName() {
      switch (Ge) {
        case "$":
        case "_":
          Le = J(), qe = "identifierName";
          return;
        case "\\":
          J(), qe = "identifierNameStartEscape";
          return;
        case "}":
          return ft("punctuator", J());
        case '"':
        case "'":
          mo = J() === '"', qe = "string";
          return;
      }
      if (jt.isIdStartChar(Ge)) {
        Le += J(), qe = "identifierName";
        return;
      }
      throw dt(J());
    },
    afterPropertyName() {
      if (Ge === ":")
        return ft("punctuator", J());
      throw dt(J());
    },
    beforePropertyValue() {
      qe = "value";
    },
    afterPropertyValue() {
      switch (Ge) {
        case ",":
        case "}":
          return ft("punctuator", J());
      }
      throw dt(J());
    },
    beforeArrayValue() {
      if (Ge === "]")
        return ft("punctuator", J());
      qe = "value";
    },
    afterArrayValue() {
      switch (Ge) {
        case ",":
        case "]":
          return ft("punctuator", J());
      }
      throw dt(J());
    },
    end() {
      throw dt(J());
    }
  };
  function ft(e, t) {
    return {
      type: e,
      value: t,
      line: ms,
      column: Hr
    };
  }
  i(ft, "newToken");
  function ei(e) {
    for (let t of e) {
      if (Mn() !== t)
        throw dt(J());
      J();
    }
  }
  i(ei, "literal");
  function $ue() {
    switch (Mn()) {
      case "b":
        return J(), "\b";
      case "f":
        return J(), "\f";
      case "n":
        return J(), `
`;
      case "r":
        return J(), "\r";
      case "t":
        return J(), "	";
      case "v":
        return J(), "\v";
      case "0":
        if (J(), jt.isDigit(Mn()))
          throw dt(J());
        return "\0";
      case "x":
        return J(), Wue();
      case "u":
        return J(), Qy();
      case `
`:
      case "\u2028":
      case "\u2029":
        return J(), "";
      case "\r":
        return J(), Mn() === `
` && J(), "";
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        throw dt(J());
      case void 0:
        throw dt(J());
    }
    return J();
  }
  i($ue, "escape");
  function Wue() {
    let e = "", t = Mn();
    if (!jt.isHexDigit(t) || (e += J(), t = Mn(), !jt.isHexDigit(t)))
      throw dt(J());
    return e += J(), String.fromCodePoint(parseInt(e, 16));
  }
  i(Wue, "hexEscape");
  function Qy() {
    let e = "", t = 4;
    for (; t-- > 0; ) {
      let r = Mn();
      if (!jt.isHexDigit(r))
        throw dt(J());
      e += J();
    }
    return String.fromCodePoint(parseInt(e, 16));
  }
  i(Qy, "unicodeEscape");
  var Kue = {
    start() {
      if (Lt.type === "eof")
        throw ti();
      Jy();
    },
    beforePropertyName() {
      switch (Lt.type) {
        case "identifier":
        case "string":
          Zy = Lt.value, lr = "afterPropertyName";
          return;
        case "punctuator":
          sc();
          return;
        case "eof":
          throw ti();
      }
    },
    afterPropertyName() {
      if (Lt.type === "eof")
        throw ti();
      lr = "beforePropertyValue";
    },
    beforePropertyValue() {
      if (Lt.type === "eof")
        throw ti();
      Jy();
    },
    beforeArrayValue() {
      if (Lt.type === "eof")
        throw ti();
      if (Lt.type === "punctuator" && Lt.value === "]") {
        sc();
        return;
      }
      Jy();
    },
    afterPropertyValue() {
      if (Lt.type === "eof")
        throw ti();
      switch (Lt.value) {
        case ",":
          lr = "beforePropertyName";
          return;
        case "}":
          sc();
      }
    },
    afterArrayValue() {
      if (Lt.type === "eof")
        throw ti();
      switch (Lt.value) {
        case ",":
          lr = "beforeArrayValue";
          return;
        case "]":
          sc();
      }
    },
    end() {
    }
  };
  function Jy() {
    let e;
    switch (Lt.type) {
      case "punctuator":
        switch (Lt.value) {
          case "{":
            e = {};
            break;
          case "[":
            e = [];
            break;
        }
        break;
      case "null":
      case "boolean":
      case "numeric":
      case "string":
        e = Lt.value;
        break;
    }
    if (yo === void 0)
      yo = e;
    else {
      let t = Ln[Ln.length - 1];
      Array.isArray(t) ? t.push(e) : Object.defineProperty(t, Zy, {
        value: e,
        writable: !0,
        enumerable: !0,
        configurable: !0
      });
    }
    if (e !== null && typeof e == "object")
      Ln.push(e), Array.isArray(e) ? lr = "beforeArrayValue" : lr = "beforePropertyName";
    else {
      let t = Ln[Ln.length - 1];
      t == null ? lr = "end" : Array.isArray(t) ? lr = "afterArrayValue" : lr = "afterPropertyValue";
    }
  }
  i(Jy, "push");
  function sc() {
    Ln.pop();
    let e = Ln[Ln.length - 1];
    e == null ? lr = "end" : Array.isArray(e) ? lr = "afterArrayValue" : lr = "afterPropertyValue";
  }
  i(sc, "pop");
  function dt(e) {
    return ac(e === void 0 ? `JSON5: invalid end of input at ${ms}:${Hr}` : `JSON5: invalid character '${cC(e)}' at ${ms}:${Hr}`);
  }
  i(dt, "invalidChar");
  function ti() {
    return ac(`JSON5: invalid end of input at ${ms}:${Hr}`);
  }
  i(ti, "invalidEOF");
  function lC() {
    return Hr -= 5, ac(`JSON5: invalid identifier character at ${ms}:${Hr}`);
  }
  i(lC, "invalidIdentifier");
  function Gue(e) {
    console.warn(`JSON5: '${cC(e)}' in strings is not valid ECMAScript; consider escaping`);
  }
  i(Gue, "separatorChar");
  function cC(e) {
    let t = {
      "'": "\\'",
      '"': '\\"',
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\v": "\\v",
      "\0": "\\0",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    if (t[e])
      return t[e];
    if (e < " ") {
      let r = e.charCodeAt(0).toString(16);
      return "\\x" + ("00" + r).substring(r.length);
    }
    return e;
  }
  i(cC, "formatChar");
  function ac(e) {
    let t = new SyntaxError(e);
    return t.lineNumber = ms, t.columnNumber = Hr, t;
  }
  i(ac, "syntaxError");
});

// ../node_modules/json5/lib/stringify.js
var hC = A((ACe, dC) => {
  var e0 = Yy();
  dC.exports = /* @__PURE__ */ i(function(t, r, n) {
    let s = [], a = "", o, l, u = "", c;
    if (r != null && typeof r == "object" && !Array.isArray(r) && (n = r.space, c = r.quote, r = r.replacer), typeof r == "function")
      l = r;
    else if (Array.isArray(r)) {
      o = [];
      for (let d of r) {
        let y;
        typeof d == "string" ? y = d : (typeof d == "number" || d instanceof String || d instanceof Number) && (y = String(d)), y !== void 0 &&
        o.indexOf(y) < 0 && o.push(y);
      }
    }
    return n instanceof Number ? n = Number(n) : n instanceof String && (n = String(n)), typeof n == "number" ? n > 0 && (n = Math.min(10, Math.
    floor(n)), u = "          ".substr(0, n)) : typeof n == "string" && (u = n.substr(0, 10)), p("", { "": t });
    function p(d, y) {
      let E = y[d];
      switch (E != null && (typeof E.toJSON5 == "function" ? E = E.toJSON5(d) : typeof E.toJSON == "function" && (E = E.toJSON(d))), l && (E =
      l.call(y, d, E)), E instanceof Number ? E = Number(E) : E instanceof String ? E = String(E) : E instanceof Boolean && (E = E.valueOf()),
      E) {
        case null:
          return "null";
        case !0:
          return "true";
        case !1:
          return "false";
      }
      if (typeof E == "string")
        return f(E, !1);
      if (typeof E == "number")
        return String(E);
      if (typeof E == "object")
        return Array.isArray(E) ? P(E) : h(E);
    }
    i(p, "serializeProperty");
    function f(d) {
      let y = {
        "'": 0.1,
        '"': 0.2
      }, E = {
        "'": "\\'",
        '"': '\\"',
        "\\": "\\\\",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "	": "\\t",
        "\v": "\\v",
        "\0": "\\0",
        "\u2028": "\\u2028",
        "\u2029": "\\u2029"
      }, _ = "";
      for (let B = 0; B < d.length; B++) {
        let L = d[B];
        switch (L) {
          case "'":
          case '"':
            y[L]++, _ += L;
            continue;
          case "\0":
            if (e0.isDigit(d[B + 1])) {
              _ += "\\x00";
              continue;
            }
        }
        if (E[L]) {
          _ += E[L];
          continue;
        }
        if (L < " ") {
          let U = L.charCodeAt(0).toString(16);
          _ += "\\x" + ("00" + U).substring(U.length);
          continue;
        }
        _ += L;
      }
      let k = c || Object.keys(y).reduce((B, L) => y[B] < y[L] ? B : L);
      return _ = _.replace(new RegExp(k, "g"), E[k]), k + _ + k;
    }
    i(f, "quoteString");
    function h(d) {
      if (s.indexOf(d) >= 0)
        throw TypeError("Converting circular structure to JSON5");
      s.push(d);
      let y = a;
      a = a + u;
      let E = o || Object.keys(d), _ = [];
      for (let B of E) {
        let L = p(B, d);
        if (L !== void 0) {
          let U = g(B) + ":";
          u !== "" && (U += " "), U += L, _.push(U);
        }
      }
      let k;
      if (_.length === 0)
        k = "{}";
      else {
        let B;
        if (u === "")
          B = _.join(","), k = "{" + B + "}";
        else {
          let L = `,
` + a;
          B = _.join(L), k = `{
` + a + B + `,
` + y + "}";
        }
      }
      return s.pop(), a = y, k;
    }
    i(h, "serializeObject");
    function g(d) {
      if (d.length === 0)
        return f(d, !0);
      let y = String.fromCodePoint(d.codePointAt(0));
      if (!e0.isIdStartChar(y))
        return f(d, !0);
      for (let E = y.length; E < d.length; E++)
        if (!e0.isIdContinueChar(String.fromCodePoint(d.codePointAt(E))))
          return f(d, !0);
      return d;
    }
    i(g, "serializeKey");
    function P(d) {
      if (s.indexOf(d) >= 0)
        throw TypeError("Converting circular structure to JSON5");
      s.push(d);
      let y = a;
      a = a + u;
      let E = [];
      for (let k = 0; k < d.length; k++) {
        let B = p(String(k), d);
        E.push(B !== void 0 ? B : "null");
      }
      let _;
      if (E.length === 0)
        _ = "[]";
      else if (u === "")
        _ = "[" + E.join(",") + "]";
      else {
        let k = `,
` + a, B = E.join(k);
        _ = `[
` + a + B + `,
` + y + "]";
      }
      return s.pop(), a = y, _;
    }
    i(P, "serializeArray");
  }, "stringify");
});

// ../node_modules/json5/lib/index.js
var yC = A((DCe, mC) => {
  var Hue = fC(), Yue = hC(), Jue = {
    parse: Hue,
    stringify: Yue
  };
  mC.exports = Jue;
});

// ../node_modules/@babel/core/lib/config/helpers/config-api.js
var t0 = A((go) => {
  "use strict";
  Object.defineProperty(go, "__esModule", {
    value: !0
  });
  go.makeConfigAPI = EC;
  go.makePluginAPI = zue;
  go.makePresetAPI = TC;
  function bC() {
    let e = le("semver");
    return bC = /* @__PURE__ */ i(function() {
      return e;
    }, "_semver"), e;
  }
  i(bC, "_semver");
  var oc = bt(), gC = Qs();
  function EC(e) {
    let t = /* @__PURE__ */ i((n) => e.using((s) => n === void 0 ? s.envName : typeof n == "function" ? (0, gC.assertSimpleType)(n(s.envName)) :
    (Array.isArray(n) ? n : [n]).some((a) => {
      if (typeof a != "string")
        throw new Error("Unexpected non-string value");
      return a === s.envName;
    })), "env"), r = /* @__PURE__ */ i((n) => e.using((s) => (0, gC.assertSimpleType)(n(s.caller))), "caller");
    return {
      version: oc.version,
      cache: e.simple(),
      env: t,
      async: /* @__PURE__ */ i(() => !1, "async"),
      caller: r,
      assertVersion: Xue
    };
  }
  i(EC, "makeConfigAPI");
  function TC(e, t) {
    let r = /* @__PURE__ */ i(() => JSON.parse(e.using((s) => JSON.stringify(s.targets))), "targets"), n = /* @__PURE__ */ i((s) => {
      t.push(s);
    }, "addExternalDependency");
    return Object.assign({}, EC(e), {
      targets: r,
      addExternalDependency: n
    });
  }
  i(TC, "makePresetAPI");
  function zue(e, t) {
    let r = /* @__PURE__ */ i((n) => e.using((s) => s.assumptions[n]), "assumption");
    return Object.assign({}, TC(e, t), {
      assumption: r
    });
  }
  i(zue, "makePluginAPI");
  function Xue(e) {
    if (typeof e == "number") {
      if (!Number.isInteger(e))
        throw new Error("Expected string or integer value.");
      e = `^${e}.0.0-0`;
    }
    if (typeof e != "string")
      throw new Error("Expected string or integer value.");
    if (e === "*" || bC().satisfies(oc.version, e)) return;
    let t = Error.stackTraceLimit;
    typeof t == "number" && t < 25 && (Error.stackTraceLimit = 25);
    let r = new Error(`Requires Babel "${e}", but was loaded with "${oc.version}". If you are sure you have a compatible version of @babel/c\
ore, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the f\
irst entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
    throw typeof t == "number" && (Error.stackTraceLimit = t), Object.assign(r, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: oc.version,
      range: e
    });
  }
  i(Xue, "assertVersion");
});

// ../node_modules/@babel/core/lib/config/helpers/deep-array.js
var uc = A((lc) => {
  "use strict";
  Object.defineProperty(lc, "__esModule", {
    value: !0
  });
  lc.finalize = Que;
  lc.flattenToSet = Zue;
  function Que(e) {
    return Object.freeze(e);
  }
  i(Que, "finalize");
  function Zue(e) {
    let t = /* @__PURE__ */ new Set(), r = [e];
    for (; r.length > 0; )
      for (let n of r.pop())
        Array.isArray(n) ? r.push(n) : t.add(n);
    return t;
  }
  i(Zue, "flattenToSet");
});

// ../node_modules/@babel/core/lib/config/plugin.js
var pc = A((cc) => {
  "use strict";
  Object.defineProperty(cc, "__esModule", {
    value: !0
  });
  cc.default = void 0;
  var ece = uc(), r0 = class {
    static {
      i(this, "Plugin");
    }
    constructor(t, r, n, s = (0, ece.finalize)([])) {
      this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride =
      void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = t.name || n, this.manipulateOptions =
      t.manipulateOptions, this.post = t.post, this.pre = t.pre, this.visitor = t.visitor || {}, this.parserOverride = t.parserOverride, this.
      generatorOverride = t.generatorOverride, this.options = r, this.externalDependencies = s;
    }
  };
  cc.default = r0;
});

// ../node_modules/@babel/core/lib/gensync-utils/functional.js
var xC = A((n0) => {
  "use strict";
  Object.defineProperty(n0, "__esModule", {
    value: !0
  });
  n0.once = tce;
  var SC = hs();
  function tce(e) {
    let t, r, n = !1;
    return function* () {
      if (!t) {
        if (r)
          return n = !0, yield* (0, SC.waitFor)(r);
        if (yield* (0, SC.isAsync)()) {
          let s, a;
          r = new Promise((o, l) => {
            s = o, a = l;
          });
          try {
            t = {
              ok: !0,
              value: yield* e()
            }, r = null, n && s(t.value);
          } catch (o) {
            t = {
              ok: !1,
              value: o
            }, r = null, n && a(o);
          }
        } else
          try {
            t = {
              ok: !0,
              value: yield* e()
            };
          } catch (s) {
            t = {
              ok: !1,
              value: s
            };
          }
      }
      if (t.ok) return t.value;
      throw t.value;
    };
  }
  i(tce, "once");
});

// ../node_modules/node-releases/data/processed/envs.json
var vC = A((jCe, rce) => {
  rce.exports = [{ name: "nodejs", version: "0.2.0", date: "2011-08-26", lts: !1, security: !1, v8: "2.3.8.0" }, { name: "nodejs", version: "\
0.3.0", date: "2011-08-26", lts: !1, security: !1, v8: "2.5.1.0" }, { name: "nodejs", version: "0.4.0", date: "2011-08-26", lts: !1, security: !1,
  v8: "3.1.2.0" }, { name: "nodejs", version: "0.5.0", date: "2011-08-26", lts: !1, security: !1, v8: "3.1.8.25" }, { name: "nodejs", version: "\
0.6.0", date: "2011-11-04", lts: !1, security: !1, v8: "3.6.6.6" }, { name: "nodejs", version: "0.7.0", date: "2012-01-17", lts: !1, security: !1,
  v8: "3.8.6.0" }, { name: "nodejs", version: "0.8.0", date: "2012-06-22", lts: !1, security: !1, v8: "3.11.10.10" }, { name: "nodejs", version: "\
0.9.0", date: "2012-07-20", lts: !1, security: !1, v8: "3.11.10.15" }, { name: "nodejs", version: "0.10.0", date: "2013-03-11", lts: !1, security: !1,
  v8: "3.14.5.8" }, { name: "nodejs", version: "0.11.0", date: "2013-03-28", lts: !1, security: !1, v8: "3.17.13.0" }, { name: "nodejs", version: "\
0.12.0", date: "2015-02-06", lts: !1, security: !1, v8: "3.28.73.0" }, { name: "nodejs", version: "4.0.0", date: "2015-09-08", lts: !1, security: !1,
  v8: "4.5.103.30" }, { name: "nodejs", version: "4.1.0", date: "2015-09-17", lts: !1, security: !1, v8: "4.5.103.33" }, { name: "nodejs", version: "\
4.2.0", date: "2015-10-12", lts: "Argon", security: !1, v8: "4.5.103.35" }, { name: "nodejs", version: "4.3.0", date: "2016-02-09", lts: "Ar\
gon", security: !1, v8: "4.5.103.35" }, { name: "nodejs", version: "4.4.0", date: "2016-03-08", lts: "Argon", security: !1, v8: "4.5.103.35" },
  { name: "nodejs", version: "4.5.0", date: "2016-08-16", lts: "Argon", security: !1, v8: "4.5.103.37" }, { name: "nodejs", version: "4.6.0",
  date: "2016-09-27", lts: "Argon", security: !0, v8: "4.5.103.37" }, { name: "nodejs", version: "4.7.0", date: "2016-12-06", lts: "Argon", security: !1,
  v8: "4.5.103.43" }, { name: "nodejs", version: "4.8.0", date: "2017-02-21", lts: "Argon", security: !1, v8: "4.5.103.45" }, { name: "nodej\
s", version: "4.9.0", date: "2018-03-28", lts: "Argon", security: !0, v8: "4.5.103.53" }, { name: "nodejs", version: "5.0.0", date: "2015-10\
-29", lts: !1, security: !1, v8: "4.6.85.28" }, { name: "nodejs", version: "5.1.0", date: "2015-11-17", lts: !1, security: !1, v8: "4.6.85.3\
1" }, { name: "nodejs", version: "5.2.0", date: "2015-12-09", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.3.0", date: "\
2015-12-15", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.4.0", date: "2016-01-06", lts: !1, security: !1, v8: "4\
.6.85.31" }, { name: "nodejs", version: "5.5.0", date: "2016-01-21", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5\
.6.0", date: "2016-02-09", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.7.0", date: "2016-02-23", lts: !1, security: !1,
  v8: "4.6.85.31" }, { name: "nodejs", version: "5.8.0", date: "2016-03-09", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "\
5.9.0", date: "2016-03-16", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.10.0", date: "2016-04-01", lts: !1, security: !1,
  v8: "4.6.85.31" }, { name: "nodejs", version: "5.11.0", date: "2016-04-21", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "\
5.12.0", date: "2016-06-23", lts: !1, security: !1, v8: "4.6.85.32" }, { name: "nodejs", version: "6.0.0", date: "2016-04-26", lts: !1, security: !1,
  v8: "5.0.71.35" }, { name: "nodejs", version: "6.1.0", date: "2016-05-05", lts: !1, security: !1, v8: "5.0.71.35" }, { name: "nodejs", version: "\
6.2.0", date: "2016-05-17", lts: !1, security: !1, v8: "5.0.71.47" }, { name: "nodejs", version: "6.3.0", date: "2016-07-06", lts: !1, security: !1,
  v8: "5.0.71.52" }, { name: "nodejs", version: "6.4.0", date: "2016-08-12", lts: !1, security: !1, v8: "5.0.71.60" }, { name: "nodejs", version: "\
6.5.0", date: "2016-08-26", lts: !1, security: !1, v8: "5.1.281.81" }, { name: "nodejs", version: "6.6.0", date: "2016-09-14", lts: !1, security: !1,
  v8: "5.1.281.83" }, { name: "nodejs", version: "6.7.0", date: "2016-09-27", lts: !1, security: !0, v8: "5.1.281.83" }, { name: "nodejs", version: "\
6.8.0", date: "2016-10-12", lts: !1, security: !1, v8: "5.1.281.84" }, { name: "nodejs", version: "6.9.0", date: "2016-10-18", lts: "Boron",
  security: !1, v8: "5.1.281.84" }, { name: "nodejs", version: "6.10.0", date: "2017-02-21", lts: "Boron", security: !1, v8: "5.1.281.93" },
  { name: "nodejs", version: "6.11.0", date: "2017-06-06", lts: "Boron", security: !1, v8: "5.1.281.102" }, { name: "nodejs", version: "6.12\
.0", date: "2017-11-06", lts: "Boron", security: !1, v8: "5.1.281.108" }, { name: "nodejs", version: "6.13.0", date: "2018-02-10", lts: "Bor\
on", security: !1, v8: "5.1.281.111" }, { name: "nodejs", version: "6.14.0", date: "2018-03-28", lts: "Boron", security: !0, v8: "5.1.281.11\
1" }, { name: "nodejs", version: "6.15.0", date: "2018-11-27", lts: "Boron", security: !0, v8: "5.1.281.111" }, { name: "nodejs", version: "\
6.16.0", date: "2018-12-26", lts: "Boron", security: !1, v8: "5.1.281.111" }, { name: "nodejs", version: "6.17.0", date: "2019-02-28", lts: "\
Boron", security: !0, v8: "5.1.281.111" }, { name: "nodejs", version: "7.0.0", date: "2016-10-25", lts: !1, security: !1, v8: "5.4.500.36" },
  { name: "nodejs", version: "7.1.0", date: "2016-11-08", lts: !1, security: !1, v8: "5.4.500.36" }, { name: "nodejs", version: "7.2.0", date: "\
2016-11-22", lts: !1, security: !1, v8: "5.4.500.43" }, { name: "nodejs", version: "7.3.0", date: "2016-12-20", lts: !1, security: !1, v8: "\
5.4.500.45" }, { name: "nodejs", version: "7.4.0", date: "2017-01-04", lts: !1, security: !1, v8: "5.4.500.45" }, { name: "nodejs", version: "\
7.5.0", date: "2017-01-31", lts: !1, security: !1, v8: "5.4.500.48" }, { name: "nodejs", version: "7.6.0", date: "2017-02-21", lts: !1, security: !1,
  v8: "5.5.372.40" }, { name: "nodejs", version: "7.7.0", date: "2017-02-28", lts: !1, security: !1, v8: "5.5.372.41" }, { name: "nodejs", version: "\
7.8.0", date: "2017-03-29", lts: !1, security: !1, v8: "5.5.372.43" }, { name: "nodejs", version: "7.9.0", date: "2017-04-11", lts: !1, security: !1,
  v8: "5.5.372.43" }, { name: "nodejs", version: "7.10.0", date: "2017-05-02", lts: !1, security: !1, v8: "5.5.372.43" }, { name: "nodejs", version: "\
8.0.0", date: "2017-05-30", lts: !1, security: !1, v8: "5.8.283.41" }, { name: "nodejs", version: "8.1.0", date: "2017-06-08", lts: !1, security: !1,
  v8: "5.8.283.41" }, { name: "nodejs", version: "8.2.0", date: "2017-07-19", lts: !1, security: !1, v8: "5.8.283.41" }, { name: "nodejs", version: "\
8.3.0", date: "2017-08-08", lts: !1, security: !1, v8: "6.0.286.52" }, { name: "nodejs", version: "8.4.0", date: "2017-08-15", lts: !1, security: !1,
  v8: "6.0.286.52" }, { name: "nodejs", version: "8.5.0", date: "2017-09-12", lts: !1, security: !1, v8: "6.0.287.53" }, { name: "nodejs", version: "\
8.6.0", date: "2017-09-26", lts: !1, security: !1, v8: "6.0.287.53" }, { name: "nodejs", version: "8.7.0", date: "2017-10-11", lts: !1, security: !1,
  v8: "6.1.534.42" }, { name: "nodejs", version: "8.8.0", date: "2017-10-24", lts: !1, security: !1, v8: "6.1.534.42" }, { name: "nodejs", version: "\
8.9.0", date: "2017-10-31", lts: "Carbon", security: !1, v8: "6.1.534.46" }, { name: "nodejs", version: "8.10.0", date: "2018-03-06", lts: "\
Carbon", security: !1, v8: "6.2.414.50" }, { name: "nodejs", version: "8.11.0", date: "2018-03-28", lts: "Carbon", security: !0, v8: "6.2.41\
4.50" }, { name: "nodejs", version: "8.12.0", date: "2018-09-10", lts: "Carbon", security: !1, v8: "6.2.414.66" }, { name: "nodejs", version: "\
8.13.0", date: "2018-11-20", lts: "Carbon", security: !1, v8: "6.2.414.72" }, { name: "nodejs", version: "8.14.0", date: "2018-11-27", lts: "\
Carbon", security: !0, v8: "6.2.414.72" }, { name: "nodejs", version: "8.15.0", date: "2018-12-26", lts: "Carbon", security: !1, v8: "6.2.41\
4.75" }, { name: "nodejs", version: "8.16.0", date: "2019-04-16", lts: "Carbon", security: !1, v8: "6.2.414.77" }, { name: "nodejs", version: "\
8.17.0", date: "2019-12-17", lts: "Carbon", security: !0, v8: "6.2.414.78" }, { name: "nodejs", version: "9.0.0", date: "2017-10-31", lts: !1,
  security: !1, v8: "6.2.414.32" }, { name: "nodejs", version: "9.1.0", date: "2017-11-07", lts: !1, security: !1, v8: "6.2.414.32" }, { name: "\
nodejs", version: "9.2.0", date: "2017-11-14", lts: !1, security: !1, v8: "6.2.414.44" }, { name: "nodejs", version: "9.3.0", date: "2017-12\
-12", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.4.0", date: "2018-01-10", lts: !1, security: !1, v8: "6.2.414\
.46" }, { name: "nodejs", version: "9.5.0", date: "2018-01-31", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.6.0",
  date: "2018-02-21", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.7.0", date: "2018-03-01", lts: !1, security: !1,
  v8: "6.2.414.46" }, { name: "nodejs", version: "9.8.0", date: "2018-03-07", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "\
9.9.0", date: "2018-03-21", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.10.0", date: "2018-03-28", lts: !1, security: !0,
  v8: "6.2.414.46" }, { name: "nodejs", version: "9.11.0", date: "2018-04-04", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "\
10.0.0", date: "2018-04-24", lts: !1, security: !1, v8: "6.6.346.24" }, { name: "nodejs", version: "10.1.0", date: "2018-05-08", lts: !1, security: !1,
  v8: "6.6.346.27" }, { name: "nodejs", version: "10.2.0", date: "2018-05-23", lts: !1, security: !1, v8: "6.6.346.32" }, { name: "nodejs", version: "\
10.3.0", date: "2018-05-29", lts: !1, security: !1, v8: "6.6.346.32" }, { name: "nodejs", version: "10.4.0", date: "2018-06-06", lts: !1, security: !1,
  v8: "6.7.288.43" }, { name: "nodejs", version: "10.5.0", date: "2018-06-20", lts: !1, security: !1, v8: "6.7.288.46" }, { name: "nodejs", version: "\
10.6.0", date: "2018-07-04", lts: !1, security: !1, v8: "6.7.288.46" }, { name: "nodejs", version: "10.7.0", date: "2018-07-18", lts: !1, security: !1,
  v8: "6.7.288.49" }, { name: "nodejs", version: "10.8.0", date: "2018-08-01", lts: !1, security: !1, v8: "6.7.288.49" }, { name: "nodejs", version: "\
10.9.0", date: "2018-08-15", lts: !1, security: !1, v8: "6.8.275.24" }, { name: "nodejs", version: "10.10.0", date: "2018-09-06", lts: !1, security: !1,
  v8: "6.8.275.30" }, { name: "nodejs", version: "10.11.0", date: "2018-09-19", lts: !1, security: !1, v8: "6.8.275.32" }, { name: "nodejs",
  version: "10.12.0", date: "2018-10-10", lts: !1, security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.13.0", date: "2018-10-30",
  lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.14.0", date: "2018-11-27", lts: "Dubnium", security: !0, v8: "\
6.8.275.32" }, { name: "nodejs", version: "10.15.0", date: "2018-12-26", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs",
  version: "10.16.0", date: "2019-05-28", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.17.0", date: "201\
9-10-22", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.18.0", date: "2019-12-17", lts: "Dubnium", security: !0,
  v8: "6.8.275.32" }, { name: "nodejs", version: "10.19.0", date: "2020-02-05", lts: "Dubnium", security: !0, v8: "6.8.275.32" }, { name: "n\
odejs", version: "10.20.0", date: "2020-03-26", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.21.0", date: "\
2020-06-02", lts: "Dubnium", security: !0, v8: "6.8.275.32" }, { name: "nodejs", version: "10.22.0", date: "2020-07-21", lts: "Dubnium", security: !1,
  v8: "6.8.275.32" }, { name: "nodejs", version: "10.23.0", date: "2020-10-27", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "n\
odejs", version: "10.24.0", date: "2021-02-23", lts: "Dubnium", security: !0, v8: "6.8.275.32" }, { name: "nodejs", version: "11.0.0", date: "\
2018-10-23", lts: !1, security: !1, v8: "7.0.276.28" }, { name: "nodejs", version: "11.1.0", date: "2018-10-30", lts: !1, security: !1, v8: "\
7.0.276.32" }, { name: "nodejs", version: "11.2.0", date: "2018-11-15", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "\
11.3.0", date: "2018-11-27", lts: !1, security: !0, v8: "7.0.276.38" }, { name: "nodejs", version: "11.4.0", date: "2018-12-07", lts: !1, security: !1,
  v8: "7.0.276.38" }, { name: "nodejs", version: "11.5.0", date: "2018-12-18", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "\
11.6.0", date: "2018-12-26", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.7.0", date: "2019-01-17", lts: !1, security: !1,
  v8: "7.0.276.38" }, { name: "nodejs", version: "11.8.0", date: "2019-01-24", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "\
11.9.0", date: "2019-01-30", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.10.0", date: "2019-02-14", lts: !1, security: !1,
  v8: "7.0.276.38" }, { name: "nodejs", version: "11.11.0", date: "2019-03-05", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs",
  version: "11.12.0", date: "2019-03-14", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.13.0", date: "2019-03-28",
  lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.14.0", date: "2019-04-10", lts: !1, security: !1, v8: "7.0.276.3\
8" }, { name: "nodejs", version: "11.15.0", date: "2019-04-30", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "12.0.\
0", date: "2019-04-23", lts: !1, security: !1, v8: "7.4.288.21" }, { name: "nodejs", version: "12.1.0", date: "2019-04-29", lts: !1, security: !1,
  v8: "7.4.288.21" }, { name: "nodejs", version: "12.2.0", date: "2019-05-07", lts: !1, security: !1, v8: "7.4.288.21" }, { name: "nodejs", version: "\
12.3.0", date: "2019-05-21", lts: !1, security: !1, v8: "7.4.288.27" }, { name: "nodejs", version: "12.4.0", date: "2019-06-04", lts: !1, security: !1,
  v8: "7.4.288.27" }, { name: "nodejs", version: "12.5.0", date: "2019-06-26", lts: !1, security: !1, v8: "7.5.288.22" }, { name: "nodejs", version: "\
12.6.0", date: "2019-07-03", lts: !1, security: !1, v8: "7.5.288.22" }, { name: "nodejs", version: "12.7.0", date: "2019-07-23", lts: !1, security: !1,
  v8: "7.5.288.22" }, { name: "nodejs", version: "12.8.0", date: "2019-08-06", lts: !1, security: !1, v8: "7.5.288.22" }, { name: "nodejs", version: "\
12.9.0", date: "2019-08-20", lts: !1, security: !1, v8: "7.6.303.29" }, { name: "nodejs", version: "12.10.0", date: "2019-09-04", lts: !1, security: !1,
  v8: "7.6.303.29" }, { name: "nodejs", version: "12.11.0", date: "2019-09-25", lts: !1, security: !1, v8: "7.7.299.11" }, { name: "nodejs",
  version: "12.12.0", date: "2019-10-11", lts: !1, security: !1, v8: "7.7.299.13" }, { name: "nodejs", version: "12.13.0", date: "2019-10-21",
  lts: "Erbium", security: !1, v8: "7.7.299.13" }, { name: "nodejs", version: "12.14.0", date: "2019-12-17", lts: "Erbium", security: !0, v8: "\
7.7.299.13" }, { name: "nodejs", version: "12.15.0", date: "2020-02-05", lts: "Erbium", security: !0, v8: "7.7.299.13" }, { name: "nodejs", version: "\
12.16.0", date: "2020-02-11", lts: "Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "12.17.0", date: "2020-05-26", lts: "\
Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "12.18.0", date: "2020-06-02", lts: "Erbium", security: !0, v8: "7.8.2\
79.23" }, { name: "nodejs", version: "12.19.0", date: "2020-10-06", lts: "Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "\
12.20.0", date: "2020-11-24", lts: "Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "12.21.0", date: "2021-02-23", lts: "\
Erbium", security: !0, v8: "7.8.279.23" }, { name: "nodejs", version: "12.22.0", date: "2021-03-30", lts: "Erbium", security: !1, v8: "7.8.2\
79.23" }, { name: "nodejs", version: "13.0.0", date: "2019-10-22", lts: !1, security: !1, v8: "7.8.279.17" }, { name: "nodejs", version: "13\
.1.0", date: "2019-11-05", lts: !1, security: !1, v8: "7.8.279.17" }, { name: "nodejs", version: "13.2.0", date: "2019-11-21", lts: !1, security: !1,
  v8: "7.9.317.23" }, { name: "nodejs", version: "13.3.0", date: "2019-12-03", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "\
13.4.0", date: "2019-12-17", lts: !1, security: !0, v8: "7.9.317.25" }, { name: "nodejs", version: "13.5.0", date: "2019-12-18", lts: !1, security: !1,
  v8: "7.9.317.25" }, { name: "nodejs", version: "13.6.0", date: "2020-01-07", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "\
13.7.0", date: "2020-01-21", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "13.8.0", date: "2020-02-05", lts: !1, security: !0,
  v8: "7.9.317.25" }, { name: "nodejs", version: "13.9.0", date: "2020-02-18", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "\
13.10.0", date: "2020-03-04", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "13.11.0", date: "2020-03-12", lts: !1, security: !1,
  v8: "7.9.317.25" }, { name: "nodejs", version: "13.12.0", date: "2020-03-26", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs",
  version: "13.13.0", date: "2020-04-14", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "13.14.0", date: "2020-04-29",
  lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "14.0.0", date: "2020-04-21", lts: !1, security: !1, v8: "8.1.307.30" },
  { name: "nodejs", version: "14.1.0", date: "2020-04-29", lts: !1, security: !1, v8: "8.1.307.31" }, { name: "nodejs", version: "14.2.0", date: "\
2020-05-05", lts: !1, security: !1, v8: "8.1.307.31" }, { name: "nodejs", version: "14.3.0", date: "2020-05-19", lts: !1, security: !1, v8: "\
8.1.307.31" }, { name: "nodejs", version: "14.4.0", date: "2020-06-02", lts: !1, security: !0, v8: "8.1.307.31" }, { name: "nodejs", version: "\
14.5.0", date: "2020-06-30", lts: !1, security: !1, v8: "8.3.110.9" }, { name: "nodejs", version: "14.6.0", date: "2020-07-20", lts: !1, security: !1,
  v8: "8.4.371.19" }, { name: "nodejs", version: "14.7.0", date: "2020-07-29", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "\
14.8.0", date: "2020-08-11", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.9.0", date: "2020-08-27", lts: !1, security: !1,
  v8: "8.4.371.19" }, { name: "nodejs", version: "14.10.0", date: "2020-09-08", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs",
  version: "14.11.0", date: "2020-09-15", lts: !1, security: !0, v8: "8.4.371.19" }, { name: "nodejs", version: "14.12.0", date: "2020-09-22",
  lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.13.0", date: "2020-09-29", lts: !1, security: !1, v8: "8.4.371.1\
9" }, { name: "nodejs", version: "14.14.0", date: "2020-10-15", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.15\
.0", date: "2020-10-27", lts: "Fermium", security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.16.0", date: "2021-02-23", lts: "F\
ermium", security: !0, v8: "8.4.371.19" }, { name: "nodejs", version: "14.17.0", date: "2021-05-11", lts: "Fermium", security: !1, v8: "8.4.\
371.23" }, { name: "nodejs", version: "14.18.0", date: "2021-09-28", lts: "Fermium", security: !1, v8: "8.4.371.23" }, { name: "nodejs", version: "\
14.19.0", date: "2022-02-01", lts: "Fermium", security: !1, v8: "8.4.371.23" }, { name: "nodejs", version: "14.20.0", date: "2022-07-07", lts: "\
Fermium", security: !0, v8: "8.4.371.23" }, { name: "nodejs", version: "14.21.0", date: "2022-11-01", lts: "Fermium", security: !1, v8: "8.4\
.371.23" }, { name: "nodejs", version: "15.0.0", date: "2020-10-20", lts: !1, security: !1, v8: "8.6.395.16" }, { name: "nodejs", version: "\
15.1.0", date: "2020-11-04", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.2.0", date: "2020-11-10", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.3.0", date: "2020-11-24", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "\
15.4.0", date: "2020-12-09", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.5.0", date: "2020-12-22", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.6.0", date: "2021-01-14", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "\
15.7.0", date: "2021-01-25", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.8.0", date: "2021-02-02", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.9.0", date: "2021-02-18", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "\
15.10.0", date: "2021-02-23", lts: !1, security: !0, v8: "8.6.395.17" }, { name: "nodejs", version: "15.11.0", date: "2021-03-03", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.12.0", date: "2021-03-17", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs",
  version: "15.13.0", date: "2021-03-31", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.14.0", date: "2021-04-06",
  lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "16.0.0", date: "2021-04-20", lts: !1, security: !1, v8: "9.0.257.17" },
  { name: "nodejs", version: "16.1.0", date: "2021-05-04", lts: !1, security: !1, v8: "9.0.257.24" }, { name: "nodejs", version: "16.2.0", date: "\
2021-05-19", lts: !1, security: !1, v8: "9.0.257.25" }, { name: "nodejs", version: "16.3.0", date: "2021-06-03", lts: !1, security: !1, v8: "\
9.0.257.25" }, { name: "nodejs", version: "16.4.0", date: "2021-06-23", lts: !1, security: !1, v8: "9.1.269.36" }, { name: "nodejs", version: "\
16.5.0", date: "2021-07-14", lts: !1, security: !1, v8: "9.1.269.38" }, { name: "nodejs", version: "16.6.0", date: "2021-07-29", lts: !1, security: !0,
  v8: "9.2.230.21" }, { name: "nodejs", version: "16.7.0", date: "2021-08-18", lts: !1, security: !1, v8: "9.2.230.21" }, { name: "nodejs", version: "\
16.8.0", date: "2021-08-25", lts: !1, security: !1, v8: "9.2.230.21" }, { name: "nodejs", version: "16.9.0", date: "2021-09-07", lts: !1, security: !1,
  v8: "9.3.345.16" }, { name: "nodejs", version: "16.10.0", date: "2021-09-22", lts: !1, security: !1, v8: "9.3.345.19" }, { name: "nodejs",
  version: "16.11.0", date: "2021-10-08", lts: !1, security: !1, v8: "9.4.146.19" }, { name: "nodejs", version: "16.12.0", date: "2021-10-20",
  lts: !1, security: !1, v8: "9.4.146.19" }, { name: "nodejs", version: "16.13.0", date: "2021-10-26", lts: "Gallium", security: !1, v8: "9.\
4.146.19" }, { name: "nodejs", version: "16.14.0", date: "2022-02-08", lts: "Gallium", security: !1, v8: "9.4.146.24" }, { name: "nodejs", version: "\
16.15.0", date: "2022-04-26", lts: "Gallium", security: !1, v8: "9.4.146.24" }, { name: "nodejs", version: "16.16.0", date: "2022-07-07", lts: "\
Gallium", security: !0, v8: "9.4.146.24" }, { name: "nodejs", version: "16.17.0", date: "2022-08-16", lts: "Gallium", security: !1, v8: "9.4\
.146.26" }, { name: "nodejs", version: "16.18.0", date: "2022-10-12", lts: "Gallium", security: !1, v8: "9.4.146.26" }, { name: "nodejs", version: "\
16.19.0", date: "2022-12-13", lts: "Gallium", security: !1, v8: "9.4.146.26" }, { name: "nodejs", version: "16.20.0", date: "2023-03-28", lts: "\
Gallium", security: !1, v8: "9.4.146.26" }, { name: "nodejs", version: "17.0.0", date: "2021-10-19", lts: !1, security: !1, v8: "9.5.172.21" },
  { name: "nodejs", version: "17.1.0", date: "2021-11-09", lts: !1, security: !1, v8: "9.5.172.25" }, { name: "nodejs", version: "17.2.0", date: "\
2021-11-30", lts: !1, security: !1, v8: "9.6.180.14" }, { name: "nodejs", version: "17.3.0", date: "2021-12-17", lts: !1, security: !1, v8: "\
9.6.180.15" }, { name: "nodejs", version: "17.4.0", date: "2022-01-18", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "\
17.5.0", date: "2022-02-10", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "17.6.0", date: "2022-02-22", lts: !1, security: !1,
  v8: "9.6.180.15" }, { name: "nodejs", version: "17.7.0", date: "2022-03-09", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "\
17.8.0", date: "2022-03-22", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "17.9.0", date: "2022-04-07", lts: !1, security: !1,
  v8: "9.6.180.15" }, { name: "nodejs", version: "18.0.0", date: "2022-04-18", lts: !1, security: !1, v8: "10.1.124.8" }, { name: "nodejs", version: "\
18.1.0", date: "2022-05-03", lts: !1, security: !1, v8: "10.1.124.8" }, { name: "nodejs", version: "18.2.0", date: "2022-05-17", lts: !1, security: !1,
  v8: "10.1.124.8" }, { name: "nodejs", version: "18.3.0", date: "2022-06-02", lts: !1, security: !1, v8: "10.2.154.4" }, { name: "nodejs", version: "\
18.4.0", date: "2022-06-16", lts: !1, security: !1, v8: "10.2.154.4" }, { name: "nodejs", version: "18.5.0", date: "2022-07-06", lts: !1, security: !0,
  v8: "10.2.154.4" }, { name: "nodejs", version: "18.6.0", date: "2022-07-13", lts: !1, security: !1, v8: "10.2.154.13" }, { name: "nodejs",
  version: "18.7.0", date: "2022-07-26", lts: !1, security: !1, v8: "10.2.154.13" }, { name: "nodejs", version: "18.8.0", date: "2022-08-24",
  lts: !1, security: !1, v8: "10.2.154.13" }, { name: "nodejs", version: "18.9.0", date: "2022-09-07", lts: !1, security: !1, v8: "10.2.154.\
15" }, { name: "nodejs", version: "18.10.0", date: "2022-09-28", lts: !1, security: !1, v8: "10.2.154.15" }, { name: "nodejs", version: "18.\
11.0", date: "2022-10-13", lts: !1, security: !1, v8: "10.2.154.15" }, { name: "nodejs", version: "18.12.0", date: "2022-10-25", lts: "Hydro\
gen", security: !1, v8: "10.2.154.15" }, { name: "nodejs", version: "18.13.0", date: "2023-01-05", lts: "Hydrogen", security: !1, v8: "10.2.\
154.23" }, { name: "nodejs", version: "18.14.0", date: "2023-02-01", lts: "Hydrogen", security: !1, v8: "10.2.154.23" }, { name: "nodejs", version: "\
18.15.0", date: "2023-03-05", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "18.16.0", date: "2023-04-12", lts: "\
Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "18.17.0", date: "2023-07-18", lts: "Hydrogen", security: !1, v8: "\
10.2.154.26" }, { name: "nodejs", version: "18.18.0", date: "2023-09-18", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodej\
s", version: "18.19.0", date: "2023-11-29", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "18.20.0", date: "\
2024-03-26", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "19.0.0", date: "2022-10-17", lts: !1, security: !1,
  v8: "10.7.193.13" }, { name: "nodejs", version: "19.1.0", date: "2022-11-14", lts: !1, security: !1, v8: "10.7.193.20" }, { name: "nodejs",
  version: "19.2.0", date: "2022-11-29", lts: !1, security: !1, v8: "10.8.168.20" }, { name: "nodejs", version: "19.3.0", date: "2022-12-14",
  lts: !1, security: !1, v8: "10.8.168.21" }, { name: "nodejs", version: "19.4.0", date: "2023-01-05", lts: !1, security: !1, v8: "10.8.168.\
25" }, { name: "nodejs", version: "19.5.0", date: "2023-01-24", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs", version: "19.6\
.0", date: "2023-02-01", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs", version: "19.7.0", date: "2023-02-21", lts: !1, security: !1,
  v8: "10.8.168.25" }, { name: "nodejs", version: "19.8.0", date: "2023-03-14", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs",
  version: "19.9.0", date: "2023-04-10", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs", version: "20.0.0", date: "2023-04-17",
  lts: !1, security: !1, v8: "11.3.244.4" }, { name: "nodejs", version: "20.1.0", date: "2023-05-03", lts: !1, security: !1, v8: "11.3.244.8" },
  { name: "nodejs", version: "20.2.0", date: "2023-05-16", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.3.0", date: "\
2023-06-08", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.4.0", date: "2023-07-04", lts: !1, security: !1, v8: "\
11.3.244.8" }, { name: "nodejs", version: "20.5.0", date: "2023-07-19", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "\
20.6.0", date: "2023-08-23", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.7.0", date: "2023-09-18", lts: !1, security: !1,
  v8: "11.3.244.8" }, { name: "nodejs", version: "20.8.0", date: "2023-09-28", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "\
20.9.0", date: "2023-10-24", lts: "Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.10.0", date: "2023-11-22", lts: "\
Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.11.0", date: "2024-01-09", lts: "Iron", security: !1, v8: "11.3.244.\
8" }, { name: "nodejs", version: "20.12.0", date: "2024-03-26", lts: "Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "2\
0.13.0", date: "2024-05-07", lts: "Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.14.0", date: "2024-05-28", lts: "\
Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.15.0", date: "2024-06-20", lts: "Iron", security: !1, v8: "11.3.244.\
8" }, { name: "nodejs", version: "21.0.0", date: "2023-10-17", lts: !1, security: !1, v8: "11.8.172.13" }, { name: "nodejs", version: "21.1.\
0", date: "2023-10-24", lts: !1, security: !1, v8: "11.8.172.15" }, { name: "nodejs", version: "21.2.0", date: "2023-11-14", lts: !1, security: !1,
  v8: "11.8.172.17" }, { name: "nodejs", version: "21.3.0", date: "2023-11-30", lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs",
  version: "21.4.0", date: "2023-12-05", lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs", version: "21.5.0", date: "2023-12-19",
  lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs", version: "21.6.0", date: "2024-01-14", lts: !1, security: !1, v8: "11.8.172.\
17" }, { name: "nodejs", version: "21.7.0", date: "2024-03-06", lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs", version: "22.0\
.0", date: "2024-04-24", lts: !1, security: !1, v8: "12.4.254.14" }, { name: "nodejs", version: "22.1.0", date: "2024-05-02", lts: !1, security: !1,
  v8: "12.4.254.14" }, { name: "nodejs", version: "22.2.0", date: "2024-05-15", lts: !1, security: !1, v8: "12.4.254.14" }, { name: "nodejs",
  version: "22.3.0", date: "2024-06-11", lts: !1, security: !1, v8: "12.4.254.20" }, { name: "nodejs", version: "22.4.0", date: "2024-07-02",
  lts: !1, security: !1, v8: "12.4.254.21" }, { name: "nodejs", version: "22.5.0", date: "2024-07-17", lts: !1, security: !1, v8: "12.4.254.\
21" }];
});

// ../node_modules/caniuse-lite/data/browsers.js
var AC = A((LCe, PC) => {
  PC.exports = { A: "ie", B: "edge", C: "firefox", D: "chrome", E: "safari", F: "opera", G: "ios_saf", H: "op_mini", I: "android", J: "bb", K: "\
op_mob", L: "and_chr", M: "and_ff", N: "ie_mob", O: "and_uc", P: "samsung", Q: "and_qq", R: "baidu", S: "kaios" };
});

// ../node_modules/caniuse-lite/dist/unpacker/browsers.js
var fc = A((MCe, CC) => {
  CC.exports.browsers = AC();
});

// ../node_modules/caniuse-lite/data/browserVersions.js
var wC = A((RCe, DC) => {
  DC.exports = { 0: "22", 1: "23", 2: "24", 3: "25", 4: "26", 5: "115", 6: "116", 7: "117", 8: "118", 9: "119", A: "10", B: "11", C: "12", D: "\
130", E: "7", F: "8", G: "9", H: "15", I: "80", J: "4", K: "6", L: "13", M: "14", N: "16", O: "17", P: "18", Q: "79", R: "81", S: "83", T: "\
84", U: "85", V: "86", W: "87", X: "88", Y: "89", Z: "90", a: "91", b: "92", c: "93", d: "94", e: "95", f: "96", g: "97", h: "98", i: "99", j: "\
100", k: "101", l: "102", m: "103", n: "104", o: "105", p: "106", q: "107", r: "108", s: "109", t: "110", u: "111", v: "112", w: "113", x: "\
114", y: "20", z: "21", AB: "120", BB: "121", CB: "122", DB: "123", EB: "124", FB: "125", GB: "126", HB: "127", IB: "128", JB: "129", KB: "5",
  LB: "19", MB: "27", NB: "28", OB: "29", PB: "30", QB: "31", RB: "32", SB: "33", TB: "34", UB: "35", VB: "36", WB: "37", XB: "38", YB: "39",
  ZB: "40", aB: "41", bB: "42", cB: "43", dB: "44", eB: "45", fB: "46", gB: "47", hB: "48", iB: "49", jB: "50", kB: "51", lB: "52", mB: "53",
  nB: "54", oB: "55", pB: "56", qB: "57", rB: "58", sB: "60", tB: "62", uB: "63", vB: "64", wB: "65", xB: "66", yB: "67", zB: "68", "0B": "6\
9", "1B": "70", "2B": "71", "3B": "72", "4B": "73", "5B": "74", "6B": "75", "7B": "76", "8B": "77", "9B": "78", AC: "11.1", BC: "12.1", CC: "\
15.5", DC: "16.0", EC: "17.0", FC: "18.0", GC: "3", HC: "59", IC: "61", JC: "82", KC: "131", LC: "132", MC: "133", NC: "3.2", OC: "10.1", PC: "\
15.2-15.3", QC: "15.4", RC: "16.1", SC: "16.2", TC: "16.3", UC: "16.4", VC: "16.5", WC: "17.1", XC: "17.2", YC: "17.3", ZC: "17.4", aC: "17.\
5", bC: "18.1", cC: "11.5", dC: "4.2-4.3", eC: "5.5", fC: "2", gC: "134", hC: "135", iC: "3.5", jC: "3.6", kC: "3.1", lC: "5.1", mC: "6.1", nC: "\
7.1", oC: "9.1", pC: "13.1", qC: "14.1", rC: "15.1", sC: "15.6", tC: "16.6", uC: "17.6", vC: "TP", wC: "9.5-9.6", xC: "10.0-10.1", yC: "10.5",
  zC: "10.6", "0C": "11.6", "1C": "4.0-4.1", "2C": "5.0-5.1", "3C": "6.0-6.1", "4C": "7.0-7.1", "5C": "8.1-8.4", "6C": "9.0-9.2", "7C": "9.3",
  "8C": "10.0-10.2", "9C": "10.3", AD: "11.0-11.2", BD: "11.3-11.4", CD: "12.0-12.1", DD: "12.2-12.5", ED: "13.0-13.1", FD: "13.2", GD: "13.\
3", HD: "13.4-13.7", ID: "14.0-14.4", JD: "14.5-14.8", KD: "15.0-15.1", LD: "15.6-15.8", MD: "16.6-16.7", ND: "17.6-17.7", OD: "all", PD: "2\
.1", QD: "2.2", RD: "2.3", SD: "4.1", TD: "4.4", UD: "4.4.3-4.4.4", VD: "5.0-5.4", WD: "6.2-6.4", XD: "7.2-7.4", YD: "8.2", ZD: "9.2", aD: "\
11.1-11.2", bD: "12.0", cD: "13.0", dD: "14.0", eD: "15.0", fD: "19.0", gD: "14.9", hD: "13.52", iD: "2.5", jD: "3.0-3.1" };
});

// ../node_modules/caniuse-lite/dist/unpacker/browserVersions.js
var s0 = A((qCe, IC) => {
  IC.exports.browserVersions = wC();
});

// ../node_modules/caniuse-lite/data/agents.js
var OC = A((UCe, _C) => {
  _C.exports = { A: { A: { K: 0, E: 0, F: 0.0417486, G: 0.0417486, A: 0, B: 0.445318, eC: 0 }, B: "ms", C: ["", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "eC", "K", "E", "F", "G", "A", "B", "", "", ""], E: "IE", F: { eC: 962323200, K: 998870400,
  E: 1161129600, F: 1237420800, G: 1300060800, A: 1346716800, B: 1381968e3 } }, B: { A: { 5: 3647e-6, 6: 3647e-6, 7: 7294e-6, 8: 3647e-6, 9: 0.010941,
  C: 0, L: 0, M: 0, H: 0, N: 0, O: 3647e-6, P: 0.047411, Q: 0, I: 0, R: 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 0, Y: 0, Z: 0, a: 0, b: 0.014588,
  c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0, o: 0, p: 0, q: 3647e-6, r: 7294e-6, s: 0.061999, t: 7294e-6, u: 7294e-6,
  v: 3647e-6, w: 7294e-6, x: 0.010941, AB: 0.032823, BB: 0.014588, CB: 0.018235, DB: 0.010941, EB: 0.018235, FB: 0.025529, GB: 0.061999, HB: 0.193291,
  IB: 3.1656, JB: 1.29104, D: 3647e-6 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "C", "L", "M", "H", "N", "O", "P", "Q", "I", "R", "S", "T", "U",
  "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w",
  "x", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "D", "", "", ""], E: "Edge", F: { 5: 1689897600,
  6: 1692576e3, 7: 1694649600, 8: 1697155200, 9: 1698969600, C: 1438128e3, L: 1447286400, M: 1470096e3, H: 1491868800, N: 1508198400, O: 1525046400,
  P: 1542067200, Q: 1579046400, I: 1581033600, R: 1586736e3, S: 1590019200, T: 1594857600, U: 1598486400, V: 1602201600, W: 1605830400, X: 161136e4,
  Y: 1614816e3, Z: 1618358400, a: 1622073600, b: 1626912e3, c: 1630627200, d: 1632441600, e: 1634774400, f: 1637539200, g: 1641427200, h: 1643932800,
  i: 1646265600, j: 1649635200, k: 1651190400, l: 1653955200, m: 1655942400, n: 1659657600, o: 1661990400, p: 1664755200, q: 1666915200, r: 1670198400,
  s: 1673481600, t: 1675900800, u: 1678665600, v: 1680825600, w: 1683158400, x: 1685664e3, AB: 1701993600, BB: 1706227200, CB: 1708732800, DB: 1711152e3,
  EB: 1713398400, FB: 1715990400, GB: 1718841600, HB: 1721865600, IB: 1724371200, JB: 1726704e3, D: 1729123200 }, D: { C: "ms", L: "ms", M: "\
ms", H: "ms", N: "ms", O: "ms", P: "ms" } }, C: { A: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0.335524, 6: 0, 7: 3647e-6, 8: 0.076587, 9: 0, fC: 0,
  GC: 0, J: 3647e-6, KB: 0, K: 0, E: 0, F: 0, G: 0, A: 0, B: 0.014588, C: 0, L: 0, M: 0, H: 0, N: 0, O: 0, P: 0, LB: 0, y: 0, z: 0, MB: 0, NB: 0,
  OB: 0, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0, UB: 0, VB: 0, WB: 0, XB: 0, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 7294e-6, dB: 7294e-6, eB: 3647e-6, fB: 0,
  gB: 0, hB: 0, iB: 0, jB: 0, kB: 0, lB: 0.040117, mB: 0, nB: 0, oB: 3647e-6, pB: 0.014588, qB: 0, rB: 0, HC: 3647e-6, sB: 0, IC: 0, tB: 0, uB: 0,
  vB: 0, wB: 0, xB: 0, yB: 0, zB: 0, "0B": 0, "1B": 0, "2B": 0, "3B": 0, "4B": 0, "5B": 0, "6B": 0, "7B": 0, "8B": 0, "9B": 0.010941, Q: 0, I: 0,
  R: 0, JC: 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 7294e-6, Y: 0, Z: 0, a: 0, b: 0, c: 0, d: 3647e-6, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0,
  l: 3647e-6, m: 7294e-6, n: 0, o: 3647e-6, p: 0, q: 0, r: 0, s: 3647e-6, t: 0, u: 0, v: 0, w: 7294e-6, x: 0, AB: 7294e-6, BB: 3647e-6, CB: 3647e-6,
  DB: 3647e-6, EB: 3647e-6, FB: 0.014588, GB: 0.010941, HB: 0.021882, IB: 0.03647, JB: 0.299054, D: 1.30198, KC: 7294e-6, LC: 0, MC: 0, gC: 0,
  hC: 0, iC: 0, jC: 0 }, B: "moz", C: ["fC", "GC", "iC", "jC", "J", "KB", "K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "O", "P", "\
LB", "y", "z", "0", "1", "2", "3", "4", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB",
  "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "HC", "sB", "IC", "tB", "uB", "vB", "wB", "xB", "\
yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "7B", "8B", "9B", "Q", "I", "R", "JC", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b",
  "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "5", "6", "7", "8", "9", "AB",
  "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "D", "KC", "LC", "MC", "gC", "hC"], E: "Firefox", F: { 0: 1368489600, 1: 1372118400,
  2: 1375747200, 3: 1379376e3, 4: 1386633600, 5: 1688428800, 6: 1690848e3, 7: 1693267200, 8: 1695686400, 9: 1698105600, fC: 1161648e3, GC: 1213660800,
  iC: 124632e4, jC: 1264032e3, J: 1300752e3, KB: 1308614400, K: 1313452800, E: 1317081600, F: 1317081600, G: 1320710400, A: 1324339200, B: 1327968e3,
  C: 1331596800, L: 1335225600, M: 1338854400, H: 1342483200, N: 1346112e3, O: 1349740800, P: 1353628800, LB: 1357603200, y: 1361232e3, z: 1364860800,
  MB: 1391472e3, NB: 1395100800, OB: 1398729600, PB: 1402358400, QB: 1405987200, RB: 1409616e3, SB: 1413244800, TB: 1417392e3, UB: 1421107200,
  VB: 1424736e3, WB: 1428278400, XB: 1431475200, YB: 1435881600, ZB: 1439251200, aB: 144288e4, bB: 1446508800, cB: 1450137600, dB: 1453852800,
  eB: 1457395200, fB: 1461628800, gB: 1465257600, hB: 1470096e3, iB: 1474329600, jB: 1479168e3, kB: 1485216e3, lB: 1488844800, mB: 149256e4,
  nB: 1497312e3, oB: 1502150400, pB: 1506556800, qB: 1510617600, rB: 1516665600, HC: 1520985600, sB: 1525824e3, IC: 1529971200, tB: 1536105600,
  uB: 1540252800, vB: 1544486400, wB: 154872e4, xB: 1552953600, yB: 1558396800, zB: 1562630400, "0B": 1567468800, "1B": 1571788800, "2B": 1575331200,
  "3B": 1578355200, "4B": 1581379200, "5B": 1583798400, "6B": 1586304e3, "7B": 1588636800, "8B": 1591056e3, "9B": 1593475200, Q: 1595894400,
  I: 1598313600, R: 1600732800, JC: 1603152e3, S: 1605571200, T: 1607990400, U: 1611619200, V: 1614038400, W: 1616457600, X: 1618790400, Y: 1622505600,
  Z: 1626134400, a: 1628553600, b: 1630972800, c: 1633392e3, d: 1635811200, e: 1638835200, f: 1641859200, g: 1644364800, h: 1646697600, i: 1649116800,
  j: 1651536e3, k: 1653955200, l: 1656374400, m: 1658793600, n: 1661212800, o: 1663632e3, p: 1666051200, q: 1668470400, r: 1670889600, s: 1673913600,
  t: 1676332800, u: 1678752e3, v: 1681171200, w: 1683590400, x: 1686009600, AB: 1700524800, BB: 1702944e3, CB: 1705968e3, DB: 1708387200, EB: 1710806400,
  FB: 1713225600, GB: 1715644800, HB: 1718064e3, IB: 1720483200, JB: 1722902400, D: 1725321600, KC: 1727740800, LC: 173016e4, MC: null, gC: null,
  hC: null } }, D: { A: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0.025529, 6: 0.156821, 7: 0.098469, 8: 0.07294, 9: 0.058352, J: 0, KB: 0, K: 0, E: 0,
  F: 0, G: 0, A: 0, B: 0, C: 0, L: 0, M: 0, H: 0, N: 0, O: 0, P: 0, LB: 0, y: 0, z: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0,
  UB: 0, VB: 0, WB: 0, XB: 0.010941, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 0, dB: 0, eB: 0, fB: 0, gB: 3647e-6, hB: 0.018235, iB: 0.018235, jB: 7294e-6,
  kB: 3647e-6, lB: 3647e-6, mB: 7294e-6, nB: 0, oB: 0, pB: 0.021882, qB: 0, rB: 3647e-6, HC: 0, sB: 0, IC: 3647e-6, tB: 0, uB: 0, vB: 0, wB: 0,
  xB: 0.021882, yB: 3647e-6, zB: 0, "0B": 0.076587, "1B": 7294e-6, "2B": 0, "3B": 0, "4B": 7294e-6, "5B": 7294e-6, "6B": 7294e-6, "7B": 7294e-6,
  "8B": 0.018235, "9B": 0.014588, Q: 0.098469, I: 0.010941, R: 0.018235, S: 0.032823, T: 7294e-6, U: 7294e-6, V: 0.025529, W: 0.069293, X: 0.014588,
  Y: 0.010941, Z: 0.010941, a: 0.058352, b: 0.021882, c: 0.014588, d: 0.047411, e: 7294e-6, f: 7294e-6, g: 0.014588, h: 0.040117, i: 0.025529,
  j: 0.029176, k: 0.018235, l: 0.014588, m: 0.131292, n: 0.040117, o: 0.014588, p: 0.025529, q: 0.029176, r: 0.043764, s: 1.36033, t: 0.021882,
  u: 0.040117, v: 0.043764, w: 0.091175, x: 0.091175, AB: 0.094822, BB: 0.098469, CB: 0.10941, DB: 0.142233, EB: 0.262584, FB: 0.258937, GB: 0.419405,
  HB: 1.15975, IB: 12.4691, JB: 4.05546, D: 0.014588, KC: 3647e-6, LC: 0, MC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "J", "KB", "\
K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "O", "P", "LB", "y", "z", "0", "1", "2", "3", "4", "MB", "NB", "OB", "PB", "QB", "RB",
  "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "\
pB", "qB", "rB", "HC", "sB", "IC", "tB", "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "7B", "8B", "9B", "Q",
  "I", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
  "s", "t", "u", "v", "w", "x", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "D", "KC", "LC", "MC"],
  E: "Chrome", F: { 0: 1343692800, 1: 1348531200, 2: 1352246400, 3: 1357862400, 4: 1361404800, 5: 1689724800, 6: 1692057600, 7: 1694476800, 8: 1696896e3,
  9: 1698710400, J: 1264377600, KB: 1274745600, K: 1283385600, E: 1287619200, F: 1291248e3, G: 1296777600, A: 1299542400, B: 1303862400, C: 1307404800,
  L: 1312243200, M: 1316131200, H: 1316131200, N: 1319500800, O: 1323734400, P: 1328659200, LB: 1332892800, y: 133704e4, z: 1340668800, MB: 1364428800,
  NB: 1369094400, OB: 1374105600, PB: 1376956800, QB: 1384214400, RB: 1389657600, SB: 1392940800, TB: 1397001600, UB: 1400544e3, VB: 1405468800,
  WB: 1409011200, XB: 141264e4, YB: 1416268800, ZB: 1421798400, aB: 1425513600, bB: 1429401600, cB: 143208e4, dB: 1437523200, eB: 1441152e3,
  fB: 1444780800, gB: 1449014400, hB: 1453248e3, iB: 1456963200, jB: 1460592e3, kB: 1464134400, lB: 1469059200, mB: 1472601600, nB: 1476230400,
  oB: 1480550400, pB: 1485302400, qB: 1489017600, rB: 149256e4, HC: 1496707200, sB: 1500940800, IC: 1504569600, tB: 1508198400, uB: 1512518400,
  vB: 1516752e3, wB: 1520294400, xB: 1523923200, yB: 1527552e3, zB: 1532390400, "0B": 1536019200, "1B": 1539648e3, "2B": 1543968e3, "3B": 154872e4,
  "4B": 1552348800, "5B": 1555977600, "6B": 1559606400, "7B": 1564444800, "8B": 1568073600, "9B": 1571702400, Q: 1575936e3, I: 1580860800, R: 1586304e3,
  S: 1589846400, T: 1594684800, U: 1598313600, V: 1601942400, W: 1605571200, X: 1611014400, Y: 1614556800, Z: 1618272e3, a: 1621987200, b: 1626739200,
  c: 1630368e3, d: 1632268800, e: 1634601600, f: 1637020800, g: 1641340800, h: 1643673600, i: 1646092800, j: 1648512e3, k: 1650931200, l: 1653350400,
  m: 1655769600, n: 1659398400, o: 1661817600, p: 1664236800, q: 1666656e3, r: 166968e4, s: 1673308800, t: 1675728e3, u: 1678147200, v: 1680566400,
  w: 1682985600, x: 1685404800, AB: 1701993600, BB: 1705968e3, CB: 1708387200, DB: 1710806400, EB: 1713225600, FB: 1715644800, GB: 1718064e3,
  HB: 1721174400, IB: 1724112e3, JB: 1726531200, D: 1728950400, KC: null, LC: null, MC: null } }, E: { A: { J: 0, KB: 0, K: 0, E: 0, F: 0, G: 0,
  A: 0, B: 0, C: 0, L: 3647e-6, M: 0.025529, H: 7294e-6, kC: 0, NC: 0, lC: 0, mC: 0, nC: 0, oC: 0, OC: 0, AC: 3647e-6, BC: 7294e-6, pC: 0.058352,
  qC: 0.076587, rC: 0.021882, PC: 7294e-6, QC: 0.018235, CC: 0.029176, sC: 0.21882, DC: 0.029176, RC: 0.03647, SC: 0.029176, TC: 0.069293, UC: 0.021882,
  VC: 0.040117, tC: 0.273525, EC: 0.018235, WC: 0.03647, XC: 0.03647, YC: 0.043764, ZC: 0.10941, aC: 0.309995, uC: 1.53903, FC: 0.149527, bC: 7294e-6,
  vC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "kC", "NC", "J", "KB", "lC", "K", "\
mC", "E", "nC", "F", "G", "oC", "A", "OC", "B", "AC", "C", "BC", "L", "pC", "M", "qC", "H", "rC", "PC", "QC", "CC", "sC", "DC", "RC", "SC", "\
TC", "UC", "VC", "tC", "EC", "WC", "XC", "YC", "ZC", "aC", "uC", "FC", "bC", "vC", ""], E: "Safari", F: { kC: 1205798400, NC: 1226534400, J: 1244419200,
  KB: 1275868800, lC: 131112e4, K: 1343174400, mC: 13824e5, E: 13824e5, nC: 1410998400, F: 1413417600, G: 1443657600, oC: 1458518400, A: 1474329600,
  OC: 1490572800, B: 1505779200, AC: 1522281600, C: 1537142400, BC: 1553472e3, L: 1568851200, pC: 1585008e3, M: 1600214400, qC: 1619395200, H: 1632096e3,
  rC: 1635292800, PC: 1639353600, QC: 1647216e3, CC: 1652745600, sC: 1658275200, DC: 1662940800, RC: 1666569600, SC: 1670889600, TC: 1674432e3,
  UC: 1679875200, VC: 1684368e3, tC: 1690156800, EC: 1695686400, WC: 1698192e3, XC: 1702252800, YC: 1705881600, ZC: 1709596800, aC: 1715558400,
  uC: 1722211200, FC: 1726444800, bC: null, vC: null } }, F: { A: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, G: 0, B: 0, C: 0, H: 0, N: 0, O: 0, P: 0, LB: 0,
  y: 0, z: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0, UB: 0, VB: 0, WB: 0, XB: 0, YB: 0, ZB: 3647e-6, aB: 0, bB: 0, cB: 0, dB: 0,
  eB: 0, fB: 0.014588, gB: 0, hB: 0, iB: 0, jB: 0, kB: 0, lB: 0, mB: 0, nB: 0, oB: 0, pB: 0, qB: 0, rB: 0, sB: 0, tB: 0, uB: 0, vB: 0, wB: 0,
  xB: 0, yB: 0, zB: 0, "0B": 0, "1B": 0, "2B": 0, "3B": 0, "4B": 0, "5B": 0, "6B": 0, "7B": 0, "8B": 0, "9B": 0, Q: 0, I: 0, R: 0, JC: 0, S: 0,
  T: 0.018235, U: 0, V: 0, W: 0, X: 0, Y: 0, Z: 0, a: 0, b: 0, c: 0, d: 0, e: 0.03647, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0.029176, m: 0,
  n: 0, o: 0, p: 0, q: 0, r: 0, s: 0.018235, t: 0, u: 7294e-6, v: 0.495992, w: 0.382935, x: 3647e-6, wC: 0, xC: 0, yC: 0, zC: 0, AC: 0, cC: 0,
  "0C": 0, BC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "G", "w\
C", "xC", "yC", "zC", "B", "AC", "cC", "0C", "C", "BC", "H", "N", "O", "P", "LB", "y", "z", "0", "1", "2", "3", "4", "MB", "NB", "OB", "PB",
  "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "\
nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "7B", "8B", "9B", "Q",
  "I", "R", "JC", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q",
  "r", "s", "t", "u", "v", "w", "x", "", "", ""], E: "Opera", F: { 0: 1401753600, 1: 1405987200, 2: 1409616e3, 3: 1413331200, 4: 1417132800,
  G: 1150761600, wC: 1223424e3, xC: 1251763200, yC: 1267488e3, zC: 1277942400, B: 1292457600, AC: 1302566400, cC: 1309219200, "0C": 1323129600,
  C: 1323129600, BC: 1352073600, H: 1372723200, N: 1377561600, O: 1381104e3, P: 1386288e3, LB: 1390867200, y: 1393891200, z: 1399334400, MB: 1422316800,
  NB: 1425945600, OB: 1430179200, PB: 1433808e3, QB: 1438646400, RB: 1442448e3, SB: 1445904e3, TB: 1449100800, UB: 1454371200, VB: 1457308800,
  WB: 146232e4, XB: 1465344e3, YB: 1470096e3, ZB: 1474329600, aB: 1477267200, bB: 1481587200, cB: 1486425600, dB: 1490054400, eB: 1494374400,
  fB: 1498003200, gB: 1502236800, hB: 1506470400, iB: 1510099200, jB: 1515024e3, kB: 1517961600, lB: 1521676800, mB: 1525910400, nB: 1530144e3,
  oB: 1534982400, pB: 1537833600, qB: 1543363200, rB: 1548201600, sB: 1554768e3, tB: 1561593600, uB: 1566259200, vB: 1570406400, wB: 1573689600,
  xB: 1578441600, yB: 1583971200, zB: 1587513600, "0B": 1592956800, "1B": 1595894400, "2B": 1600128e3, "3B": 1603238400, "4B": 161352e4, "5B": 1612224e3,
  "6B": 1616544e3, "7B": 1619568e3, "8B": 1623715200, "9B": 1627948800, Q: 1631577600, I: 1633392e3, R: 1635984e3, JC: 1638403200, S: 1642550400,
  T: 1644969600, U: 1647993600, V: 1650412800, W: 1652745600, X: 1654646400, Y: 1657152e3, Z: 1660780800, a: 1663113600, b: 1668816e3, c: 1668643200,
  d: 1671062400, e: 1675209600, f: 1677024e3, g: 1679529600, h: 1681948800, i: 1684195200, j: 1687219200, k: 1690329600, l: 1692748800, m: 1696204800,
  n: 169992e4, o: 169992e4, p: 1702944e3, q: 1707264e3, r: 1710115200, s: 1711497600, t: 1716336e3, u: 1719273600, v: 1721088e3, w: 1724284800,
  x: 1727222400 }, D: { G: "o", B: "o", C: "o", wC: "o", xC: "o", yC: "o", zC: "o", AC: "o", cC: "o", "0C": "o", BC: "o" } }, G: { A: { F: 0,
  NC: 0, "1C": 0, dC: 292873e-8, "2C": 146437e-8, "3C": 87862e-7, "4C": 0.0102506, "5C": 0, "6C": 0.0102506, "7C": 0.0248942, "8C": 732183e-8,
  "9C": 0.0424666, AD: 0.156687, BD: 0.0117149, CD: 732183e-8, DD: 0.177188, ED: 292873e-8, FD: 0.0556459, GD: 732183e-8, HD: 0.0292873, ID: 0.102506,
  JD: 0.0893264, KD: 0.0512528, PC: 0.0512528, QC: 0.0571103, CC: 0.0702896, LD: 0.69411, DC: 0.139115, RC: 0.276765, SC: 0.139115, TC: 0.234299,
  UC: 0.0497885, VC: 0.0981126, MD: 0.834689, EC: 0.0702896, WC: 0.111292, XC: 0.101041, YC: 0.144972, ZC: 0.31191, aC: 1.48926, ND: 7.75382,
  FC: 0.998698, bC: 0.0453954 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "NC", "\
1C", "dC", "2C", "3C", "4C", "F", "5C", "6C", "7C", "8C", "9C", "AD", "BD", "CD", "DD", "ED", "FD", "GD", "HD", "ID", "JD", "KD", "PC", "QC",
  "CC", "LD", "DC", "RC", "SC", "TC", "UC", "VC", "MD", "EC", "WC", "XC", "YC", "ZC", "aC", "ND", "FC", "bC", "", ""], E: "Safari on iOS", F: {
  NC: 1270252800, "1C": 1283904e3, dC: 1299628800, "2C": 1331078400, "3C": 1359331200, "4C": 1394409600, F: 1410912e3, "5C": 1413763200, "6C": 1442361600,
  "7C": 1458518400, "8C": 1473724800, "9C": 1490572800, AD: 1505779200, BD: 1522281600, CD: 1537142400, DD: 1553472e3, ED: 1568851200, FD: 1572220800,
  GD: 1580169600, HD: 1585008e3, ID: 1600214400, JD: 1619395200, KD: 1632096e3, PC: 1639353600, QC: 1647216e3, CC: 1652659200, LD: 1658275200,
  DC: 1662940800, RC: 1666569600, SC: 1670889600, TC: 1674432e3, UC: 1679875200, VC: 1684368e3, MD: 1690156800, EC: 1694995200, WC: 1698192e3,
  XC: 1702252800, YC: 1705881600, ZC: 1709596800, aC: 1715558400, ND: 1722211200, FC: 1726444800, bC: null } }, H: { A: { OD: 0.05 }, B: "o",
  C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "OD", "", "", ""], E: "Ope\
ra Mini", F: { OD: 1426464e3 } }, I: { A: { GC: 0, J: 0, D: 0.266132, PD: 0, QD: 0, RD: 0, SD: 266826e-10, dC: 10673e-8, TD: 0, UD: 426922e-9 },
  B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "PD", "QD", "RD", "GC", "J", "SD", "dC", "TD", "UD",
  "D", "", "", ""], E: "Android Browser", F: { PD: 1256515200, QD: 1274313600, RD: 1291593600, GC: 1298332800, J: 1318896e3, SD: 1341792e3, dC: 1374624e3,
  TD: 1386547200, UD: 1401667200, D: 1728864e3 } }, J: { A: { E: 0, A: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "E", "A", "", "", ""], E: "Blackberry Browser", F: { E: 1325376e3, A: 1359504e3 } },
  K: { A: { A: 0, B: 0, C: 0, I: 1.15072, AC: 0, cC: 0, BC: 0 }, B: "o", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "A", "B", "AC", "cC", "C", "BC", "I", "", "", ""], E: "Opera Mobile", F: { A: 1287100800, B: 1300752e3, AC: 1314835200,
  cC: 1318291200, C: 1330300800, BC: 1349740800, I: 1709769600 }, D: { I: "webkit" } }, L: { A: { D: 43.6637 }, B: "webkit", C: ["", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "D", "", "", ""], E: "Chrome for Android",
  F: { D: 1728864e3 } }, M: { A: { D: 0.343062 }, B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "D", "", "", ""], E: "Firefox for Android", F: { D: 1725321600 } }, N: { A: { A: 0, B: 0 }, B: "ms", C: ["", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "A", "B", "", "", ""], E: "IE Mobile", F: {
  A: 1340150400, B: 1353456e3 } }, O: { A: { CC: 1.23248 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "CC", "", "", ""], E: "UC Browser for Android", F: { CC: 1710115200 }, D: { CC: "webkit" } }, P: {
  A: { 0: 0.0434355, 1: 0.0542944, 2: 0.0651532, 3: 0.206319, 4: 0, J: 0.086871, y: 0.0108589, z: 0.0434355, VD: 0.0108589, WD: 0.0108589, XD: 0.0325766,
  YD: 0, ZD: 0, OC: 0, aD: 0, bD: 0, cD: 0, dD: 0, eD: 0, DC: 0, EC: 0.0217177, FC: 0, fD: 0.0108589 }, B: "webkit", C: ["", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "J", "VD", "WD", "XD", "YD", "ZD", "OC", "aD", "bD", "cD", "dD", "eD", "DC", "EC", "FC", "fD", "y", "z", "0", "1", "2", "3", "4", "", "", ""],
  E: "Samsung Internet", F: { 0: 1689292800, 1: 1697587200, 2: 1711497600, 3: 1715126400, 4: 1717718400, J: 1461024e3, VD: 1481846400, WD: 1509408e3,
  XD: 1528329600, YD: 1546128e3, ZD: 1554163200, OC: 1567900800, aD: 1582588800, bD: 1593475200, cD: 1605657600, dD: 1618531200, eD: 1629072e3,
  DC: 1640736e3, EC: 1651708800, FC: 1659657600, fD: 1667260800, y: 1677369600, z: 1684454400 } }, Q: { A: { gD: 0.273179 }, B: "webkit", C: [
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "gD", "", "", ""], E: "QQ Brow\
ser", F: { gD: 1710288e3 } }, R: { A: { hD: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "hD", "", "", ""], E: "Baidu Browser", F: { hD: 1710201600 } }, S: { A: { iD: 0.031765, jD: 0 }, B: "moz",
  C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "iD", "jD", "", "", ""], E: "K\
aiOS Browser", F: { iD: 1527811200, jD: 1631664e3 } } };
});

// ../node_modules/caniuse-lite/dist/unpacker/agents.js
var FC = A((VCe, kC) => {
  "use strict";
  var nce = fc().browsers, i0 = s0().browserVersions, NC = OC();
  function BC(e) {
    return Object.keys(e).reduce((t, r) => (t[i0[r]] = e[r], t), {});
  }
  i(BC, "unpackBrowserVersions");
  kC.exports.agents = Object.keys(NC).reduce((e, t) => {
    let r = NC[t];
    return e[nce[t]] = Object.keys(r).reduce((n, s) => (s === "A" ? n.usage_global = BC(r[s]) : s === "C" ? n.versions = r[s].reduce((a, o) => (o ===
    "" ? a.push(null) : a.push(i0[o]), a), []) : s === "D" ? n.prefix_exceptions = BC(r[s]) : s === "E" ? n.browser = r[s] : s === "F" ? n.release_date =
    Object.keys(r[s]).reduce(
      (a, o) => (a[i0[o]] = r[s][o], a),
      {}
    ) : n.prefix = r[s], n), {}), e;
  }, {});
});

// ../node_modules/electron-to-chromium/versions.js
var LC = A((WCe, jC) => {
  jC.exports = {
    "0.20": "39",
    "0.21": "41",
    "0.22": "41",
    "0.23": "41",
    "0.24": "41",
    "0.25": "42",
    "0.26": "42",
    "0.27": "43",
    "0.28": "43",
    "0.29": "43",
    "0.30": "44",
    "0.31": "45",
    "0.32": "45",
    "0.33": "45",
    "0.34": "45",
    "0.35": "45",
    "0.36": "47",
    "0.37": "49",
    "1.0": "49",
    "1.1": "50",
    "1.2": "51",
    "1.3": "52",
    "1.4": "53",
    "1.5": "54",
    "1.6": "56",
    "1.7": "58",
    "1.8": "59",
    "2.0": "61",
    "2.1": "61",
    "3.0": "66",
    "3.1": "66",
    "4.0": "69",
    "4.1": "69",
    "4.2": "69",
    "5.0": "73",
    "6.0": "76",
    "6.1": "76",
    "7.0": "78",
    "7.1": "78",
    "7.2": "78",
    "7.3": "78",
    "8.0": "80",
    "8.1": "80",
    "8.2": "80",
    "8.3": "80",
    "8.4": "80",
    "8.5": "80",
    "9.0": "83",
    "9.1": "83",
    "9.2": "83",
    "9.3": "83",
    "9.4": "83",
    "10.0": "85",
    "10.1": "85",
    "10.2": "85",
    "10.3": "85",
    "10.4": "85",
    "11.0": "87",
    "11.1": "87",
    "11.2": "87",
    "11.3": "87",
    "11.4": "87",
    "11.5": "87",
    "12.0": "89",
    "12.1": "89",
    "12.2": "89",
    "13.0": "91",
    "13.1": "91",
    "13.2": "91",
    "13.3": "91",
    "13.4": "91",
    "13.5": "91",
    "13.6": "91",
    "14.0": "93",
    "14.1": "93",
    "14.2": "93",
    "15.0": "94",
    "15.1": "94",
    "15.2": "94",
    "15.3": "94",
    "15.4": "94",
    "15.5": "94",
    "16.0": "96",
    "16.1": "96",
    "16.2": "96",
    "17.0": "98",
    "17.1": "98",
    "17.2": "98",
    "17.3": "98",
    "17.4": "98",
    "18.0": "100",
    "18.1": "100",
    "18.2": "100",
    "18.3": "100",
    "19.0": "102",
    "19.1": "102",
    "20.0": "104",
    "20.1": "104",
    "20.2": "104",
    "20.3": "104",
    "21.0": "106",
    "21.1": "106",
    "21.2": "106",
    "21.3": "106",
    "21.4": "106",
    "22.0": "108",
    "22.1": "108",
    "22.2": "108",
    "22.3": "108",
    "23.0": "110",
    "23.1": "110",
    "23.2": "110",
    "23.3": "110",
    "24.0": "112",
    "24.1": "112",
    "24.2": "112",
    "24.3": "112",
    "24.4": "112",
    "24.5": "112",
    "24.6": "112",
    "24.7": "112",
    "24.8": "112",
    "25.0": "114",
    "25.1": "114",
    "25.2": "114",
    "25.3": "114",
    "25.4": "114",
    "25.5": "114",
    "25.6": "114",
    "25.7": "114",
    "25.8": "114",
    "25.9": "114",
    "26.0": "116",
    "26.1": "116",
    "26.2": "116",
    "26.3": "116",
    "26.4": "116",
    "26.5": "116",
    "26.6": "116",
    "27.0": "118",
    "27.1": "118",
    "27.2": "118",
    "27.3": "118",
    "28.0": "120",
    "28.1": "120",
    "28.2": "120",
    "28.3": "120",
    "29.0": "122",
    "29.1": "122",
    "29.2": "122",
    "29.3": "122",
    "29.4": "122",
    "30.0": "124",
    "30.1": "124",
    "30.2": "124",
    "30.3": "124",
    "30.4": "124",
    "30.5": "124",
    "31.0": "126",
    "31.1": "126",
    "31.2": "126",
    "31.3": "126",
    "31.4": "126",
    "31.5": "126",
    "31.6": "126",
    "31.7": "126",
    "32.0": "128",
    "32.1": "128",
    "32.2": "128",
    "33.0": "130",
    "34.0": "132"
  };
});

// ../node_modules/node-releases/data/release-schedule/release-schedule.json
var MC = A((KCe, sce) => {
  sce.exports = { "v0.8": { start: "2012-06-25", end: "2014-07-31" }, "v0.10": { start: "2013-03-11", end: "2016-10-31" }, "v0.12": { start: "\
2015-02-06", end: "2016-12-31" }, v4: { start: "2015-09-08", lts: "2015-10-12", maintenance: "2017-04-01", end: "2018-04-30", codename: "Arg\
on" }, v5: { start: "2015-10-29", maintenance: "2016-04-30", end: "2016-06-30" }, v6: { start: "2016-04-26", lts: "2016-10-18", maintenance: "\
2018-04-30", end: "2019-04-30", codename: "Boron" }, v7: { start: "2016-10-25", maintenance: "2017-04-30", end: "2017-06-30" }, v8: { start: "\
2017-05-30", lts: "2017-10-31", maintenance: "2019-01-01", end: "2019-12-31", codename: "Carbon" }, v9: { start: "2017-10-01", maintenance: "\
2018-04-01", end: "2018-06-30" }, v10: { start: "2018-04-24", lts: "2018-10-30", maintenance: "2020-05-19", end: "2021-04-30", codename: "Du\
bnium" }, v11: { start: "2018-10-23", maintenance: "2019-04-22", end: "2019-06-01" }, v12: { start: "2019-04-23", lts: "2019-10-21", maintenance: "\
2020-11-30", end: "2022-04-30", codename: "Erbium" }, v13: { start: "2019-10-22", maintenance: "2020-04-01", end: "2020-06-01" }, v14: { start: "\
2020-04-21", lts: "2020-10-27", maintenance: "2021-10-19", end: "2023-04-30", codename: "Fermium" }, v15: { start: "2020-10-20", maintenance: "\
2021-04-01", end: "2021-06-01" }, v16: { start: "2021-04-20", lts: "2021-10-26", maintenance: "2022-10-18", end: "2023-09-11", codename: "Ga\
llium" }, v17: { start: "2021-10-19", maintenance: "2022-04-01", end: "2022-06-01" }, v18: { start: "2022-04-19", lts: "2022-10-25", maintenance: "\
2023-10-18", end: "2025-04-30", codename: "Hydrogen" }, v19: { start: "2022-10-18", maintenance: "2023-04-01", end: "2023-06-01" }, v20: { start: "\
2023-04-18", lts: "2023-10-24", maintenance: "2024-10-22", end: "2026-04-30", codename: "Iron" }, v21: { start: "2023-10-17", maintenance: "\
2024-04-01", end: "2024-06-01" }, v22: { start: "2024-04-24", lts: "2024-10-29", maintenance: "2025-10-21", end: "2027-04-30", codename: "" },
  v23: { start: "2024-10-15", maintenance: "2025-04-01", end: "2025-06-01" }, v24: { start: "2025-04-22", lts: "2025-10-28", maintenance: "2\
026-10-20", end: "2028-04-30", codename: "" } };
});

// ../node_modules/browserslist/error.js
var o0 = A((GCe, RC) => {
  function a0(e) {
    this.name = "BrowserslistError", this.message = e, this.browserslist = !0, Error.captureStackTrace && Error.captureStackTrace(this, a0);
  }
  i(a0, "BrowserslistError");
  a0.prototype = Error.prototype;
  RC.exports = a0;
});

// ../node_modules/caniuse-lite/dist/lib/statuses.js
var UC = A((YCe, qC) => {
  qC.exports = {
    1: "ls",
    // WHATWG Living Standard
    2: "rec",
    // W3C Recommendation
    3: "pr",
    // W3C Proposed Recommendation
    4: "cr",
    // W3C Candidate Recommendation
    5: "wd",
    // W3C Working Draft
    6: "other",
    // Non-W3C, but reputable
    7: "unoff"
    // Unofficial, Editor's Draft or W3C "Note"
  };
});

// ../node_modules/caniuse-lite/dist/lib/supported.js
var $C = A((JCe, VC) => {
  VC.exports = {
    y: 1,
    n: 2,
    a: 4,
    p: 8,
    u: 16,
    x: 32,
    d: 64
  };
});

// ../node_modules/caniuse-lite/dist/unpacker/feature.js
var GC = A((zCe, l0) => {
  "use strict";
  var ice = UC(), WC = $C(), ace = fc().browsers, oce = s0().browserVersions, lce = Math.log(2);
  function uce(e) {
    let t = Object.keys(WC).reduce((s, a) => (e & WC[a] && s.push(a), s), []), r = e >> 7, n = [];
    for (; r; ) {
      let s = Math.floor(Math.log(r) / lce) + 1;
      n.unshift(`#${s}`), r -= Math.pow(2, s - 1);
    }
    return t.concat(n).join(" ");
  }
  i(uce, "unpackSupport");
  function KC(e) {
    let t = {
      status: ice[e.B],
      title: e.C,
      shown: e.D
    };
    return t.stats = Object.keys(e.A).reduce((r, n) => {
      let s = e.A[n];
      return r[ace[n]] = Object.keys(s).reduce(
        (a, o) => {
          let l = s[o].split(" "), u = uce(o);
          return l.forEach((c) => a[oce[c]] = u), a;
        },
        {}
      ), r;
    }, {}), t;
  }
  i(KC, "unpackFeature");
  l0.exports = KC;
  l0.exports.default = KC;
});

// ../node_modules/caniuse-lite/dist/unpacker/region.js
var YC = A((QCe, u0) => {
  "use strict";
  var cce = fc().browsers;
  function HC(e) {
    return Object.keys(e).reduce((t, r) => {
      let n = e[r];
      return t[cce[r]] = Object.keys(n).reduce((s, a) => {
        let o = n[a];
        return a === "_" ? o.split(" ").forEach((l) => s[l] = null) : s[a] = o, s;
      }, {}), t;
    }, {});
  }
  i(HC, "unpackRegion");
  u0.exports = HC;
  u0.exports.default = HC;
});

// ../node_modules/browserslist/node.js
var t2 = A((e2e, bo) => {
  var pce = GC().default, fce = YC().default, Wi = le("fs"), ur = le("path"), Yt = o0(), JC = /^\s*\[(.+)]\s*$/, dce = /^browserslist-config-/,
  hce = /@[^/]+(?:\/[^/]+)?\/browserslist-config(?:-|$|\/)/, zC = "Browserslist config should be a string or an array of strings with browse\
r queries", c0 = !1, hc = {}, dc = {};
  function XC(e) {
    var t = " Use `dangerousExtend` option to disable.";
    if (!dce.test(e) && !hce.test(e))
      throw new Yt(
        "Browserslist config needs `browserslist-config-` prefix. " + t
      );
    if (e.replace(/^@[^/]+\//, "").indexOf(".") !== -1)
      throw new Yt(
        "`.` not allowed in Browserslist config name. " + t
      );
    if (e.indexOf("node_modules") !== -1)
      throw new Yt(
        "`node_modules` not allowed in Browserslist config." + t
      );
  }
  i(XC, "checkExtend");
  function Yr(e) {
    if (e in hc)
      return hc[e];
    var t = Wi.existsSync(e) && Wi.statSync(e).isFile();
    return process.env.BROWSERSLIST_DISABLE_CACHE || (hc[e] = t), t;
  }
  i(Yr, "isFile");
  function p0(e, t) {
    var r = Yr(e) ? ur.dirname(e) : e, n = ur.resolve(r);
    do {
      if (!mce(n)) break;
      var s = t(n);
      if (typeof s < "u") return s;
    } while (n !== (n = ur.dirname(n)));
  }
  i(p0, "eachParent");
  function mce(e) {
    if (!process.env.BROWSERSLIST_ROOT_PATH) return !0;
    var t = ur.resolve(process.env.BROWSERSLIST_ROOT_PATH);
    return ur.relative(t, e).substring(0, 2) !== "..";
  }
  i(mce, "pathInRoot");
  function yce(e) {
    if (Array.isArray(e)) {
      for (var t = 0; t < e.length; t++)
        if (typeof e[t] != "string")
          throw new Yt(zC);
    } else if (typeof e != "string")
      throw new Yt(zC);
  }
  i(yce, "check");
  function f0(e, t) {
    if (typeof e != "object") return e;
    var r;
    if (typeof t.env == "string" ? r = t.env : process.env.BROWSERSLIST_ENV ? r = process.env.BROWSERSLIST_ENV : process.env.NODE_ENV ? r = process.
    env.NODE_ENV : r = "production", t.throwOnMissing && r && r !== "defaults" && !e[r])
      throw new Yt(
        "Missing config for Browserslist environment `" + r + "`"
      );
    return e[r] || e.defaults;
  }
  i(f0, "pickEnv");
  function e2(e) {
    var t = JSON.parse(
      Wi.readFileSync(e).toString().replace(/^\uFEFF/m, "")
    );
    if (t.browserlist && !t.browserslist)
      throw new Yt(
        "`browserlist` key instead of `browserslist` in " + e
      );
    var r = t.browserslist;
    (Array.isArray(r) || typeof r == "string") && (r = { defaults: r });
    for (var n in r)
      yce(r[n]);
    return r;
  }
  i(e2, "parsePackage");
  function QC(e) {
    return ur.basename(e) === "package.json" ? e2(e) : bo.exports.readConfig(e);
  }
  i(QC, "parsePackageOrReadConfig");
  function gce(e) {
    var t = 0;
    for (var r in e) {
      var n = e[r].releaseDate || {};
      for (var s in n)
        t < n[s] && (t = n[s]);
    }
    return t * 1e3;
  }
  i(gce, "latestReleaseTime");
  function bce(e) {
    var t = /* @__PURE__ */ new Date(), r = new Date(e), n = t.getFullYear() - r.getFullYear(), s = t.getMonth() - r.getMonth();
    return n * 12 + s;
  }
  i(bce, "getMonthsPassed");
  function ZC(e, t) {
    if (e || (e = {}), t && "dataByBrowser" in t && (t = t.dataByBrowser), typeof t == "object") {
      var r = {};
      for (var n in t) {
        var s = Object.keys(t[n]);
        if (s.length === 1 && e[n] && e[n].versions.length === 1) {
          var a = e[n].versions[0];
          r[n] = {}, r[n][a] = t[n][s[0]];
        } else
          r[n] = t[n];
      }
      return r;
    }
  }
  i(ZC, "normalizeStats");
  function Ece(e, t) {
    for (var r in e) {
      var n = e[r];
      if ("0" in n) {
        var s = t[r].versions;
        n[s[s.length - 1]] = n[0], delete n[0];
      }
    }
  }
  i(Ece, "normalizeUsageData");
  bo.exports = {
    loadQueries: /* @__PURE__ */ i(function(t, r) {
      !t.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND && XC(r);
      var n = le(le.resolve(r, { paths: [".", t.path] }));
      if (n) {
        if (Array.isArray(n))
          return n;
        if (typeof n == "object")
          return n.defaults || (n.defaults = []), f0(n, t, r);
      }
      throw new Yt(
        "`" + r + "` config exports not an array of queries or an object of envs"
      );
    }, "loadQueries"),
    loadStat: /* @__PURE__ */ i(function(t, r, n) {
      !t.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND && XC(r);
      var s = le(le.resolve(
        ur.join(r, "browserslist-stats.json"),
        { paths: ["."] }
      ));
      return ZC(n, s);
    }, "loadStat"),
    getStat: /* @__PURE__ */ i(function(t, r) {
      var n;
      if (t.stats ? n = t.stats : process.env.BROWSERSLIST_STATS ? n = process.env.BROWSERSLIST_STATS : t.path && ur.resolve && Wi.existsSync &&
      (n = p0(t.path, function(s) {
        var a = ur.join(s, "browserslist-stats.json");
        return Yr(a) ? a : void 0;
      })), typeof n == "string")
        try {
          n = JSON.parse(Wi.readFileSync(n));
        } catch {
          throw new Yt("Can't read " + n);
        }
      return ZC(r, n);
    }, "getStat"),
    loadConfig: /* @__PURE__ */ i(function(t) {
      if (process.env.BROWSERSLIST)
        return process.env.BROWSERSLIST;
      if (t.config || process.env.BROWSERSLIST_CONFIG) {
        var r = t.config || process.env.BROWSERSLIST_CONFIG;
        return f0(QC(r), t);
      } else return t.path ? f0(bo.exports.findConfig(t.path), t) : void 0;
    }, "loadConfig"),
    loadCountry: /* @__PURE__ */ i(function(t, r, n) {
      var s = r.replace(/[^\w-]/g, "");
      if (!t[s]) {
        var a;
        try {
          a = le("caniuse-lite/data/regions/" + s + ".js");
        } catch {
          throw new Yt("Unknown region name `" + s + "`.");
        }
        var o = fce(a);
        Ece(o, n), t[r] = {};
        for (var l in o)
          for (var u in o[l])
            t[r][l + " " + u] = o[l][u];
      }
    }, "loadCountry"),
    loadFeature: /* @__PURE__ */ i(function(t, r) {
      if (r = r.replace(/[^\w-]/g, ""), !t[r]) {
        var n;
        try {
          n = le("caniuse-lite/data/features/" + r + ".js");
        } catch {
          throw new Yt("Unknown feature name `" + r + "`.");
        }
        var s = pce(n).stats;
        t[r] = {};
        for (var a in s) {
          t[r][a] = {};
          for (var o in s[a])
            t[r][a][o] = s[a][o];
        }
      }
    }, "loadFeature"),
    parseConfig: /* @__PURE__ */ i(function(t) {
      var r = { defaults: [] }, n = ["defaults"];
      return t.toString().replace(/#[^\n]*/g, "").split(/\n|,/).map(function(s) {
        return s.trim();
      }).filter(function(s) {
        return s !== "";
      }).forEach(function(s) {
        JC.test(s) ? (n = s.match(JC)[1].trim().split(" "), n.forEach(function(a) {
          if (r[a])
            throw new Yt(
              "Duplicate section " + a + " in Browserslist config"
            );
          r[a] = [];
        })) : n.forEach(function(a) {
          r[a].push(s);
        });
      }), r;
    }, "parseConfig"),
    readConfig: /* @__PURE__ */ i(function(t) {
      if (!Yr(t))
        throw new Yt("Can't read " + t + " config");
      return bo.exports.parseConfig(Wi.readFileSync(t));
    }, "readConfig"),
    findConfigFile: /* @__PURE__ */ i(function(t) {
      var r = p0(t, function(n) {
        var s = ur.join(n, "browserslist"), a = ur.join(n, "package.json"), o = ur.join(n, ".browserslistrc"), l;
        if (Yr(a))
          try {
            l = e2(a);
          } catch (u) {
            if (u.name === "BrowserslistError") throw u;
            console.warn(
              "[Browserslist] Could not parse " + a + ". Ignoring it."
            );
          }
        if (Yr(s) && l)
          throw new Yt(
            n + " contains both browserslist and package.json with browsers"
          );
        if (Yr(o) && l)
          throw new Yt(
            n + " contains both .browserslistrc and package.json with browsers"
          );
        if (Yr(s) && Yr(o))
          throw new Yt(
            n + " contains both .browserslistrc and browserslist"
          );
        if (Yr(s))
          return s;
        if (Yr(o))
          return o;
        if (l)
          return a;
      });
      return r;
    }, "findConfigFile"),
    findConfig: /* @__PURE__ */ i(function(t) {
      t = ur.resolve(t);
      var r = Yr(t) ? ur.dirname(t) : t;
      if (r in dc)
        return dc[r];
      var n, s = this.findConfigFile(t);
      if (s && (n = QC(s)), !process.env.BROWSERSLIST_DISABLE_CACHE) {
        var a = s && ur.dirname(s);
        p0(t, function(o) {
          if (dc[o] = n, o === a)
            return null;
        });
      }
      return n;
    }, "findConfig"),
    clearCaches: /* @__PURE__ */ i(function() {
      c0 = !1, hc = {}, dc = {}, this.cache = {};
    }, "clearCaches"),
    oldDataWarning: /* @__PURE__ */ i(function(t) {
      if (!c0 && (c0 = !0, !process.env.BROWSERSLIST_IGNORE_OLD_DATA)) {
        var r = gce(t), n = bce(r);
        if (r !== 0 && n >= 6) {
          var s = n + " " + (n > 1 ? "months" : "month");
          console.warn(
            "Browserslist: browsers data (caniuse-lite) is " + s + ` old. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme`
          );
        }
      }
    }, "oldDataWarning"),
    currentNode: /* @__PURE__ */ i(function() {
      return "node " + process.versions.node;
    }, "currentNode"),
    env: process.env
  };
});

// ../node_modules/browserslist/parse.js
var a2 = A((r2e, i2) => {
  var r2 = /^\s+and\s+(.*)/i, n2 = /^(?:,\s*|\s+or\s+)(.*)/i;
  function s2(e) {
    return Array.isArray(e) ? e.reduce(function(t, r) {
      return t.concat(s2(r));
    }, []) : [e];
  }
  i(s2, "flatten");
  function Tce(e, t) {
    for (var r = e.length, n = 1; n <= r; n++) {
      var s = e.substr(-n, n);
      if (t(s, n, r))
        return e.slice(0, -n);
    }
    return "";
  }
  i(Tce, "find");
  function d0(e, t) {
    var r = { query: t };
    t.indexOf("not ") === 0 && (r.not = !0, t = t.slice(4));
    for (var n in e) {
      var s = e[n], a = t.match(s.regexp);
      if (a) {
        r.type = n;
        for (var o = 0; o < s.matches.length; o++)
          r[s.matches[o]] = a[o + 1];
        return r;
      }
    }
    return r.type = "unknown", r;
  }
  i(d0, "matchQuery");
  function Sce(e, t, r) {
    var n;
    return Tce(t, function(s, a, o) {
      return r2.test(s) ? (n = d0(e, s.match(r2)[1]), n.compose = "and", r.unshift(n), !0) : n2.test(s) ? (n = d0(e, s.match(n2)[1]), n.compose =
      "or", r.unshift(n), !0) : a === o ? (n = d0(e, s.trim()), n.compose = "or", r.unshift(n), !0) : !1;
    });
  }
  i(Sce, "matchBlock");
  i2.exports = /* @__PURE__ */ i(function(t, r) {
    return Array.isArray(r) || (r = [r]), s2(
      r.map(function(n) {
        var s = [];
        do
          n = Sce(t, n, s);
        while (n);
        return s;
      })
    );
  }, "parse");
});

// ../node_modules/browserslist/index.js
var P2 = A((s2e, v2) => {
  var xce = vC(), Rn = FC().agents, Jr = LC(), h0 = MC(), Tc = le("path"), dr = o0(), Wt = t2(), m2 = a2(), vce = 365.259641 * 24 * 60 * 60 *
  1e3, y2 = "37", Pce = 14;
  function g2(e, t) {
    return (e + ".").indexOf(t + ".") === 0;
  }
  i(g2, "isVersionsMatch");
  function Ace(e) {
    var t = e.slice(1);
    return Ee.nodeVersions.some(function(r) {
      return g2(r, t);
    });
  }
  i(Ace, "isEolReleased");
  function o2(e) {
    return e.filter(function(t) {
      return typeof t == "string";
    });
  }
  i(o2, "normalize");
  function mc(e) {
    var t = e;
    return e.split(".").length === 3 && (t = e.split(".").slice(0, -1).join(".")), t;
  }
  i(mc, "normalizeElectron");
  function ys(e) {
    return /* @__PURE__ */ i(function(r) {
      return e + " " + r;
    }, "mapName");
  }
  i(ys, "nameMapper");
  function b0(e) {
    return parseInt(e.split(".")[0]);
  }
  i(b0, "getMajor");
  function yc(e, t) {
    if (e.length === 0) return [];
    var r = b2(e.map(b0)), n = r[r.length - t];
    if (!n)
      return e;
    for (var s = [], a = e.length - 1; a >= 0 && !(n > b0(e[a])); a--)
      s.unshift(e[a]);
    return s;
  }
  i(yc, "getMajorVersions");
  function b2(e) {
    for (var t = [], r = 0; r < e.length; r++)
      t.indexOf(e[r]) === -1 && t.push(e[r]);
    return t;
  }
  i(b2, "uniq");
  function Sc(e, t, r) {
    for (var n in r)
      e[t + " " + n] = r[n];
  }
  i(Sc, "fillUsage");
  function l2(e, t) {
    if (t = parseFloat(t), e === ">")
      return function(n) {
        return r(n) > t;
      };
    return e === ">=" ? function(n) {
      return r(n) >= t;
    } : e === "<" ? function(n) {
      return parseFloat(n) < t;
    } : function(n) {
      return parseFloat(n) <= t;
    };
    function r(n) {
      return parseFloat(n.split("-")[1] || n);
    }
  }
  i(l2, "generateFilter");
  function Cce(e, t) {
    return t = t.split(".").map(gs), t[1] = t[1] || 0, t[2] = t[2] || 0, e === ">" ? function(r) {
      return r = r.split(".").map(gs), Eo(r, t) > 0;
    } : e === ">=" ? function(r) {
      return r = r.split(".").map(gs), Eo(r, t) >= 0;
    } : e === "<" ? function(r) {
      return r = r.split(".").map(gs), Eo(t, r) > 0;
    } : function(r) {
      return r = r.split(".").map(gs), Eo(t, r) >= 0;
    };
  }
  i(Cce, "generateSemverFilter");
  function gs(e) {
    return parseInt(e);
  }
  i(gs, "parseSimpleInt");
  function Ec(e, t) {
    return e < t ? -1 : e > t ? 1 : 0;
  }
  i(Ec, "compare");
  function Eo(e, t) {
    return Ec(parseInt(e[0]), parseInt(t[0])) || Ec(parseInt(e[1] || "0"), parseInt(t[1] || "0")) || Ec(parseInt(e[2] || "0"), parseInt(t[2] ||
    "0"));
  }
  i(Eo, "compareSemver");
  function u2(e, t) {
    switch (t = t.split(".").map(gs), typeof t[1] > "u" && (t[1] = "x"), e) {
      case "<=":
        return function(r) {
          return r = r.split(".").map(gs), c2(r, t) <= 0;
        };
      case ">=":
      default:
        return function(r) {
          return r = r.split(".").map(gs), c2(r, t) >= 0;
        };
    }
  }
  i(u2, "semverFilterLoose");
  function c2(e, t) {
    return e[0] !== t[0] ? e[0] < t[0] ? -1 : 1 : t[1] === "x" ? 0 : e[1] !== t[1] ? e[1] < t[1] ? -1 : 1 : 0;
  }
  i(c2, "compareSemverLoose");
  function Dce(e, t) {
    return e.versions.indexOf(t) !== -1 ? t : Ee.versionAliases[e.name][t] ? Ee.versionAliases[e.name][t] : !1;
  }
  i(Dce, "resolveVersion");
  function gc(e, t) {
    var r = Dce(e, t);
    return r || (e.versions.length === 1 ? e.versions[0] : !1);
  }
  i(gc, "normalizeVersion");
  function E2(e, t) {
    return e = e / 1e3, Object.keys(Rn).reduce(function(r, n) {
      var s = bs(n, t);
      if (!s) return r;
      var a = Object.keys(s.releaseDate).filter(function(o) {
        var l = s.releaseDate[o];
        return l !== null && l >= e;
      });
      return r.concat(a.map(ys(s.name)));
    }, []);
  }
  i(E2, "filterByYear");
  function p2(e) {
    return {
      name: e.name,
      versions: e.versions,
      released: e.released,
      releaseDate: e.releaseDate
    };
  }
  i(p2, "cloneData");
  function bs(e, t) {
    if (e = e.toLowerCase(), e = Ee.aliases[e] || e, t.mobileToDesktop && Ee.desktopNames[e]) {
      var r = Ee.data[Ee.desktopNames[e]];
      if (e === "android")
        return Ice(p2(Ee.data[e]), r);
      var n = p2(r);
      return n.name = e, n;
    }
    return Ee.data[e];
  }
  i(bs, "byName");
  function f2(e, t) {
    var r = t.indexOf(y2);
    return e.filter(function(n) {
      return /^(?:[2-4]\.|[34]$)/.test(n);
    }).concat(t.slice(r));
  }
  i(f2, "normalizeAndroidVersions");
  function wce(e) {
    var t = {};
    for (var r in e)
      t[r] = e[r];
    return t;
  }
  i(wce, "copyObject");
  function Ice(e, t) {
    return e.released = f2(e.released, t.released), e.versions = f2(e.versions, t.versions), e.releaseDate = wce(e.releaseDate), e.released.
    forEach(function(r) {
      e.releaseDate[r] === void 0 && (e.releaseDate[r] = t.releaseDate[r]);
    }), e;
  }
  i(Ice, "normalizeAndroidData");
  function Ki(e, t) {
    var r = bs(e, t);
    if (!r) throw new dr("Unknown browser " + e);
    return r;
  }
  i(Ki, "checkName");
  function _ce(e) {
    return new dr(
      "Unknown browser query `" + e + "`. Maybe you are using old Browserslist or made typo in query."
    );
  }
  i(_ce, "unknownQuery");
  function bc(e, t, r, n) {
    var s = 1;
    switch (t) {
      case "android":
        if (n.mobileToDesktop) return e;
        var a = Ee.data.chrome.released;
        s = a.length - a.indexOf(y2);
        break;
      case "op_mob":
        var o = Ee.data.op_mob.released.slice(-1)[0];
        s = b0(o) - Pce + 1;
        break;
      default:
        return e;
    }
    return r <= s ? e.slice(-1) : e.slice(s - 1 - r);
  }
  i(bc, "filterJumps");
  function d2(e, t) {
    return typeof e == "string" && (e.indexOf("y") >= 0 || t && e.indexOf("a") >= 0);
  }
  i(d2, "isSupported");
  function Gi(e, t) {
    return m2(E0, e).reduce(function(r, n, s) {
      if (n.not && s === 0)
        throw new dr(
          "Write any browsers query (for instance, `defaults`) before `" + n.query + "`"
        );
      var a = E0[n.type], o = a.select.call(Ee, t, n).map(function(u) {
        var c = u.split(" ");
        return c[1] === "0" ? c[0] + " " + bs(c[0], t).versions[0] : u;
      });
      if (n.compose === "and")
        return n.not ? r.filter(function(u) {
          return o.indexOf(u) === -1;
        }) : r.filter(function(u) {
          return o.indexOf(u) !== -1;
        });
      if (n.not) {
        var l = {};
        return o.forEach(function(u) {
          l[u] = !0;
        }), r.filter(function(u) {
          return !l[u];
        });
      }
      return r.concat(o);
    }, []);
  }
  i(Gi, "resolve");
  function T2(e) {
    return typeof e > "u" && (e = {}), typeof e.path > "u" && (e.path = Tc.resolve ? Tc.resolve(".") : "."), e;
  }
  i(T2, "prepareOpts");
  function S2(e, t) {
    if (typeof e > "u" || e === null) {
      var r = Ee.loadConfig(t);
      r ? e = r : e = Ee.defaults;
    }
    return e;
  }
  i(S2, "prepareQueries");
  function x2(e) {
    if (!(typeof e == "string" || Array.isArray(e)))
      throw new dr(
        "Browser queries must be an array or string. Got " + typeof e + "."
      );
  }
  i(x2, "checkQueries");
  var m0 = {};
  function Ee(e, t) {
    t = T2(t), e = S2(e, t), x2(e);
    var r = {
      ignoreUnknownVersions: t.ignoreUnknownVersions,
      dangerousExtend: t.dangerousExtend,
      mobileToDesktop: t.mobileToDesktop,
      path: t.path,
      env: t.env
    };
    Wt.oldDataWarning(Ee.data);
    var n = Wt.getStat(t, Ee.data);
    if (n) {
      r.customUsage = {};
      for (var s in n)
        Sc(r.customUsage, s, n[s]);
    }
    var a = JSON.stringify([e, r]);
    if (m0[a]) return m0[a];
    var o = b2(Gi(e, r)).sort(function(l, u) {
      if (l = l.split(" "), u = u.split(" "), l[0] === u[0]) {
        var c = l[1].split("-")[0], p = u[1].split("-")[0];
        return Eo(p.split("."), c.split("."));
      } else
        return Ec(l[0], u[0]);
    });
    return Wt.env.BROWSERSLIST_DISABLE_CACHE || (m0[a] = o), o;
  }
  i(Ee, "browserslist");
  Ee.parse = function(e, t) {
    return t = T2(t), e = S2(e, t), x2(e), m2(E0, e);
  };
  Ee.cache = {};
  Ee.data = {};
  Ee.usage = {
    global: {},
    custom: null
  };
  Ee.defaults = ["> 0.5%", "last 2 versions", "Firefox ESR", "not dead"];
  Ee.aliases = {
    fx: "firefox",
    ff: "firefox",
    ios: "ios_saf",
    explorer: "ie",
    blackberry: "bb",
    explorermobile: "ie_mob",
    operamini: "op_mini",
    operamobile: "op_mob",
    chromeandroid: "and_chr",
    firefoxandroid: "and_ff",
    ucandroid: "and_uc",
    qqandroid: "and_qq"
  };
  Ee.desktopNames = {
    and_chr: "chrome",
    and_ff: "firefox",
    ie_mob: "ie",
    android: "chrome"
    // has extra processing logic
  };
  Ee.versionAliases = {};
  Ee.clearCaches = Wt.clearCaches;
  Ee.parseConfig = Wt.parseConfig;
  Ee.readConfig = Wt.readConfig;
  Ee.findConfigFile = Wt.findConfigFile;
  Ee.findConfig = Wt.findConfig;
  Ee.loadConfig = Wt.loadConfig;
  Ee.coverage = function(e, t) {
    var r;
    if (typeof t > "u")
      r = Ee.usage.global;
    else if (t === "my stats") {
      var n = {};
      n.path = Tc.resolve ? Tc.resolve(".") : ".";
      var s = Wt.getStat(n);
      if (!s)
        throw new dr("Custom usage statistics was not provided");
      r = {};
      for (var a in s)
        Sc(r, a, s[a]);
    } else if (typeof t == "string")
      t.length > 2 ? t = t.toLowerCase() : t = t.toUpperCase(), Wt.loadCountry(Ee.usage, t, Ee.data), r = Ee.usage[t];
    else {
      "dataByBrowser" in t && (t = t.dataByBrowser), r = {};
      for (var o in t)
        for (var l in t[o])
          r[o + " " + l] = t[o][l];
    }
    return e.reduce(function(u, c) {
      var p = r[c];
      return p === void 0 && (p = r[c.replace(/ \S+$/, " 0")]), u + (p || 0);
    }, 0);
  };
  function y0(e, t) {
    var r = Ee.nodeVersions.filter(function(n) {
      return g2(n, t.version);
    });
    if (r.length === 0) {
      if (e.ignoreUnknownVersions)
        return [];
      throw new dr(
        "Unknown version " + t.version + " of Node.js"
      );
    }
    return ["node " + r[r.length - 1]];
  }
  i(y0, "nodeQuery");
  function g0(e, t) {
    var r = parseInt(t.year), n = parseInt(t.month || "01") - 1, s = parseInt(t.day || "01");
    return E2(Date.UTC(r, n, s, 0, 0, 0), e);
  }
  i(g0, "sinceQuery");
  function h2(e, t) {
    var r = parseFloat(t.coverage), n = Ee.usage.global;
    if (t.place)
      if (t.place.match(/^my\s+stats$/i)) {
        if (!e.customUsage)
          throw new dr("Custom usage statistics was not provided");
        n = e.customUsage;
      } else {
        var s;
        t.place.length === 2 ? s = t.place.toUpperCase() : s = t.place.toLowerCase(), Wt.loadCountry(Ee.usage, s, Ee.data), n = Ee.usage[s];
      }
    for (var a = Object.keys(n).sort(function(p, f) {
      return n[f] - n[p];
    }), o = 0, l = [], u, c = 0; c < a.length && (u = a[c], !(n[u] === 0 || (o += n[u], l.push(u), o >= r))); c++)
      ;
    return l;
  }
  i(h2, "coverQuery");
  var E0 = {
    last_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return Object.keys(Rn).reduce(function(r, n) {
          var s = bs(n, e);
          if (!s) return r;
          var a = yc(s.released, t.versions);
          return a = a.map(ys(s.name)), a = bc(a, s.name, t.versions, e), r.concat(a);
        }, []);
      }, "select")
    },
    last_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return Object.keys(Rn).reduce(function(r, n) {
          var s = bs(n, e);
          if (!s) return r;
          var a = s.released.slice(-t.versions);
          return a = a.map(ys(s.name)), a = bc(a, s.name, t.versions, e), r.concat(a);
        }, []);
      }, "select")
    },
    last_electron_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = yc(Object.keys(Jr), t.versions);
        return r.map(function(n) {
          return "chrome " + Jr[n];
        });
      }, "select")
    },
    last_node_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return yc(Ee.nodeVersions, t.versions).map(
          function(r) {
            return "node " + r;
          }
        );
      }, "select")
    },
    last_browser_major_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = Ki(t.browser, e), n = yc(r.released, t.versions), s = n.map(ys(r.name));
        return s = bc(s, r.name, t.versions, e), s;
      }, "select")
    },
    last_electron_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return Object.keys(Jr).slice(-t.versions).map(function(r) {
          return "chrome " + Jr[r];
        });
      }, "select")
    },
    last_node_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return Ee.nodeVersions.slice(-t.versions).map(function(r) {
          return "node " + r;
        });
      }, "select")
    },
    last_browser_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = Ki(t.browser, e), n = r.released.slice(-t.versions).map(ys(r.name));
        return n = bc(n, r.name, t.versions, e), n;
      }, "select")
    },
    unreleased_versions: {
      matches: [],
      regexp: /^unreleased\s+versions$/i,
      select: /* @__PURE__ */ i(function(e) {
        return Object.keys(Rn).reduce(function(t, r) {
          var n = bs(r, e);
          if (!n) return t;
          var s = n.versions.filter(function(a) {
            return n.released.indexOf(a) === -1;
          });
          return s = s.map(ys(n.name)), t.concat(s);
        }, []);
      }, "select")
    },
    unreleased_electron_versions: {
      matches: [],
      regexp: /^unreleased\s+electron\s+versions?$/i,
      select: /* @__PURE__ */ i(function() {
        return [];
      }, "select")
    },
    unreleased_browser_versions: {
      matches: ["browser"],
      regexp: /^unreleased\s+(\w+)\s+versions?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = Ki(t.browser, e);
        return r.versions.filter(function(n) {
          return r.released.indexOf(n) === -1;
        }).map(ys(r.name));
      }, "select")
    },
    last_years: {
      matches: ["years"],
      regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return E2(Date.now() - vce * t.years, e);
      }, "select")
    },
    since_y: {
      matches: ["year"],
      regexp: /^since (\d+)$/i,
      select: g0
    },
    since_y_m: {
      matches: ["year", "month"],
      regexp: /^since (\d+)-(\d+)$/i,
      select: g0
    },
    since_y_m_d: {
      matches: ["year", "month", "day"],
      regexp: /^since (\d+)-(\d+)-(\d+)$/i,
      select: g0
    },
    popularity: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = parseFloat(t.popularity), n = Ee.usage.global;
        return Object.keys(n).reduce(function(s, a) {
          return t.sign === ">" ? n[a] > r && s.push(a) : t.sign === "<" ? n[a] < r && s.push(a) : t.sign === "<=" ? n[a] <= r && s.push(a) :
          n[a] >= r && s.push(a), s;
        }, []);
      }, "select")
    },
    popularity_in_my_stats: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = parseFloat(t.popularity);
        if (!e.customUsage)
          throw new dr("Custom usage statistics was not provided");
        var n = e.customUsage;
        return Object.keys(n).reduce(function(s, a) {
          var o = n[a];
          return o == null || (t.sign === ">" ? o > r && s.push(a) : t.sign === "<" ? o < r && s.push(a) : t.sign === "<=" ? o <= r && s.push(
          a) : o >= r && s.push(a)), s;
        }, []);
      }, "select")
    },
    popularity_in_config_stats: {
      matches: ["sign", "popularity", "config"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = parseFloat(t.popularity), n = Wt.loadStat(e, t.config, Ee.data);
        if (n) {
          e.customUsage = {};
          for (var s in n)
            Sc(e.customUsage, s, n[s]);
        }
        if (!e.customUsage)
          throw new dr("Custom usage statistics was not provided");
        var a = e.customUsage;
        return Object.keys(a).reduce(function(o, l) {
          var u = a[l];
          return u == null || (t.sign === ">" ? u > r && o.push(l) : t.sign === "<" ? u < r && o.push(l) : t.sign === "<=" ? u <= r && o.push(
          l) : u >= r && o.push(l)), o;
        }, []);
      }, "select")
    },
    popularity_in_place: {
      matches: ["sign", "popularity", "place"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = parseFloat(t.popularity), n = t.place;
        n.length === 2 ? n = n.toUpperCase() : n = n.toLowerCase(), Wt.loadCountry(Ee.usage, n, Ee.data);
        var s = Ee.usage[n];
        return Object.keys(s).reduce(function(a, o) {
          var l = s[o];
          return l == null || (t.sign === ">" ? l > r && a.push(o) : t.sign === "<" ? l < r && a.push(o) : t.sign === "<=" ? l <= r && a.push(
          o) : l >= r && a.push(o)), a;
        }, []);
      }, "select")
    },
    cover: {
      matches: ["coverage"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
      select: h2
    },
    cover_in: {
      matches: ["coverage", "place"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
      select: h2
    },
    supports: {
      matches: ["supportType", "feature"],
      regexp: /^(?:(fully|partially)\s+)?supports\s+([\w-]+)$/,
      select: /* @__PURE__ */ i(function(e, t) {
        Wt.loadFeature(Ee.cache, t.feature);
        var r = t.supportType !== "fully", n = Ee.cache[t.feature], s = [];
        for (var a in n) {
          for (var o = bs(a, e), l = o.released.length - 1; l >= 0 && !(o.released[l] in n[a]); )
            l--;
          var u = e.mobileToDesktop && a in Ee.desktopNames && d2(n[a][o.released[l]], r);
          o.versions.forEach(function(c) {
            var p = n[a][c];
            p === void 0 && u && (p = n[Ee.desktopNames[a]][c]), d2(p, r) && s.push(a + " " + c);
          });
        }
        return s;
      }, "select")
    },
    electron_range: {
      matches: ["from", "to"],
      regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = mc(t.from), n = mc(t.to), s = parseFloat(t.from), a = parseFloat(t.to);
        if (!Jr[r])
          throw new dr("Unknown version " + s + " of electron");
        if (!Jr[n])
          throw new dr("Unknown version " + a + " of electron");
        return Object.keys(Jr).filter(function(o) {
          var l = parseFloat(o);
          return l >= s && l <= a;
        }).map(function(o) {
          return "chrome " + Jr[o];
        });
      }, "select")
    },
    node_range: {
      matches: ["from", "to"],
      regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return Ee.nodeVersions.filter(u2(">=", t.from)).filter(u2("<=", t.to)).map(function(r) {
          return "node " + r;
        });
      }, "select")
    },
    browser_range: {
      matches: ["browser", "from", "to"],
      regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = Ki(t.browser, e), n = parseFloat(gc(r, t.from) || t.from), s = parseFloat(gc(r, t.to) || t.to);
        function a(o) {
          var l = parseFloat(o);
          return l >= n && l <= s;
        }
        return i(a, "filter"), r.released.filter(a).map(ys(r.name));
      }, "select")
    },
    electron_ray: {
      matches: ["sign", "version"],
      regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = mc(t.version);
        return Object.keys(Jr).filter(l2(t.sign, r)).map(function(n) {
          return "chrome " + Jr[n];
        });
      }, "select")
    },
    node_ray: {
      matches: ["sign", "version"],
      regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return Ee.nodeVersions.filter(Cce(t.sign, t.version)).map(function(r) {
          return "node " + r;
        });
      }, "select")
    },
    browser_ray: {
      matches: ["browser", "sign", "version"],
      regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = t.version, n = Ki(t.browser, e), s = Ee.versionAliases[n.name][r];
        return s && (r = s), n.released.filter(l2(t.sign, r)).map(function(a) {
          return n.name + " " + a;
        });
      }, "select")
    },
    firefox_esr: {
      matches: [],
      regexp: /^(firefox|ff|fx)\s+esr$/i,
      select: /* @__PURE__ */ i(function() {
        return ["firefox 115", "firefox 128"];
      }, "select")
    },
    opera_mini_all: {
      matches: [],
      regexp: /(operamini|op_mini)\s+all/i,
      select: /* @__PURE__ */ i(function() {
        return ["op_mini all"];
      }, "select")
    },
    electron_version: {
      matches: ["version"],
      regexp: /^electron\s+([\d.]+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = mc(t.version), n = Jr[r];
        if (!n)
          throw new dr(
            "Unknown version " + t.version + " of electron"
          );
        return ["chrome " + n];
      }, "select")
    },
    node_major_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+)$/i,
      select: y0
    },
    node_minor_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+)$/i,
      select: y0
    },
    node_patch_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
      select: y0
    },
    current_node: {
      matches: [],
      regexp: /^current\s+node$/i,
      select: /* @__PURE__ */ i(function(e) {
        return [Wt.currentNode(Gi, e)];
      }, "select")
    },
    maintained_node: {
      matches: [],
      regexp: /^maintained\s+node\s+versions$/i,
      select: /* @__PURE__ */ i(function(e) {
        var t = Date.now(), r = Object.keys(h0).filter(function(n) {
          return t < Date.parse(h0[n].end) && t > Date.parse(h0[n].start) && Ace(n);
        }).map(function(n) {
          return "node " + n.slice(1);
        });
        return Gi(r, e);
      }, "select")
    },
    phantomjs_1_9: {
      matches: [],
      regexp: /^phantomjs\s+1.9$/i,
      select: /* @__PURE__ */ i(function() {
        return ["safari 5"];
      }, "select")
    },
    phantomjs_2_1: {
      matches: [],
      regexp: /^phantomjs\s+2.1$/i,
      select: /* @__PURE__ */ i(function() {
        return ["safari 6"];
      }, "select")
    },
    browser_version: {
      matches: ["browser", "version"],
      regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        var r = t.version;
        /^tp$/i.test(r) && (r = "TP");
        var n = Ki(t.browser, e), s = gc(n, r);
        if (s)
          r = s;
        else if (r.indexOf(".") === -1 ? s = r + ".0" : s = r.replace(/\.0$/, ""), s = gc(n, s), s)
          r = s;
        else {
          if (e.ignoreUnknownVersions)
            return [];
          throw new dr(
            "Unknown version " + r + " of " + t.browser
          );
        }
        return [n.name + " " + r];
      }, "select")
    },
    browserslist_config: {
      matches: [],
      regexp: /^browserslist config$/i,
      select: /* @__PURE__ */ i(function(e) {
        return Ee(void 0, e);
      }, "select")
    },
    extends: {
      matches: ["config"],
      regexp: /^extends (.+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        return Gi(Wt.loadQueries(e, t.config), e);
      }, "select")
    },
    defaults: {
      matches: [],
      regexp: /^defaults$/i,
      select: /* @__PURE__ */ i(function(e) {
        return Gi(Ee.defaults, e);
      }, "select")
    },
    dead: {
      matches: [],
      regexp: /^dead$/i,
      select: /* @__PURE__ */ i(function(e) {
        var t = [
          "Baidu >= 0",
          "ie <= 11",
          "ie_mob <= 11",
          "bb <= 10",
          "op_mob <= 12.1",
          "samsung 4"
        ];
        return Gi(t, e);
      }, "select")
    },
    unknown: {
      matches: [],
      regexp: /^(\w+)$/i,
      select: /* @__PURE__ */ i(function(e, t) {
        throw bs(t.query, e) ? new dr(
          "Specify versions in Browserslist query for browser " + t.query
        ) : _ce(t.query);
      }, "select")
    }
  };
  (function() {
    for (var e in Rn) {
      var t = Rn[e];
      Ee.data[e] = {
        name: e,
        versions: o2(Rn[e].versions),
        released: o2(Rn[e].versions.slice(0, -3)),
        releaseDate: Rn[e].release_date
      }, Sc(Ee.usage.global, e, t.usage_global), Ee.versionAliases[e] = {};
      for (var r = 0; r < t.versions.length; r++) {
        var n = t.versions[r];
        if (n && n.indexOf("-") !== -1)
          for (var s = n.split("-"), a = 0; a < s.length; a++)
            Ee.versionAliases[e][s[a]] = n;
      }
    }
    Ee.nodeVersions = xce.map(function(o) {
      return o.version;
    });
  })();
  v2.exports = Ee;
});

// ../node_modules/@babel/helper-validator-option/lib/find-suggestion.js
var S0 = A((T0) => {
  "use strict";
  Object.defineProperty(T0, "__esModule", {
    value: !0
  });
  T0.findSuggestion = Nce;
  var {
    min: A2
  } = Math;
  function Oce(e, t) {
    let r = [], n = [], s, a, o = e.length, l = t.length;
    if (!o)
      return l;
    if (!l)
      return o;
    for (a = 0; a <= l; a++)
      r[a] = a;
    for (s = 1; s <= o; s++) {
      for (n = [s], a = 1; a <= l; a++)
        n[a] = e[s - 1] === t[a - 1] ? r[a - 1] : A2(r[a - 1], r[a], n[a - 1]) + 1;
      r = n;
    }
    return n[l];
  }
  i(Oce, "levenshtein");
  function Nce(e, t) {
    let r = t.map((n) => Oce(n, e));
    return t[r.indexOf(A2(...r))];
  }
  i(Nce, "findSuggestion");
});

// ../node_modules/@babel/helper-validator-option/lib/validator.js
var C2 = A((xc) => {
  "use strict";
  Object.defineProperty(xc, "__esModule", {
    value: !0
  });
  xc.OptionValidator = void 0;
  var Bce = S0(), x0 = class {
    static {
      i(this, "OptionValidator");
    }
    constructor(t) {
      this.descriptor = t;
    }
    validateTopLevelOptions(t, r) {
      let n = Object.keys(r);
      for (let s of Object.keys(t))
        if (!n.includes(s))
          throw new Error(this.formatMessage(`'${s}' is not a valid top-level option.
- Did you mean '${(0, Bce.findSuggestion)(s, n)}'?`));
    }
    validateBooleanOption(t, r, n) {
      return r === void 0 ? n : (this.invariant(typeof r == "boolean", `'${t}' option must be a boolean.`), r);
    }
    validateStringOption(t, r, n) {
      return r === void 0 ? n : (this.invariant(typeof r == "string", `'${t}' option must be a string.`), r);
    }
    invariant(t, r) {
      if (!t)
        throw new Error(this.formatMessage(r));
    }
    formatMessage(t) {
      return `${this.descriptor}: ${t}`;
    }
  };
  xc.OptionValidator = x0;
});

// ../node_modules/@babel/helper-validator-option/lib/index.js
var Pc = A((vc) => {
  "use strict";
  Object.defineProperty(vc, "__esModule", {
    value: !0
  });
  Object.defineProperty(vc, "OptionValidator", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return kce.OptionValidator;
    }, "get")
  });
  Object.defineProperty(vc, "findSuggestion", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Fce.findSuggestion;
    }, "get")
  });
  var kce = C2(), Fce = S0();
});

// ../node_modules/@babel/compat-data/data/native-modules.json
var D2 = A((f2e, jce) => {
  jce.exports = {
    "es6.module": {
      chrome: "61",
      and_chr: "61",
      edge: "16",
      firefox: "60",
      and_ff: "60",
      node: "13.2.0",
      opera: "48",
      op_mob: "45",
      safari: "10.1",
      ios: "10.3",
      samsung: "8.2",
      android: "61",
      electron: "2.0",
      ios_saf: "10.3"
    }
  };
});

// ../node_modules/@babel/compat-data/native-modules.js
var I2 = A((d2e, w2) => {
  w2.exports = D2();
});

// ../node_modules/@babel/helper-compilation-targets/node_modules/yallist/iterator.js
var O2 = A((h2e, _2) => {
  "use strict";
  _2.exports = function(e) {
    e.prototype[Symbol.iterator] = function* () {
      for (let t = this.head; t; t = t.next)
        yield t.value;
    };
  };
});

// ../node_modules/@babel/helper-compilation-targets/node_modules/yallist/yallist.js
var B2 = A((m2e, N2) => {
  "use strict";
  N2.exports = rt;
  rt.Node = ri;
  rt.create = rt;
  function rt(e) {
    var t = this;
    if (t instanceof rt || (t = new rt()), t.tail = null, t.head = null, t.length = 0, e && typeof e.forEach == "function")
      e.forEach(function(s) {
        t.push(s);
      });
    else if (arguments.length > 0)
      for (var r = 0, n = arguments.length; r < n; r++)
        t.push(arguments[r]);
    return t;
  }
  i(rt, "Yallist");
  rt.prototype.removeNode = function(e) {
    if (e.list !== this)
      throw new Error("removing node which does not belong to this list");
    var t = e.next, r = e.prev;
    return t && (t.prev = r), r && (r.next = t), e === this.head && (this.head = t), e === this.tail && (this.tail = r), e.list.length--, e.
    next = null, e.prev = null, e.list = null, t;
  };
  rt.prototype.unshiftNode = function(e) {
    if (e !== this.head) {
      e.list && e.list.removeNode(e);
      var t = this.head;
      e.list = this, e.next = t, t && (t.prev = e), this.head = e, this.tail || (this.tail = e), this.length++;
    }
  };
  rt.prototype.pushNode = function(e) {
    if (e !== this.tail) {
      e.list && e.list.removeNode(e);
      var t = this.tail;
      e.list = this, e.prev = t, t && (t.next = e), this.tail = e, this.head || (this.head = e), this.length++;
    }
  };
  rt.prototype.push = function() {
    for (var e = 0, t = arguments.length; e < t; e++)
      Mce(this, arguments[e]);
    return this.length;
  };
  rt.prototype.unshift = function() {
    for (var e = 0, t = arguments.length; e < t; e++)
      Rce(this, arguments[e]);
    return this.length;
  };
  rt.prototype.pop = function() {
    if (this.tail) {
      var e = this.tail.value;
      return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, e;
    }
  };
  rt.prototype.shift = function() {
    if (this.head) {
      var e = this.head.value;
      return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, e;
    }
  };
  rt.prototype.forEach = function(e, t) {
    t = t || this;
    for (var r = this.head, n = 0; r !== null; n++)
      e.call(t, r.value, n, this), r = r.next;
  };
  rt.prototype.forEachReverse = function(e, t) {
    t = t || this;
    for (var r = this.tail, n = this.length - 1; r !== null; n--)
      e.call(t, r.value, n, this), r = r.prev;
  };
  rt.prototype.get = function(e) {
    for (var t = 0, r = this.head; r !== null && t < e; t++)
      r = r.next;
    if (t === e && r !== null)
      return r.value;
  };
  rt.prototype.getReverse = function(e) {
    for (var t = 0, r = this.tail; r !== null && t < e; t++)
      r = r.prev;
    if (t === e && r !== null)
      return r.value;
  };
  rt.prototype.map = function(e, t) {
    t = t || this;
    for (var r = new rt(), n = this.head; n !== null; )
      r.push(e.call(t, n.value, this)), n = n.next;
    return r;
  };
  rt.prototype.mapReverse = function(e, t) {
    t = t || this;
    for (var r = new rt(), n = this.tail; n !== null; )
      r.push(e.call(t, n.value, this)), n = n.prev;
    return r;
  };
  rt.prototype.reduce = function(e, t) {
    var r, n = this.head;
    if (arguments.length > 1)
      r = t;
    else if (this.head)
      n = this.head.next, r = this.head.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var s = 0; n !== null; s++)
      r = e(r, n.value, s), n = n.next;
    return r;
  };
  rt.prototype.reduceReverse = function(e, t) {
    var r, n = this.tail;
    if (arguments.length > 1)
      r = t;
    else if (this.tail)
      n = this.tail.prev, r = this.tail.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var s = this.length - 1; n !== null; s--)
      r = e(r, n.value, s), n = n.prev;
    return r;
  };
  rt.prototype.toArray = function() {
    for (var e = new Array(this.length), t = 0, r = this.head; r !== null; t++)
      e[t] = r.value, r = r.next;
    return e;
  };
  rt.prototype.toArrayReverse = function() {
    for (var e = new Array(this.length), t = 0, r = this.tail; r !== null; t++)
      e[t] = r.value, r = r.prev;
    return e;
  };
  rt.prototype.slice = function(e, t) {
    t = t || this.length, t < 0 && (t += this.length), e = e || 0, e < 0 && (e += this.length);
    var r = new rt();
    if (t < e || t < 0)
      return r;
    e < 0 && (e = 0), t > this.length && (t = this.length);
    for (var n = 0, s = this.head; s !== null && n < e; n++)
      s = s.next;
    for (; s !== null && n < t; n++, s = s.next)
      r.push(s.value);
    return r;
  };
  rt.prototype.sliceReverse = function(e, t) {
    t = t || this.length, t < 0 && (t += this.length), e = e || 0, e < 0 && (e += this.length);
    var r = new rt();
    if (t < e || t < 0)
      return r;
    e < 0 && (e = 0), t > this.length && (t = this.length);
    for (var n = this.length, s = this.tail; s !== null && n > t; n--)
      s = s.prev;
    for (; s !== null && n > e; n--, s = s.prev)
      r.push(s.value);
    return r;
  };
  rt.prototype.splice = function(e, t) {
    e > this.length && (e = this.length - 1), e < 0 && (e = this.length + e);
    for (var r = 0, n = this.head; n !== null && r < e; r++)
      n = n.next;
    for (var s = [], r = 0; n && r < t; r++)
      s.push(n.value), n = this.removeNode(n);
    n === null && (n = this.tail), n !== this.head && n !== this.tail && (n = n.prev);
    for (var r = 2; r < arguments.length; r++)
      n = Lce(this, n, arguments[r]);
    return s;
  };
  rt.prototype.reverse = function() {
    for (var e = this.head, t = this.tail, r = e; r !== null; r = r.prev) {
      var n = r.prev;
      r.prev = r.next, r.next = n;
    }
    return this.head = t, this.tail = e, this;
  };
  function Lce(e, t, r) {
    var n = t === e.head ? new ri(r, null, t, e) : new ri(r, t, t.next, e);
    return n.next === null && (e.tail = n), n.prev === null && (e.head = n), e.length++, n;
  }
  i(Lce, "insert");
  function Mce(e, t) {
    e.tail = new ri(t, e.tail, null, e), e.head || (e.head = e.tail), e.length++;
  }
  i(Mce, "push");
  function Rce(e, t) {
    e.head = new ri(t, null, e.head, e), e.tail || (e.tail = e.head), e.length++;
  }
  i(Rce, "unshift");
  function ri(e, t, r, n) {
    if (!(this instanceof ri))
      return new ri(e, t, r, n);
    this.list = n, this.value = e, t ? (t.next = this, this.prev = t) : this.prev = null, r ? (r.prev = this, this.next = r) : this.next = null;
  }
  i(ri, "Node");
  try {
    O2()(rt);
  } catch {
  }
});

// ../node_modules/@babel/helper-compilation-targets/node_modules/lru-cache/index.js
var M2 = A((g2e, L2) => {
  "use strict";
  var qce = B2(), ni = Symbol("max"), Un = Symbol("length"), Hi = Symbol("lengthCalculator"), So = Symbol("allowStale"), si = Symbol("maxAge"),
  qn = Symbol("dispose"), k2 = Symbol("noDisposeOnSet"), Mt = Symbol("lruList"), zr = Symbol("cache"), j2 = Symbol("updateAgeOnGet"), v0 = /* @__PURE__ */ i(
  () => 1, "naiveLength"), A0 = class {
    static {
      i(this, "LRUCache");
    }
    constructor(t) {
      if (typeof t == "number" && (t = { max: t }), t || (t = {}), t.max && (typeof t.max != "number" || t.max < 0))
        throw new TypeError("max must be a non-negative number");
      let r = this[ni] = t.max || 1 / 0, n = t.length || v0;
      if (this[Hi] = typeof n != "function" ? v0 : n, this[So] = t.stale || !1, t.maxAge && typeof t.maxAge != "number")
        throw new TypeError("maxAge must be a number");
      this[si] = t.maxAge || 0, this[qn] = t.dispose, this[k2] = t.noDisposeOnSet || !1, this[j2] = t.updateAgeOnGet || !1, this.reset();
    }
    // resize the cache when the max changes.
    set max(t) {
      if (typeof t != "number" || t < 0)
        throw new TypeError("max must be a non-negative number");
      this[ni] = t || 1 / 0, To(this);
    }
    get max() {
      return this[ni];
    }
    set allowStale(t) {
      this[So] = !!t;
    }
    get allowStale() {
      return this[So];
    }
    set maxAge(t) {
      if (typeof t != "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[si] = t, To(this);
    }
    get maxAge() {
      return this[si];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(t) {
      typeof t != "function" && (t = v0), t !== this[Hi] && (this[Hi] = t, this[Un] = 0, this[Mt].forEach((r) => {
        r.length = this[Hi](r.value, r.key), this[Un] += r.length;
      })), To(this);
    }
    get lengthCalculator() {
      return this[Hi];
    }
    get length() {
      return this[Un];
    }
    get itemCount() {
      return this[Mt].length;
    }
    rforEach(t, r) {
      r = r || this;
      for (let n = this[Mt].tail; n !== null; ) {
        let s = n.prev;
        F2(this, t, n, r), n = s;
      }
    }
    forEach(t, r) {
      r = r || this;
      for (let n = this[Mt].head; n !== null; ) {
        let s = n.next;
        F2(this, t, n, r), n = s;
      }
    }
    keys() {
      return this[Mt].toArray().map((t) => t.key);
    }
    values() {
      return this[Mt].toArray().map((t) => t.value);
    }
    reset() {
      this[qn] && this[Mt] && this[Mt].length && this[Mt].forEach((t) => this[qn](t.key, t.value)), this[zr] = /* @__PURE__ */ new Map(), this[Mt] =
      new qce(), this[Un] = 0;
    }
    dump() {
      return this[Mt].map((t) => Ac(this, t) ? !1 : {
        k: t.key,
        v: t.value,
        e: t.now + (t.maxAge || 0)
      }).toArray().filter((t) => t);
    }
    dumpLru() {
      return this[Mt];
    }
    set(t, r, n) {
      if (n = n || this[si], n && typeof n != "number")
        throw new TypeError("maxAge must be a number");
      let s = n ? Date.now() : 0, a = this[Hi](r, t);
      if (this[zr].has(t)) {
        if (a > this[ni])
          return Yi(this, this[zr].get(t)), !1;
        let u = this[zr].get(t).value;
        return this[qn] && (this[k2] || this[qn](t, u.value)), u.now = s, u.maxAge = n, u.value = r, this[Un] += a - u.length, u.length = a,
        this.get(t), To(this), !0;
      }
      let o = new C0(t, r, a, s, n);
      return o.length > this[ni] ? (this[qn] && this[qn](t, r), !1) : (this[Un] += o.length, this[Mt].unshift(o), this[zr].set(t, this[Mt].head),
      To(this), !0);
    }
    has(t) {
      if (!this[zr].has(t)) return !1;
      let r = this[zr].get(t).value;
      return !Ac(this, r);
    }
    get(t) {
      return P0(this, t, !0);
    }
    peek(t) {
      return P0(this, t, !1);
    }
    pop() {
      let t = this[Mt].tail;
      return t ? (Yi(this, t), t.value) : null;
    }
    del(t) {
      Yi(this, this[zr].get(t));
    }
    load(t) {
      this.reset();
      let r = Date.now();
      for (let n = t.length - 1; n >= 0; n--) {
        let s = t[n], a = s.e || 0;
        if (a === 0)
          this.set(s.k, s.v);
        else {
          let o = a - r;
          o > 0 && this.set(s.k, s.v, o);
        }
      }
    }
    prune() {
      this[zr].forEach((t, r) => P0(this, r, !1));
    }
  }, P0 = /* @__PURE__ */ i((e, t, r) => {
    let n = e[zr].get(t);
    if (n) {
      let s = n.value;
      if (Ac(e, s)) {
        if (Yi(e, n), !e[So])
          return;
      } else
        r && (e[j2] && (n.value.now = Date.now()), e[Mt].unshiftNode(n));
      return s.value;
    }
  }, "get"), Ac = /* @__PURE__ */ i((e, t) => {
    if (!t || !t.maxAge && !e[si])
      return !1;
    let r = Date.now() - t.now;
    return t.maxAge ? r > t.maxAge : e[si] && r > e[si];
  }, "isStale"), To = /* @__PURE__ */ i((e) => {
    if (e[Un] > e[ni])
      for (let t = e[Mt].tail; e[Un] > e[ni] && t !== null; ) {
        let r = t.prev;
        Yi(e, t), t = r;
      }
  }, "trim"), Yi = /* @__PURE__ */ i((e, t) => {
    if (t) {
      let r = t.value;
      e[qn] && e[qn](r.key, r.value), e[Un] -= r.length, e[zr].delete(r.key), e[Mt].removeNode(t);
    }
  }, "del"), C0 = class {
    static {
      i(this, "Entry");
    }
    constructor(t, r, n, s, a) {
      this.key = t, this.value = r, this.length = n, this.now = s, this.maxAge = a || 0;
    }
  }, F2 = /* @__PURE__ */ i((e, t, r, n) => {
    let s = r.value;
    Ac(e, s) && (Yi(e, r), e[So] || (s = void 0)), s && t.call(n, s.value, s.key, e);
  }, "forEachStep");
  L2.exports = A0;
});

// ../node_modules/@babel/helper-compilation-targets/lib/targets.js
var Cc = A((Ji) => {
  "use strict";
  Object.defineProperty(Ji, "__esModule", {
    value: !0
  });
  Ji.unreleasedLabels = Ji.browserNameMap = void 0;
  var E2e = Ji.unreleasedLabels = {
    safari: "tp"
  }, T2e = Ji.browserNameMap = {
    and_chr: "chrome",
    and_ff: "firefox",
    android: "android",
    chrome: "chrome",
    edge: "edge",
    firefox: "firefox",
    ie: "ie",
    ie_mob: "ie",
    ios_saf: "ios",
    node: "node",
    deno: "deno",
    op_mob: "opera_mobile",
    opera: "opera",
    safari: "safari",
    samsung: "samsung"
  };
});

// ../node_modules/@babel/helper-compilation-targets/lib/utils.js
var Dc = A((Es) => {
  "use strict";
  Object.defineProperty(Es, "__esModule", {
    value: !0
  });
  Es.getHighestUnreleased = Gce;
  Es.getLowestImplementedVersion = Hce;
  Es.getLowestUnreleased = V2;
  Es.isUnreleasedVersion = Kce;
  Es.semverMin = U2;
  Es.semverify = Wce;
  var R2 = le("semver"), Uce = Pc(), q2 = Cc(), Vce = /^(?:\d+|\d(?:\d?[^\d\n\r\u2028\u2029]\d+|\d{2,}(?:[^\d\n\r\u2028\u2029]\d+)?))$/, $ce = new Uce.
  OptionValidator("@babel/helper-compilation-targets");
  function U2(e, t) {
    return e && R2.lt(e, t) ? e : t;
  }
  i(U2, "semverMin");
  function Wce(e) {
    if (typeof e == "string" && R2.valid(e))
      return e;
    $ce.invariant(typeof e == "number" || typeof e == "string" && Vce.test(e), `'${e}' is not a valid version`), e = e.toString();
    let t = 0, r = 0;
    for (; (t = e.indexOf(".", t + 1)) > 0; )
      r++;
    return e + ".0".repeat(2 - r);
  }
  i(Wce, "semverify");
  function Kce(e, t) {
    let r = q2.unreleasedLabels[t];
    return !!r && r === e.toString().toLowerCase();
  }
  i(Kce, "isUnreleasedVersion");
  function V2(e, t, r) {
    let n = q2.unreleasedLabels[r];
    return e === n ? t : t === n ? e : U2(e, t);
  }
  i(V2, "getLowestUnreleased");
  function Gce(e, t, r) {
    return V2(e, t, r) === e ? t : e;
  }
  i(Gce, "getHighestUnreleased");
  function Hce(e, t) {
    let r = e[t];
    return !r && t === "android" ? e.chrome : r;
  }
  i(Hce, "getLowestImplementedVersion");
});

// ../node_modules/@babel/helper-compilation-targets/lib/options.js
var $2 = A((wc) => {
  "use strict";
  Object.defineProperty(wc, "__esModule", {
    value: !0
  });
  wc.TargetNames = void 0;
  var P2e = wc.TargetNames = {
    node: "node",
    deno: "deno",
    chrome: "chrome",
    opera: "opera",
    edge: "edge",
    firefox: "firefox",
    safari: "safari",
    ie: "ie",
    ios: "ios",
    android: "android",
    electron: "electron",
    samsung: "samsung",
    rhino: "rhino",
    opera_mobile: "opera_mobile"
  };
});

// ../node_modules/@babel/helper-compilation-targets/lib/pretty.js
var D0 = A((Ic) => {
  "use strict";
  Object.defineProperty(Ic, "__esModule", {
    value: !0
  });
  Ic.prettifyTargets = zce;
  Ic.prettifyVersion = W2;
  var Yce = le("semver"), Jce = Cc();
  function W2(e) {
    if (typeof e != "string")
      return e;
    let {
      major: t,
      minor: r,
      patch: n
    } = Yce.parse(e), s = [t];
    return (r || n) && s.push(r), n && s.push(n), s.join(".");
  }
  i(W2, "prettifyVersion");
  function zce(e) {
    return Object.keys(e).reduce((t, r) => {
      let n = e[r], s = Jce.unreleasedLabels[r];
      return typeof n == "string" && s !== n && (n = W2(n)), t[r] = n, t;
    }, {});
  }
  i(zce, "prettifyTargets");
});

// ../node_modules/@babel/helper-compilation-targets/lib/debug.js
var G2 = A((w0) => {
  "use strict";
  Object.defineProperty(w0, "__esModule", {
    value: !0
  });
  w0.getInclusionReasons = Qce;
  var Xce = le("semver"), K2 = D0(), _c = Dc();
  function Qce(e, t, r) {
    let n = r[e] || {};
    return Object.keys(t).reduce((s, a) => {
      let o = (0, _c.getLowestImplementedVersion)(n, a), l = t[a];
      if (!o)
        s[a] = (0, K2.prettifyVersion)(l);
      else {
        let u = (0, _c.isUnreleasedVersion)(o, a);
        !(0, _c.isUnreleasedVersion)(l, a) && (u || Xce.lt(l.toString(), (0, _c.semverify)(o))) && (s[a] = (0, K2.prettifyVersion)(l));
      }
      return s;
    }, {});
  }
  i(Qce, "getInclusionReasons");
});

// ../node_modules/@babel/compat-data/data/plugins.json
var H2 = A((_2e, Zce) => {
  Zce.exports = {
    "transform-duplicate-named-capturing-groups-regex": {
      chrome: "126",
      opera: "112",
      edge: "126",
      firefox: "129",
      safari: "17.4",
      node: "23",
      ios: "17.4",
      electron: "31.0"
    },
    "transform-regexp-modifiers": {
      chrome: "125",
      opera: "111",
      edge: "125",
      firefox: "132",
      node: "23",
      electron: "31.0"
    },
    "transform-unicode-sets-regex": {
      chrome: "112",
      opera: "98",
      edge: "112",
      firefox: "116",
      safari: "17",
      node: "20",
      deno: "1.32",
      ios: "17",
      opera_mobile: "75",
      electron: "24.0"
    },
    "bugfix/transform-v8-static-class-fields-redefine-readonly": {
      chrome: "98",
      opera: "84",
      edge: "98",
      firefox: "75",
      safari: "15",
      node: "12",
      deno: "1.18",
      ios: "15",
      samsung: "11",
      opera_mobile: "52",
      electron: "17.0"
    },
    "bugfix/transform-firefox-class-in-computed-class-key": {
      chrome: "74",
      opera: "62",
      edge: "79",
      safari: "16",
      node: "12",
      deno: "1",
      ios: "16",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "bugfix/transform-safari-class-field-initializer-scope": {
      chrome: "74",
      opera: "62",
      edge: "79",
      firefox: "69",
      safari: "16",
      node: "12",
      deno: "1",
      ios: "16",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "transform-class-static-block": {
      chrome: "94",
      opera: "80",
      edge: "94",
      firefox: "93",
      safari: "16.4",
      node: "16.11",
      deno: "1.14",
      ios: "16.4",
      samsung: "17",
      opera_mobile: "66",
      electron: "15.0"
    },
    "proposal-class-static-block": {
      chrome: "94",
      opera: "80",
      edge: "94",
      firefox: "93",
      safari: "16.4",
      node: "16.11",
      deno: "1.14",
      ios: "16.4",
      samsung: "17",
      opera_mobile: "66",
      electron: "15.0"
    },
    "transform-private-property-in-object": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "90",
      safari: "15",
      node: "16.9",
      deno: "1.9",
      ios: "15",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "proposal-private-property-in-object": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "90",
      safari: "15",
      node: "16.9",
      deno: "1.9",
      ios: "15",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "transform-class-properties": {
      chrome: "74",
      opera: "62",
      edge: "79",
      firefox: "90",
      safari: "14.1",
      node: "12",
      deno: "1",
      ios: "14.5",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "proposal-class-properties": {
      chrome: "74",
      opera: "62",
      edge: "79",
      firefox: "90",
      safari: "14.1",
      node: "12",
      deno: "1",
      ios: "14.5",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "transform-private-methods": {
      chrome: "84",
      opera: "70",
      edge: "84",
      firefox: "90",
      safari: "15",
      node: "14.6",
      deno: "1",
      ios: "15",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "proposal-private-methods": {
      chrome: "84",
      opera: "70",
      edge: "84",
      firefox: "90",
      safari: "15",
      node: "14.6",
      deno: "1",
      ios: "15",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "transform-numeric-separator": {
      chrome: "75",
      opera: "62",
      edge: "79",
      firefox: "70",
      safari: "13",
      node: "12.5",
      deno: "1",
      ios: "13",
      samsung: "11",
      rhino: "1.7.14",
      opera_mobile: "54",
      electron: "6.0"
    },
    "proposal-numeric-separator": {
      chrome: "75",
      opera: "62",
      edge: "79",
      firefox: "70",
      safari: "13",
      node: "12.5",
      deno: "1",
      ios: "13",
      samsung: "11",
      rhino: "1.7.14",
      opera_mobile: "54",
      electron: "6.0"
    },
    "transform-logical-assignment-operators": {
      chrome: "85",
      opera: "71",
      edge: "85",
      firefox: "79",
      safari: "14",
      node: "15",
      deno: "1.2",
      ios: "14",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "proposal-logical-assignment-operators": {
      chrome: "85",
      opera: "71",
      edge: "85",
      firefox: "79",
      safari: "14",
      node: "15",
      deno: "1.2",
      ios: "14",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "transform-nullish-coalescing-operator": {
      chrome: "80",
      opera: "67",
      edge: "80",
      firefox: "72",
      safari: "13.1",
      node: "14",
      deno: "1",
      ios: "13.4",
      samsung: "13",
      opera_mobile: "57",
      electron: "8.0"
    },
    "proposal-nullish-coalescing-operator": {
      chrome: "80",
      opera: "67",
      edge: "80",
      firefox: "72",
      safari: "13.1",
      node: "14",
      deno: "1",
      ios: "13.4",
      samsung: "13",
      opera_mobile: "57",
      electron: "8.0"
    },
    "transform-optional-chaining": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "74",
      safari: "13.1",
      node: "16.9",
      deno: "1.9",
      ios: "13.4",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "proposal-optional-chaining": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "74",
      safari: "13.1",
      node: "16.9",
      deno: "1.9",
      ios: "13.4",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "transform-json-strings": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "62",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "9",
      rhino: "1.7.14",
      opera_mobile: "47",
      electron: "3.0"
    },
    "proposal-json-strings": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "62",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "9",
      rhino: "1.7.14",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-optional-catch-binding": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "58",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "proposal-optional-catch-binding": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "58",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-parameters": {
      chrome: "49",
      opera: "36",
      edge: "18",
      firefox: "53",
      safari: "16.3",
      node: "6",
      deno: "1",
      ios: "16.3",
      samsung: "5",
      opera_mobile: "36",
      electron: "0.37"
    },
    "transform-async-generator-functions": {
      chrome: "63",
      opera: "50",
      edge: "79",
      firefox: "57",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "8",
      opera_mobile: "46",
      electron: "3.0"
    },
    "proposal-async-generator-functions": {
      chrome: "63",
      opera: "50",
      edge: "79",
      firefox: "57",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "8",
      opera_mobile: "46",
      electron: "3.0"
    },
    "transform-object-rest-spread": {
      chrome: "60",
      opera: "47",
      edge: "79",
      firefox: "55",
      safari: "11.1",
      node: "8.3",
      deno: "1",
      ios: "11.3",
      samsung: "8",
      opera_mobile: "44",
      electron: "2.0"
    },
    "proposal-object-rest-spread": {
      chrome: "60",
      opera: "47",
      edge: "79",
      firefox: "55",
      safari: "11.1",
      node: "8.3",
      deno: "1",
      ios: "11.3",
      samsung: "8",
      opera_mobile: "44",
      electron: "2.0"
    },
    "transform-dotall-regex": {
      chrome: "62",
      opera: "49",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "8.10",
      deno: "1",
      ios: "11.3",
      samsung: "8",
      rhino: "1.7.15",
      opera_mobile: "46",
      electron: "3.0"
    },
    "transform-unicode-property-regex": {
      chrome: "64",
      opera: "51",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "proposal-unicode-property-regex": {
      chrome: "64",
      opera: "51",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-named-capturing-groups-regex": {
      chrome: "64",
      opera: "51",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-async-to-generator": {
      chrome: "55",
      opera: "42",
      edge: "15",
      firefox: "52",
      safari: "11",
      node: "7.6",
      deno: "1",
      ios: "11",
      samsung: "6",
      opera_mobile: "42",
      electron: "1.6"
    },
    "transform-exponentiation-operator": {
      chrome: "52",
      opera: "39",
      edge: "14",
      firefox: "52",
      safari: "10.1",
      node: "7",
      deno: "1",
      ios: "10.3",
      samsung: "6",
      rhino: "1.7.14",
      opera_mobile: "41",
      electron: "1.3"
    },
    "transform-template-literals": {
      chrome: "41",
      opera: "28",
      edge: "13",
      firefox: "34",
      safari: "13",
      node: "4",
      deno: "1",
      ios: "13",
      samsung: "3.4",
      opera_mobile: "28",
      electron: "0.21"
    },
    "transform-literals": {
      chrome: "44",
      opera: "31",
      edge: "12",
      firefox: "53",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "4",
      rhino: "1.7.15",
      opera_mobile: "32",
      electron: "0.30"
    },
    "transform-function-name": {
      chrome: "51",
      opera: "38",
      edge: "79",
      firefox: "53",
      safari: "10",
      node: "6.5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "41",
      electron: "1.2"
    },
    "transform-arrow-functions": {
      chrome: "47",
      opera: "34",
      edge: "13",
      firefox: "43",
      safari: "10",
      node: "6",
      deno: "1",
      ios: "10",
      samsung: "5",
      rhino: "1.7.13",
      opera_mobile: "34",
      electron: "0.36"
    },
    "transform-block-scoped-functions": {
      chrome: "41",
      opera: "28",
      edge: "12",
      firefox: "46",
      safari: "10",
      node: "4",
      deno: "1",
      ie: "11",
      ios: "10",
      samsung: "3.4",
      opera_mobile: "28",
      electron: "0.21"
    },
    "transform-classes": {
      chrome: "46",
      opera: "33",
      edge: "13",
      firefox: "45",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-object-super": {
      chrome: "46",
      opera: "33",
      edge: "13",
      firefox: "45",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-shorthand-properties": {
      chrome: "43",
      opera: "30",
      edge: "12",
      firefox: "33",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "4",
      rhino: "1.7.14",
      opera_mobile: "30",
      electron: "0.27"
    },
    "transform-duplicate-keys": {
      chrome: "42",
      opera: "29",
      edge: "12",
      firefox: "34",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "3.4",
      opera_mobile: "29",
      electron: "0.25"
    },
    "transform-computed-properties": {
      chrome: "44",
      opera: "31",
      edge: "12",
      firefox: "34",
      safari: "7.1",
      node: "4",
      deno: "1",
      ios: "8",
      samsung: "4",
      opera_mobile: "32",
      electron: "0.30"
    },
    "transform-for-of": {
      chrome: "51",
      opera: "38",
      edge: "15",
      firefox: "53",
      safari: "10",
      node: "6.5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "41",
      electron: "1.2"
    },
    "transform-sticky-regex": {
      chrome: "49",
      opera: "36",
      edge: "13",
      firefox: "3",
      safari: "10",
      node: "6",
      deno: "1",
      ios: "10",
      samsung: "5",
      rhino: "1.7.15",
      opera_mobile: "36",
      electron: "0.37"
    },
    "transform-unicode-escapes": {
      chrome: "44",
      opera: "31",
      edge: "12",
      firefox: "53",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "4",
      rhino: "1.7.15",
      opera_mobile: "32",
      electron: "0.30"
    },
    "transform-unicode-regex": {
      chrome: "50",
      opera: "37",
      edge: "13",
      firefox: "46",
      safari: "12",
      node: "6",
      deno: "1",
      ios: "12",
      samsung: "5",
      opera_mobile: "37",
      electron: "1.1"
    },
    "transform-spread": {
      chrome: "46",
      opera: "33",
      edge: "13",
      firefox: "45",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-destructuring": {
      chrome: "51",
      opera: "38",
      edge: "15",
      firefox: "53",
      safari: "10",
      node: "6.5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "41",
      electron: "1.2"
    },
    "transform-block-scoping": {
      chrome: "50",
      opera: "37",
      edge: "14",
      firefox: "53",
      safari: "11",
      node: "6",
      deno: "1",
      ios: "11",
      samsung: "5",
      opera_mobile: "37",
      electron: "1.1"
    },
    "transform-typeof-symbol": {
      chrome: "38",
      opera: "25",
      edge: "12",
      firefox: "36",
      safari: "9",
      node: "0.12",
      deno: "1",
      ios: "9",
      samsung: "3",
      rhino: "1.7.13",
      opera_mobile: "25",
      electron: "0.20"
    },
    "transform-new-target": {
      chrome: "46",
      opera: "33",
      edge: "14",
      firefox: "41",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-regenerator": {
      chrome: "50",
      opera: "37",
      edge: "13",
      firefox: "53",
      safari: "10",
      node: "6",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "37",
      electron: "1.1"
    },
    "transform-member-expression-literals": {
      chrome: "7",
      opera: "12",
      edge: "12",
      firefox: "2",
      safari: "5.1",
      node: "0.4",
      deno: "1",
      ie: "9",
      android: "4",
      ios: "6",
      phantom: "1.9",
      samsung: "1",
      rhino: "1.7.13",
      opera_mobile: "12",
      electron: "0.20"
    },
    "transform-property-literals": {
      chrome: "7",
      opera: "12",
      edge: "12",
      firefox: "2",
      safari: "5.1",
      node: "0.4",
      deno: "1",
      ie: "9",
      android: "4",
      ios: "6",
      phantom: "1.9",
      samsung: "1",
      rhino: "1.7.13",
      opera_mobile: "12",
      electron: "0.20"
    },
    "transform-reserved-words": {
      chrome: "13",
      opera: "10.50",
      edge: "12",
      firefox: "2",
      safari: "3.1",
      node: "0.6",
      deno: "1",
      ie: "9",
      android: "4.4",
      ios: "6",
      phantom: "1.9",
      samsung: "1",
      rhino: "1.7.13",
      opera_mobile: "10.1",
      electron: "0.20"
    },
    "transform-export-namespace-from": {
      chrome: "72",
      deno: "1.0",
      edge: "79",
      firefox: "80",
      node: "13.2",
      opera: "60",
      opera_mobile: "51",
      safari: "14.1",
      ios: "14.5",
      samsung: "11.0",
      android: "72",
      electron: "5.0"
    },
    "proposal-export-namespace-from": {
      chrome: "72",
      deno: "1.0",
      edge: "79",
      firefox: "80",
      node: "13.2",
      opera: "60",
      opera_mobile: "51",
      safari: "14.1",
      ios: "14.5",
      samsung: "11.0",
      android: "72",
      electron: "5.0"
    }
  };
});

// ../node_modules/@babel/compat-data/plugins.js
var J2 = A((O2e, Y2) => {
  Y2.exports = H2();
});

// ../node_modules/@babel/helper-compilation-targets/lib/filter-items.js
var Z2 = A((xo) => {
  "use strict";
  Object.defineProperty(xo, "__esModule", {
    value: !0
  });
  xo.default = tpe;
  xo.isRequired = Q2;
  xo.targetsSupported = X2;
  var z2 = le("semver"), epe = J2(), Oc = Dc();
  function X2(e, t) {
    let r = Object.keys(e);
    return r.length === 0 ? !1 : r.filter((s) => {
      let a = (0, Oc.getLowestImplementedVersion)(t, s);
      if (!a)
        return !0;
      let o = e[s];
      if ((0, Oc.isUnreleasedVersion)(o, s))
        return !1;
      if ((0, Oc.isUnreleasedVersion)(a, s))
        return !0;
      if (!z2.valid(o.toString()))
        throw new Error(`Invalid version passed for target "${s}": "${o}". Versions must be in semver format (major.minor.patch)`);
      return z2.gt((0, Oc.semverify)(a), o.toString());
    }).length === 0;
  }
  i(X2, "targetsSupported");
  function Q2(e, t, {
    compatData: r = epe,
    includes: n,
    excludes: s
  } = {}) {
    return s != null && s.has(e) ? !1 : n != null && n.has(e) ? !0 : !X2(t, r[e]);
  }
  i(Q2, "isRequired");
  function tpe(e, t, r, n, s, a, o) {
    let l = /* @__PURE__ */ new Set(), u = {
      compatData: e,
      includes: t,
      excludes: r
    };
    for (let c in e)
      if (Q2(c, n, u))
        l.add(c);
      else if (o) {
        let p = o.get(c);
        p && l.add(p);
      }
    return s?.forEach((c) => !r.has(c) && l.add(c)), a?.forEach((c) => !t.has(c) && l.delete(c)), l;
  }
  i(tpe, "filterItems");
});

// ../node_modules/@babel/helper-compilation-targets/lib/index.js
var B0 = A((yn) => {
  "use strict";
  Object.defineProperty(yn, "__esModule", {
    value: !0
  });
  Object.defineProperty(yn, "TargetNames", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return O0.TargetNames;
    }, "get")
  });
  yn.default = mpe;
  Object.defineProperty(yn, "filterItems", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return nD.default;
    }, "get")
  });
  Object.defineProperty(yn, "getInclusionReasons", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return ipe.getInclusionReasons;
    }, "get")
  });
  yn.isBrowsersQueryValid = sD;
  Object.defineProperty(yn, "isRequired", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return nD.isRequired;
    }, "get")
  });
  Object.defineProperty(yn, "prettifyTargets", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return spe.prettifyTargets;
    }, "get")
  });
  Object.defineProperty(yn, "unreleasedLabels", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return rD.unreleasedLabels;
    }, "get")
  });
  var _0 = P2(), tD = Pc(), rpe = I2(), npe = M2(), Xr = Dc(), rD = Cc(), O0 = $2(), spe = D0(), ipe = G2(), nD = Z2(), I0 = rpe["es6.module"],
  N0 = new tD.OptionValidator("@babel/helper-compilation-targets");
  function ape(e) {
    let t = Object.keys(O0.TargetNames);
    for (let r of Object.keys(e))
      if (!(r in O0.TargetNames))
        throw new Error(N0.formatMessage(`'${r}' is not a valid target
- Did you mean '${(0, tD.findSuggestion)(r, t)}'?`));
    return e;
  }
  i(ape, "validateTargetNames");
  function sD(e) {
    return typeof e == "string" || Array.isArray(e) && e.every((t) => typeof t == "string");
  }
  i(sD, "isBrowsersQueryValid");
  function ope(e) {
    return N0.invariant(e === void 0 || sD(e), `'${String(e)}' is not a valid browserslist query`), e;
  }
  i(ope, "validateBrowsers");
  function lpe(e) {
    return e.reduce((t, r) => {
      let [n, s] = r.split(" "), a = rD.browserNameMap[n];
      if (!a)
        return t;
      try {
        let o = s.split("-")[0].toLowerCase(), l = (0, Xr.isUnreleasedVersion)(o, a);
        if (!t[a])
          return t[a] = l ? o : (0, Xr.semverify)(o), t;
        let u = t[a], c = (0, Xr.isUnreleasedVersion)(u, a);
        if (c && l)
          t[a] = (0, Xr.getLowestUnreleased)(u, o, a);
        else if (c)
          t[a] = (0, Xr.semverify)(o);
        else if (!c && !l) {
          let p = (0, Xr.semverify)(o);
          t[a] = (0, Xr.semverMin)(u, p);
        }
      } catch {
      }
      return t;
    }, {});
  }
  i(lpe, "getLowestVersions");
  function upe(e) {
    e.length && (console.warn(`Warning, the following targets are using a decimal version:
`), e.forEach(({
      target: t,
      value: r
    }) => console.warn(`  ${t}: ${r}`)), console.warn(`
We recommend using a string for minor/patch versions to avoid numbers like 6.10
getting parsed as 6.1, which can lead to unexpected behavior.
`));
  }
  i(upe, "outputDecimalWarning");
  function iD(e, t) {
    try {
      return (0, Xr.semverify)(t);
    } catch {
      throw new Error(N0.formatMessage(`'${t}' is not a valid value for 'targets.${e}'.`));
    }
  }
  i(iD, "semverifyTarget");
  function cpe(e) {
    return ["node", e === !0 || e === "current" ? process.versions.node : iD("node", e)];
  }
  i(cpe, "nodeTargetParser");
  function ppe(e, t) {
    let r = (0, Xr.isUnreleasedVersion)(t, e) ? t.toLowerCase() : iD(e, t);
    return [e, r];
  }
  i(ppe, "defaultTargetParser");
  function fpe(e) {
    let t = Object.assign({}, e);
    return delete t.esmodules, delete t.browsers, t;
  }
  i(fpe, "generateTargets");
  function dpe(e, t) {
    let r = _0(e, {
      mobileToDesktop: !0,
      env: t
    });
    return lpe(r);
  }
  i(dpe, "resolveTargets");
  var eD = new npe({
    max: 64
  });
  function hpe(e, t) {
    let r = typeof e == "string" ? e : e.join() + t, n = eD.get(r);
    return n || (n = dpe(e, t), eD.set(r, n)), Object.assign({}, n);
  }
  i(hpe, "resolveTargetsCached");
  function mpe(e = {}, t = {}) {
    var r, n;
    let {
      browsers: s,
      esmodules: a
    } = e, {
      configPath: o = ".",
      onBrowserslistConfigFound: l
    } = t;
    ope(s);
    let u = fpe(e), c = ape(u), f = !!s || Object.keys(c).length > 0, h = !t.ignoreBrowserslistConfig && !f;
    if (!s && h) {
      if (s = process.env.BROWSERSLIST, !s) {
        let d = t.configFile || process.env.BROWSERSLIST_CONFIG || _0.findConfigFile(o);
        d != null && (l?.(d), s = _0.loadConfig({
          config: d,
          env: t.browserslistEnv
        }));
      }
      s == null && (s = []);
    }
    if (a && (a !== "intersect" || !((r = s) != null && r.length)) && (s = Object.keys(I0).map((d) => `${d} >= ${I0[d]}`).join(", "), a = !1),
    (n = s) != null && n.length) {
      let d = hpe(s, t.browserslistEnv);
      if (a === "intersect")
        for (let y of Object.keys(d))
          if (y !== "deno" && y !== "ie") {
            let E = I0[y === "opera_mobile" ? "op_mob" : y];
            if (E) {
              let _ = d[y];
              d[y] = (0, Xr.getHighestUnreleased)(_, (0, Xr.semverify)(E), y);
            } else
              delete d[y];
          } else
            delete d[y];
      c = Object.assign(d, c);
    }
    let g = {}, P = [];
    for (let d of Object.keys(c).sort()) {
      let y = c[d];
      typeof y == "number" && y % 1 !== 0 && P.push({
        target: d,
        value: y
      });
      let [E, _] = d === "node" ? cpe(y) : ppe(d, y);
      _ && (g[E] = _);
    }
    return upe(P), g;
  }
  i(mpe, "getTargets");
});

// ../node_modules/@babel/core/lib/config/resolve-targets.js
var k0 = A((Nc) => {
  "use strict";
  Object.defineProperty(Nc, "__esModule", {
    value: !0
  });
  Nc.resolveBrowserslistConfigFile = ype;
  Nc.resolveTargets = gpe;
  function aD() {
    let e = le("path");
    return aD = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(aD, "_path");
  function oD() {
    let e = B0();
    return oD = /* @__PURE__ */ i(function() {
      return e;
    }, "_helperCompilationTargets"), e;
  }
  i(oD, "_helperCompilationTargets");
  function ype(e, t) {
    return aD().resolve(t, e);
  }
  i(ype, "resolveBrowserslistConfigFile");
  function gpe(e, t) {
    let r = e.targets, n;
    typeof r == "string" || Array.isArray(r) ? n = {
      browsers: r
    } : r && ("esmodules" in r ? n = Object.assign({}, r, {
      esmodules: "intersect"
    }) : n = r);
    let {
      browserslistConfigFile: s
    } = e, a, o = !1;
    return typeof s == "string" ? a = s : o = s === !1, (0, oD().default)(n, {
      ignoreBrowserslistConfig: o,
      configFile: a,
      configPath: t,
      browserslistEnv: e.browserslistEnv
    });
  }
  i(gpe, "resolveTargets");
});

// ../node_modules/@babel/core/lib/config/config-descriptors.js
var F0 = A((Po) => {
  "use strict";
  Object.defineProperty(Po, "__esModule", {
    value: !0
  });
  Po.createCachedDescriptors = Spe;
  Po.createDescriptor = gD;
  Po.createUncachedDescriptors = xpe;
  function pD() {
    let e = gr();
    return pD = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(pD, "_gensync");
  var lD = xC(), uD = Co(), bpe = Ao(), vo = Qs(), Epe = k0();
  function Tpe(e, t) {
    var r, n, s, a;
    return e.name === t.name && e.value === t.value && e.options === t.options && e.dirname === t.dirname && e.alias === t.alias && e.ownPass ===
    t.ownPass && ((r = e.file) == null ? void 0 : r.request) === ((n = t.file) == null ? void 0 : n.request) && ((s = e.file) == null ? void 0 :
    s.resolved) === ((a = t.file) == null ? void 0 : a.resolved);
  }
  i(Tpe, "isEqualDescriptor");
  function* cD(e) {
    return e;
  }
  i(cD, "handlerOf");
  function fD(e, t) {
    return typeof e.browserslistConfigFile == "string" && (e.browserslistConfigFile = (0, Epe.resolveBrowserslistConfigFile)(e.browserslistConfigFile,
    t)), e;
  }
  i(fD, "optionsWithResolvedBrowserslistConfigFile");
  function Spe(e, t, r) {
    let {
      plugins: n,
      presets: s,
      passPerPreset: a
    } = t;
    return {
      options: fD(t, e),
      plugins: n ? () => Cpe(n, e)(r) : () => cD([]),
      presets: s ? () => Ppe(s, e)(r)(!!a) : () => cD([])
    };
  }
  i(Spe, "createCachedDescriptors");
  function xpe(e, t, r) {
    return {
      options: fD(t, e),
      plugins: (0, lD.once)(() => mD(t.plugins || [], e, r)),
      presets: (0, lD.once)(() => hD(t.presets || [], e, r, !!t.passPerPreset))
    };
  }
  i(xpe, "createUncachedDescriptors");
  var vpe = /* @__PURE__ */ new WeakMap(), Ppe = (0, vo.makeWeakCacheSync)((e, t) => {
    let r = t.using((n) => n);
    return (0, vo.makeStrongCacheSync)((n) => (0, vo.makeStrongCache)(function* (s) {
      return (yield* hD(e, r, n, s)).map((o) => dD(vpe, o));
    }));
  }), Ape = /* @__PURE__ */ new WeakMap(), Cpe = (0, vo.makeWeakCacheSync)((e, t) => {
    let r = t.using((n) => n);
    return (0, vo.makeStrongCache)(function* (n) {
      return (yield* mD(e, r, n)).map((a) => dD(Ape, a));
    });
  }), Dpe = {};
  function dD(e, t) {
    let {
      value: r,
      options: n = Dpe
    } = t;
    if (n === !1) return t;
    let s = e.get(r);
    s || (s = /* @__PURE__ */ new WeakMap(), e.set(r, s));
    let a = s.get(n);
    if (a || (a = [], s.set(n, a)), !a.includes(t)) {
      let o = a.filter((l) => Tpe(l, t));
      if (o.length > 0)
        return o[0];
      a.push(t);
    }
    return t;
  }
  i(dD, "loadCachedDescriptor");
  function* hD(e, t, r, n) {
    return yield* yD("preset", e, t, r, n);
  }
  i(hD, "createPresetDescriptors");
  function* mD(e, t, r) {
    return yield* yD("plugin", e, t, r);
  }
  i(mD, "createPluginDescriptors");
  function* yD(e, t, r, n, s) {
    let a = yield* pD().all(t.map((o, l) => gD(o, r, {
      type: e,
      alias: `${n}$${l}`,
      ownPass: !!s
    })));
    return wpe(a), a;
  }
  i(yD, "createDescriptors");
  function* gD(e, t, {
    type: r,
    alias: n,
    ownPass: s
  }) {
    let a = (0, bpe.getItemDescriptor)(e);
    if (a)
      return a;
    let o, l, u = e;
    Array.isArray(u) && (u.length === 3 ? [u, l, o] = u : [u, l] = u);
    let c, p = null;
    if (typeof u == "string") {
      if (typeof r != "string")
        throw new Error("To resolve a string-based item, the type of item must be given");
      let f = r === "plugin" ? uD.loadPlugin : uD.loadPreset, h = u;
      ({
        filepath: p,
        value: u
      } = yield* f(u, t)), c = {
        request: h,
        resolved: p
      };
    }
    if (!u)
      throw new Error(`Unexpected falsy value: ${String(u)}`);
    if (typeof u == "object" && u.__esModule)
      if (u.default)
        u = u.default;
      else
        throw new Error("Must export a default export when using ES6 modules.");
    if (typeof u != "object" && typeof u != "function")
      throw new Error(`Unsupported format: ${typeof u}. Expected an object or a function.`);
    if (p !== null && typeof u == "object" && u)
      throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${p}`);
    return {
      name: o,
      alias: p || n,
      value: u,
      options: l,
      dirname: t,
      ownPass: s,
      file: c
    };
  }
  i(gD, "createDescriptor");
  function wpe(e) {
    let t = /* @__PURE__ */ new Map();
    for (let r of e) {
      if (typeof r.value != "function") continue;
      let n = t.get(r.value);
      if (n || (n = /* @__PURE__ */ new Set(), t.set(r.value, n)), n.has(r.name)) {
        let s = e.filter((a) => a.value === r.value);
        throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separat\
e names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detec\
ted are:", `${JSON.stringify(s, null, 2)}`].join(`
`));
      }
      n.add(r.name);
    }
  }
  i(wpe, "assertNoDuplicates");
});

// ../node_modules/@babel/core/lib/config/item.js
var Ao = A((Do) => {
  "use strict";
  Object.defineProperty(Do, "__esModule", {
    value: !0
  });
  Do.createConfigItem = _pe;
  Do.createItemFromDescriptor = ED;
  Do.getItemDescriptor = Ope;
  function bD() {
    let e = le("path");
    return bD = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(bD, "_path");
  var Ipe = F0();
  function ED(e) {
    return new Bc(e);
  }
  i(ED, "createItemFromDescriptor");
  function* _pe(e, {
    dirname: t = ".",
    type: r
  } = {}) {
    let n = yield* (0, Ipe.createDescriptor)(e, bD().resolve(t), {
      type: r,
      alias: "programmatic item"
    });
    return ED(n);
  }
  i(_pe, "createConfigItem");
  var j0 = Symbol.for("@babel/core@7 - ConfigItem");
  function Ope(e) {
    if (e != null && e[j0])
      return e._descriptor;
  }
  i(Ope, "getItemDescriptor");
  var Bc = class {
    static {
      i(this, "ConfigItem");
    }
    constructor(t) {
      this._descriptor = void 0, this[j0] = !0, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.
      file = void 0, this._descriptor = t, Object.defineProperty(this, "_descriptor", {
        enumerable: !1
      }), Object.defineProperty(this, j0, {
        enumerable: !1
      }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name =
      this._descriptor.name, this.file = this._descriptor.file ? {
        request: this._descriptor.file.request,
        resolved: this._descriptor.file.resolved
      } : void 0, Object.freeze(this);
    }
  };
  Object.freeze(Bc.prototype);
});

// ../node_modules/@babel/core/lib/config/validation/removed.js
var TD = A((kc) => {
  "use strict";
  Object.defineProperty(kc, "__esModule", {
    value: !0
  });
  kc.default = void 0;
  var V2e = kc.default = {
    auxiliaryComment: {
      message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
    },
    blacklist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    breakConfig: {
      message: "This is not a necessary option in Babel 6"
    },
    experimental: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    externalHelpers: {
      message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"
    },
    extra: {
      message: ""
    },
    jsxPragma: {
      message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
    },
    loose: {
      message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."
    },
    metadataUsedHelpers: {
      message: "Not required anymore as this is enabled by default"
    },
    modules: {
      message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"
    },
    nonStandard: {
      message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.i\
o/docs/plugins/preset-react/"
    },
    optional: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    sourceMapName: {
      message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file\
` themselves."
    },
    stage: {
      message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
    },
    whitelist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    resolveModuleSource: {
      version: 6,
      message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
    },
    metadata: {
      version: 6,
      message: "Generated plugin metadata is always included in the output result"
    },
    sourceMapTarget: {
      version: 6,
      message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.fi\
le` themselves."
    }
  };
});

// ../node_modules/@babel/core/lib/config/validation/option-assertions.js
var R0 = A((Pt) => {
  "use strict";
  Object.defineProperty(Pt, "__esModule", {
    value: !0
  });
  Pt.access = br;
  Pt.assertArray = M0;
  Pt.assertAssumptions = zpe;
  Pt.assertBabelrcSearch = Kpe;
  Pt.assertBoolean = L0;
  Pt.assertCallerMetadata = Lpe;
  Pt.assertCompact = Fpe;
  Pt.assertConfigApplicableTest = $pe;
  Pt.assertConfigFileSearch = Wpe;
  Pt.assertFunction = qpe;
  Pt.assertIgnoreList = Upe;
  Pt.assertInputSourceMap = Mpe;
  Pt.assertObject = vD;
  Pt.assertPluginList = Gpe;
  Pt.assertRootMode = Bpe;
  Pt.assertSourceMaps = kpe;
  Pt.assertSourceType = jpe;
  Pt.assertString = Rpe;
  Pt.assertTargets = Ype;
  Pt.msg = He;
  function wo() {
    let e = B0();
    return wo = /* @__PURE__ */ i(function() {
      return e;
    }, "_helperCompilationTargets"), e;
  }
  i(wo, "_helperCompilationTargets");
  var Npe = Io();
  function He(e) {
    switch (e.type) {
      case "root":
        return "";
      case "env":
        return `${He(e.parent)}.env["${e.name}"]`;
      case "overrides":
        return `${He(e.parent)}.overrides[${e.index}]`;
      case "option":
        return `${He(e.parent)}.${e.name}`;
      case "access":
        return `${He(e.parent)}[${JSON.stringify(e.name)}]`;
      default:
        throw new Error(`Assertion failure: Unknown type ${e.type}`);
    }
  }
  i(He, "msg");
  function br(e, t) {
    return {
      type: "access",
      name: t,
      parent: e
    };
  }
  i(br, "access");
  function Bpe(e, t) {
    if (t !== void 0 && t !== "root" && t !== "upward" && t !== "upward-optional")
      throw new Error(`${He(e)} must be a "root", "upward", "upward-optional" or undefined`);
    return t;
  }
  i(Bpe, "assertRootMode");
  function kpe(e, t) {
    if (t !== void 0 && typeof t != "boolean" && t !== "inline" && t !== "both")
      throw new Error(`${He(e)} must be a boolean, "inline", "both", or undefined`);
    return t;
  }
  i(kpe, "assertSourceMaps");
  function Fpe(e, t) {
    if (t !== void 0 && typeof t != "boolean" && t !== "auto")
      throw new Error(`${He(e)} must be a boolean, "auto", or undefined`);
    return t;
  }
  i(Fpe, "assertCompact");
  function jpe(e, t) {
    if (t !== void 0 && t !== "module" && t !== "script" && t !== "unambiguous")
      throw new Error(`${He(e)} must be "module", "script", "unambiguous", or undefined`);
    return t;
  }
  i(jpe, "assertSourceType");
  function Lpe(e, t) {
    let r = vD(e, t);
    if (r) {
      if (typeof r.name != "string")
        throw new Error(`${He(e)} set but does not contain "name" property string`);
      for (let n of Object.keys(r)) {
        let s = br(e, n), a = r[n];
        if (a != null && typeof a != "boolean" && typeof a != "string" && typeof a != "number")
          throw new Error(`${He(s)} must be null, undefined, a boolean, a string, or a number.`);
      }
    }
    return t;
  }
  i(Lpe, "assertCallerMetadata");
  function Mpe(e, t) {
    if (t !== void 0 && typeof t != "boolean" && (typeof t != "object" || !t))
      throw new Error(`${He(e)} must be a boolean, object, or undefined`);
    return t;
  }
  i(Mpe, "assertInputSourceMap");
  function Rpe(e, t) {
    if (t !== void 0 && typeof t != "string")
      throw new Error(`${He(e)} must be a string, or undefined`);
    return t;
  }
  i(Rpe, "assertString");
  function qpe(e, t) {
    if (t !== void 0 && typeof t != "function")
      throw new Error(`${He(e)} must be a function, or undefined`);
    return t;
  }
  i(qpe, "assertFunction");
  function L0(e, t) {
    if (t !== void 0 && typeof t != "boolean")
      throw new Error(`${He(e)} must be a boolean, or undefined`);
    return t;
  }
  i(L0, "assertBoolean");
  function vD(e, t) {
    if (t !== void 0 && (typeof t != "object" || Array.isArray(t) || !t))
      throw new Error(`${He(e)} must be an object, or undefined`);
    return t;
  }
  i(vD, "assertObject");
  function M0(e, t) {
    if (t != null && !Array.isArray(t))
      throw new Error(`${He(e)} must be an array, or undefined`);
    return t;
  }
  i(M0, "assertArray");
  function Upe(e, t) {
    let r = M0(e, t);
    return r?.forEach((n, s) => Vpe(br(e, s), n)), r;
  }
  i(Upe, "assertIgnoreList");
  function Vpe(e, t) {
    if (typeof t != "string" && typeof t != "function" && !(t instanceof RegExp))
      throw new Error(`${He(e)} must be an array of string/Function/RegExp values, or undefined`);
    return t;
  }
  i(Vpe, "assertIgnoreItem");
  function $pe(e, t) {
    if (t === void 0)
      return t;
    if (Array.isArray(t))
      t.forEach((r, n) => {
        if (!Fc(r))
          throw new Error(`${He(br(e, n))} must be a string/Function/RegExp.`);
      });
    else if (!Fc(t))
      throw new Error(`${He(e)} must be a string/Function/RegExp, or an array of those`);
    return t;
  }
  i($pe, "assertConfigApplicableTest");
  function Fc(e) {
    return typeof e == "string" || typeof e == "function" || e instanceof RegExp;
  }
  i(Fc, "checkValidTest");
  function Wpe(e, t) {
    if (t !== void 0 && typeof t != "boolean" && typeof t != "string")
      throw new Error(`${He(e)} must be a undefined, a boolean, a string, got ${JSON.stringify(t)}`);
    return t;
  }
  i(Wpe, "assertConfigFileSearch");
  function Kpe(e, t) {
    if (t === void 0 || typeof t == "boolean")
      return t;
    if (Array.isArray(t))
      t.forEach((r, n) => {
        if (!Fc(r))
          throw new Error(`${He(br(e, n))} must be a string/Function/RegExp.`);
      });
    else if (!Fc(t))
      throw new Error(`${He(e)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(t)}`);
    return t;
  }
  i(Kpe, "assertBabelrcSearch");
  function Gpe(e, t) {
    let r = M0(e, t);
    return r && r.forEach((n, s) => Hpe(br(e, s), n)), r;
  }
  i(Gpe, "assertPluginList");
  function Hpe(e, t) {
    if (Array.isArray(t)) {
      if (t.length === 0)
        throw new Error(`${He(e)} must include an object`);
      if (t.length > 3)
        throw new Error(`${He(e)} may only be a two-tuple or three-tuple`);
      if (SD(br(e, 0), t[0]), t.length > 1) {
        let r = t[1];
        if (r !== void 0 && r !== !1 && (typeof r != "object" || Array.isArray(r) || r === null))
          throw new Error(`${He(br(e, 1))} must be an object, false, or undefined`);
      }
      if (t.length === 3) {
        let r = t[2];
        if (r !== void 0 && typeof r != "string")
          throw new Error(`${He(br(e, 2))} must be a string, or undefined`);
      }
    } else
      SD(e, t);
    return t;
  }
  i(Hpe, "assertPluginItem");
  function SD(e, t) {
    if ((typeof t != "object" || !t) && typeof t != "string" && typeof t != "function")
      throw new Error(`${He(e)} must be a string, object, function`);
    return t;
  }
  i(SD, "assertPluginTarget");
  function Ype(e, t) {
    if ((0, wo().isBrowsersQueryValid)(t)) return t;
    if (typeof t != "object" || !t || Array.isArray(t))
      throw new Error(`${He(e)} must be a string, an array of strings or an object`);
    let r = br(e, "browsers"), n = br(e, "esmodules");
    xD(r, t.browsers), L0(n, t.esmodules);
    for (let s of Object.keys(t)) {
      let a = t[s], o = br(e, s);
      if (s === "esmodules") L0(o, a);
      else if (s === "browsers") xD(o, a);
      else if (hasOwnProperty.call(wo().TargetNames, s))
        Jpe(o, a);
      else {
        let l = Object.keys(wo().TargetNames).join(", ");
        throw new Error(`${He(o)} is not a valid target. Supported targets are ${l}`);
      }
    }
    return t;
  }
  i(Ype, "assertTargets");
  function xD(e, t) {
    if (t !== void 0 && !(0, wo().isBrowsersQueryValid)(t))
      throw new Error(`${He(e)} must be undefined, a string or an array of strings`);
  }
  i(xD, "assertBrowsersList");
  function Jpe(e, t) {
    if (!(typeof t == "number" && Math.round(t) === t) && typeof t != "string")
      throw new Error(`${He(e)} must be a string or an integer number`);
  }
  i(Jpe, "assertBrowserVersion");
  function zpe(e, t) {
    if (t === void 0) return;
    if (typeof t != "object" || t === null)
      throw new Error(`${He(e)} must be an object or undefined.`);
    let r = e;
    do
      r = r.parent;
    while (r.type !== "root");
    let n = r.source === "preset";
    for (let s of Object.keys(t)) {
      let a = br(e, s);
      if (!Npe.assumptionsNames.has(s))
        throw new Error(`${He(a)} is not a supported assumption.`);
      if (typeof t[s] != "boolean")
        throw new Error(`${He(a)} must be a boolean.`);
      if (n && t[s] === !1)
        throw new Error(`${He(a)} cannot be set to 'false' inside presets.`);
    }
    return t;
  }
  i(zpe, "assertAssumptions");
});

// ../node_modules/@babel/core/lib/config/validation/options.js
var Io = A((zi) => {
  "use strict";
  Object.defineProperty(zi, "__esModule", {
    value: !0
  });
  zi.assumptionsNames = void 0;
  zi.checkNoUnwrappedItemOptionPairs = sfe;
  zi.validate = Zpe;
  var PD = TD(), be = R0(), Xpe = Zs(), AD = {
    cwd: be.assertString,
    root: be.assertString,
    rootMode: be.assertRootMode,
    configFile: be.assertConfigFileSearch,
    caller: be.assertCallerMetadata,
    filename: be.assertString,
    filenameRelative: be.assertString,
    code: be.assertBoolean,
    ast: be.assertBoolean,
    cloneInputAst: be.assertBoolean,
    envName: be.assertString
  }, CD = {
    babelrc: be.assertBoolean,
    babelrcRoots: be.assertBabelrcSearch
  }, DD = {
    extends: be.assertString,
    ignore: be.assertIgnoreList,
    only: be.assertIgnoreList,
    targets: be.assertTargets,
    browserslistConfigFile: be.assertConfigFileSearch,
    browserslistEnv: be.assertString
  }, wD = {
    inputSourceMap: be.assertInputSourceMap,
    presets: be.assertPluginList,
    plugins: be.assertPluginList,
    passPerPreset: be.assertBoolean,
    assumptions: be.assertAssumptions,
    env: rfe,
    overrides: nfe,
    test: be.assertConfigApplicableTest,
    include: be.assertConfigApplicableTest,
    exclude: be.assertConfigApplicableTest,
    retainLines: be.assertBoolean,
    comments: be.assertBoolean,
    shouldPrintComment: be.assertFunction,
    compact: be.assertCompact,
    minified: be.assertBoolean,
    auxiliaryCommentBefore: be.assertString,
    auxiliaryCommentAfter: be.assertString,
    sourceType: be.assertSourceType,
    wrapPluginVisitorMethod: be.assertFunction,
    highlightCode: be.assertBoolean,
    sourceMaps: be.assertSourceMaps,
    sourceMap: be.assertSourceMaps,
    sourceFileName: be.assertString,
    sourceRoot: be.assertString,
    parserOpts: be.assertObject,
    generatorOpts: be.assertObject
  };
  Object.assign(wD, {
    getModuleId: be.assertFunction,
    moduleRoot: be.assertString,
    moduleIds: be.assertBoolean,
    moduleId: be.assertString
  });
  var Qpe = ["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitive\
Hint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUnini\
tializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods",
  "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"], G2e = zi.
  assumptionsNames = new Set(Qpe);
  function ID(e) {
    return e.type === "root" ? e.source : ID(e.parent);
  }
  i(ID, "getSource");
  function Zpe(e, t, r) {
    try {
      return q0({
        type: "root",
        source: e
      }, t);
    } catch (n) {
      let s = new Xpe.default(n.message, r);
      throw n.code && (s.code = n.code), s;
    }
  }
  i(Zpe, "validate");
  function q0(e, t) {
    let r = ID(e);
    return tfe(t), Object.keys(t).forEach((n) => {
      let s = {
        type: "option",
        name: n,
        parent: e
      };
      if (r === "preset" && DD[n])
        throw new Error(`${(0, be.msg)(s)} is not allowed in preset options`);
      if (r !== "arguments" && AD[n])
        throw new Error(`${(0, be.msg)(s)} is only allowed in root programmatic options`);
      if (r !== "arguments" && r !== "configfile" && CD[n])
        throw r === "babelrcfile" || r === "extendsfile" ? new Error(`${(0, be.msg)(s)} is not allowed in .babelrc or "extends"ed files, onl\
y in root programmatic options, or babel.config.js/config file options`) : new Error(`${(0, be.msg)(s)} is only allowed in root programmatic\
 options, or babel.config.js/config file options`);
      (wD[n] || DD[n] || CD[n] || AD[n] || efe)(s, t[n]);
    }), t;
  }
  i(q0, "validateNested");
  function efe(e) {
    let t = e.name;
    if (PD.default[t]) {
      let {
        message: r,
        version: n = 5
      } = PD.default[t];
      throw new Error(`Using removed Babel ${n} option: ${(0, be.msg)(e)} - ${r}`);
    } else {
      let r = new Error(`Unknown option: ${(0, be.msg)(e)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information ab\
out options.`);
      throw r.code = "BABEL_UNKNOWN_OPTION", r;
    }
  }
  i(efe, "throwUnknownError");
  function tfe(e) {
    if (hasOwnProperty.call(e, "sourceMap") && hasOwnProperty.call(e, "sourceMaps"))
      throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
  }
  i(tfe, "assertNoDuplicateSourcemap");
  function rfe(e, t) {
    if (e.parent.type === "env")
      throw new Error(`${(0, be.msg)(e)} is not allowed inside of another .env block`);
    let r = e.parent, n = (0, be.assertObject)(e, t);
    if (n)
      for (let s of Object.keys(n)) {
        let a = (0, be.assertObject)((0, be.access)(e, s), n[s]);
        if (!a) continue;
        q0({
          type: "env",
          name: s,
          parent: r
        }, a);
      }
    return n;
  }
  i(rfe, "assertEnvSet");
  function nfe(e, t) {
    if (e.parent.type === "env")
      throw new Error(`${(0, be.msg)(e)} is not allowed inside an .env block`);
    if (e.parent.type === "overrides")
      throw new Error(`${(0, be.msg)(e)} is not allowed inside an .overrides block`);
    let r = e.parent, n = (0, be.assertArray)(e, t);
    if (n)
      for (let [s, a] of n.entries()) {
        let o = (0, be.access)(e, s), l = (0, be.assertObject)(o, a);
        if (!l) throw new Error(`${(0, be.msg)(o)} must be an object`);
        q0({
          type: "overrides",
          index: s,
          parent: r
        }, l);
      }
    return n;
  }
  i(nfe, "assertOverridesList");
  function sfe(e, t, r, n) {
    if (t === 0) return;
    let s = e[t - 1], a = e[t];
    s.file && s.options === void 0 && typeof a.value == "object" && (n.message += `
- Maybe you meant to use
"${r}s": [
  ["${s.file.request}", ${JSON.stringify(a.value, void 0, 2)}]
]
To be a valid ${r}, its name and options should be wrapped in a pair of brackets`);
  }
  i(sfe, "checkNoUnwrappedItemOptionPairs");
});

// ../node_modules/@babel/core/lib/config/pattern-to-regex.js
var K0 = A((W0) => {
  "use strict";
  Object.defineProperty(W0, "__esModule", {
    value: !0
  });
  W0.default = ofe;
  function jc() {
    let e = le("path");
    return jc = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(jc, "_path");
  var _o = `\\${jc().sep}`, U0 = `(?:${_o}|$)`, V0 = `[^${_o}]+`, $0 = `(?:${V0}${_o})`, OD = `(?:${V0}${U0})`, ife = `${$0}*?`, afe = `${$0}\
*?${OD}?`;
  function _D(e) {
    return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
  }
  i(_D, "escapeRegExp");
  function ofe(e, t) {
    let r = jc().resolve(t, e).split(jc().sep);
    return new RegExp(["^", ...r.map((n, s) => {
      let a = s === r.length - 1;
      return n === "**" ? a ? afe : ife : n === "*" ? a ? OD : $0 : n.indexOf("*.") === 0 ? V0 + _D(n.slice(1)) + (a ? U0 : _o) : _D(n) + (a ?
      U0 : _o);
    })].join(""));
  }
  i(ofe, "pathToPattern");
});

// ../node_modules/@babel/core/lib/config/printer.js
var kD = A((Xi) => {
  "use strict";
  Object.defineProperty(Xi, "__esModule", {
    value: !0
  });
  Xi.ConfigPrinter = Xi.ChainFormatter = void 0;
  function BD() {
    let e = gr();
    return BD = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(BD, "_gensync");
  var lfe = Xi.ChainFormatter = {
    Programmatic: 0,
    Config: 1
  }, G0 = {
    title(e, t, r) {
      let n = "";
      return e === lfe.Programmatic ? (n = "programmatic options", t && (n += " from " + t)) : n = "config " + r, n;
    },
    loc(e, t) {
      let r = "";
      return e != null && (r += `.overrides[${e}]`), t != null && (r += `.env["${t}"]`), r;
    },
    *optionsAndDescriptors(e) {
      let t = Object.assign({}, e.options);
      delete t.overrides, delete t.env;
      let r = [...yield* e.plugins()];
      r.length && (t.plugins = r.map((s) => ND(s)));
      let n = [...yield* e.presets()];
      return n.length && (t.presets = [...n].map((s) => ND(s))), JSON.stringify(t, void 0, 2);
    }
  };
  function ND(e) {
    var t;
    let r = (t = e.file) == null ? void 0 : t.request;
    return r == null && (typeof e.value == "object" ? r = e.value : typeof e.value == "function" && (r = `[Function: ${e.value.toString().slice(
    0, 50)} ... ]`)), r == null && (r = "[Unknown]"), e.options === void 0 ? r : e.name == null ? [r, e.options] : [r, e.options, e.name];
  }
  i(ND, "descriptorToConfig");
  var H0 = class e {
    static {
      i(this, "ConfigPrinter");
    }
    constructor() {
      this._stack = [];
    }
    configure(t, r, {
      callerName: n,
      filepath: s
    }) {
      return t ? (a, o, l) => {
        this._stack.push({
          type: r,
          callerName: n,
          filepath: s,
          content: a,
          index: o,
          envName: l
        });
      } : () => {
      };
    }
    static *format(t) {
      let r = G0.title(t.type, t.callerName, t.filepath), n = G0.loc(t.index, t.envName);
      n && (r += ` ${n}`);
      let s = yield* G0.optionsAndDescriptors(t.content);
      return `${r}
${s}`;
    }
    *output() {
      return this._stack.length === 0 ? "" : (yield* BD().all(this._stack.map((r) => e.format(r)))).join(`

`);
    }
  };
  Xi.ConfigPrinter = H0;
});

// ../node_modules/@babel/core/lib/config/config-chain.js
var ng = A((Zi) => {
  "use strict";
  Object.defineProperty(Zi, "__esModule", {
    value: !0
  });
  Zi.buildPresetChain = pfe;
  Zi.buildPresetChainWalker = void 0;
  Zi.buildRootChain = gfe;
  function LD() {
    let e = le("path");
    return LD = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(LD, "_path");
  function MD() {
    let e = Ls();
    return MD = /* @__PURE__ */ i(function() {
      return e;
    }, "_debug"), e;
  }
  i(MD, "_debug");
  var X0 = Io(), RD = K0(), No = kD(), ufe = Fn(), cfe = Zs(), Oo = Co(), _t = Qs(), kr = F0(), FD = MD()("babel:config:config-chain");
  function* pfe(e, t) {
    let r = yield* ffe(e, t);
    return r ? {
      plugins: Rc(r.plugins),
      presets: Rc(r.presets),
      options: r.options.map((n) => qD(n)),
      files: /* @__PURE__ */ new Set()
    } : null;
  }
  i(pfe, "buildPresetChain");
  var ffe = Zi.buildPresetChainWalker = rg({
    root: /* @__PURE__ */ i((e) => dfe(e), "root"),
    env: /* @__PURE__ */ i((e, t) => hfe(e)(t), "env"),
    overrides: /* @__PURE__ */ i((e, t) => mfe(e)(t), "overrides"),
    overridesEnv: /* @__PURE__ */ i((e, t, r) => yfe(e)(t)(r), "overridesEnv"),
    createLogger: /* @__PURE__ */ i(() => () => {
    }, "createLogger")
  }), dfe = (0, _t.makeWeakCacheSync)((e) => Q0(e, e.alias, kr.createUncachedDescriptors)), hfe = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)(
  (t) => Z0(e, e.alias, kr.createUncachedDescriptors, t))), mfe = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)((t) => eg(e, e.
  alias, kr.createUncachedDescriptors, t))), yfe = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)((t) => (0, _t.makeStrongCacheSync)(
  (r) => tg(e, e.alias, kr.createUncachedDescriptors, t, r))));
  function* gfe(e, t) {
    let r, n, s = new No.ConfigPrinter(), a = yield* xfe({
      options: e,
      dirname: t.cwd
    }, t, void 0, s);
    if (!a) return null;
    let o = yield* s.output(), l;
    typeof e.configFile == "string" ? l = yield* (0, Oo.loadConfig)(e.configFile, t.cwd, t.envName, t.caller) : e.configFile !== !1 && (l = yield* (0, Oo.
    findRootConfig)(t.root, t.envName, t.caller));
    let {
      babelrc: u,
      babelrcRoots: c
    } = e, p = t.cwd, f = Mc(), h = new No.ConfigPrinter();
    if (l) {
      let _ = Efe(l), k = yield* J0(_, t, void 0, h);
      if (!k) return null;
      r = yield* h.output(), u === void 0 && (u = _.options.babelrc), c === void 0 && (p = _.dirname, c = _.options.babelrcRoots), Qi(f, k);
    }
    let g, P, d = !1, y = Mc();
    if ((u === !0 || u === void 0) && typeof t.filename == "string") {
      let _ = yield* (0, Oo.findPackageData)(t.filename);
      if (_ && bfe(t, _, c, p)) {
        if ({
          ignore: g,
          config: P
        } = yield* (0, Oo.findRelativeConfig)(_, t.envName, t.caller), g && y.files.add(g.filepath), g && UD(t, g.ignore, null, g.dirname) &&
        (d = !0), P && !d) {
          let k = Tfe(P), B = new No.ConfigPrinter(), L = yield* J0(k, t, void 0, B);
          L ? (n = yield* B.output(), Qi(y, L)) : d = !0;
        }
        P && d && y.files.add(P.filepath);
      }
    }
    t.showConfig && console.log(`Babel configs on "${t.filename}" (ascending priority):
` + [r, n, o].filter((_) => !!_).join(`

`) + `
-----End Babel configs-----`);
    let E = Qi(Qi(Qi(Mc(), f), y), a);
    return {
      plugins: d ? [] : Rc(E.plugins),
      presets: d ? [] : Rc(E.presets),
      options: d ? [] : E.options.map((_) => qD(_)),
      fileHandling: d ? "ignored" : "transpile",
      ignore: g || void 0,
      babelrc: P || void 0,
      config: l || void 0,
      files: E.files
    };
  }
  i(gfe, "buildRootChain");
  function bfe(e, t, r, n) {
    if (typeof r == "boolean") return r;
    let s = e.root;
    if (r === void 0)
      return t.directories.includes(s);
    let a = r;
    return Array.isArray(a) || (a = [a]), a = a.map((o) => typeof o == "string" ? LD().resolve(n, o) : o), a.length === 1 && a[0] === s ? t.
    directories.includes(s) : a.some((o) => (typeof o == "string" && (o = (0, RD.default)(o, n)), t.directories.some((l) => VD(o, n, l, e))));
  }
  i(bfe, "babelrcLoadEnabled");
  var Efe = (0, _t.makeWeakCacheSync)((e) => ({
    filepath: e.filepath,
    dirname: e.dirname,
    options: (0, X0.validate)("configfile", e.options, e.filepath)
  })), Tfe = (0, _t.makeWeakCacheSync)((e) => ({
    filepath: e.filepath,
    dirname: e.dirname,
    options: (0, X0.validate)("babelrcfile", e.options, e.filepath)
  })), Sfe = (0, _t.makeWeakCacheSync)((e) => ({
    filepath: e.filepath,
    dirname: e.dirname,
    options: (0, X0.validate)("extendsfile", e.options, e.filepath)
  })), xfe = rg({
    root: /* @__PURE__ */ i((e) => Q0(e, "base", kr.createCachedDescriptors), "root"),
    env: /* @__PURE__ */ i((e, t) => Z0(e, "base", kr.createCachedDescriptors, t), "env"),
    overrides: /* @__PURE__ */ i((e, t) => eg(e, "base", kr.createCachedDescriptors, t), "overrides"),
    overridesEnv: /* @__PURE__ */ i((e, t, r) => tg(e, "base", kr.createCachedDescriptors, t, r), "overridesEnv"),
    createLogger: /* @__PURE__ */ i((e, t, r) => Ife(e, t, r), "createLogger")
  }), vfe = rg({
    root: /* @__PURE__ */ i((e) => Pfe(e), "root"),
    env: /* @__PURE__ */ i((e, t) => Afe(e)(t), "env"),
    overrides: /* @__PURE__ */ i((e, t) => Cfe(e)(t), "overrides"),
    overridesEnv: /* @__PURE__ */ i((e, t, r) => Dfe(e)(t)(r), "overridesEnv"),
    createLogger: /* @__PURE__ */ i((e, t, r) => wfe(e.filepath, t, r), "createLogger")
  });
  function* J0(e, t, r, n) {
    let s = yield* vfe(e, t, r, n);
    return s?.files.add(e.filepath), s;
  }
  i(J0, "loadFileChain");
  var Pfe = (0, _t.makeWeakCacheSync)((e) => Q0(e, e.filepath, kr.createUncachedDescriptors)), Afe = (0, _t.makeWeakCacheSync)((e) => (0, _t.
  makeStrongCacheSync)((t) => Z0(e, e.filepath, kr.createUncachedDescriptors, t))), Cfe = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)(
  (t) => eg(e, e.filepath, kr.createUncachedDescriptors, t))), Dfe = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)((t) => (0, _t.
  makeStrongCacheSync)((r) => tg(e, e.filepath, kr.createUncachedDescriptors, t, r))));
  function wfe(e, t, r) {
    return r ? r.configure(t.showConfig, No.ChainFormatter.Config, {
      filepath: e
    }) : () => {
    };
  }
  i(wfe, "buildFileLogger");
  function Q0({
    dirname: e,
    options: t
  }, r, n) {
    return n(e, t, r);
  }
  i(Q0, "buildRootDescriptors");
  function Ife(e, t, r) {
    var n;
    return r ? r.configure(t.showConfig, No.ChainFormatter.Programmatic, {
      callerName: (n = t.caller) == null ? void 0 : n.name
    }) : () => {
    };
  }
  i(Ife, "buildProgrammaticLogger");
  function Z0({
    dirname: e,
    options: t
  }, r, n, s) {
    var a;
    let o = (a = t.env) == null ? void 0 : a[s];
    return o ? n(e, o, `${r}.env["${s}"]`) : null;
  }
  i(Z0, "buildEnvDescriptors");
  function eg({
    dirname: e,
    options: t
  }, r, n, s) {
    var a;
    let o = (a = t.overrides) == null ? void 0 : a[s];
    if (!o) throw new Error("Assertion failure - missing override");
    return n(e, o, `${r}.overrides[${s}]`);
  }
  i(eg, "buildOverrideDescriptors");
  function tg({
    dirname: e,
    options: t
  }, r, n, s, a) {
    var o, l;
    let u = (o = t.overrides) == null ? void 0 : o[s];
    if (!u) throw new Error("Assertion failure - missing override");
    let c = (l = u.env) == null ? void 0 : l[a];
    return c ? n(e, c, `${r}.overrides[${s}].env["${a}"]`) : null;
  }
  i(tg, "buildOverrideEnvDescriptors");
  function rg({
    root: e,
    env: t,
    overrides: r,
    overridesEnv: n,
    createLogger: s
  }) {
    return /* @__PURE__ */ i(function* (o, l, u = /* @__PURE__ */ new Set(), c) {
      let {
        dirname: p
      } = o, f = [], h = e(o);
      if (Lc(h, p, l, o.filepath)) {
        f.push({
          config: h,
          envName: void 0,
          index: void 0
        });
        let d = t(o, l.envName);
        d && Lc(d, p, l, o.filepath) && f.push({
          config: d,
          envName: l.envName,
          index: void 0
        }), (h.options.overrides || []).forEach((y, E) => {
          let _ = r(o, E);
          if (Lc(_, p, l, o.filepath)) {
            f.push({
              config: _,
              index: E,
              envName: void 0
            });
            let k = n(o, E, l.envName);
            k && Lc(k, p, l, o.filepath) && f.push({
              config: k,
              index: E,
              envName: l.envName
            });
          }
        });
      }
      if (f.some(({
        config: {
          options: {
            ignore: d,
            only: y
          }
        }
      }) => UD(l, d, y, p)))
        return null;
      let g = Mc(), P = s(o, l, c);
      for (let {
        config: d,
        index: y,
        envName: E
      } of f) {
        if (!(yield* _fe(g, d.options, p, l, u, c)))
          return null;
        P(d, y, E), yield* Ofe(g, d);
      }
      return g;
    }, "chainWalker");
  }
  i(rg, "makeChainWalker");
  function* _fe(e, t, r, n, s, a) {
    if (t.extends === void 0) return !0;
    let o = yield* (0, Oo.loadConfig)(t.extends, r, n.envName, n.caller);
    if (s.has(o))
      throw new Error(`Configuration cycle detected loading ${o.filepath}.
File already loaded following the config chain:
` + Array.from(s, (u) => ` - ${u.filepath}`).join(`
`));
    s.add(o);
    let l = yield* J0(Sfe(o), n, s, a);
    return s.delete(o), l ? (Qi(e, l), !0) : !1;
  }
  i(_fe, "mergeExtendsChain");
  function Qi(e, t) {
    e.options.push(...t.options), e.plugins.push(...t.plugins), e.presets.push(...t.presets);
    for (let r of t.files)
      e.files.add(r);
    return e;
  }
  i(Qi, "mergeChain");
  function* Ofe(e, {
    options: t,
    plugins: r,
    presets: n
  }) {
    return e.options.push(t), e.plugins.push(...yield* r()), e.presets.push(...yield* n()), e;
  }
  i(Ofe, "mergeChainOpts");
  function Mc() {
    return {
      options: [],
      presets: [],
      plugins: [],
      files: /* @__PURE__ */ new Set()
    };
  }
  i(Mc, "emptyChain");
  function qD(e) {
    let t = Object.assign({}, e);
    return delete t.extends, delete t.env, delete t.overrides, delete t.plugins, delete t.presets, delete t.passPerPreset, delete t.ignore, delete t.
    only, delete t.test, delete t.include, delete t.exclude, hasOwnProperty.call(t, "sourceMap") && (t.sourceMaps = t.sourceMap, delete t.sourceMap),
    t;
  }
  i(qD, "normalizeOptions");
  function Rc(e) {
    let t = /* @__PURE__ */ new Map(), r = [];
    for (let n of e)
      if (typeof n.value == "function") {
        let s = n.value, a = t.get(s);
        a || (a = /* @__PURE__ */ new Map(), t.set(s, a));
        let o = a.get(n.name);
        o ? o.value = n : (o = {
          value: n
        }, r.push(o), n.ownPass || a.set(n.name, o));
      } else
        r.push({
          value: n
        });
    return r.reduce((n, s) => (n.push(s.value), n), []);
  }
  i(Rc, "dedupDescriptors");
  function Lc({
    options: e
  }, t, r, n) {
    return (e.test === void 0 || Y0(r, e.test, t, n)) && (e.include === void 0 || Y0(r, e.include, t, n)) && (e.exclude === void 0 || !Y0(r,
    e.exclude, t, n));
  }
  i(Lc, "configIsApplicable");
  function Y0(e, t, r, n) {
    let s = Array.isArray(t) ? t : [t];
    return z0(e, s, r, n);
  }
  i(Y0, "configFieldIsApplicable");
  function jD(e, t) {
    return t instanceof RegExp ? String(t) : t;
  }
  i(jD, "ignoreListReplacer");
  function UD(e, t, r, n) {
    if (t && z0(e, t, n)) {
      var s;
      let o = `No config is applied to "${(s = e.filename) != null ? s : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(
      t, jD)}\` from "${n}"`;
      return FD(o), e.showConfig && console.log(o), !0;
    }
    if (r && !z0(e, r, n)) {
      var a;
      let o = `No config is applied to "${(a = e.filename) != null ? a : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(
      r, jD)}\` from "${n}"`;
      return FD(o), e.showConfig && console.log(o), !0;
    }
    return !1;
  }
  i(UD, "shouldIgnore");
  function z0(e, t, r, n) {
    return t.some((s) => VD(s, r, e.filename, e, n));
  }
  i(z0, "matchesPatterns");
  function VD(e, t, r, n, s) {
    if (typeof e == "function")
      return !!(0, ufe.endHiddenCallStack)(e)(r, {
        dirname: t,
        envName: n.envName,
        caller: n.caller
      });
    if (typeof r != "string")
      throw new cfe.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", s);
    return typeof e == "string" && (e = (0, RD.default)(e, t)), e.test(r);
  }
  i(VD, "matchPattern");
});

// ../node_modules/@babel/core/lib/config/validation/plugins.js
var $D = A((sg) => {
  "use strict";
  Object.defineProperty(sg, "__esModule", {
    value: !0
  });
  sg.validatePluginObject = Ffe;
  var Vn = R0(), Nfe = {
    name: Vn.assertString,
    manipulateOptions: Vn.assertFunction,
    pre: Vn.assertFunction,
    post: Vn.assertFunction,
    inherits: Vn.assertFunction,
    visitor: Bfe,
    parserOverride: Vn.assertFunction,
    generatorOverride: Vn.assertFunction
  };
  function Bfe(e, t) {
    let r = (0, Vn.assertObject)(e, t);
    if (r && (Object.keys(r).forEach((n) => {
      n !== "_exploded" && n !== "_verified" && kfe(n, r[n]);
    }), r.enter || r.exit))
      throw new Error(`${(0, Vn.msg)(e)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
    return r;
  }
  i(Bfe, "assertVisitorMap");
  function kfe(e, t) {
    if (t && typeof t == "object")
      Object.keys(t).forEach((r) => {
        if (r !== "enter" && r !== "exit")
          throw new Error(`.visitor["${e}"] may only have .enter and/or .exit handlers.`);
      });
    else if (typeof t != "function")
      throw new Error(`.visitor["${e}"] must be a function`);
  }
  i(kfe, "assertVisitorHandler");
  function Ffe(e) {
    let t = {
      type: "root",
      source: "plugin"
    };
    return Object.keys(e).forEach((r) => {
      let n = Nfe[r];
      if (n)
        n({
          type: "option",
          name: r,
          parent: t
        }, e[r]);
      else {
        let s = new Error(`.${r} is not a valid Plugin property`);
        throw s.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", s;
      }
    }), e;
  }
  i(Ffe, "validatePluginObject");
});

// ../node_modules/@babel/core/lib/config/helpers/environment.js
var ag = A((ig) => {
  "use strict";
  Object.defineProperty(ig, "__esModule", {
    value: !0
  });
  ig.getEnv = jfe;
  function jfe(e = "development") {
    return process.env.BABEL_ENV || process.env.NODE_ENV || e;
  }
  i(jfe, "getEnv");
});

// ../node_modules/@babel/core/lib/config/partial.js
var og = A(($c) => {
  "use strict";
  Object.defineProperty($c, "__esModule", {
    value: !0
  });
  $c.default = KD;
  $c.loadPartialConfig = Gfe;
  function qc() {
    let e = le("path");
    return qc = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(qc, "_path");
  var Lfe = pc(), Mfe = Xu(), WD = Ao(), Rfe = ng(), qfe = ag(), Ufe = Io(), Uc = Co(), Vfe = k0(), $fe = ["showIgnoredFiles"];
  function Wfe(e, t) {
    if (e == null) return {};
    var r = {};
    for (var n in e) if ({}.hasOwnProperty.call(e, n)) {
      if (t.includes(n)) continue;
      r[n] = e[n];
    }
    return r;
  }
  i(Wfe, "_objectWithoutPropertiesLoose");
  function Kfe(e, t) {
    switch (t) {
      case "root":
        return e;
      case "upward-optional": {
        let r = (0, Uc.findConfigUpwards)(e);
        return r === null ? e : r;
      }
      case "upward": {
        let r = (0, Uc.findConfigUpwards)(e);
        if (r !== null) return r;
        throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${e}".\

One of the following config files must be in the directory tree: "${Uc.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
          code: "BABEL_ROOT_NOT_FOUND",
          dirname: e
        });
      }
      default:
        throw new Error("Assertion failure - unknown rootMode value.");
    }
  }
  i(Kfe, "resolveRootMode");
  function* KD(e) {
    if (e != null && (typeof e != "object" || Array.isArray(e)))
      throw new Error("Babel options must be an object, null, or undefined");
    let t = e ? (0, Ufe.validate)("arguments", e) : {}, {
      envName: r = (0, qfe.getEnv)(),
      cwd: n = ".",
      root: s = ".",
      rootMode: a = "root",
      caller: o,
      cloneInputAst: l = !0
    } = t, u = qc().resolve(n), c = Kfe(qc().resolve(u, s), a), p = typeof t.filename == "string" ? qc().resolve(n, t.filename) : void 0, f = yield* (0, Uc.
    resolveShowConfigPath)(u), h = {
      filename: p,
      cwd: u,
      root: c,
      envName: r,
      caller: o,
      showConfig: f === p
    }, g = yield* (0, Rfe.buildRootChain)(t, h);
    if (!g) return null;
    let P = {
      assumptions: {}
    };
    return g.options.forEach((y) => {
      (0, Mfe.mergeOptions)(P, y);
    }), {
      options: Object.assign({}, P, {
        targets: (0, Vfe.resolveTargets)(P, c),
        cloneInputAst: l,
        babelrc: !1,
        configFile: !1,
        browserslistConfigFile: !1,
        passPerPreset: !1,
        envName: h.envName,
        cwd: h.cwd,
        root: h.root,
        rootMode: "root",
        filename: typeof h.filename == "string" ? h.filename : void 0,
        plugins: g.plugins.map((y) => (0, WD.createItemFromDescriptor)(y)),
        presets: g.presets.map((y) => (0, WD.createItemFromDescriptor)(y))
      }),
      context: h,
      fileHandling: g.fileHandling,
      ignore: g.ignore,
      babelrc: g.babelrc,
      config: g.config,
      files: g.files
    };
  }
  i(KD, "loadPrivatePartialConfig");
  function* Gfe(e) {
    let t = !1;
    if (typeof e == "object" && e !== null && !Array.isArray(e)) {
      var r = e;
      ({
        showIgnoredFiles: t
      } = r), e = Wfe(r, $fe);
    }
    let n = yield* KD(e);
    if (!n) return null;
    let {
      options: s,
      babelrc: a,
      ignore: o,
      config: l,
      fileHandling: u,
      files: c
    } = n;
    return u === "ignored" && !t ? null : ((s.plugins || []).forEach((p) => {
      if (p.value instanceof Lfe.default)
        throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
    }), new Vc(s, a ? a.filepath : void 0, o ? o.filepath : void 0, l ? l.filepath : void 0, u, c));
  }
  i(Gfe, "loadPartialConfig");
  var Vc = class {
    static {
      i(this, "PartialConfig");
    }
    constructor(t, r, n, s, a, o) {
      this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files =
      void 0, this.options = t, this.babelignore = n, this.babelrc = r, this.config = s, this.fileHandling = a, this.files = o, Object.freeze(
      this);
    }
    hasFilesystemConfig() {
      return this.babelrc !== void 0 || this.config !== void 0;
    }
  };
  Object.freeze(Vc.prototype);
});

// ../node_modules/@babel/core/lib/config/full.js
var ew = A((Wc) => {
  "use strict";
  Object.defineProperty(Wc, "__esModule", {
    value: !0
  });
  Wc.default = void 0;
  function JD() {
    let e = gr();
    return JD = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(JD, "_gensync");
  var cg = hs(), GD = Xu(), Hfe = bt(), zD = pc(), Yfe = Ao(), Jfe = ng(), dg = uc();
  function pg() {
    let e = Dr();
    return pg = /* @__PURE__ */ i(function() {
      return e;
    }, "_traverse"), e;
  }
  i(pg, "_traverse");
  var hg = Qs(), fg = Io(), zfe = $D(), XD = t0(), Xfe = og(), Qfe = Zs(), oDe = Wc.default = JD()(/* @__PURE__ */ i(function* (t) {
    var r;
    let n = yield* (0, Xfe.default)(t);
    if (!n)
      return null;
    let {
      options: s,
      context: a,
      fileHandling: o
    } = n;
    if (o === "ignored")
      return null;
    let l = {}, {
      plugins: u,
      presets: c
    } = s;
    if (!u || !c)
      throw new Error("Assertion failure - plugins and presets exist");
    let p = Object.assign({}, a, {
      targets: s.targets
    }), f = /* @__PURE__ */ i((B) => {
      let L = (0, Yfe.getItemDescriptor)(B);
      if (!L)
        throw new Error("Assertion failure - must be config item");
      return L;
    }, "toDescriptor"), h = c.map(f), g = u.map(f), P = [[]], d = [], y = [];
    if (yield* HD(a, /* @__PURE__ */ i(function* B(L, U) {
      let $ = [];
      for (let W = 0; W < L.length; W++) {
        let q = L[W];
        if (q.options !== !1) {
          try {
            var ee = yield* sde(q, p);
          } catch (R) {
            throw R.code === "BABEL_UNKNOWN_OPTION" && (0, fg.checkNoUnwrappedItemOptionPairs)(L, W, "preset", R), R;
          }
          y.push(ee.externalDependencies), q.ownPass ? $.push({
            preset: ee.chain,
            pass: []
          }) : $.unshift({
            preset: ee.chain,
            pass: U
          });
        }
      }
      if ($.length > 0) {
        P.splice(1, 0, ...$.map((W) => W.pass).filter((W) => W !== U));
        for (let {
          preset: W,
          pass: q
        } of $) {
          if (!W || (q.push(...W.plugins), yield* B(W.presets, q))) return !0;
          W.options.forEach((K) => {
            (0, GD.mergeOptions)(l, K);
          });
        }
      }
    }, "recursePresetDescriptors"))(h, P[0])) return null;
    let _ = l;
    (0, GD.mergeOptions)(_, s);
    let k = Object.assign({}, p, {
      assumptions: (r = _.assumptions) != null ? r : {}
    });
    return yield* HD(a, /* @__PURE__ */ i(function* () {
      P[0].unshift(...g);
      for (let U of P) {
        let $ = [];
        d.push($);
        for (let ee = 0; ee < U.length; ee++) {
          let W = U[ee];
          if (W.options !== !1) {
            try {
              var L = yield* ZD(W, k);
            } catch (q) {
              throw q.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY" && (0, fg.checkNoUnwrappedItemOptionPairs)(U, ee, "plugin", q), q;
            }
            $.push(L), y.push(L.externalDependencies);
          }
        }
      }
    }, "loadPluginDescriptors"))(), _.plugins = d[0], _.presets = d.slice(1).filter((B) => B.length > 0).map((B) => ({
      plugins: B
    })), _.passPerPreset = _.presets.length > 0, {
      options: _,
      passes: d,
      externalDependencies: (0, dg.finalize)(y)
    };
  }, "loadFullConfig"));
  function HD(e, t) {
    return function* (r, n) {
      try {
        return yield* t(r, n);
      } catch (a) {
        if (!/^\[BABEL\]/.test(a.message)) {
          var s;
          a.message = `[BABEL] ${(s = e.filename) != null ? s : "unknown file"}: ${a.message}`;
        }
        throw a;
      }
    };
  }
  i(HD, "enhanceError");
  var QD = /* @__PURE__ */ i((e) => (0, hg.makeWeakCache)(function* ({
    value: t,
    options: r,
    dirname: n,
    alias: s
  }, a) {
    if (r === !1) throw new Error("Assertion failure");
    r = r || {};
    let o = [], l = t;
    if (typeof t == "function") {
      let u = (0, cg.maybeAsync)(t, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), c = Object.assign(
      {}, Hfe, e(a, o));
      try {
        l = yield* u(c, r, n);
      } catch (p) {
        throw s && (p.message += ` (While processing: ${JSON.stringify(s)})`), p;
      }
    }
    if (!l || typeof l != "object")
      throw new Error("Plugin/Preset did not return an object.");
    if ((0, cg.isThenable)(l))
      throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you\
're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". \
(While processing: ${JSON.stringify(s)})`);
    if (o.length > 0 && (!a.configured() || a.mode() === "forever")) {
      let u = `A plugin/preset has external untracked dependencies (${o[0]}), but the cache `;
      throw a.configured() ? u += " has been configured to never be invalidated. " : u += "has not been configured to be invalidated when th\
e external dependencies change. ", u += `Plugins/presets should configure their cache to be invalidated when the external dependencies chang\
e, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(s)})`, new Error(u);
    }
    return {
      value: l,
      options: r,
      dirname: n,
      alias: s,
      externalDependencies: (0, dg.finalize)(o)
    };
  }), "makeDescriptorLoader"), Zfe = QD(XD.makePluginAPI), ede = QD(XD.makePresetAPI), tde = (0, hg.makeWeakCache)(function* ({
    value: e,
    options: t,
    dirname: r,
    alias: n,
    externalDependencies: s
  }, a) {
    let o = (0, zfe.validatePluginObject)(e), l = Object.assign({}, o);
    if (l.visitor && (l.visitor = pg().default.explode(Object.assign({}, l.visitor))), l.inherits) {
      let u = {
        name: void 0,
        alias: `${n}$inherits`,
        value: l.inherits,
        options: t,
        dirname: r
      }, c = yield* (0, cg.forwardAsync)(ZD, (p) => a.invalidate((f) => p(u, f)));
      l.pre = ug(c.pre, l.pre), l.post = ug(c.post, l.post), l.manipulateOptions = ug(c.manipulateOptions, l.manipulateOptions), l.visitor =
      pg().default.visitors.merge([c.visitor || {}, l.visitor || {}]), c.externalDependencies.length > 0 && (s.length === 0 ? s = c.externalDependencies :
      s = (0, dg.finalize)([s, c.externalDependencies]));
    }
    return new zD.default(l, t, n, s);
  });
  function* ZD(e, t) {
    if (e.value instanceof zD.default) {
      if (e.options)
        throw new Error("Passed options to an existing Plugin instance will not work.");
      return e.value;
    }
    return yield* tde(yield* Zfe(e, t), t);
  }
  i(ZD, "loadPluginDescriptor");
  var lg = /* @__PURE__ */ i((e) => e && typeof e != "function", "needsFilename"), YD = /* @__PURE__ */ i((e, t) => {
    if (lg(e.test) || lg(e.include) || lg(e.exclude)) {
      let r = t.name ? `"${t.name}"` : "/* your preset */";
      throw new Qfe.default([`Preset ${r} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, {\
 filename: 'file.ts', presets: [${r}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join(`
`));
    }
  }, "validateIfOptionNeedsFilename"), rde = /* @__PURE__ */ i((e, t, r) => {
    if (!t.filename) {
      var n;
      let {
        options: s
      } = e;
      YD(s, r), (n = s.overrides) == null || n.forEach((a) => YD(a, r));
    }
  }, "validatePreset"), nde = (0, hg.makeWeakCacheSync)(({
    value: e,
    dirname: t,
    alias: r,
    externalDependencies: n
  }) => ({
    options: (0, fg.validate)("preset", e),
    alias: r,
    dirname: t,
    externalDependencies: n
  }));
  function* sde(e, t) {
    let r = nde(yield* ede(e, t));
    return rde(r, t, e), {
      chain: yield* (0, Jfe.buildPresetChain)(r, t),
      externalDependencies: r.externalDependencies
    };
  }
  i(sde, "loadPresetDescriptor");
  function ug(e, t) {
    return e ? t ? function(...r) {
      let n = e.apply(this, r);
      return n && typeof n.then == "function" ? n.then(() => t.apply(this, r)) : t.apply(this, r);
    } : e : t;
  }
  i(ug, "chainMaybeAsync");
});

// ../node_modules/@babel/core/lib/config/index.js
var ea = A((jr) => {
  "use strict";
  Object.defineProperty(jr, "__esModule", {
    value: !0
  });
  jr.createConfigItem = dde;
  jr.createConfigItemAsync = fde;
  jr.createConfigItemSync = sw;
  Object.defineProperty(jr, "default", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return tw.default;
    }, "get")
  });
  jr.loadOptions = pde;
  jr.loadOptionsAsync = cde;
  jr.loadOptionsSync = nw;
  jr.loadPartialConfig = lde;
  jr.loadPartialConfigAsync = ode;
  jr.loadPartialConfigSync = rw;
  function Yc() {
    let e = gr();
    return Yc = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(Yc, "_gensync");
  var tw = ew(), ide = og(), ade = Ao(), Fr = Fn(), Kc = Yc()(ide.loadPartialConfig);
  function ode(...e) {
    return (0, Fr.beginHiddenCallStack)(Kc.async)(...e);
  }
  i(ode, "loadPartialConfigAsync");
  function rw(...e) {
    return (0, Fr.beginHiddenCallStack)(Kc.sync)(...e);
  }
  i(rw, "loadPartialConfigSync");
  function lde(e, t) {
    if (t !== void 0)
      (0, Fr.beginHiddenCallStack)(Kc.errback)(e, t);
    else if (typeof e == "function")
      (0, Fr.beginHiddenCallStack)(Kc.errback)(void 0, e);
    else
      return rw(e);
  }
  i(lde, "loadPartialConfig");
  function* ude(e) {
    var t;
    let r = yield* (0, tw.default)(e);
    return (t = r?.options) != null ? t : null;
  }
  i(ude, "loadOptionsImpl");
  var Gc = Yc()(ude);
  function cde(...e) {
    return (0, Fr.beginHiddenCallStack)(Gc.async)(...e);
  }
  i(cde, "loadOptionsAsync");
  function nw(...e) {
    return (0, Fr.beginHiddenCallStack)(Gc.sync)(...e);
  }
  i(nw, "loadOptionsSync");
  function pde(e, t) {
    if (t !== void 0)
      (0, Fr.beginHiddenCallStack)(Gc.errback)(e, t);
    else if (typeof e == "function")
      (0, Fr.beginHiddenCallStack)(Gc.errback)(void 0, e);
    else
      return nw(e);
  }
  i(pde, "loadOptions");
  var Hc = Yc()(ade.createConfigItem);
  function fde(...e) {
    return (0, Fr.beginHiddenCallStack)(Hc.async)(...e);
  }
  i(fde, "createConfigItemAsync");
  function sw(...e) {
    return (0, Fr.beginHiddenCallStack)(Hc.sync)(...e);
  }
  i(sw, "createConfigItemSync");
  function dde(e, t, r) {
    if (r !== void 0)
      (0, Fr.beginHiddenCallStack)(Hc.errback)(e, t, r);
    else if (typeof t == "function")
      (0, Fr.beginHiddenCallStack)(Hc.errback)(e, void 0, r);
    else
      return sw(e, t);
  }
  i(dde, "createConfigItem");
});

// ../node_modules/@babel/core/lib/transformation/plugin-pass.js
var iw = A((Jc) => {
  "use strict";
  Object.defineProperty(Jc, "__esModule", {
    value: !0
  });
  Jc.default = void 0;
  var Bo = class {
    static {
      i(this, "PluginPass");
    }
    constructor(t, r, n, s) {
      this._map = /* @__PURE__ */ new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0,
      this.isAsync = void 0, this.key = r, this.file = t, this.opts = n || {}, this.cwd = t.opts.cwd, this.filename = t.opts.filename, this.
      isAsync = s;
    }
    set(t, r) {
      this._map.set(t, r);
    }
    get(t) {
      return this._map.get(t);
    }
    availableHelper(t, r) {
      return this.file.availableHelper(t, r);
    }
    addHelper(t) {
      return this.file.addHelper(t);
    }
    buildCodeFrameError(t, r, n) {
      return this.file.buildCodeFrameError(t, r, n);
    }
  };
  Jc.default = Bo;
  Bo.prototype.getModuleName = /* @__PURE__ */ i(function() {
    return this.file.getModuleName();
  }, "getModuleName"), Bo.prototype.addImport = /* @__PURE__ */ i(function() {
    this.file.addImport();
  }, "addImport");
});

// ../node_modules/@babel/core/lib/transformation/block-hoist-plugin.js
var cw = A((yg) => {
  "use strict";
  Object.defineProperty(yg, "__esModule", {
    value: !0
  });
  yg.default = mde;
  function lw() {
    let e = Dr();
    return lw = /* @__PURE__ */ i(function() {
      return e;
    }, "_traverse"), e;
  }
  i(lw, "_traverse");
  var hde = pc(), mg, aw = {
    name: "internal.blockHoist",
    visitor: {
      Block: {
        exit({
          node: e
        }) {
          e.body = ow(e.body);
        }
      },
      SwitchCase: {
        exit({
          node: e
        }) {
          e.consequent = ow(e.consequent);
        }
      }
    }
  };
  function ow(e) {
    let t = Math.pow(2, 30) - 1, r = !1;
    for (let n = 0; n < e.length; n++) {
      let s = e[n], a = uw(s);
      if (a > t) {
        r = !0;
        break;
      }
      t = a;
    }
    return r ? yde(e.slice()) : e;
  }
  i(ow, "performHoisting");
  function mde() {
    return mg || (mg = new hde.default(Object.assign({}, aw, {
      visitor: lw().default.explode(aw.visitor)
    }), {})), mg;
  }
  i(mde, "loadBlockHoistPlugin");
  function uw(e) {
    let t = e?._blockHoist;
    return t == null ? 1 : t === !0 ? 2 : t;
  }
  i(uw, "priority");
  function yde(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let s = 0; s < e.length; s++) {
      let a = e[s], o = uw(a);
      (t[o] || (t[o] = [])).push(a);
    }
    let r = Object.keys(t).map((s) => +s).sort((s, a) => a - s), n = 0;
    for (let s of r) {
      let a = t[s];
      for (let o of a)
        e[n++] = o;
    }
    return e;
  }
  i(yde, "stableSort");
});

// ../node_modules/@babel/core/lib/transformation/normalize-opts.js
var bg = A((gg) => {
  "use strict";
  Object.defineProperty(gg, "__esModule", {
    value: !0
  });
  gg.default = gde;
  function zc() {
    let e = le("path");
    return zc = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(zc, "_path");
  function gde(e) {
    let {
      filename: t,
      cwd: r,
      filenameRelative: n = typeof t == "string" ? zc().relative(r, t) : "unknown",
      sourceType: s = "module",
      inputSourceMap: a,
      sourceMaps: o = !!a,
      sourceRoot: l = e.options.moduleRoot,
      sourceFileName: u = zc().basename(n),
      comments: c = !0,
      compact: p = "auto"
    } = e.options, f = e.options, h = Object.assign({}, f, {
      parserOpts: Object.assign({
        sourceType: zc().extname(n) === ".mjs" ? "module" : s,
        sourceFileName: t,
        plugins: []
      }, f.parserOpts),
      generatorOpts: Object.assign({
        filename: t,
        auxiliaryCommentBefore: f.auxiliaryCommentBefore,
        auxiliaryCommentAfter: f.auxiliaryCommentAfter,
        retainLines: f.retainLines,
        comments: c,
        shouldPrintComment: f.shouldPrintComment,
        compact: p,
        minified: f.minified,
        sourceMaps: o,
        sourceRoot: l,
        sourceFileName: u
      }, f.generatorOpts)
    });
    for (let g of e.passes)
      for (let P of g)
        P.manipulateOptions && P.manipulateOptions(h, h.parserOpts);
    return h;
  }
  i(gde, "normalizeOptions");
});

// ../node_modules/convert-source-map/index.js
var Eg = A((At) => {
  "use strict";
  Object.defineProperty(At, "commentRegex", {
    get: /* @__PURE__ */ i(function() {
      return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
    }, "getCommentRegex")
  });
  Object.defineProperty(At, "mapFileCommentRegex", {
    get: /* @__PURE__ */ i(function() {
      return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
    }, "getMapFileCommentRegex")
  });
  var Xc;
  typeof Buffer < "u" ? typeof Buffer.from == "function" ? Xc = bde : Xc = Ede : Xc = Tde;
  function bde(e) {
    return Buffer.from(e, "base64").toString();
  }
  i(bde, "decodeBase64WithBufferFrom");
  function Ede(e) {
    if (typeof value == "number")
      throw new TypeError("The value to decode must not be of type number.");
    return new Buffer(e, "base64").toString();
  }
  i(Ede, "decodeBase64WithNewBuffer");
  function Tde(e) {
    return decodeURIComponent(escape(atob(e)));
  }
  i(Tde, "decodeBase64WithAtob");
  function Sde(e) {
    return e.split(",").pop();
  }
  i(Sde, "stripComment");
  function xde(e, t) {
    var r = At.mapFileCommentRegex.exec(e), n = r[1] || r[2];
    try {
      var e = t(n);
      return e != null && typeof e.catch == "function" ? e.catch(s) : e;
    } catch (a) {
      s(a);
    }
    function s(a) {
      throw new Error("An error occurred while trying to read the map file at " + n + `
` + a.stack);
    }
    i(s, "throwError");
  }
  i(xde, "readFromFileMap");
  function Jt(e, t) {
    t = t || {}, t.hasComment && (e = Sde(e)), t.encoding === "base64" ? e = Xc(e) : t.encoding === "uri" && (e = decodeURIComponent(e)), (t.
    isJSON || t.encoding) && (e = JSON.parse(e)), this.sourcemap = e;
  }
  i(Jt, "Converter");
  Jt.prototype.toJSON = function(e) {
    return JSON.stringify(this.sourcemap, null, e);
  };
  typeof Buffer < "u" ? typeof Buffer.from == "function" ? Jt.prototype.toBase64 = vde : Jt.prototype.toBase64 = Pde : Jt.prototype.toBase64 =
  Ade;
  function vde() {
    var e = this.toJSON();
    return Buffer.from(e, "utf8").toString("base64");
  }
  i(vde, "encodeBase64WithBufferFrom");
  function Pde() {
    var e = this.toJSON();
    if (typeof e == "number")
      throw new TypeError("The json to encode must not be of type number.");
    return new Buffer(e, "utf8").toString("base64");
  }
  i(Pde, "encodeBase64WithNewBuffer");
  function Ade() {
    var e = this.toJSON();
    return btoa(unescape(encodeURIComponent(e)));
  }
  i(Ade, "encodeBase64WithBtoa");
  Jt.prototype.toURI = function() {
    var e = this.toJSON();
    return encodeURIComponent(e);
  };
  Jt.prototype.toComment = function(e) {
    var t, r, n;
    return e != null && e.encoding === "uri" ? (t = "", r = this.toURI()) : (t = ";base64", r = this.toBase64()), n = "sourceMappingURL=data\
:application/json;charset=utf-8" + t + "," + r, e != null && e.multiline ? "/*# " + n + " */" : "//# " + n;
  };
  Jt.prototype.toObject = function() {
    return JSON.parse(this.toJSON());
  };
  Jt.prototype.addProperty = function(e, t) {
    if (this.sourcemap.hasOwnProperty(e)) throw new Error('property "' + e + '" already exists on the sourcemap, use set property instead');
    return this.setProperty(e, t);
  };
  Jt.prototype.setProperty = function(e, t) {
    return this.sourcemap[e] = t, this;
  };
  Jt.prototype.getProperty = function(e) {
    return this.sourcemap[e];
  };
  At.fromObject = function(e) {
    return new Jt(e);
  };
  At.fromJSON = function(e) {
    return new Jt(e, { isJSON: !0 });
  };
  At.fromURI = function(e) {
    return new Jt(e, { encoding: "uri" });
  };
  At.fromBase64 = function(e) {
    return new Jt(e, { encoding: "base64" });
  };
  At.fromComment = function(e) {
    var t, r;
    return e = e.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), t = At.commentRegex.exec(e), r = t && t[4] || "uri", new Jt(e, { encoding: r,
    hasComment: !0 });
  };
  function pw(e) {
    return new Jt(e, { isJSON: !0 });
  }
  i(pw, "makeConverter");
  At.fromMapFileComment = function(e, t) {
    if (typeof t == "string")
      throw new Error(
        "String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://githu\
b.com/thlorenz/convert-source-map#upgrading"
      );
    var r = xde(e, t);
    return r != null && typeof r.then == "function" ? r.then(pw) : pw(r);
  };
  At.fromSource = function(e) {
    var t = e.match(At.commentRegex);
    return t ? At.fromComment(t.pop()) : null;
  };
  At.fromMapFileSource = function(e, t) {
    if (typeof t == "string")
      throw new Error(
        "String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github\
.com/thlorenz/convert-source-map#upgrading"
      );
    var r = e.match(At.mapFileCommentRegex);
    return r ? At.fromMapFileComment(r.pop(), t) : null;
  };
  At.removeComments = function(e) {
    return e.replace(At.commentRegex, "");
  };
  At.removeMapFileComments = function(e) {
    return e.replace(At.mapFileCommentRegex, "");
  };
  At.generateMapFileComment = function(e, t) {
    var r = "sourceMappingURL=" + e;
    return t && t.multiline ? "/*# " + r + " */" : "//# " + r;
  };
});

// ../node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js
var hw = A((Tg) => {
  "use strict";
  Object.defineProperty(Tg, "__esModule", {
    value: !0
  });
  Tg.default = Cde;
  var dw = {
    asyncDoExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-async-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"
      }
    },
    decimal: {
      syntax: {
        name: "@babel/plugin-syntax-decimal",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"
      }
    },
    decorators: {
      syntax: {
        name: "@babel/plugin-syntax-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"
      },
      transform: {
        name: "@babel/plugin-proposal-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"
      }
    },
    doExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"
      }
    },
    exportDefaultFrom: {
      syntax: {
        name: "@babel/plugin-syntax-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"
      },
      transform: {
        name: "@babel/plugin-proposal-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"
      }
    },
    flow: {
      syntax: {
        name: "@babel/plugin-syntax-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"
      },
      transform: {
        name: "@babel/preset-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow"
      }
    },
    functionBind: {
      syntax: {
        name: "@babel/plugin-syntax-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"
      },
      transform: {
        name: "@babel/plugin-proposal-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"
      }
    },
    functionSent: {
      syntax: {
        name: "@babel/plugin-syntax-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"
      },
      transform: {
        name: "@babel/plugin-proposal-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"
      }
    },
    jsx: {
      syntax: {
        name: "@babel/plugin-syntax-jsx",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"
      },
      transform: {
        name: "@babel/preset-react",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react"
      }
    },
    pipelineOperator: {
      syntax: {
        name: "@babel/plugin-syntax-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"
      },
      transform: {
        name: "@babel/plugin-proposal-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"
      }
    },
    recordAndTuple: {
      syntax: {
        name: "@babel/plugin-syntax-record-and-tuple",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"
      }
    },
    throwExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"
      }
    },
    typescript: {
      syntax: {
        name: "@babel/plugin-syntax-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"
      },
      transform: {
        name: "@babel/preset-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"
      }
    }
  };
  Object.assign(dw, {
    asyncGenerators: {
      syntax: {
        name: "@babel/plugin-syntax-async-generators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"
      },
      transform: {
        name: "@babel/plugin-transform-async-generator-functions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions"
      }
    },
    classProperties: {
      syntax: {
        name: "@babel/plugin-syntax-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
      },
      transform: {
        name: "@babel/plugin-transform-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
      }
    },
    classPrivateProperties: {
      syntax: {
        name: "@babel/plugin-syntax-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
      },
      transform: {
        name: "@babel/plugin-transform-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
      }
    },
    classPrivateMethods: {
      syntax: {
        name: "@babel/plugin-syntax-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
      },
      transform: {
        name: "@babel/plugin-transform-private-methods",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods"
      }
    },
    classStaticBlock: {
      syntax: {
        name: "@babel/plugin-syntax-class-static-block",
        url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"
      },
      transform: {
        name: "@babel/plugin-transform-class-static-block",
        url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block"
      }
    },
    dynamicImport: {
      syntax: {
        name: "@babel/plugin-syntax-dynamic-import",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"
      }
    },
    exportNamespaceFrom: {
      syntax: {
        name: "@babel/plugin-syntax-export-namespace-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"
      },
      transform: {
        name: "@babel/plugin-transform-export-namespace-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from"
      }
    },
    importAssertions: {
      syntax: {
        name: "@babel/plugin-syntax-import-assertions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"
      }
    },
    importAttributes: {
      syntax: {
        name: "@babel/plugin-syntax-import-attributes",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes"
      }
    },
    importMeta: {
      syntax: {
        name: "@babel/plugin-syntax-import-meta",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"
      }
    },
    logicalAssignment: {
      syntax: {
        name: "@babel/plugin-syntax-logical-assignment-operators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"
      },
      transform: {
        name: "@babel/plugin-transform-logical-assignment-operators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators"
      }
    },
    moduleStringNames: {
      syntax: {
        name: "@babel/plugin-syntax-module-string-names",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"
      }
    },
    numericSeparator: {
      syntax: {
        name: "@babel/plugin-syntax-numeric-separator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"
      },
      transform: {
        name: "@babel/plugin-transform-numeric-separator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator"
      }
    },
    nullishCoalescingOperator: {
      syntax: {
        name: "@babel/plugin-syntax-nullish-coalescing-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"
      },
      transform: {
        name: "@babel/plugin-transform-nullish-coalescing-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"
      }
    },
    objectRestSpread: {
      syntax: {
        name: "@babel/plugin-syntax-object-rest-spread",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"
      },
      transform: {
        name: "@babel/plugin-transform-object-rest-spread",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread"
      }
    },
    optionalCatchBinding: {
      syntax: {
        name: "@babel/plugin-syntax-optional-catch-binding",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"
      },
      transform: {
        name: "@babel/plugin-transform-optional-catch-binding",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding"
      }
    },
    optionalChaining: {
      syntax: {
        name: "@babel/plugin-syntax-optional-chaining",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"
      },
      transform: {
        name: "@babel/plugin-transform-optional-chaining",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining"
      }
    },
    privateIn: {
      syntax: {
        name: "@babel/plugin-syntax-private-property-in-object",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"
      },
      transform: {
        name: "@babel/plugin-transform-private-property-in-object",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object"
      }
    },
    regexpUnicodeSets: {
      syntax: {
        name: "@babel/plugin-syntax-unicode-sets-regex",
        url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"
      },
      transform: {
        name: "@babel/plugin-transform-unicode-sets-regex",
        url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"
      }
    }
  });
  var fw = /* @__PURE__ */ i(({
    name: e,
    url: t
  }) => `${e} (${t})`, "getNameURLCombination");
  function Cde(e, t, r, n) {
    let s = `Support for the experimental syntax '${e}' isn't currently enabled (${t.line}:${t.column + 1}):

` + r, a = dw[e];
    if (a) {
      let {
        syntax: l,
        transform: u
      } = a;
      if (l) {
        let c = fw(l);
        if (u) {
          let p = fw(u), f = u.name.startsWith("@babel/plugin") ? "plugins" : "presets";
          s += `

Add ${p} to the '${f}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${c} to the 'plugins' section to enable parsing.`;
        } else
          s += `

Add ${c} to the 'plugins' section of your Babel config to enable parsing.`;
      }
    }
    return s += `

If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${n === "unknown" ? "<name of the input file>" : n} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`, s;
  }
  i(Cde, "generateMissingPluginMessage");
});

// ../node_modules/@babel/core/lib/parser/index.js
var vg = A((xg) => {
  "use strict";
  Object.defineProperty(xg, "__esModule", {
    value: !0
  });
  xg.default = wde;
  function Sg() {
    let e = Fs();
    return Sg = /* @__PURE__ */ i(function() {
      return e;
    }, "_parser"), e;
  }
  i(Sg, "_parser");
  function mw() {
    let e = $a();
    return mw = /* @__PURE__ */ i(function() {
      return e;
    }, "_codeFrame"), e;
  }
  i(mw, "_codeFrame");
  var Dde = hw();
  function* wde(e, {
    parserOpts: t,
    highlightCode: r = !0,
    filename: n = "unknown"
  }, s) {
    try {
      let a = [];
      for (let o of e)
        for (let l of o) {
          let {
            parserOverride: u
          } = l;
          if (u) {
            let c = u(s, t, Sg().parse);
            c !== void 0 && a.push(c);
          }
        }
      if (a.length === 0)
        return (0, Sg().parse)(s, t);
      if (a.length === 1) {
        if (yield* [], typeof a[0].then == "function")
          throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're us\
ing a published plugin, you may need to upgrade your @babel/core version.");
        return a[0];
      }
      throw new Error("More than one plugin attempted to override parsing.");
    } catch (a) {
      a.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" && (a.message += `
Consider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.`);
      let {
        loc: o,
        missingPlugin: l
      } = a;
      if (o) {
        let u = (0, mw().codeFrameColumns)(s, {
          start: {
            line: o.line,
            column: o.column + 1
          }
        }, {
          highlightCode: r
        });
        l ? a.message = `${n}: ` + (0, Dde.default)(l[0], o, u, n) : a.message = `${n}: ${a.message}

` + u, a.code = "BABEL_PARSE_ERROR";
      }
      throw a;
    }
  }
  i(wde, "parser");
});

// ../node_modules/@babel/core/lib/transformation/util/clone-deep.js
var yw = A((Ag) => {
  "use strict";
  Object.defineProperty(Ag, "__esModule", {
    value: !0
  });
  Ag.default = Ide;
  function Pg(e, t) {
    if (e !== null) {
      if (t.has(e)) return t.get(e);
      let r;
      if (Array.isArray(e)) {
        r = new Array(e.length), t.set(e, r);
        for (let n = 0; n < e.length; n++)
          r[n] = typeof e[n] != "object" ? e[n] : Pg(e[n], t);
      } else {
        r = {}, t.set(e, r);
        let n = Object.keys(e);
        for (let s = 0; s < n.length; s++) {
          let a = n[s];
          r[a] = typeof e[a] != "object" ? e[a] : Pg(e[a], t);
        }
      }
      return r;
    }
    return e;
  }
  i(Pg, "deepClone");
  function Ide(e) {
    return typeof e != "object" ? e : Pg(e, /* @__PURE__ */ new Map());
  }
  i(Ide, "_default");
});

// ../node_modules/@babel/core/lib/transformation/normalize-file.js
var xw = A((Ig) => {
  "use strict";
  Object.defineProperty(Ig, "__esModule", {
    value: !0
  });
  Ig.default = jde;
  function Ew() {
    let e = le("fs");
    return Ew = /* @__PURE__ */ i(function() {
      return e;
    }, "_fs"), e;
  }
  i(Ew, "_fs");
  function wg() {
    let e = le("path");
    return wg = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(wg, "_path");
  function Tw() {
    let e = Ls();
    return Tw = /* @__PURE__ */ i(function() {
      return e;
    }, "_debug"), e;
  }
  i(Tw, "_debug");
  function Sw() {
    let e = Pe();
    return Sw = /* @__PURE__ */ i(function() {
      return e;
    }, "_t"), e;
  }
  i(Sw, "_t");
  function Qc() {
    let e = Eg();
    return Qc = /* @__PURE__ */ i(function() {
      return e;
    }, "_convertSourceMap"), e;
  }
  i(Qc, "_convertSourceMap");
  var _de = wy(), Ode = vg(), Nde = yw(), {
    file: Bde,
    traverseFast: kde
  } = Sw(), Cg = Tw()("babel:transform:file"), Fde = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/,
  gw = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
  function* jde(e, t, r, n) {
    if (r = `${r || ""}`, n) {
      if (n.type === "Program")
        n = Bde(n, [], []);
      else if (n.type !== "File")
        throw new Error("AST root must be a Program or File node");
      t.cloneInputAst && (n = (0, Nde.default)(n));
    } else
      n = yield* (0, Ode.default)(e, t, r);
    let s = null;
    if (t.inputSourceMap !== !1) {
      if (typeof t.inputSourceMap == "object" && (s = Qc().fromObject(t.inputSourceMap)), !s) {
        let a = bw(Fde, n);
        if (a)
          try {
            s = Qc().fromComment("//" + a);
          } catch {
            Cg("discarding unknown inline input sourcemap");
          }
      }
      if (!s) {
        let a = bw(gw, n);
        if (typeof t.filename == "string" && a)
          try {
            let o = gw.exec(a), l = Ew().readFileSync(wg().resolve(wg().dirname(t.filename), o[1]), "utf8");
            s = Qc().fromJSON(l);
          } catch (o) {
            Cg("discarding unknown file input sourcemap", o);
          }
        else a && Cg("discarding un-loadable file input sourcemap");
      }
    }
    return new _de.default(t, {
      code: r,
      ast: n,
      inputMap: s
    });
  }
  i(jde, "normalizeFile");
  function Dg(e, t, r) {
    return t && (t = t.filter(({
      value: n
    }) => e.test(n) ? (r = n, !1) : !0)), [t, r];
  }
  i(Dg, "extractCommentsFromList");
  function bw(e, t) {
    let r = null;
    return kde(t, (n) => {
      [n.leadingComments, r] = Dg(e, n.leadingComments, r), [n.innerComments, r] = Dg(e, n.innerComments, r), [n.trailingComments, r] = Dg(e,
      n.trailingComments, r);
    }), r;
  }
  i(bw, "extractComments");
});

// ../node_modules/@ampproject/remapping/dist/remapping.umd.js
var vw = A((_g, Og) => {
  (function(e, t) {
    typeof _g == "object" && typeof Og < "u" ? Og.exports = t(nu(), im()) : typeof define == "function" && define.amd ? define(["@jridgewell\
/trace-mapping", "@jridgewell/gen-mapping"], t) : (e = typeof globalThis < "u" ? globalThis : e || self, e.remapping = t(e.traceMapping, e.genMapping));
  })(_g, function(e, t) {
    "use strict";
    let r = /* @__PURE__ */ s("", -1, -1, "", null, !1), n = [];
    function s(d, y, E, _, k, B) {
      return { source: d, line: y, column: E, name: _, content: k, ignore: B };
    }
    i(s, "SegmentObject");
    function a(d, y, E, _, k) {
      return {
        map: d,
        sources: y,
        source: E,
        content: _,
        ignore: k
      };
    }
    i(a, "Source");
    function o(d, y) {
      return a(d, y, "", null, !1);
    }
    i(o, "MapSource");
    function l(d, y, E) {
      return a(null, n, d, y, E);
    }
    i(l, "OriginalSource");
    function u(d) {
      let y = new t.GenMapping({ file: d.map.file }), { sources: E, map: _ } = d, k = _.names, B = e.decodedMappings(_);
      for (let L = 0; L < B.length; L++) {
        let U = B[L];
        for (let $ = 0; $ < U.length; $++) {
          let ee = U[$], W = ee[0], q = r;
          if (ee.length !== 1) {
            let se = E[ee[1]];
            if (q = c(se, ee[2], ee[3], ee.length === 5 ? k[ee[4]] : ""), q == null)
              continue;
          }
          let { column: R, line: K, name: pe, content: fe, source: Q, ignore: X } = q;
          t.maybeAddSegment(y, L, W, Q, K, R, pe), Q && fe != null && t.setSourceContent(y, Q, fe), X && t.setIgnore(y, Q, !0);
        }
      }
      return y;
    }
    i(u, "traceMappings");
    function c(d, y, E, _) {
      if (!d.map)
        return s(d.source, y, E, _, d.content, d.ignore);
      let k = e.traceSegment(d.map, y, E);
      return k == null ? null : k.length === 1 ? r : c(d.sources[k[1]], k[2], k[3], k.length === 5 ? d.map.names[k[4]] : _);
    }
    i(c, "originalPositionFor");
    function p(d) {
      return Array.isArray(d) ? d : [d];
    }
    i(p, "asArray");
    function f(d, y) {
      let E = p(d).map((B) => new e.TraceMap(B, "")), _ = E.pop();
      for (let B = 0; B < E.length; B++)
        if (E[B].sources.length > 1)
          throw new Error(`Transformation map ${B} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
      let k = h(_, y, "", 0);
      for (let B = E.length - 1; B >= 0; B--)
        k = o(E[B], [k]);
      return k;
    }
    i(f, "buildSourceMapTree");
    function h(d, y, E, _) {
      let { resolvedSources: k, sourcesContent: B, ignoreList: L } = d, U = _ + 1, $ = k.map((ee, W) => {
        let q = {
          importer: E,
          depth: U,
          source: ee || "",
          content: void 0,
          ignore: void 0
        }, R = y(q.source, q), { source: K, content: pe, ignore: fe } = q;
        if (R)
          return h(new e.TraceMap(R, K), y, K, U);
        let Q = pe !== void 0 ? pe : B ? B[W] : null, X = fe !== void 0 ? fe : L ? L.includes(W) : !1;
        return l(K, Q, X);
      });
      return o(d, $);
    }
    i(h, "build");
    class g {
      static {
        i(this, "SourceMap");
      }
      constructor(y, E) {
        let _ = E.decodedMappings ? t.toDecodedMap(y) : t.toEncodedMap(y);
        this.version = _.version, this.file = _.file, this.mappings = _.mappings, this.names = _.names, this.ignoreList = _.ignoreList, this.
        sourceRoot = _.sourceRoot, this.sources = _.sources, E.excludeContent || (this.sourcesContent = _.sourcesContent);
      }
      toString() {
        return JSON.stringify(this);
      }
    }
    function P(d, y, E) {
      let _ = typeof E == "object" ? E : { excludeContent: !!E, decodedMappings: !1 }, k = f(d, y);
      return new g(u(k), _);
    }
    return i(P, "remapping"), P;
  });
});

// ../node_modules/@babel/core/lib/transformation/file/merge-map.js
var Cw = A((Ng) => {
  "use strict";
  Object.defineProperty(Ng, "__esModule", {
    value: !0
  });
  Ng.default = Lde;
  function Aw() {
    let e = vw();
    return Aw = /* @__PURE__ */ i(function() {
      return e;
    }, "_remapping"), e;
  }
  i(Aw, "_remapping");
  function Lde(e, t, r) {
    let n = r.replace(/\\/g, "/"), s = !1, a = Aw()(Pw(t), (o, l) => o === n && !s ? (s = !0, l.source = "", Pw(e)) : null);
    return typeof e.sourceRoot == "string" && (a.sourceRoot = e.sourceRoot), Object.assign({}, a);
  }
  i(Lde, "mergeSourceMap");
  function Pw(e) {
    return Object.assign({}, e, {
      sourceRoot: null
    });
  }
  i(Pw, "rootless");
});

// ../node_modules/@babel/core/lib/transformation/file/generate.js
var ww = A((kg) => {
  "use strict";
  Object.defineProperty(kg, "__esModule", {
    value: !0
  });
  kg.default = Rde;
  function Dw() {
    let e = Eg();
    return Dw = /* @__PURE__ */ i(function() {
      return e;
    }, "_convertSourceMap"), e;
  }
  i(Dw, "_convertSourceMap");
  function Bg() {
    let e = eo();
    return Bg = /* @__PURE__ */ i(function() {
      return e;
    }, "_generator"), e;
  }
  i(Bg, "_generator");
  var Mde = Cw();
  function Rde(e, t) {
    let {
      opts: r,
      ast: n,
      code: s,
      inputMap: a
    } = t, {
      generatorOpts: o
    } = r;
    o.inputSourceMap = a?.toObject();
    let l = [];
    for (let f of e)
      for (let h of f) {
        let {
          generatorOverride: g
        } = h;
        if (g) {
          let P = g(n, o, s, Bg().default);
          P !== void 0 && l.push(P);
        }
      }
    let u;
    if (l.length === 0)
      u = (0, Bg().default)(n, o, s);
    else if (l.length === 1) {
      if (u = l[0], typeof u.then == "function")
        throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're usi\
ng a published plugin, you may need to upgrade your @babel/core version.");
    } else
      throw new Error("More than one plugin attempted to override codegen.");
    let {
      code: c,
      decodedMap: p = u.map
    } = u;
    return u.__mergedMap ? p = Object.assign({}, u.map) : p && (a ? p = (0, Mde.default)(a.toObject(), p, o.sourceFileName) : p = u.map), (r.
    sourceMaps === "inline" || r.sourceMaps === "both") && (c += `
` + Dw().fromObject(p).toComment()), r.sourceMaps === "inline" && (p = null), {
      outputCode: c,
      outputMap: p
    };
  }
  i(Rde, "generateCode");
});

// ../node_modules/@babel/core/lib/transformation/index.js
var Zc = A((Lg) => {
  "use strict";
  Object.defineProperty(Lg, "__esModule", {
    value: !0
  });
  Lg.run = Gde;
  function jg() {
    let e = Dr();
    return jg = /* @__PURE__ */ i(function() {
      return e;
    }, "_traverse"), e;
  }
  i(jg, "_traverse");
  var qde = iw(), Ude = cw(), Vde = bg(), $de = xw(), Wde = ww(), Kde = uc(), Fg = hs();
  function* Gde(e, t, r) {
    let n = yield* (0, $de.default)(e.passes, (0, Vde.default)(e), t, r), s = n.opts;
    try {
      yield* Hde(n, e.passes);
    } catch (c) {
      var a;
      throw c.message = `${(a = s.filename) != null ? a : "unknown file"}: ${c.message}`, c.code || (c.code = "BABEL_TRANSFORM_ERROR"), c;
    }
    let o, l;
    try {
      s.code !== !1 && ({
        outputCode: o,
        outputMap: l
      } = (0, Wde.default)(e.passes, n));
    } catch (c) {
      var u;
      throw c.message = `${(u = s.filename) != null ? u : "unknown file"}: ${c.message}`, c.code || (c.code = "BABEL_GENERATE_ERROR"), c;
    }
    return {
      metadata: n.metadata,
      options: s,
      ast: s.ast === !0 ? n.ast : null,
      code: o === void 0 ? null : o,
      map: l === void 0 ? null : l,
      sourceType: n.ast.program.sourceType,
      externalDependencies: (0, Kde.flattenToSet)(e.externalDependencies)
    };
  }
  i(Gde, "run");
  function* Hde(e, t) {
    let r = yield* (0, Fg.isAsync)();
    for (let n of t) {
      let s = [], a = [], o = [];
      for (let u of n.concat([(0, Ude.default)()])) {
        let c = new qde.default(e, u.key, u.options, r);
        s.push([u, c]), a.push(c), o.push(u.visitor);
      }
      for (let [u, c] of s)
        u.pre && (yield* (0, Fg.maybeAsync)(u.pre, "You appear to be using an async plugin/preset, but Babel has been called synchronously").
        call(c, e));
      let l = jg().default.visitors.merge(o, a, e.opts.wrapPluginVisitorMethod);
      (0, jg().default)(e.ast, l, e.scope);
      for (let [u, c] of s)
        u.post && (yield* (0, Fg.maybeAsync)(u.post, "You appear to be using an async plugin/preset, but Babel has been called synchronously").
        call(c, e));
    }
  }
  i(Hde, "transformFile");
});

// ../node_modules/@babel/core/lib/transform-file.js
var Rg = A((ko) => {
  "use strict";
  Object.defineProperty(ko, "__esModule", {
    value: !0
  });
  ko.transformFile = Xde;
  ko.transformFileAsync = Zde;
  ko.transformFileSync = Qde;
  function Iw() {
    let e = gr();
    return Iw = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(Iw, "_gensync");
  var Yde = ea(), Jde = Zc(), zde = Zu(), Mg = Iw()(function* (e, t) {
    let r = Object.assign({}, t, {
      filename: e
    }), n = yield* (0, Yde.default)(r);
    if (n === null) return null;
    let s = yield* zde.readFile(e, "utf8");
    return yield* (0, Jde.run)(n, s);
  });
  function Xde(...e) {
    Mg.errback(...e);
  }
  i(Xde, "transformFile");
  function Qde(...e) {
    return Mg.sync(...e);
  }
  i(Qde, "transformFileSync");
  function Zde(...e) {
    return Mg.async(...e);
  }
  i(Zde, "transformFileAsync");
});

// ../node_modules/@babel/core/lib/config/files/import.cjs
var Ow = A((LDe, _w) => {
  _w.exports = /* @__PURE__ */ i(function(t) {
    return import(t);
  }, "import_");
});

// ../node_modules/@babel/preset-typescript/package.json
var Nw = A((RDe, ehe) => {
  ehe.exports = {
    name: "@babel/preset-typescript",
    version: "7.24.1",
    description: "Babel preset for TypeScript.",
    repository: {
      type: "git",
      url: "https://github.com/babel/babel.git",
      directory: "packages/babel-preset-typescript"
    },
    license: "MIT",
    publishConfig: {
      access: "public"
    },
    main: "./lib/index.js",
    keywords: [
      "babel-preset",
      "typescript"
    ],
    dependencies: {
      "@babel/helper-plugin-utils": "^7.24.0",
      "@babel/helper-validator-option": "^7.23.5",
      "@babel/plugin-syntax-jsx": "^7.24.1",
      "@babel/plugin-transform-modules-commonjs": "^7.24.1",
      "@babel/plugin-transform-typescript": "^7.24.1"
    },
    peerDependencies: {
      "@babel/core": "^7.0.0-0"
    },
    devDependencies: {
      "@babel/core": "^7.24.1",
      "@babel/helper-plugin-test-runner": "^7.24.1"
    },
    homepage: "https://babel.dev/docs/en/next/babel-preset-typescript",
    bugs: "https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22area%3A%20typescript%22+is%3Aopen",
    engines: {
      node: ">=6.9.0"
    },
    author: "The Babel Team (https://babel.dev/team)",
    type: "commonjs"
  };
});

// ../node_modules/@babel/helper-plugin-utils/lib/index.js
var ta = A((Fo) => {
  "use strict";
  Object.defineProperty(Fo, "__esModule", {
    value: !0
  });
  Fo.declare = Bw;
  Fo.declarePreset = void 0;
  var qg = {
    assertVersion: /* @__PURE__ */ i((e) => (t) => {
      rhe(t, e.version);
    }, "assertVersion")
  };
  Object.assign(qg, {
    targets: /* @__PURE__ */ i(() => () => ({}), "targets"),
    assumption: /* @__PURE__ */ i(() => () => {
    }, "assumption"),
    addExternalDependency: /* @__PURE__ */ i(() => () => {
    }, "addExternalDependency")
  });
  function Bw(e) {
    return (t, r, n) => {
      var s;
      let a;
      for (let l of Object.keys(qg)) {
        var o;
        t[l] || ((o = a) != null || (a = the(t)), a[l] = qg[l](a));
      }
      return e((s = a) != null ? s : t, r || {}, n);
    };
  }
  i(Bw, "declare");
  var qDe = Fo.declarePreset = Bw;
  function the(e) {
    let t = null;
    return typeof e.version == "string" && /^7\./.test(e.version) && (t = Object.getPrototypeOf(e), t && (!hasOwnProperty.call(t, "version") ||
    !hasOwnProperty.call(t, "transform") || !hasOwnProperty.call(t, "template") || !hasOwnProperty.call(t, "types")) && (t = null)), Object.
    assign({}, t, e);
  }
  i(the, "copyApiObject");
  function rhe(e, t) {
    if (typeof e == "number") {
      if (!Number.isInteger(e))
        throw new Error("Expected string or integer value.");
      e = `^${e}.0.0-0`;
    }
    if (typeof e != "string")
      throw new Error("Expected string or integer value.");
    let r = Error.stackTraceLimit;
    typeof r == "number" && r < 25 && (Error.stackTraceLimit = 25);
    let n;
    throw t.slice(0, 2) === "7." ? n = new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${t}". You'll need to update your @b\
abel/core version.`) : n = new Error(`Requires Babel "${e}", but was loaded with "${t}". If you are sure you have a compatible version of @b\
abel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for\
 the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`), typeof r == "number" && (Error.stackTraceLimit =
    r), Object.assign(n, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: t,
      range: e
    });
  }
  i(rhe, "throwVersionError");
});

// ../node_modules/@babel/plugin-syntax-typescript/lib/index.js
var kw = A((ep) => {
  "use strict";
  Object.defineProperty(ep, "__esModule", {
    value: !0
  });
  ep.default = void 0;
  var nhe = ta();
  Ug = /* @__PURE__ */ i(function(e, t) {
    let r = [];
    e.forEach((n, s) => {
      (Array.isArray(n) ? n[0] : n) === t && r.unshift(s);
    });
    for (let n of r)
      e.splice(n, 1);
  }, "removePlugin");
  var Ug, $De = ep.default = (0, nhe.declare)((e, t) => {
    e.assertVersion(7);
    let {
      disallowAmbiguousJSXLike: r,
      dts: n
    } = t;
    var {
      isTSX: s
    } = t;
    return {
      name: "syntax-typescript",
      manipulateOptions(a, o) {
        {
          let {
            plugins: l
          } = o;
          Ug(l, "flow"), Ug(l, "jsx"), l.push("objectRestSpread", "classProperties"), s && l.push("jsx");
        }
        o.plugins.push(["typescript", {
          disallowAmbiguousJSXLike: r,
          dts: n
        }]);
      }
    };
  });
});

// ../node_modules/@babel/helper-function-name/lib/index.js
var $g = A((Vg) => {
  "use strict";
  Object.defineProperty(Vg, "__esModule", {
    value: !0
  });
  Vg.default = Phe;
  var Mw = Ai(), she = Pe(), {
    NOT_LOCAL_BINDING: Fw,
    cloneNode: ihe,
    identifier: ahe,
    isAssignmentExpression: ohe,
    isAssignmentPattern: lhe,
    isFunction: Rw,
    isIdentifier: jw,
    isLiteral: Lw,
    isNullLiteral: uhe,
    isObjectMethod: che,
    isObjectProperty: phe,
    isRegExpLiteral: fhe,
    isRestElement: dhe,
    isTemplateLiteral: hhe,
    isVariableDeclarator: mhe,
    toBindingIdentifierName: yhe
  } = she;
  function ghe(e) {
    let t = e.params.findIndex((r) => lhe(r) || dhe(r));
    return t === -1 ? e.params.length : t;
  }
  i(ghe, "getFunctionArity");
  var bhe = Mw.default.statement(`
  (function (FUNCTION_KEY) {
    function FUNCTION_ID() {
      return FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    }

    return FUNCTION_ID;
  })(FUNCTION)
`), Ehe = Mw.default.statement(`
  (function (FUNCTION_KEY) {
    function* FUNCTION_ID() {
      return yield* FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    };

    return FUNCTION_ID;
  })(FUNCTION)
`), The = {
    "ReferencedIdentifier|BindingIdentifier"(e, t) {
      e.node.name !== t.name || e.scope.getBindingIdentifier(t.name) !== t.outerDeclar || (t.selfReference = !0, e.stop());
    }
  };
  function She(e) {
    return uhe(e) ? "null" : fhe(e) ? `_${e.pattern}_${e.flags}` : hhe(e) ? e.quasis.map((t) => t.value.raw).join("") : e.value !== void 0 ?
    e.value + "" : "";
  }
  i(She, "getNameFromLiteralId");
  function xhe(e, t, r, n) {
    if (e.selfReference)
      if (n.hasBinding(r.name) && !n.hasGlobal(r.name))
        n.rename(r.name);
      else {
        if (!Rw(t)) return;
        let s = bhe;
        t.generator && (s = Ehe);
        let a = s({
          FUNCTION: t,
          FUNCTION_ID: r,
          FUNCTION_KEY: n.generateUidIdentifier(r.name)
        }).expression, o = a.callee.body.body[0].params;
        for (let l = 0, u = ghe(t); l < u; l++)
          o.push(n.generateUidIdentifier("x"));
        return a;
      }
    t.id = r, n.getProgramParent().references[r.name] = !0;
  }
  i(xhe, "wrap");
  function vhe(e, t, r) {
    let n = {
      selfAssignment: !1,
      selfReference: !1,
      outerDeclar: r.getBindingIdentifier(t),
      name: t
    }, s = r.getOwnBinding(t);
    return s ? s.kind === "param" && (n.selfReference = !0) : (n.outerDeclar || r.hasGlobal(t)) && r.traverse(e, The, n), n;
  }
  i(vhe, "visit");
  function Phe({
    node: e,
    parent: t,
    scope: r,
    id: n
  }, s = !1, a = !1) {
    if (e.id) return;
    if ((phe(t) || che(t, {
      kind: "method"
    })) && (!t.computed || Lw(t.key)))
      n = t.key;
    else if (mhe(t)) {
      if (n = t.id, jw(n) && !s) {
        let c = r.parent.getBinding(n.name);
        if (c && c.constant && r.getBinding(n.name) === c) {
          e.id = ihe(n), e.id[Fw] = !0;
          return;
        }
      }
    } else if (ohe(t, {
      operator: "="
    }))
      n = t.left;
    else if (!n)
      return;
    let o;
    if (n && Lw(n) ? o = She(n) : n && jw(n) && (o = n.name), o === void 0 || !a && Rw(e) && /[\uD800-\uDFFF]/.test(o))
      return;
    o = yhe(o);
    let l = ahe(o);
    l[Fw] = !0;
    let u = vhe(e, o, r);
    return xhe(u, e, l, r) || e;
  }
  i(Phe, "_default");
});

// ../node_modules/@babel/helper-split-export-declaration/lib/index.js
var Hg = A((Gg) => {
  "use strict";
  Object.defineProperty(Gg, "__esModule", {
    value: !0
  });
  Gg.default = whe;
  var Ahe = Pe(), {
    cloneNode: Wg,
    exportNamedDeclaration: qw,
    exportSpecifier: Uw,
    identifier: Kg,
    variableDeclaration: Che,
    variableDeclarator: Dhe
  } = Ahe;
  function whe(e) {
    if (!e.isExportDeclaration() || e.isExportAllDeclaration())
      throw new Error("Only default and named export declarations can be split.");
    if (e.isExportDefaultDeclaration()) {
      let a = e.get("declaration"), o = a.isFunctionDeclaration() || a.isClassDeclaration(), l = a.isFunctionExpression() || a.isClassExpression(),
      u = a.isScope() ? a.scope.parent : a.scope, c = a.node.id, p = !1;
      c ? l && u.hasBinding(c.name) && (p = !0, c = u.generateUidIdentifier(c.name)) : (p = !0, c = u.generateUidIdentifier("default"), (o ||
      l) && (a.node.id = Wg(c)));
      let f = o ? a.node : Che("var", [Dhe(Wg(c), a.node)]), h = qw(null, [Uw(Wg(c), Kg("default"))]);
      return e.insertAfter(h), e.replaceWith(f), p && u.registerDeclaration(e), e;
    } else if (e.get("specifiers").length > 0)
      throw new Error("It doesn't make sense to split exported specifiers.");
    let t = e.get("declaration"), r = t.getOuterBindingIdentifiers(), n = Object.keys(r).map((a) => Uw(Kg(a), Kg(a))), s = qw(null, n);
    return e.insertAfter(s), e.replaceWith(t.node), e;
  }
  i(whe, "splitExportDeclaration");
});

// ../node_modules/@babel/helper-environment-visitor/lib/index.js
var jo = A((ra) => {
  "use strict";
  Object.defineProperty(ra, "__esModule", {
    value: !0
  });
  ra.default = void 0;
  ra.requeueComputedKeyAndDecorators = Yg;
  ra.skipAllButComputedKey = /* @__PURE__ */ i(function(t) {
    t.skip(), t.node.computed && t.context.maybeQueue(t.get("key"));
  }, "skipAllButComputedKey");
  function Yg(e) {
    let {
      context: t,
      node: r
    } = e;
    if (r.computed && t.maybeQueue(e.get("key")), r.decorators)
      for (let n of e.get("decorators"))
        t.maybeQueue(n);
  }
  i(Yg, "requeueComputedKeyAndDecorators");
  var Ihe = {
    FunctionParent(e) {
      e.isArrowFunctionExpression() || (e.skip(), e.isMethod() && Yg(e));
    },
    Property(e) {
      e.isObjectProperty() || (e.skip(), Yg(e));
    }
  }, zDe = ra.default = Ihe;
});

// ../node_modules/@babel/helper-member-expression-to-functions/lib/index.js
var Zg = A((Qg) => {
  "use strict";
  Object.defineProperty(Qg, "__esModule", { value: !0 });
  var _he = Pe();
  function Ohe(e) {
    if (e && e.__esModule) return e;
    var t = /* @__PURE__ */ Object.create(null);
    return e && Object.keys(e).forEach(function(r) {
      if (r !== "default") {
        var n = Object.getOwnPropertyDescriptor(e, r);
        Object.defineProperty(t, r, n.get ? n : {
          enumerable: !0,
          get: /* @__PURE__ */ i(function() {
            return e[r];
          }, "get")
        });
      }
    }), t.default = e, Object.freeze(t);
  }
  i(Ohe, "_interopNamespace");
  var Nhe = /* @__PURE__ */ Ohe(_he);
  function zg(e) {
    let t = e, {
      node: r,
      parentPath: n
    } = t;
    if (n.isLogicalExpression()) {
      let {
        operator: s,
        right: a
      } = n.node;
      if (s === "&&" || s === "||" || s === "??" && r === a)
        return zg(n);
    }
    if (n.isSequenceExpression()) {
      let {
        expressions: s
      } = n.node;
      return s[s.length - 1] === r ? zg(n) : !0;
    }
    return n.isConditional({
      test: r
    }) || n.isUnaryExpression({
      operator: "!"
    }) || n.isLoop({
      test: r
    });
  }
  i(zg, "willPathCastToBoolean");
  var {
    LOGICAL_OPERATORS: Bhe,
    arrowFunctionExpression: Vw,
    assignmentExpression: na,
    binaryExpression: ii,
    booleanLiteral: khe,
    callExpression: np,
    cloneNode: Lr,
    conditionalExpression: Fhe,
    identifier: Hw,
    isMemberExpression: jhe,
    isOptionalCallExpression: Lhe,
    isOptionalMemberExpression: Yw,
    isUpdateExpression: Mhe,
    logicalExpression: rp,
    memberExpression: $w,
    nullLiteral: tp,
    optionalCallExpression: Rhe,
    optionalMemberExpression: qhe,
    sequenceExpression: Jg,
    updateExpression: Ww
  } = Nhe, Xg = class {
    static {
      i(this, "AssignmentMemoiser");
    }
    constructor() {
      this._map = void 0, this._map = /* @__PURE__ */ new WeakMap();
    }
    has(t) {
      return this._map.has(t);
    }
    get(t) {
      if (!this.has(t)) return;
      let r = this._map.get(t), {
        value: n
      } = r;
      return r.count--, r.count === 0 ? na("=", n, t) : n;
    }
    set(t, r, n) {
      return this._map.set(t, {
        count: n,
        value: r
      });
    }
  };
  function Kw(e, t) {
    let {
      node: r
    } = e;
    if (Yw(r))
      return $w(t, r.property, r.computed);
    if (e.isOptionalCallExpression()) {
      let n = e.get("callee");
      if (e.node.optional && n.isOptionalMemberExpression()) {
        let s = n.node.object, a = e.scope.maybeGenerateMemoised(s);
        return n.get("object").replaceWith(na("=", a, s)), np($w(t, Hw("call")), [a, ...e.node.arguments]);
      }
      return np(t, e.node.arguments);
    }
    return e.node;
  }
  i(Kw, "toNonOptional");
  function Uhe(e) {
    for (; e && !e.isProgram(); ) {
      let {
        parentPath: t,
        container: r,
        listKey: n
      } = e, s = t.node;
      if (n) {
        if (r !== s[n])
          return !0;
      } else if (r !== s) return !0;
      e = t;
    }
    return !1;
  }
  i(Uhe, "isInDetachedTree");
  var Vhe = {
    memoise() {
    },
    handle(e, t) {
      let {
        node: r,
        parent: n,
        parentPath: s,
        scope: a
      } = e;
      if (e.isOptionalMemberExpression()) {
        if (Uhe(e)) return;
        let o = e.find(({
          node: $,
          parent: ee
        }) => Yw(ee) ? ee.optional || ee.object !== $ : Lhe(ee) ? $ !== e.node && ee.optional || ee.callee !== $ : !0);
        if (a.path.isPattern()) {
          o.replaceWith(np(Vw([], o.node), []));
          return;
        }
        let l = zg(o), u = o.parentPath;
        if (u.isUpdateExpression({
          argument: r
        }))
          throw e.buildCodeFrameError("can't handle update expression");
        let c = u.isAssignmentExpression({
          left: o.node
        }), p = u.isUnaryExpression({
          operator: "delete"
        });
        if (p && o.isOptionalMemberExpression() && o.get("property").isPrivateName())
          throw e.buildCodeFrameError("can't delete a private class element");
        let f = e;
        for (; ; ) {
          if (f.isOptionalMemberExpression()) {
            if (f.node.optional) break;
            f = f.get("object");
            continue;
          } else if (f.isOptionalCallExpression()) {
            if (f.node.optional) break;
            f = f.get("callee");
            continue;
          }
          throw new Error(`Internal error: unexpected ${f.node.type}`);
        }
        let h = f.isOptionalMemberExpression() ? f.node.object : f.node.callee, g = a.maybeGenerateMemoised(h), P = g ?? h, d = s.isOptionalCallExpression(
        {
          callee: r
        }), y = /* @__PURE__ */ i(($) => d, "isOptionalCall"), E = s.isCallExpression({
          callee: r
        });
        f.replaceWith(Kw(f, P)), y() ? n.optional ? s.replaceWith(this.optionalCall(e, n.arguments)) : s.replaceWith(this.call(e, n.arguments)) :
        E ? e.replaceWith(this.boundGet(e)) : this.delete && s.isUnaryExpression({
          operator: "delete"
        }) ? s.replaceWith(this.delete(e)) : s.isAssignmentExpression() ? Gw(this, e, s) : e.replaceWith(this.get(e));
        let _ = e.node;
        for (let $ = e; $ !== o; ) {
          let ee = $.parentPath;
          if (ee === o && y() && n.optional) {
            _ = ee.node;
            break;
          }
          _ = Kw(ee, _), $ = ee;
        }
        let k, B = o.parentPath;
        if (jhe(_) && B.isOptionalCallExpression({
          callee: o.node,
          optional: !0
        })) {
          let {
            object: $
          } = _;
          k = e.scope.maybeGenerateMemoised($), k && (_.object = na("=", k, $));
        }
        let L = o;
        (p || c) && (L = B, _ = B.node);
        let U = g ? na("=", Lr(P), Lr(h)) : Lr(P);
        if (l) {
          let $;
          t ? $ = ii("!=", U, tp()) : $ = rp("&&", ii("!==", U, tp()), ii("!==", Lr(P), a.buildUndefinedNode())), L.replaceWith(rp("&&", $, _));
        } else {
          let $;
          t ? $ = ii("==", U, tp()) : $ = rp("||", ii("===", U, tp()), ii("===", Lr(P), a.buildUndefinedNode())), L.replaceWith(Fhe($, p ? khe(
          !0) : a.buildUndefinedNode(), _));
        }
        if (k) {
          let $ = B.node;
          B.replaceWith(Rhe(qhe($.callee, Hw("call"), !1, !0), [Lr(k), ...$.arguments], !1));
        }
        return;
      }
      if (Mhe(n, {
        argument: r
      })) {
        if (this.simpleSet) {
          e.replaceWith(this.simpleSet(e));
          return;
        }
        let {
          operator: o,
          prefix: l
        } = n;
        this.memoise(e, 2);
        let u = a.generateUidIdentifierBasedOnNode(r);
        a.push({
          id: u
        });
        let c = [na("=", Lr(u), this.get(e))];
        if (l) {
          c.push(Ww(o, Lr(u), l));
          let p = Jg(c);
          s.replaceWith(this.set(e, p));
          return;
        } else {
          let p = a.generateUidIdentifierBasedOnNode(r);
          a.push({
            id: p
          }), c.push(na("=", Lr(p), Ww(o, Lr(u), l)), Lr(u));
          let f = Jg(c);
          s.replaceWith(Jg([this.set(e, f), Lr(p)]));
          return;
        }
      }
      if (s.isAssignmentExpression({
        left: r
      })) {
        Gw(this, e, s);
        return;
      }
      if (s.isCallExpression({
        callee: r
      })) {
        s.replaceWith(this.call(e, s.node.arguments));
        return;
      }
      if (s.isOptionalCallExpression({
        callee: r
      })) {
        if (a.path.isPattern()) {
          s.replaceWith(np(Vw([], s.node), []));
          return;
        }
        s.replaceWith(this.optionalCall(e, s.node.arguments));
        return;
      }
      if (this.delete && s.isUnaryExpression({
        operator: "delete"
      })) {
        s.replaceWith(this.delete(e));
        return;
      }
      if (s.isForXStatement({
        left: r
      }) || s.isObjectProperty({
        value: r
      }) && s.parentPath.isObjectPattern() || s.isAssignmentPattern({
        left: r
      }) && s.parentPath.isObjectProperty({
        value: n
      }) && s.parentPath.parentPath.isObjectPattern() || s.isArrayPattern() || s.isAssignmentPattern({
        left: r
      }) && s.parentPath.isArrayPattern() || s.isRestElement()) {
        e.replaceWith(this.destructureSet(e));
        return;
      }
      s.isTaggedTemplateExpression() ? e.replaceWith(this.boundGet(e)) : e.replaceWith(this.get(e));
    }
  };
  function Gw(e, t, r) {
    if (e.simpleSet) {
      t.replaceWith(e.simpleSet(t));
      return;
    }
    let {
      operator: n,
      right: s
    } = r.node;
    if (n === "=")
      r.replaceWith(e.set(t, s));
    else {
      let a = n.slice(0, -1);
      Bhe.includes(a) ? (e.memoise(t, 1), r.replaceWith(rp(a, e.get(t), e.set(t, s)))) : (e.memoise(t, 2), r.replaceWith(e.set(t, ii(a, e.get(
      t), s))));
    }
  }
  i(Gw, "handleAssignment");
  function $he(e, t, r) {
    e.traverse(t, Object.assign({}, Vhe, r, {
      memoiser: new Xg()
    }));
  }
  i($he, "memberExpressionToFunctions");
  Qg.default = $he;
});

// ../node_modules/@babel/helper-optimise-call-expression/lib/index.js
var tb = A((eb) => {
  "use strict";
  Object.defineProperty(eb, "__esModule", {
    value: !0
  });
  eb.default = Hhe;
  var Whe = Pe(), {
    callExpression: Jw,
    identifier: sp,
    isIdentifier: Khe,
    isSpreadElement: Ghe,
    memberExpression: zw,
    optionalCallExpression: Xw,
    optionalMemberExpression: Qw
  } = Whe;
  function Hhe(e, t, r, n) {
    return r.length === 1 && Ghe(r[0]) && Khe(r[0].argument, {
      name: "arguments"
    }) ? n ? Xw(Qw(e, sp("apply"), !1, !0), [t, r[0].argument], !1) : Jw(zw(e, sp("apply")), [t, r[0].argument]) : n ? Xw(Qw(e, sp("call"), !1,
    !0), [t, ...r], !1) : Jw(zw(e, sp("call")), [t, ...r]);
  }
  i(Hhe, "optimiseCallExpression");
});

// ../node_modules/@babel/helper-replace-supers/lib/index.js
var op = A((ia) => {
  "use strict";
  Object.defineProperty(ia, "__esModule", {
    value: !0
  });
  ia.default = void 0;
  var tI = jo(), Yhe = Zg(), ap = tb(), Ro = bt(), {
    assignmentExpression: Jhe,
    booleanLiteral: zhe,
    callExpression: ip,
    cloneNode: Qr,
    identifier: Lo,
    memberExpression: sa,
    sequenceExpression: rb,
    stringLiteral: Xhe,
    thisExpression: Mo
  } = Ro.types;
  {
    let e = jo();
    ia.environmentVisitor = e.default, ia.skipAllButComputedKey = e.skipAllButComputedKey;
  }
  function Zw(e, t, r, n) {
    e = Qr(e);
    let s = t || n ? e : sa(e, Lo("prototype"));
    return ip(r.addHelper("getPrototypeOf"), [s]);
  }
  i(Zw, "getPrototypeOfExpression");
  var eI = Ro.traverse.visitors.merge([tI.default, {
    Super(e, t) {
      let {
        node: r,
        parentPath: n
      } = e;
      n.isMemberExpression({
        object: r
      }) && t.handle(n);
    }
  }]), Qhe = Ro.traverse.visitors.merge([tI.default, {
    Scopable(e, {
      refName: t
    }) {
      let r = e.scope.getOwnBinding(t);
      r && r.identifier.name === t && e.scope.rename(t);
    }
  }]), rI = {
    memoise(e, t) {
      let {
        scope: r,
        node: n
      } = e, {
        computed: s,
        property: a
      } = n;
      if (!s)
        return;
      let o = r.maybeGenerateMemoised(a);
      o && this.memoiser.set(a, o, t);
    },
    prop(e) {
      let {
        computed: t,
        property: r
      } = e.node;
      return this.memoiser.has(r) ? Qr(this.memoiser.get(r)) : t ? Qr(r) : Xhe(r.name);
    },
    get(e) {
      return this._get(e, this._getThisRefs());
    },
    _get(e, t) {
      let r = Zw(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
      return ip(this.file.addHelper("get"), [t.needAccessFirst ? rb([t.this, r]) : r, this.prop(e), t.this]);
    },
    _getThisRefs() {
      return {
        needAccessFirst: this.isDerivedConstructor,
        this: Mo()
      };
    },
    set(e, t) {
      let r = this._getThisRefs(), n = Zw(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
      return ip(this.file.addHelper("set"), [r.needAccessFirst ? rb([r.this, n]) : n, this.prop(e), t, r.this, zhe(e.isInStrictMode())]);
    },
    destructureSet(e) {
      throw e.buildCodeFrameError("Destructuring to a super field is not supported yet.");
    },
    call(e, t) {
      let r = this._getThisRefs();
      return (0, ap.default)(this._get(e, r), Qr(r.this), t, !1);
    },
    optionalCall(e, t) {
      let r = this._getThisRefs();
      return (0, ap.default)(this._get(e, r), Qr(r.this), t, !0);
    },
    delete(e) {
      return e.node.computed ? rb([ip(this.file.addHelper("toPropertyKey"), [Qr(e.node.property)]), Ro.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : Ro.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
    }
  }, Zhe = Object.assign({}, rI, {
    prop(e) {
      let {
        property: t
      } = e.node;
      return this.memoiser.has(t) ? Qr(this.memoiser.get(t)) : Qr(t);
    },
    get(e) {
      let {
        isStatic: t,
        getSuperRef: r
      } = this, {
        computed: n
      } = e.node, s = this.prop(e), a;
      if (t) {
        var o;
        a = (o = r()) != null ? o : sa(Lo("Function"), Lo("prototype"));
      } else {
        var l;
        a = sa((l = r()) != null ? l : Lo("Object"), Lo("prototype"));
      }
      return sa(a, s, n);
    },
    set(e, t) {
      let {
        computed: r
      } = e.node, n = this.prop(e);
      return Jhe("=", sa(Mo(), n, r), t);
    },
    destructureSet(e) {
      let {
        computed: t
      } = e.node, r = this.prop(e);
      return sa(Mo(), r, t);
    },
    call(e, t) {
      return (0, ap.default)(this.get(e), Mo(), t, !1);
    },
    optionalCall(e, t) {
      return (0, ap.default)(this.get(e), Mo(), t, !0);
    }
  }), nb = class {
    static {
      i(this, "ReplaceSupers");
    }
    constructor(t) {
      var r;
      let n = t.methodPath;
      this.methodPath = n, this.isDerivedConstructor = n.isClassMethod({
        kind: "constructor"
      }) && !!t.superRef, this.isStatic = n.isObjectMethod() || n.node.static || (n.isStaticBlock == null ? void 0 : n.isStaticBlock()), this.
      isPrivateMethod = n.isPrivate() && n.isMethod(), this.file = t.file, this.constantSuper = (r = t.constantSuper) != null ? r : t.isLoose,
      this.opts = t;
    }
    getObjectRef() {
      return Qr(this.opts.objectRef || this.opts.getObjectRef());
    }
    getSuperRef() {
      if (this.opts.superRef) return Qr(this.opts.superRef);
      if (this.opts.getSuperRef)
        return Qr(this.opts.getSuperRef());
    }
    replace() {
      let {
        methodPath: t
      } = this;
      this.opts.refToPreserve && t.traverse(Qhe, {
        refName: this.opts.refToPreserve.name
      });
      let r = this.constantSuper ? Zhe : rI;
      eI.shouldSkip = (n) => {
        if (n.parentPath === t && (n.parentKey === "decorators" || n.parentKey === "key"))
          return !0;
      }, (0, Yhe.default)(t, eI, Object.assign({
        file: this.file,
        scope: this.methodPath.scope,
        isDerivedConstructor: this.isDerivedConstructor,
        isStatic: this.isStatic,
        isPrivateMethod: this.isPrivateMethod,
        getObjectRef: this.getObjectRef.bind(this),
        getSuperRef: this.getSuperRef.bind(this),
        boundGet: r.get
      }, r));
    }
  };
  ia.default = nb;
});

// ../node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js
var ib = A((qo) => {
  "use strict";
  Object.defineProperty(qo, "__esModule", {
    value: !0
  });
  qo.isTransparentExprWrapper = sb;
  qo.skipTransparentExprWrapperNodes = lme;
  qo.skipTransparentExprWrappers = ome;
  var eme = Pe(), {
    isParenthesizedExpression: tme,
    isTSAsExpression: rme,
    isTSNonNullExpression: nme,
    isTSSatisfiesExpression: sme,
    isTSTypeAssertion: ime,
    isTypeCastExpression: ame
  } = eme;
  function sb(e) {
    return rme(e) || sme(e) || ime(e) || nme(e) || ame(e) || tme(e);
  }
  i(sb, "isTransparentExprWrapper");
  function ome(e) {
    for (; sb(e.node); )
      e = e.get("expression");
    return e;
  }
  i(ome, "skipTransparentExprWrappers");
  function lme(e) {
    for (; sb(e); )
      e = e.expression;
    return e;
  }
  i(lme, "skipTransparentExprWrapperNodes");
});

// ../node_modules/@babel/helper-annotate-as-pure/lib/index.js
var ob = A((ab) => {
  "use strict";
  Object.defineProperty(ab, "__esModule", {
    value: !0
  });
  ab.default = dme;
  var ume = Pe(), {
    addComment: cme
  } = ume, pme = "#__PURE__", fme = /* @__PURE__ */ i(({
    leadingComments: e
  }) => !!e && e.some((t) => /[@#]__PURE__/.test(t.value)), "isPureAnnotated");
  function dme(e) {
    let t = e.node || e;
    fme(t) || cme(t, "leading", pme);
  }
  i(dme, "annotateAsPure");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js
var ub = A((lb) => {
  "use strict";
  Object.defineProperty(lb, "__esModule", {
    value: !0
  });
  lb.assertFieldTransformed = hme;
  function hme(e) {
    if (e.node.declare)
      throw e.buildCodeFrameError(`TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.
If you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional clas\
s features:
 - @babel/plugin-transform-class-properties
 - @babel/plugin-transform-private-methods
 - @babel/plugin-proposal-decorators`);
  }
  i(hme, "assertFieldTransformed");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/fields.js
var hb = A((Ts) => {
  "use strict";
  Object.defineProperty(Ts, "__esModule", {
    value: !0
  });
  Ts.buildCheckInRHS = cp;
  Ts.buildFieldsInitNodes = Mme;
  Ts.buildPrivateNamesMap = Tme;
  Ts.buildPrivateNamesNodes = Sme;
  Ts.privateNameVisitorFactory = db;
  Ts.transformPrivateNamesUsage = Dme;
  var F = bt(), mme = op(), lI = jo(), yme = Zg(), nI = tb(), gme = ob(), bme = ib(), Eme = ub();
  zt = /* @__PURE__ */ i((e) => e.availableHelper("classPrivateFieldGet2"), "newHelpers");
  var zt;
  function Tme(e, t, r, n) {
    let s = /* @__PURE__ */ new Map(), a;
    for (let l of r)
      if (l.isPrivate()) {
        let {
          name: u
        } = l.node.key.id, c = s.get(u);
        if (!c) {
          let p = !l.isProperty(), f = l.node.static, h = !1, g;
          if (!t && zt(n) && p && !f) {
            var o;
            h = !!a, (o = a) != null || (a = l.scope.generateUidIdentifier(`${e}_brand`)), g = a;
          } else
            g = l.scope.generateUidIdentifier(u);
          c = {
            id: g,
            static: f,
            method: p,
            initAdded: h
          }, s.set(u, c);
        }
        if (l.isClassPrivateMethod())
          if (l.node.kind === "get") {
            let {
              body: p
            } = l.node.body, f;
            p.length === 1 && F.types.isReturnStatement(f = p[0]) && F.types.isCallExpression(f = f.argument) && f.arguments.length === 1 &&
            F.types.isThisExpression(f.arguments[0]) && F.types.isIdentifier(f = f.callee) ? (c.getId = F.types.cloneNode(f), c.getterDeclared =
            !0) : c.getId = l.scope.generateUidIdentifier(`get_${u}`);
          } else if (l.node.kind === "set") {
            let {
              params: p
            } = l.node, {
              body: f
            } = l.node.body, h;
            f.length === 1 && F.types.isExpressionStatement(h = f[0]) && F.types.isCallExpression(h = h.expression) && h.arguments.length ===
            2 && F.types.isThisExpression(h.arguments[0]) && F.types.isIdentifier(h.arguments[1], {
              name: p[0].name
            }) && F.types.isIdentifier(h = h.callee) ? (c.setId = F.types.cloneNode(h), c.setterDeclared = !0) : c.setId = l.scope.generateUidIdentifier(
            `set_${u}`);
          } else l.node.kind === "method" && (c.methodId = l.scope.generateUidIdentifier(u));
        s.set(u, c);
      }
    return s;
  }
  i(Tme, "buildPrivateNamesMap");
  function Sme(e, t, r, n) {
    let s = [], a = /* @__PURE__ */ new Set();
    for (let [o, l] of e) {
      let {
        static: u,
        method: c,
        getId: p,
        setId: f
      } = l, h = p || f, g = F.types.cloneNode(l.id), P;
      if (t)
        P = F.types.callExpression(n.addHelper("classPrivateFieldLooseKey"), [F.types.stringLiteral(o)]);
      else if (r)
        P = F.types.callExpression(F.types.identifier("Symbol"), [F.types.stringLiteral(o)]);
      else if (!u) {
        if (a.has(g.name)) continue;
        a.add(g.name), P = F.types.newExpression(F.types.identifier(c && (!h || zt(n)) ? "WeakSet" : "WeakMap"), []);
      }
      P && (r || (0, gme.default)(P), s.push(F.template.statement.ast`var ${g} = ${P}`));
    }
    return s;
  }
  i(Sme, "buildPrivateNamesNodes");
  function db(e) {
    let t = F.traverse.visitors.merge([Object.assign({}, e), lI.default]), r = Object.assign({}, e, {
      Class(n) {
        let {
          privateNamesMap: s
        } = this, a = n.get("body.body"), o = new Map(s), l = [];
        for (let u of a) {
          if (!u.isPrivate()) continue;
          let {
            name: c
          } = u.node.key.id;
          o.delete(c), l.push(c);
        }
        l.length && (n.get("body").traverse(t, Object.assign({}, this, {
          redeclared: l
        })), n.traverse(r, Object.assign({}, this, {
          privateNamesMap: o
        })), n.skipKey("body"));
      }
    });
    return r;
  }
  i(db, "privateNameVisitorFactory");
  var xme = db({
    PrivateName(e, {
      noDocumentAll: t
    }) {
      let {
        privateNamesMap: r,
        redeclared: n
      } = this, {
        node: s,
        parentPath: a
      } = e;
      if (!a.isMemberExpression({
        property: s
      }) && !a.isOptionalMemberExpression({
        property: s
      }))
        return;
      let {
        name: o
      } = s.id;
      r.has(o) && (n != null && n.includes(o) || this.handle(a, t));
    }
  });
  function uI(e, t, r) {
    for (; (n = t) != null && n.hasBinding(e) && !t.bindingIdentifierEquals(e, r); ) {
      var n;
      t.rename(e), t = t.parent;
    }
  }
  i(uI, "unshadow");
  function cp(e, t, r) {
    return r || !(t.availableHelper != null && t.availableHelper("checkInRHS")) ? e : F.types.callExpression(t.addHelper("checkInRHS"), [e]);
  }
  i(cp, "buildCheckInRHS");
  var vme = db({
    BinaryExpression(e, {
      file: t
    }) {
      let {
        operator: r,
        left: n,
        right: s
      } = e.node;
      if (r !== "in" || !F.types.isPrivateName(n)) return;
      let {
        privateFieldsAsProperties: a,
        privateNamesMap: o,
        redeclared: l
      } = this, {
        name: u
      } = n.id;
      if (!o.has(u) || l != null && l.includes(u)) return;
      if (uI(this.classRef.name, e.scope, this.innerBinding), a) {
        let {
          id: f
        } = o.get(u);
        e.replaceWith(F.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${cp(s, t)}, ${F.types.cloneNode(f)})
      `);
        return;
      }
      let {
        id: c,
        static: p
      } = o.get(u);
      if (p) {
        e.replaceWith(F.template.expression.ast`${cp(s, t)} === ${F.types.cloneNode(this.classRef)}`);
        return;
      }
      e.replaceWith(F.template.expression.ast`${F.types.cloneNode(c)}.has(${cp(s, t)})`);
    }
  });
  function lp(e, t) {
    return F.types.callExpression(e.addHelper("readOnlyError"), [F.types.stringLiteral(`#${t}`)]);
  }
  i(lp, "readOnlyError");
  function Pme(e, t) {
    return e.availableHelper("writeOnlyError") ? F.types.callExpression(e.addHelper("writeOnlyError"), [F.types.stringLiteral(`#${t}`)]) : (console.
    warn("@babel/helpers is outdated, update it to silence this warning."), F.types.buildUndefinedNode());
  }
  i(Pme, "writeOnlyError");
  function cb(e, t) {
    return t ? e : F.types.memberExpression(e, F.types.identifier("_"));
  }
  i(cb, "buildStaticPrivateFieldAccess");
  function sI(e) {
    return function(t) {
      return F.types.inherits(e.apply(this, arguments), t.node);
    };
  }
  i(sI, "autoInherits");
  var Ame = {
    memoise(e, t) {
      let {
        scope: r
      } = e, {
        object: n
      } = e.node, s = r.maybeGenerateMemoised(n);
      s && this.memoiser.set(n, s, t);
    },
    receiver(e) {
      let {
        object: t
      } = e.node;
      return this.memoiser.has(t) ? F.types.cloneNode(this.memoiser.get(t)) : F.types.cloneNode(t);
    },
    get: sI(function(e) {
      let {
        classRef: t,
        privateNamesMap: r,
        file: n,
        innerBinding: s,
        noUninitializedPrivateFieldAccess: a
      } = this, o = e.node.property, {
        name: l
      } = o.id, {
        id: u,
        static: c,
        method: p,
        methodId: f,
        getId: h,
        setId: g
      } = r.get(l), P = h || g, d = /* @__PURE__ */ i((y) => F.types.inherits(F.types.cloneNode(y), o), "cloneId");
      if (c) {
        if (uI(t.name, e.scope, s), !zt(n)) {
          let _ = p && !P ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
          return F.types.callExpression(n.addHelper(_), [this.receiver(e), F.types.cloneNode(t), d(u)]);
        }
        let y = this.receiver(e), E = F.types.isIdentifier(y) && y.name === t.name;
        if (!p)
          return cb(E ? d(u) : F.types.callExpression(n.addHelper("assertClassBrand"), [F.types.cloneNode(t), y, d(u)]), a);
        if (h)
          return E ? F.types.callExpression(d(h), [y]) : F.types.callExpression(n.addHelper("classPrivateGetter"), [F.types.cloneNode(t), y,
          d(h)]);
        if (g) {
          let _ = F.types.buildUndefinedNode();
          return E ? _ : F.types.sequenceExpression([F.types.callExpression(n.addHelper("assertClassBrand"), [F.types.cloneNode(t), y]), _]);
        }
        return E ? d(u) : F.types.callExpression(n.addHelper("assertClassBrand"), [F.types.cloneNode(t), y, d(u)]);
      }
      return p ? P ? h ? zt(n) ? F.types.callExpression(n.addHelper("classPrivateGetter"), [F.types.cloneNode(u), this.receiver(e), d(h)]) :
      F.types.callExpression(n.addHelper("classPrivateFieldGet"), [this.receiver(e), d(u)]) : F.types.sequenceExpression([this.receiver(e), Pme(
      n, l)]) : zt(n) ? F.types.callExpression(n.addHelper("assertClassBrand"), [F.types.cloneNode(u), this.receiver(e), d(f)]) : F.types.callExpression(
      n.addHelper("classPrivateMethodGet"), [this.receiver(e), F.types.cloneNode(u), d(f)]) : zt(n) ? F.types.callExpression(n.addHelper("cl\
assPrivateFieldGet2"), [d(u), this.receiver(e)]) : F.types.callExpression(n.addHelper("classPrivateFieldGet"), [this.receiver(e), d(u)]);
    }),
    boundGet(e) {
      return this.memoise(e, 1), F.types.callExpression(F.types.memberExpression(this.get(e), F.types.identifier("bind")), [this.receiver(e)]);
    },
    set: sI(function(e, t) {
      let {
        classRef: r,
        privateNamesMap: n,
        file: s,
        noUninitializedPrivateFieldAccess: a
      } = this, o = e.node.property, {
        name: l
      } = o.id, {
        id: u,
        static: c,
        method: p,
        setId: f,
        getId: h
      } = n.get(l), g = h || f, P = /* @__PURE__ */ i((d) => F.types.inherits(F.types.cloneNode(d), o), "cloneId");
      if (c) {
        if (!zt(s)) {
          let E = p && !g ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
          return F.types.callExpression(s.addHelper(E), [this.receiver(e), F.types.cloneNode(r), P(u), t]);
        }
        let d = this.receiver(e), y = F.types.isIdentifier(d) && d.name === r.name;
        if (p && !f) {
          let E = lp(s, l);
          return y ? F.types.sequenceExpression([t, E]) : F.types.sequenceExpression([t, F.types.callExpression(s.addHelper("assertClassBran\
d"), [F.types.cloneNode(r), d]), lp(s, l)]);
        }
        return f ? y ? F.types.callExpression(F.types.cloneNode(f), [d, t]) : F.types.callExpression(s.addHelper("classPrivateSetter"), [F.types.
        cloneNode(r), P(f), d, t]) : F.types.assignmentExpression("=", cb(P(u), a), y ? t : F.types.callExpression(s.addHelper("assertClassB\
rand"), [F.types.cloneNode(r), d, t]));
      }
      return p ? f ? zt(s) ? F.types.callExpression(s.addHelper("classPrivateSetter"), [F.types.cloneNode(u), P(f), this.receiver(e), t]) : F.
      types.callExpression(s.addHelper("classPrivateFieldSet"), [this.receiver(e), P(u), t]) : F.types.sequenceExpression([this.receiver(e),
      t, lp(s, l)]) : zt(s) ? F.types.callExpression(s.addHelper("classPrivateFieldSet2"), [P(u), this.receiver(e), t]) : F.types.callExpression(
      s.addHelper("classPrivateFieldSet"), [this.receiver(e), P(u), t]);
    }),
    destructureSet(e) {
      let {
        classRef: t,
        privateNamesMap: r,
        file: n,
        noUninitializedPrivateFieldAccess: s
      } = this, a = e.node.property, {
        name: o
      } = a.id, {
        id: l,
        static: u,
        method: c,
        setId: p
      } = r.get(o), f = /* @__PURE__ */ i((d) => F.types.inherits(F.types.cloneNode(d), a), "cloneId");
      if (!zt(n)) {
        if (u) {
          try {
            var h = n.addHelper("classStaticPrivateFieldDestructureSet");
          } catch {
            throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the late\
st version.");
          }
          return F.types.memberExpression(F.types.callExpression(h, [this.receiver(e), F.types.cloneNode(t), f(l)]), F.types.identifier("val\
ue"));
        }
        return F.types.memberExpression(F.types.callExpression(n.addHelper("classPrivateFieldDestructureSet"), [this.receiver(e), f(l)]), F.
        types.identifier("value"));
      }
      if (c && !p)
        return F.types.memberExpression(F.types.sequenceExpression([e.node.object, lp(n, o)]), F.types.identifier("_"));
      if (u && !c) {
        let d = this.get(e);
        if (!s || !F.types.isCallExpression(d))
          return d;
        let y = d.arguments.pop();
        return d.arguments.push(F.template.expression.ast`(_) => ${y} = _`), F.types.memberExpression(F.types.callExpression(n.addHelper("to\
Setter"), [d]), F.types.identifier("_"));
      }
      let g = this.set(e, F.types.identifier("_"));
      if (!F.types.isCallExpression(g) || !F.types.isIdentifier(g.arguments[g.arguments.length - 1], {
        name: "_"
      }))
        throw e.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. Please report it at https://github\
.com/babel/babel/issues.");
      let P;
      return F.types.isMemberExpression(g.callee, {
        computed: !1
      }) && F.types.isIdentifier(g.callee.property) && g.callee.property.name === "call" ? P = [g.callee.object, F.types.arrayExpression(g.arguments.
      slice(1, -1)), g.arguments[0]] : P = [g.callee, F.types.arrayExpression(g.arguments.slice(0, -1))], F.types.memberExpression(F.types.callExpression(
      n.addHelper("toSetter"), P), F.types.identifier("_"));
    },
    call(e, t) {
      return this.memoise(e, 1), (0, nI.default)(this.get(e), this.receiver(e), t, !1);
    },
    optionalCall(e, t) {
      return this.memoise(e, 1), (0, nI.default)(this.get(e), this.receiver(e), t, !0);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  }, Cme = {
    get(e) {
      let {
        privateNamesMap: t,
        file: r
      } = this, {
        object: n
      } = e.node, {
        name: s
      } = e.node.property.id;
      return F.template.expression`BASE(REF, PROP)[PROP]`({
        BASE: r.addHelper("classPrivateFieldLooseBase"),
        REF: F.types.cloneNode(n),
        PROP: F.types.cloneNode(t.get(s).id)
      });
    },
    set() {
      throw new Error("private name handler with loose = true don't need set()");
    },
    boundGet(e) {
      return F.types.callExpression(F.types.memberExpression(this.get(e), F.types.identifier("bind")), [F.types.cloneNode(e.node.object)]);
    },
    simpleSet(e) {
      return this.get(e);
    },
    destructureSet(e) {
      return this.get(e);
    },
    call(e, t) {
      return F.types.callExpression(this.get(e), t);
    },
    optionalCall(e, t) {
      return F.types.optionalCallExpression(this.get(e), t, !0);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  };
  function Dme(e, t, r, {
    privateFieldsAsProperties: n,
    noUninitializedPrivateFieldAccess: s,
    noDocumentAll: a,
    innerBinding: o
  }, l) {
    if (!r.size) return;
    let u = t.get("body"), c = n ? Cme : Ame;
    (0, yme.default)(u, xme, Object.assign({
      privateNamesMap: r,
      classRef: e,
      file: l
    }, c, {
      noDocumentAll: a,
      noUninitializedPrivateFieldAccess: s,
      innerBinding: o
    })), u.traverse(vme, {
      privateNamesMap: r,
      classRef: e,
      file: l,
      privateFieldsAsProperties: n,
      innerBinding: o
    });
  }
  i(Dme, "transformPrivateNamesUsage");
  function iI(e, t, r) {
    let {
      id: n
    } = r.get(t.node.key.id.name), s = t.node.value || t.scope.buildUndefinedNode();
    return Rt(F.template.statement.ast`
      Object.defineProperty(${e}, ${F.types.cloneNode(n)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${s}
      });
    `, t);
  }
  i(iI, "buildPrivateFieldInitLoose");
  function wme(e, t, r, n) {
    let {
      id: s
    } = r.get(t.node.key.id.name), a = t.node.value || t.scope.buildUndefinedNode();
    if (!n.availableHelper("classPrivateFieldInitSpec"))
      return Rt(F.template.statement.ast`${F.types.cloneNode(s)}.set(${e}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${a},
        })`, t);
    let o = n.addHelper("classPrivateFieldInitSpec");
    return fb(Rt(F.types.expressionStatement(F.types.callExpression(o, [F.types.thisExpression(), fb(F.types.cloneNode(s), t.node.key), zt(n) ?
    a : F.template.expression.ast`{ writable: true, value: ${a} }`])), t), t.node);
  }
  i(wme, "buildPrivateInstanceFieldInitSpec");
  function Ime(e, t, r) {
    let n = t.get(e.node.key.id.name), s = r ? e.node.value : F.template.expression.ast`{
        _: ${e.node.value || F.types.buildUndefinedNode()}
      }`;
    return Rt(F.types.variableDeclaration("var", [F.types.variableDeclarator(F.types.cloneNode(n.id), s)]), e);
  }
  i(Ime, "buildPrivateStaticFieldInitSpec");
  pb = /* @__PURE__ */ i(function(e, t) {
    let r = t.get(e.node.key.id.name), {
      id: n,
      getId: s,
      setId: a,
      initAdded: o
    } = r, l = s || a;
    if (!e.isProperty() && (o || !l)) return;
    if (l)
      return t.set(e.node.key.id.name, Object.assign({}, r, {
        initAdded: !0
      })), Rt(F.template.statement.ast`
          var ${F.types.cloneNode(n)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${s ? s.name : e.scope.buildUndefinedNode()},
            set: ${a ? a.name : e.scope.buildUndefinedNode()}
          }
        `, e);
    let u = e.node.value || e.scope.buildUndefinedNode();
    return Rt(F.template.statement.ast`
        var ${F.types.cloneNode(n)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${u}
        };
      `, e);
  }, "buildPrivateStaticFieldInitSpecOld");
  var pb;
  function _me(e, t, r) {
    let n = r.get(t.node.key.id.name), {
      methodId: s,
      id: a,
      getId: o,
      setId: l,
      initAdded: u
    } = n;
    if (u) return;
    if (s)
      return Rt(F.template.statement.ast`
        Object.defineProperty(${e}, ${a}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${s.name}
        });
      `, t);
    if (o || l)
      return r.set(t.node.key.id.name, Object.assign({}, n, {
        initAdded: !0
      })), Rt(F.template.statement.ast`
        Object.defineProperty(${e}, ${a}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${o ? o.name : t.scope.buildUndefinedNode()},
          set: ${l ? l.name : t.scope.buildUndefinedNode()}
        });
      `, t);
  }
  i(_me, "buildPrivateMethodInitLoose");
  function Ome(e, t, r, n) {
    let s = r.get(t.node.key.id.name);
    if (!s.initAdded)
      return !zt(n) && (s.getId || s.setId) ? Nme(e, t, r, n) : Bme(e, t, r, n);
  }
  i(Ome, "buildPrivateInstanceMethodInitSpec");
  function Nme(e, t, r, n) {
    let s = r.get(t.node.key.id.name), {
      id: a,
      getId: o,
      setId: l
    } = s;
    if (r.set(t.node.key.id.name, Object.assign({}, s, {
      initAdded: !0
    })), !n.availableHelper("classPrivateFieldInitSpec"))
      return Rt(F.template.statement.ast`
          ${a}.set(${e}, {
            get: ${o ? o.name : t.scope.buildUndefinedNode()},
            set: ${l ? l.name : t.scope.buildUndefinedNode()}
          });
        `, t);
    let u = n.addHelper("classPrivateFieldInitSpec");
    return fb(Rt(F.template.statement.ast`${u}(
      ${F.types.thisExpression()},
      ${F.types.cloneNode(a)},
      {
        get: ${o ? o.name : t.scope.buildUndefinedNode()},
        set: ${l ? l.name : t.scope.buildUndefinedNode()}
      },
    )`, t), t.node);
  }
  i(Nme, "buildPrivateAccessorInitialization");
  function Bme(e, t, r, n) {
    let s = r.get(t.node.key.id.name), {
      id: a
    } = s;
    if (!n.availableHelper("classPrivateMethodInitSpec"))
      return Rt(F.template.statement.ast`${a}.add(${e})`, t);
    let o = n.addHelper("classPrivateMethodInitSpec");
    return Rt(F.template.statement.ast`${o}(
      ${F.types.thisExpression()},
      ${F.types.cloneNode(a)}
    )`, t);
  }
  i(Bme, "buildPrivateInstanceMethodInitialization");
  function aI(e, t) {
    let {
      key: r,
      computed: n
    } = t.node, s = t.node.value || t.scope.buildUndefinedNode();
    return Rt(F.types.expressionStatement(F.types.assignmentExpression("=", F.types.memberExpression(e, r, n || F.types.isLiteral(r)), s)), t);
  }
  i(aI, "buildPublicFieldInitLoose");
  function oI(e, t, r) {
    let {
      key: n,
      computed: s
    } = t.node, a = t.node.value || t.scope.buildUndefinedNode();
    return Rt(F.types.expressionStatement(F.types.callExpression(r.addHelper("defineProperty"), [e, s || F.types.isLiteral(n) ? n : F.types.
    stringLiteral(n.name), a])), t);
  }
  i(oI, "buildPublicFieldInitSpec");
  function kme(e, t, r, n) {
    let s = n.get(t.node.key.id.name), {
      id: a,
      methodId: o,
      getId: l,
      setId: u,
      initAdded: c
    } = s;
    return c ? void 0 : l || u ? (n.set(t.node.key.id.name, Object.assign({}, s, {
      initAdded: !0
    })), Rt(F.template.statement.ast`
        Object.defineProperty(${e}, ${a}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${l ? l.name : t.scope.buildUndefinedNode()},
          set: ${u ? u.name : t.scope.buildUndefinedNode()}
        })
      `, t)) : Rt(F.template.statement.ast`
      Object.defineProperty(${e}, ${a}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${o.name}
      });
    `, t);
  }
  i(kme, "buildPrivateStaticMethodInitLoose");
  function up(e, t, r, n = !1) {
    let s = r.get(t.node.key.id.name), {
      id: a,
      methodId: o,
      getId: l,
      setId: u,
      getterDeclared: c,
      setterDeclared: p,
      static: f
    } = s, {
      params: h,
      body: g,
      generator: P,
      async: d
    } = t.node, y = l && h.length === 0, E = u && h.length > 0;
    if (y && c || E && p)
      return r.set(t.node.key.id.name, Object.assign({}, s, {
        initAdded: !0
      })), null;
    if (zt(e) && (y || E) && !n) {
      let k = t.get("body").scope, B = k.generateUidIdentifier("this"), L = {
        thisRef: B,
        argumentsPath: []
      };
      if (t.traverse(cI, L), L.argumentsPath.length) {
        let U = k.generateUidIdentifier("arguments");
        k.push({
          id: U,
          init: F.template.expression.ast`[].slice.call(arguments, 1)`
        });
        for (let $ of L.argumentsPath)
          $.replaceWith(F.types.cloneNode(U));
      }
      h.unshift(F.types.cloneNode(B));
    }
    let _ = o;
    return y ? (r.set(t.node.key.id.name, Object.assign({}, s, {
      getterDeclared: !0,
      initAdded: !0
    })), _ = l) : E ? (r.set(t.node.key.id.name, Object.assign({}, s, {
      setterDeclared: !0,
      initAdded: !0
    })), _ = u) : f && !n && (_ = a), Rt(F.types.functionDeclaration(F.types.cloneNode(_), h, g, P, d), t);
  }
  i(up, "buildPrivateMethodDeclaration");
  var cI = F.traverse.visitors.merge([{
    Identifier(e, t) {
      t.argumentsPath && e.node.name === "arguments" && t.argumentsPath.push(e);
    },
    UnaryExpression(e) {
      let {
        node: t
      } = e;
      if (t.operator === "delete") {
        let r = (0, bme.skipTransparentExprWrapperNodes)(t.argument);
        F.types.isThisExpression(r) && e.replaceWith(F.types.booleanLiteral(!0));
      }
    },
    ThisExpression(e, t) {
      t.needsClassRef = !0, e.replaceWith(F.types.cloneNode(t.thisRef));
    },
    MetaProperty(e) {
      let {
        node: t,
        scope: r
      } = e;
      t.meta.name === "new" && t.property.name === "target" && e.replaceWith(r.buildUndefinedNode());
    }
  }, lI.default]), Fme = {
    ReferencedIdentifier(e, t) {
      e.scope.bindingIdentifierEquals(e.node.name, t.innerBinding) && (t.needsClassRef = !0, e.node.name = t.thisRef.name);
    }
  };
  function jme(e, t, r) {
    var n;
    let s = {
      thisRef: t,
      needsClassRef: !1,
      innerBinding: r
    };
    return e.isMethod() || e.traverse(cI, s), r != null && (n = s.thisRef) != null && n.name && s.thisRef.name !== r.name && e.traverse(Fme,
    s), s.needsClassRef;
  }
  i(jme, "replaceThisContext");
  function Lme({
    key: e,
    computed: t
  }) {
    return e.type === "Identifier" ? !t && (e.name === "name" || e.name === "length") : e.type === "StringLiteral" ? e.value === "name" || e.
    value === "length" : !1;
  }
  i(Lme, "isNameOrLength");
  function Rt(e, t) {
    return F.types.inheritLeadingComments(e, t.node), F.types.inheritInnerComments(e, t.node), e;
  }
  i(Rt, "inheritPropComments");
  function fb(e, t) {
    return e.start = t.start, e.end = t.end, e.loc = t.loc, e;
  }
  i(fb, "inheritLoc");
  function Mme(e, t, r, n, s, a, o, l, u, c) {
    var p, f;
    let h = 0, g, P = [], d = [], y = !1, E = [], _ = null, k = F.types.isIdentifier(t) ? () => t : () => {
      var L;
      return (L = g) != null || (g = r[0].scope.generateUidIdentifierBasedOnNode(t)), g;
    }, B = (p = e) != null ? p : r[0].scope.generateUidIdentifier(c?.name || "Class");
    (f = e) != null || (e = F.types.cloneNode(c));
    for (let L of r) {
      L.isClassProperty() && Eme.assertFieldTransformed(L);
      let U = !(F.types.isStaticBlock != null && F.types.isStaticBlock(L.node)) && L.node.static, $ = !U, ee = L.isPrivate(), W = !ee, q = L.
      isProperty(), R = !q, K = L.isStaticBlock == null ? void 0 : L.isStaticBlock();
      switch (U && (h |= 1), (U || R && ee || K) && (new mme.default({
        methodPath: L,
        constantSuper: u,
        file: s,
        refToPreserve: c,
        getSuperRef: k,
        getObjectRef() {
          return h |= 2, U || K ? B : F.types.memberExpression(B, F.types.identifier("prototype"));
        }
      }).replace(), jme(L, B, c) && (h |= 2)), y = !1, !0) {
        case K: {
          let pe = L.node.body;
          pe.length === 1 && F.types.isExpressionStatement(pe[0]) ? P.push(Rt(pe[0], L)) : P.push(F.types.inheritsComments(F.template.statement.
          ast`(() => { ${pe} })()`, L.node));
          break;
        }
        case (U && ee && q && o):
          P.push(iI(F.types.cloneNode(e), L, n));
          break;
        case (U && ee && q && !o):
          zt(s) ? P.push(Ime(L, n, l)) : P.push(pb(L, n));
          break;
        case (U && W && q && a):
          if (!Lme(L.node)) {
            P.push(aI(F.types.cloneNode(e), L));
            break;
          }
        case (U && W && q && !a):
          P.push(oI(F.types.cloneNode(e), L, s));
          break;
        case ($ && ee && q && o):
          d.push(iI(F.types.thisExpression(), L, n));
          break;
        case ($ && ee && q && !o):
          d.push(wme(F.types.thisExpression(), L, n, s));
          break;
        case ($ && ee && R && o):
          d.unshift(_me(F.types.thisExpression(), L, n)), E.push(up(s, L, n, o));
          break;
        case ($ && ee && R && !o):
          d.unshift(Ome(F.types.thisExpression(), L, n, s)), E.push(up(s, L, n, o));
          break;
        case (U && ee && R && !o):
          zt(s) || P.unshift(pb(L, n)), E.push(up(s, L, n, o));
          break;
        case (U && ee && R && o):
          P.unshift(kme(F.types.cloneNode(e), L, s, n)), E.push(up(s, L, n, o));
          break;
        case ($ && W && q && a):
          d.push(aI(F.types.thisExpression(), L));
          break;
        case ($ && W && q && !a):
          y = !0, d.push(oI(F.types.thisExpression(), L, s));
          break;
        default:
          throw new Error("Unreachable.");
      }
    }
    return h & 2 && c != null && (_ = F.types.expressionStatement(F.types.assignmentExpression("=", F.types.cloneNode(B), F.types.cloneNode(
    c)))), {
      staticNodes: P.filter(Boolean),
      instanceNodes: d.filter(Boolean),
      lastInstanceNodeReturnsThis: y,
      pureStaticNodes: E.filter(Boolean),
      classBindingNode: _,
      wrapClass(L) {
        for (let U of r)
          U.node.leadingComments = null, U.remove();
        return g && (L.scope.push({
          id: F.types.cloneNode(g)
        }), L.set("superClass", F.types.assignmentExpression("=", g, L.node.superClass))), h !== 0 && (L.isClassExpression() ? (L.scope.push(
        {
          id: e
        }), L.replaceWith(F.types.assignmentExpression("=", F.types.cloneNode(e), L.node))) : (c == null && (L.node.id = e), _ != null && L.
        scope.push({
          id: B
        }))), L;
      }
    };
  }
  i(Mme, "buildFieldsInitNodes");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/misc.js
var mb = A((Uo) => {
  "use strict";
  Object.defineProperty(Uo, "__esModule", {
    value: !0
  });
  Uo.extractComputedKeys = Wme;
  Uo.injectInitialization = $me;
  Uo.memoiseComputedKey = fI;
  var Et = bt(), Rme = jo(), qme = Et.traverse.visitors.merge([{
    Super(e) {
      let {
        node: t,
        parentPath: r
      } = e;
      r.isCallExpression({
        callee: t
      }) && this.push(r);
    }
  }, Rme.default]), Ume = {
    "TSTypeAnnotation|TypeAnnotation"(e) {
      e.skip();
    },
    ReferencedIdentifier(e, {
      scope: t
    }) {
      t.hasOwnBinding(e.node.name) && (t.rename(e.node.name), e.skip());
    }
  };
  function pI(e, t) {
    if (t.classBinding && t.classBinding === e.scope.getBinding(e.node.name)) {
      let r = t.file.addHelper("classNameTDZError"), n = Et.types.callExpression(r, [Et.types.stringLiteral(e.node.name)]);
      e.replaceWith(Et.types.sequenceExpression([n, e.node])), e.skip();
    }
  }
  i(pI, "handleClassTDZ");
  var Vme = {
    ReferencedIdentifier: pI
  };
  function $me(e, t, r, n, s) {
    if (!r.length) return;
    let a = !!e.node.superClass;
    if (!t) {
      let o = Et.types.classMethod("constructor", Et.types.identifier("constructor"), [], Et.types.blockStatement([]));
      a && (o.params = [Et.types.restElement(Et.types.identifier("args"))], o.body.body.push(Et.template.statement.ast`super(...args)`)), [t] =
      e.get("body").unshiftContainer("body", o);
    }
    if (n && n(Ume, {
      scope: t.scope
    }), a) {
      let o = [];
      t.traverse(qme, o);
      let l = !0;
      for (let u of o)
        if (l ? l = !1 : r = r.map((c) => Et.types.cloneNode(c)), u.parentPath.isExpressionStatement())
          u.insertAfter(r);
        else {
          let c = [u.node, ...r.map((p) => Et.types.toExpression(p))];
          s || c.push(Et.types.thisExpression()), u.replaceWith(Et.types.sequenceExpression(c));
        }
    } else
      t.get("body").unshiftContainer("body", r);
  }
  i($me, "injectInitialization");
  function fI(e, t, r) {
    if (Et.types.isIdentifier(e) && t.hasUid(e.name))
      return;
    if (Et.types.isAssignmentExpression(e, {
      operator: "="
    }) && Et.types.isIdentifier(e.left) && t.hasUid(e.left.name))
      return Et.types.cloneNode(e);
    {
      let a = Et.types.identifier(r);
      return t.push({
        id: a,
        kind: "let"
      }), Et.types.assignmentExpression("=", Et.types.cloneNode(a), e);
    }
  }
  i(fI, "memoiseComputedKey");
  function Wme(e, t, r) {
    let {
      scope: n
    } = e, s = [], a = {
      classBinding: e.node.id && n.getBinding(e.node.id.name),
      file: r
    };
    for (let o of t) {
      let l = o.get("key");
      l.isReferencedIdentifier() ? pI(l, a) : l.traverse(Vme, a);
      let u = o.node;
      if (!l.isConstantExpression()) {
        let c = fI(l.node, n, n.generateUidBasedOnNode(l.node));
        c && (s.push(Et.types.expressionStatement(c)), u.key = Et.types.cloneNode(c.left));
      }
    }
    return s;
  }
  i(Wme, "extractComputedKeys");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js
var wI = A((xb) => {
  "use strict";
  Object.defineProperty(xb, "__esModule", {
    value: !0
  });
  xb.default = vye;
  var C = bt(), dI = op(), hI = Hg(), Ss = ib(), PI = hb(), pp = mb();
  function AI(e, t = e.length - 1) {
    if (t === -1) {
      e.unshift(65);
      return;
    }
    let r = e[t];
    r === 90 ? e[t] = 97 : r === 122 ? (e[t] = 65, AI(e, t - 1)) : e[t] = r + 1;
  }
  i(AI, "incrementId");
  function Kme(e) {
    let t = [], r = /* @__PURE__ */ new Set();
    return e.traverse({
      PrivateName(n) {
        r.add(n.node.id.name);
      }
    }), () => {
      let n;
      do
        AI(t), n = String.fromCharCode(...t);
      while (r.has(n));
      return C.types.privateName(C.types.identifier(n));
    };
  }
  i(Kme, "createPrivateUidGeneratorForClass");
  function Gme(e) {
    let t;
    return () => (t || (t = Kme(e)), t());
  }
  i(Gme, "createLazyPrivateUidGeneratorForClass");
  function Hme(e, t) {
    let r = e.node.id, n = e.scope;
    if (e.type === "ClassDeclaration") {
      let s = r.name, a = n.generateUidIdentifierBasedOnNode(r), o = C.types.identifier(s);
      return n.rename(s, a.name), e.get("id").replaceWith(o), {
        id: C.types.cloneNode(a),
        path: e
      };
    } else {
      let s;
      r ? (t = r.name, s = Er(n.parent, t), n.rename(t, s.name)) : s = Er(n.parent, typeof t == "string" ? t : "decorated_class");
      let a = C.types.classExpression(typeof t == "string" ? C.types.identifier(t) : null, e.node.superClass, e.node.body), [o] = e.replaceWith(
      C.types.sequenceExpression([a, s]));
      return {
        id: C.types.cloneNode(s),
        path: o.get("expressions.0")
      };
    }
  }
  i(Hme, "replaceClassWithVar");
  function mI(e, t, r) {
    return e.type === "PrivateName" ? C.types.classPrivateProperty(e, t, void 0, r) : C.types.classProperty(e, t, void 0, void 0, r);
  }
  i(mI, "generateClassProperty");
  function yb(e, t) {
    e.node.id || (e.node.id = typeof t == "string" ? C.types.identifier(t) : e.scope.generateUidIdentifier("Class"));
  }
  i(yb, "assignIdForAnonymousClass");
  function yI(e, t, r, n, s, a, o, l) {
    let u = (l === "2023-11" || l === "2023-05") && o ? e : C.types.thisExpression(), c = C.types.blockStatement([C.types.returnStatement(C.
    types.memberExpression(C.types.cloneNode(u), C.types.cloneNode(s)))]), p = C.types.blockStatement([C.types.expressionStatement(C.types.assignmentExpression(
    "=", C.types.memberExpression(C.types.cloneNode(u), C.types.cloneNode(s)), C.types.identifier("v")))]), f, h;
    r.type === "PrivateName" ? (f = C.types.classPrivateMethod("get", r, [], c, o), h = C.types.classPrivateMethod("set", n, [C.types.identifier(
    "v")], p, o)) : (f = C.types.classMethod("get", r, [], c, a, o), h = C.types.classMethod("set", n, [C.types.identifier("v")], p, a, o)),
    t.insertAfter(h), t.insertAfter(f);
  }
  i(yI, "addProxyAccessorsFor");
  function gI(e, t) {
    return t !== "2023-11" && t !== "2023-05" && t !== "2023-01" ? [C.template.expression.ast`
        function () {
          return this.${C.types.cloneNode(e)};
        }
      `, C.template.expression.ast`
        function (value) {
          this.${C.types.cloneNode(e)} = value;
        }
      `] : [C.template.expression.ast`
      o => o.${C.types.cloneNode(e)}
    `, C.template.expression.ast`
      (o, v) => o.${C.types.cloneNode(e)} = v
    `];
  }
  i(gI, "extractProxyAccessorsFor");
  function Sb(e) {
    if (e = (0, Ss.skipTransparentExprWrappers)(e), e.isSequenceExpression()) {
      let t = e.get("expressions");
      return Sb(t[t.length - 1]);
    }
    return e;
  }
  i(Sb, "getComputedKeyLastElement");
  function Yme(e) {
    let t = Sb(e);
    if (t.isConstantExpression())
      return C.types.cloneNode(e.node);
    if (t.isIdentifier() && e.scope.hasUid(t.node.name))
      return C.types.cloneNode(e.node);
    if (t.isAssignmentExpression() && t.get("left").isIdentifier())
      return C.types.cloneNode(t.node.left);
    throw new Error(`Internal Error: the computed key ${e.toString()} has not yet been memoised.`);
  }
  i(Yme, "getComputedKeyMemoiser");
  function Vo(e, t) {
    let r = t.get("key");
    r.isSequenceExpression() ? e.push(...r.node.expressions) : e.push(r.node), r.replaceWith(vs(e));
  }
  i(Vo, "prependExpressionsToComputedKey");
  function Jme(e, t) {
    let r = t.get("key"), n = Sb(r);
    if (n.isConstantExpression())
      Vo(e, t);
    else {
      let s = r.scope.parent, a = (0, pp.memoiseComputedKey)(n.node, s, s.generateUid("computedKey"));
      if (!a)
        Vo(e, t);
      else {
        let o = [...e, C.types.cloneNode(a.left)], l = n.parentPath;
        l.isSequenceExpression() ? l.pushContainer("expressions", o) : n.replaceWith(vs([C.types.cloneNode(a), ...o]));
      }
    }
  }
  i(Jme, "appendExpressionsToComputedKey");
  function gb(e, t) {
    let r = t.get("value");
    r.node ? e.push(r.node) : e.length > 0 && (e[e.length - 1] = C.types.unaryExpression("void", e[e.length - 1])), r.replaceWith(vs(e));
  }
  i(gb, "prependExpressionsToFieldInitializer");
  function zme(e, t) {
    t.unshiftContainer("body", C.types.expressionStatement(vs(e)));
  }
  i(zme, "prependExpressionsToStaticBlock");
  function Xme(e, t) {
    t.node.body.body.unshift(C.types.expressionStatement(vs(e)));
  }
  i(Xme, "prependExpressionsToConstructor");
  function bI(e, t) {
    return C.types.isCallExpression(e) && C.types.isIdentifier(e.callee, {
      name: t.name
    });
  }
  i(bI, "isProtoInitCallExpression");
  function Qme(e, t) {
    if (t) {
      if (e.length >= 2 && bI(e[1], t)) {
        let r = C.types.callExpression(C.types.cloneNode(t), [e[0]]);
        e.splice(0, 2, r);
      }
      e.length >= 2 && C.types.isThisExpression(e[e.length - 1]) && bI(e[e.length - 2], t) && e.splice(e.length - 1, 1);
    }
    return vs(e);
  }
  i(Qme, "optimizeSuperCallAndExpressions");
  function Zme(e, t, r) {
    t.traverse({
      CallExpression: {
        exit(n) {
          if (!n.get("callee").isSuper()) return;
          let s = [n.node, ...e.map((a) => C.types.cloneNode(a))];
          n.isCompletionRecord() && s.push(C.types.thisExpression()), n.replaceWith(Qme(s, r)), n.skip();
        }
      },
      ClassMethod(n) {
        n.node.kind === "constructor" && n.skip();
      }
    });
  }
  i(Zme, "insertExpressionsAfterSuperCallAndOptimize");
  function EI(e, t) {
    let r = [C.types.expressionStatement(vs(e))];
    return t && r.unshift(C.types.expressionStatement(C.types.callExpression(C.types.super(), [C.types.spreadElement(C.types.identifier("arg\
s"))]))), C.types.classMethod("constructor", C.types.identifier("constructor"), t ? [C.types.restElement(C.types.identifier("args"))] : [], C.
    types.blockStatement(r));
  }
  i(EI, "createConstructorFromExpressions");
  function TI(e) {
    return C.types.staticBlock([C.types.expressionStatement(vs(e))]);
  }
  i(TI, "createStaticBlockFromExpressions");
  var ai = 0, xs = 1, eye = 2, CI = 3, fp = 4, tye = 5, rye = 8, nye = 16;
  function sye(e) {
    switch (e.node.type) {
      case "ClassProperty":
      case "ClassPrivateProperty":
        return ai;
      case "ClassAccessorProperty":
        return xs;
      case "ClassMethod":
      case "ClassPrivateMethod":
        return e.node.kind === "get" ? CI : e.node.kind === "set" ? fp : eye;
    }
  }
  i(sye, "getElementKind");
  function iye(e) {
    return [...e.filter((t) => t.isStatic && t.kind >= xs && t.kind <= fp), ...e.filter((t) => !t.isStatic && t.kind >= xs && t.kind <= fp),
    ...e.filter((t) => t.isStatic && t.kind === ai), ...e.filter((t) => !t.isStatic && t.kind === ai)];
  }
  i(iye, "toSortedDecoratorInfo");
  function SI(e, t, r) {
    let n = e.length, s = t.some(Boolean), a = [];
    for (let o = 0; o < n; o++)
      (r === "2023-11" || r === "2023-05") && s && a.push(t[o] || C.types.unaryExpression("void", C.types.numericLiteral(0))), a.push(e[o].expression);
    return {
      haveThis: s,
      decs: a
    };
  }
  i(SI, "generateDecorationList");
  function aye(e, t) {
    return C.types.arrayExpression(e.map((r) => {
      let n = r.kind;
      return r.isStatic && (n += t === "2023-11" || t === "2023-05" ? rye : tye), r.decoratorsHaveThis && (n += nye), C.types.arrayExpression(
      [r.decoratorsArray, C.types.numericLiteral(n), r.name, ...r.privateMethods || []]);
    }));
  }
  i(aye, "generateDecorationExprs");
  function oye(e) {
    let t = [];
    for (let r of e) {
      let {
        locals: n
      } = r;
      Array.isArray(n) ? t.push(...n) : n !== void 0 && t.push(n);
    }
    return t;
  }
  i(oye, "extractElementLocalAssignments");
  function lye(e, t, r, n, s, a) {
    t.insertAfter(C.types.classPrivateMethod("get", C.types.cloneNode(r), [], C.types.blockStatement([C.types.returnStatement(C.types.callExpression(
    C.types.cloneNode(n), e === "2023-11" && a ? [] : [C.types.thisExpression()]))]), a)), t.insertAfter(C.types.classPrivateMethod("set", C.
    types.cloneNode(r), [C.types.identifier("v")], C.types.blockStatement([C.types.expressionStatement(C.types.callExpression(C.types.cloneNode(
    s), e === "2023-11" && a ? [C.types.identifier("v")] : [C.types.thisExpression(), C.types.identifier("v")]))]), a));
  }
  i(lye, "addCallAccessorsFor");
  function uye(e, t, r, n) {
    let s, a;
    e.node.kind === "set" ? (s = [C.types.identifier("v")], a = [C.types.expressionStatement(C.types.callExpression(r, [C.types.thisExpression(),
    C.types.identifier("v")]))]) : (s = [], a = [C.types.returnStatement(C.types.callExpression(r, [C.types.thisExpression()]))]), e.replaceWith(
    C.types.classPrivateMethod(e.node.kind, C.types.cloneNode(t), s, C.types.blockStatement(a), n));
  }
  i(uye, "movePrivateAccessor");
  function xI(e) {
    let {
      type: t
    } = e;
    return t !== "TSDeclareMethod" && t !== "TSIndexSignature" && t !== "StaticBlock";
  }
  i(xI, "isClassDecoratableElementPath");
  function cye(e) {
    return C.types.callExpression(C.types.arrowFunctionExpression([], C.types.blockStatement(e.body)), []);
  }
  i(cye, "staticBlockToIIFE");
  function pye(e) {
    return C.types.functionExpression(null, [], C.types.blockStatement(e.body));
  }
  i(pye, "staticBlockToFunctionClosure");
  function fye(e) {
    return C.types.functionExpression(null, [], C.types.blockStatement([C.types.returnStatement(e)]));
  }
  i(fye, "fieldInitializerToClosure");
  function vs(e) {
    return e.length === 0 ? C.types.unaryExpression("void", C.types.numericLiteral(0)) : e.length === 1 ? e[0] : C.types.sequenceExpression(
    e);
  }
  i(vs, "maybeSequenceExpression");
  function vI(e) {
    let {
      params: t,
      body: r,
      generator: n,
      async: s
    } = e;
    return C.types.functionExpression(void 0, t, r, n, s);
  }
  i(vI, "createFunctionExpressionFromPrivateMethod");
  function DI(e, t) {
    return C.types.callExpression(e.addHelper("setFunctionName"), [C.types.thisExpression(), t]);
  }
  i(DI, "createSetFunctionNameCall");
  function Tb(e, t) {
    return C.types.callExpression(e.addHelper("toPropertyKey"), [t]);
  }
  i(Tb, "createToPropertyKeyCall");
  function bb(e) {
    return C.types.arrowFunctionExpression([C.types.identifier("_")], C.types.binaryExpression("in", C.types.cloneNode(e), C.types.identifier(
    "_")));
  }
  i(bb, "createPrivateBrandCheckClosure");
  function dye(e) {
    try {
      return C.types.traverseFast(e, (t) => {
        if (C.types.isPrivateName(t))
          throw null;
      }), !1;
    } catch {
      return !0;
    }
  }
  i(dye, "usesPrivateField");
  function hye(e) {
    let {
      node: t
    } = e;
    t.computed = !0, C.types.isIdentifier(t.key) && (t.key = C.types.stringLiteral(t.key.name));
  }
  i(hye, "convertToComputedKey");
  function Eb(e, t) {
    let r = !1;
    if (t.length > 0) {
      let n = (0, PI.privateNameVisitorFactory)({
        PrivateName(a, o) {
          o.privateNamesMap.has(a.node.id.name) && (r = !0, a.stop());
        }
      }), s = /* @__PURE__ */ new Map();
      for (let a of t)
        s.set(a, null);
      e.traverse(n, {
        privateNamesMap: s
      });
    }
    return r;
  }
  i(Eb, "hasInstancePrivateAccess");
  function mye(e, t) {
    let r = (0, PI.privateNameVisitorFactory)({
      PrivateName(s, a) {
        if (!a.privateNamesMap.has(s.node.id.name)) return;
        let o = s.parentPath, l = o.parentPath;
        if (l.node.type === "AssignmentExpression" && l.node.left === o.node || l.node.type === "UpdateExpression" || l.node.type === "RestE\
lement" || l.node.type === "ArrayPattern" || l.node.type === "ObjectProperty" && l.node.value === o.node && l.parentPath.type === "ObjectPat\
tern" || l.node.type === "ForOfStatement" && l.node.left === o.node)
          throw s.buildCodeFrameError(`Decorated private methods are read-only, but "#${s.node.id.name}" is updated via this expression.`);
      }
    }), n = /* @__PURE__ */ new Map();
    for (let s of t)
      n.set(s, null);
    e.traverse(r, {
      privateNamesMap: n
    });
  }
  i(mye, "checkPrivateMethodUpdateError");
  function yye(e, t, r, n, s, a, o) {
    var l, u;
    let c = e.get("body.body"), p = e.node.decorators, f = !1, h = !1, g = !1, P = Gme(e), d = [], y = e.scope.parent, E = /* @__PURE__ */ i(
    (ue, ne, j) => {
      let V = Er(y, ne);
      return j.push(C.types.assignmentExpression("=", V, ue)), C.types.cloneNode(V);
    }, "memoiseExpression"), _, k, B = (l = e.node.id) == null ? void 0 : l.name, L = typeof s == "object" ? s : void 0, U = /* @__PURE__ */ i(
    (ue) => {
      try {
        return C.types.traverseFast(ue, (ne) => {
          if (C.types.isThisExpression(ne) || C.types.isSuper(ne) || C.types.isYieldExpression(ne) || C.types.isAwaitExpression(ne) || C.types.
          isIdentifier(ne, {
            name: "arguments"
          }) || B && C.types.isIdentifier(ne, {
            name: B
          }) || C.types.isMetaProperty(ne) && ne.meta.name !== "import")
            throw null;
        }), !1;
      } catch {
        return !0;
      }
    }, "usesFunctionContextOrYieldAwait"), $ = [];
    for (let ue of c) {
      if (!xI(ue))
        continue;
      let ne = ue.node;
      if (!ne.static && C.types.isPrivateName(ne.key) && $.push(ne.key.id.name), $o(ne)) {
        switch (ne.type) {
          case "ClassProperty":
            a.ClassProperty(ue, t);
            break;
          case "ClassPrivateProperty":
            a.ClassPrivateProperty(ue, t);
            break;
          case "ClassAccessorProperty":
            if (a.ClassAccessorProperty(ue, t), o === "2023-11")
              break;
          default:
            if (ne.static) {
              var ee;
              (ee = k) != null || (k = Er(y, "initStatic"));
            } else {
              var W;
              (W = _) != null || (_ = Er(y, "initProto"));
            }
            break;
        }
        f = !0, g || (g = ne.decorators.some(U));
      } else if (ne.type === "ClassAccessorProperty") {
        a.ClassAccessorProperty(ue, t);
        let {
          key: j,
          value: V,
          static: Y,
          computed: Z
        } = ne, he = P(), ce = mI(he, V, Y), Ce = ue.get("key"), [Fe] = ue.replaceWith(ce), _e, je;
        Z && !Ce.isConstantExpression() ? (_e = (0, pp.memoiseComputedKey)(Tb(t, j), y, y.generateUid("computedKey")), je = C.types.cloneNode(
        _e.left)) : (_e = C.types.cloneNode(j), je = C.types.cloneNode(j)), yb(e, s), yI(e.node.id, Fe, _e, je, he, Z, Y, o);
      }
      "computed" in ue.node && ue.node.computed && (h || (h = !y.isStatic(ue.node.key)));
    }
    if (!p && !f) {
      !e.node.id && typeof s == "string" && (e.node.id = C.types.identifier(s)), L && e.node.body.body.unshift(TI([DI(t, L)]));
      return;
    }
    let q = [], R, K = /* @__PURE__ */ new Set(), pe, fe, Q = null;
    function X(ue) {
      let ne = !1, j = !1, V = [];
      for (let Z of ue) {
        let {
          expression: he
        } = Z, ce;
        if ((o === "2023-11" || o === "2023-05") && C.types.isMemberExpression(he))
          if (C.types.isSuper(he.object))
            ce = C.types.thisExpression();
          else if (y.isStatic(he.object))
            ce = C.types.cloneNode(he.object);
          else {
            var Y;
            (Y = Q) != null || (Q = Er(y, "obj")), ce = C.types.assignmentExpression("=", C.types.cloneNode(Q), he.object), he.object = C.types.
            cloneNode(Q);
          }
        V.push(ce), ne || (ne = !y.isStatic(he)), j || (j = U(Z));
      }
      return {
        hasSideEffects: ne,
        usesFnContext: j,
        decoratorsThis: V
      };
    }
    i(X, "handleDecorators");
    let se = h || g || o !== "2023-11", oe = !1, Te = 0, ve = [], we, me = [];
    if (p) {
      pe = Er(y, "initClass"), oe = e.isClassDeclaration(), {
        id: fe,
        path: e
      } = Hme(e, s), e.node.decorators = null;
      let ue = p.some(dye), {
        hasSideEffects: ne,
        usesFnContext: j,
        decoratorsThis: V
      } = X(p), {
        haveThis: Y,
        decs: Z
      } = SI(p, V, o);
      if (Te = Y ? 1 : 0, ve = Z, (j || ne && se || ue) && (we = E(C.types.arrayExpression(ve), "classDecs", d)), !f)
        for (let he of e.get("body.body")) {
          let {
            node: ce
          } = he;
          if ("computed" in ce && ce.computed)
            if (he.isClassProperty({
              static: !0
            })) {
              if (!he.get("key").isConstantExpression()) {
                let Fe = ce.key, _e = (0, pp.memoiseComputedKey)(Fe, y, y.generateUid("computedKey"));
                _e != null && (ce.key = C.types.cloneNode(_e.left), me.push(_e));
              }
            } else me.length > 0 && (Vo(me, he), me = []);
        }
    } else
      yb(e, s), fe = C.types.cloneNode(e.node.id);
    let Be, ht = !1, Ne = [], ke = [];
    if (f) {
      if (_) {
        let ue = C.types.callExpression(C.types.cloneNode(_), [C.types.thisExpression()]);
        Ne.push(ue);
      }
      for (let ue of c) {
        if (!xI(ue)) {
          ke.length > 0 && ue.isStaticBlock() && (zme(ke, ue), ke = []);
          continue;
        }
        let {
          node: ne
        } = ue, j = ne.decorators, V = !!(j != null && j.length), Y = "computed" in ne && ne.computed, Z = "computedKey";
        ne.key.type === "PrivateName" ? Z = ne.key.id.name : !Y && ne.key.type === "Identifier" && (Z = ne.key.name);
        let he, ce;
        if (V) {
          let {
            hasSideEffects: ze,
            usesFnContext: $e,
            decoratorsThis: lt
          } = X(j), {
            decs: Tt,
            haveThis: Bt
          } = SI(j, lt, o);
          ce = Bt, he = Tt.length === 1 ? Tt[0] : C.types.arrayExpression(Tt), ($e || ze && se) && (he = E(he, Z + "Decs", me));
        }
        if (Y && !ue.get("key").isConstantExpression()) {
          let ze = ne.key, $e = (0, pp.memoiseComputedKey)(V ? Tb(t, ze) : ze, y, y.generateUid("computedKey"));
          $e != null && (p && ue.isClassProperty({
            static: !0
          }) ? (ne.key = C.types.cloneNode($e.left), me.push($e)) : ne.key = $e);
        }
        let {
          key: Ce,
          static: Fe
        } = ne, _e = Ce.type === "PrivateName", je = sye(ue);
        _e && !Fe && (V && (ht = !0), (C.types.isClassPrivateProperty(ne) || !Be) && (Be = Ce)), ue.isClassMethod({
          kind: "constructor"
        }) && (R = ue);
        let Ct;
        if (V) {
          let ze, $e;
          if (Y ? $e = Yme(ue.get("key")) : Ce.type === "PrivateName" ? $e = C.types.stringLiteral(Ce.id.name) : Ce.type === "Identifier" ? $e =
          C.types.stringLiteral(Ce.name) : $e = C.types.cloneNode(Ce), je === xs) {
            let {
              value: lt
            } = ue.node, Tt = o === "2023-11" && Fe ? [] : [C.types.thisExpression()];
            lt && Tt.push(C.types.cloneNode(lt));
            let Bt = P(), nn = Er(y, `init_${Z}`), Jn = C.types.callExpression(C.types.cloneNode(nn), Tt), ma = mI(Bt, Jn, Fe), [Qt] = ue.replaceWith(
            ma);
            if (_e) {
              ze = gI(Bt, o);
              let pi = Er(y, `get_${Z}`), ya = Er(y, `set_${Z}`);
              lye(o, Qt, Ce, pi, ya, Fe), Ct = [nn, pi, ya];
            } else
              yb(e, s), yI(e.node.id, Qt, C.types.cloneNode(Ce), C.types.isAssignmentExpression(Ce) ? C.types.cloneNode(Ce.left) : C.types.cloneNode(
              Ce), Bt, Y, Fe, o), Ct = [nn];
          } else if (je === ai) {
            let lt = Er(y, `init_${Z}`), Tt = ue.get("value"), Bt = o === "2023-11" && Fe ? [] : [C.types.thisExpression()];
            Tt.node && Bt.push(Tt.node), Tt.replaceWith(C.types.callExpression(C.types.cloneNode(lt), Bt)), Ct = [lt], _e && (ze = gI(Ce, o));
          } else if (_e) {
            let lt = Er(y, `call_${Z}`);
            if (Ct = [lt], new dI.default({
              constantSuper: r,
              methodPath: ue,
              objectRef: fe,
              superRef: e.node.superClass,
              file: t.file,
              refToPreserve: fe
            }).replace(), ze = [vI(ue.node)], je === CI || je === fp)
              uye(ue, C.types.cloneNode(Ce), C.types.cloneNode(lt), Fe);
            else {
              let Bt = ue.node;
              e.node.body.body.unshift(C.types.classPrivateProperty(Ce, C.types.cloneNode(lt), [], Bt.static)), K.add(Ce.id.name), ue.remove();
            }
          }
          q.push({
            kind: je,
            decoratorsArray: he,
            decoratorsHaveThis: ce,
            name: $e,
            isStatic: Fe,
            privateMethods: ze,
            locals: Ct
          }), ue.node && (ue.node.decorators = null);
        }
        if (Y && me.length > 0 && (p && ue.isClassProperty({
          static: !0
        }) || (Vo(me, je === xs ? ue.getNextSibling() : ue), me = [])), Ne.length > 0 && !Fe && (je === ai || je === xs) && (gb(Ne, ue), Ne =
        []), ke.length > 0 && Fe && (je === ai || je === xs) && (gb(ke, ue), ke = []), V && o === "2023-11" && (je === ai || je === xs)) {
          let ze = Er(y, `init_extra_${Z}`);
          Ct.push(ze);
          let $e = C.types.callExpression(C.types.cloneNode(ze), Fe ? [] : [C.types.thisExpression()]);
          Fe ? ke.push($e) : Ne.push($e);
        }
      }
    }
    if (me.length > 0) {
      let ue = e.get("body.body"), ne;
      for (let j = ue.length - 1; j >= 0; j--) {
        let V = ue[j], Y = V.node;
        if (Y.computed) {
          if (p && C.types.isClassProperty(Y, {
            static: !0
          }))
            continue;
          ne = V;
          break;
        }
      }
      ne != null && (Jme(me, ne), me = []);
    }
    if (Ne.length > 0) {
      let ue = !!e.node.superClass;
      R ? ue ? Zme(Ne, R, _) : Xme(Ne, R) : e.node.body.body.unshift(EI(Ne, ue)), Ne = [];
    }
    ke.length > 0 && (e.node.body.body.push(TI(ke)), ke = []);
    let pt = iye(q), Ot = aye(o === "2023-11" ? q : pt, o), Xt = oye(pt);
    _ && Xt.push(_), k && Xt.push(k);
    let Nt = [], wt = !1, cr = pe && C.types.callExpression(C.types.cloneNode(pe), []), tn = e, En = e.node, qr = [];
    if (p) {
      Nt.push(fe, pe);
      let ue = [];
      if (e.get("body.body").forEach((ne) => {
        if (ne.isStaticBlock()) {
          if (Eb(ne, $)) {
            let j = E(pye(ne.node), "staticBlock", qr);
            ke.push(C.types.callExpression(C.types.memberExpression(j, C.types.identifier("call")), [C.types.thisExpression()]));
          } else
            ke.push(cye(ne.node));
          ne.remove();
          return;
        }
        if ((ne.isClassProperty() || ne.isClassPrivateProperty()) && ne.node.static) {
          let j = ne.get("value");
          if (Eb(j, $)) {
            let V = E(fye(j.node), "fieldValue", qr);
            j.replaceWith(C.types.callExpression(C.types.memberExpression(V, C.types.identifier("call")), [C.types.thisExpression()]));
          }
          ke.length > 0 && (gb(ke, ne), ke = []), ne.node.static = !1, ue.push(ne.node), ne.remove();
        } else if (ne.isClassPrivateMethod({
          static: !0
        })) {
          if (Eb(ne, $)) {
            new dI.default({
              constantSuper: r,
              methodPath: ne,
              objectRef: fe,
              superRef: e.node.superClass,
              file: t.file,
              refToPreserve: fe
            }).replace();
            let V = E(vI(ne.node), ne.get("key.id").node.name, qr);
            n ? (ne.node.params = [C.types.restElement(C.types.identifier("arg"))], ne.node.body = C.types.blockStatement([C.types.returnStatement(
            C.types.callExpression(C.types.memberExpression(V, C.types.identifier("apply")), [C.types.thisExpression(), C.types.identifier("\
arg")]))])) : (ne.node.params = ne.node.params.map((Y, Z) => C.types.isRestElement(Y) ? C.types.restElement(C.types.identifier("arg")) : C.types.
            identifier("_" + Z)), ne.node.body = C.types.blockStatement([C.types.returnStatement(C.types.callExpression(C.types.memberExpression(
            V, C.types.identifier("apply")), [C.types.thisExpression(), C.types.identifier("arguments")]))]));
          }
          ne.node.static = !1, ue.push(ne.node), ne.remove();
        }
      }), ue.length > 0 || ke.length > 0) {
        let ne = C.template.expression.ast`
        class extends ${t.addHelper("identity")} {}
      `;
        ne.body.body = [C.types.classProperty(C.types.toExpression(En), void 0, void 0, void 0, !0, !0), ...ue];
        let j = [], V = C.types.newExpression(ne, []);
        ke.length > 0 && j.push(...ke), cr && (wt = !0, j.push(cr)), j.length > 0 ? (j.unshift(C.types.callExpression(C.types.super(), [C.types.
        cloneNode(fe)])), ne.body.body.push(EI(j, !1))) : V.arguments.push(C.types.cloneNode(fe));
        let [Y] = e.replaceWith(V);
        tn = Y.get("callee").get("body").get("body.0.key");
      }
    }
    !wt && cr && e.node.body.body.push(C.types.staticBlock([C.types.expressionStatement(cr)]));
    let {
      superClass: rn
    } = En;
    if (rn && (o === "2023-11" || o === "2023-05")) {
      let ue = e.scope.maybeGenerateMemoised(rn);
      ue && (En.superClass = C.types.assignmentExpression("=", ue, rn), rn = ue);
    }
    let Yn = C.types.staticBlock([]);
    En.body.body.unshift(Yn);
    let Tn = Yn.body;
    if (me.length > 0) {
      let ue = tn.get("body.body"), ne;
      for (let j of ue)
        if ((j.isClassProperty() || j.isClassMethod()) && j.node.kind !== "constructor") {
          ne = j;
          break;
        }
      ne != null ? (hye(ne), Vo(me, ne)) : (En.body.body.unshift(C.types.classProperty(C.types.sequenceExpression([...me, C.types.stringLiteral(
      "_")]), void 0, void 0, void 0, !0, !0)), Tn.push(C.types.expressionStatement(C.types.unaryExpression("delete", C.types.memberExpression(
      C.types.thisExpression(), C.types.identifier("_")))))), me = [];
    }
    if (Tn.push(C.types.expressionStatement(gye(Xt, Nt, Ot, (u = we) != null ? u : C.types.arrayExpression(ve), C.types.numericLiteral(Te), ht ?
    Be : null, L, C.types.cloneNode(rn), t, o))), k && Tn.push(C.types.expressionStatement(C.types.callExpression(C.types.cloneNode(k), [C.types.
    thisExpression()]))), qr.length > 0 && Tn.push(...qr.map((ue) => C.types.expressionStatement(ue))), e.insertBefore(d.map((ue) => C.types.
    expressionStatement(ue))), oe)
      if (!y.getBinding(fe.name).constantViolations.length)
        e.insertBefore(C.types.variableDeclaration("let", [C.types.variableDeclarator(C.types.cloneNode(fe))]));
      else {
        let ne = y.generateUidIdentifier("t" + fe.name), j = fe;
        e.replaceWithMultiple([C.types.variableDeclaration("let", [C.types.variableDeclarator(C.types.cloneNode(j)), C.types.variableDeclarator(
        ne)]), C.types.blockStatement([C.types.variableDeclaration("let", [C.types.variableDeclarator(C.types.cloneNode(fe))]), e.node, C.types.
        expressionStatement(C.types.assignmentExpression("=", C.types.cloneNode(ne), C.types.cloneNode(fe)))]), C.types.expressionStatement(
        C.types.assignmentExpression("=", C.types.cloneNode(j), C.types.cloneNode(ne)))]);
      }
    return K.size > 0 && mye(e, K), e.scope.crawl(), e;
  }
  i(yye, "transformClass");
  function gye(e, t, r, n, s, a, o, l, u, c) {
    let p, f, h = [o ? DI(u, o) : C.types.thisExpression(), n, r];
    {
      if (c !== "2023-11" && h.splice(1, 2, r, n), c === "2021-12" || c === "2022-03" && !u.availableHelper("applyDecs2203R"))
        return p = C.types.arrayPattern([...e, ...t]), f = C.types.callExpression(u.addHelper(c === "2021-12" ? "applyDecs" : "applyDecs2203"),
        h), C.types.assignmentExpression("=", p, f);
      c === "2022-03" ? f = C.types.callExpression(u.addHelper("applyDecs2203R"), h) : c === "2023-01" ? (a && h.push(bb(a)), f = C.types.callExpression(
      u.addHelper("applyDecs2301"), h)) : c === "2023-05" && ((a || l || s.value !== 0) && h.push(s), a ? h.push(bb(a)) : l && h.push(C.types.
      unaryExpression("void", C.types.numericLiteral(0))), l && h.push(l), f = C.types.callExpression(u.addHelper("applyDecs2305"), h));
    }
    return c === "2023-11" && ((a || l || s.value !== 0) && h.push(s), a ? h.push(bb(a)) : l && h.push(C.types.unaryExpression("void", C.types.
    numericLiteral(0))), l && h.push(l), f = C.types.callExpression(u.addHelper("applyDecs2311"), h)), e.length > 0 ? t.length > 0 ? p = C.types.
    objectPattern([C.types.objectProperty(C.types.identifier("e"), C.types.arrayPattern(e)), C.types.objectProperty(C.types.identifier("c"),
    C.types.arrayPattern(t))]) : (p = C.types.arrayPattern(e), f = C.types.memberExpression(f, C.types.identifier("e"), !1, !1)) : (p = C.types.
    arrayPattern(t), f = C.types.memberExpression(f, C.types.identifier("c"), !1, !1)), C.types.assignmentExpression("=", p, f);
  }
  i(gye, "createLocalsAssignment");
  function bye(e) {
    return e.type === "Identifier" ? e.name === "__proto__" : e.value === "__proto__";
  }
  i(bye, "isProtoKey");
  function $o(e) {
    return e.decorators && e.decorators.length > 0;
  }
  i($o, "isDecorated");
  function Eye(e) {
    switch (e.type) {
      case "ClassAccessorProperty":
        return !0;
      case "ClassMethod":
      case "ClassProperty":
      case "ClassPrivateMethod":
      case "ClassPrivateProperty":
        return $o(e);
      default:
        return !1;
    }
  }
  i(Eye, "shouldTransformElement");
  function Tye(e) {
    return $o(e) || e.body.body.some(Eye);
  }
  i(Tye, "shouldTransformClass");
  function Sye(e, t) {
    function r(n, s, a) {
      switch (s.type) {
        case "StringLiteral":
          return C.types.stringLiteral(s.value);
        case "NumericLiteral":
        case "BigIntLiteral": {
          let o = s.value + "";
          return n.get("key").replaceWith(C.types.stringLiteral(o)), C.types.stringLiteral(o);
        }
        default: {
          let o = n.scope.maybeGenerateMemoised(s);
          return n.get("key").replaceWith(C.types.assignmentExpression("=", o, Tb(a, s))), C.types.cloneNode(o);
        }
      }
    }
    return i(r, "handleComputedProperty"), {
      VariableDeclarator(n, s) {
        let a = n.node.id;
        if (a.type === "Identifier") {
          let o = (0, Ss.skipTransparentExprWrappers)(n.get("init"));
          if (e(o)) {
            let l = a.name;
            t(o, s, l);
          }
        }
      },
      AssignmentExpression(n, s) {
        let a = n.node.left;
        if (a.type === "Identifier") {
          let o = (0, Ss.skipTransparentExprWrappers)(n.get("right"));
          if (e(o))
            switch (n.node.operator) {
              case "=":
              case "&&=":
              case "||=":
              case "??=":
                t(o, s, a.name);
            }
        }
      },
      AssignmentPattern(n, s) {
        let a = n.node.left;
        if (a.type === "Identifier") {
          let o = (0, Ss.skipTransparentExprWrappers)(n.get("right"));
          if (e(o)) {
            let l = a.name;
            t(o, s, l);
          }
        }
      },
      ObjectExpression(n, s) {
        for (let a of n.get("properties")) {
          if (!a.isObjectProperty()) continue;
          let {
            node: o
          } = a, l = o.key, u = (0, Ss.skipTransparentExprWrappers)(a.get("value"));
          if (e(u)) {
            if (o.computed) {
              let c = r(a, l, s);
              t(u, s, c);
            } else if (!bye(l))
              if (l.type === "Identifier")
                t(u, s, l.name);
              else {
                let c = C.types.stringLiteral(l.value + "");
                t(u, s, c);
              }
          }
        }
      },
      ClassPrivateProperty(n, s) {
        let {
          node: a
        } = n, o = (0, Ss.skipTransparentExprWrappers)(n.get("value"));
        if (e(o)) {
          let l = C.types.stringLiteral("#" + a.key.id.name);
          t(o, s, l);
        }
      },
      ClassAccessorProperty(n, s) {
        let {
          node: a
        } = n, o = a.key, l = (0, Ss.skipTransparentExprWrappers)(n.get("value"));
        if (e(l))
          if (a.computed) {
            let u = r(n, o, s);
            t(l, s, u);
          } else if (o.type === "Identifier")
            t(l, s, o.name);
          else if (o.type === "PrivateName") {
            let u = C.types.stringLiteral("#" + o.id.name);
            t(l, s, u);
          } else {
            let u = C.types.stringLiteral(o.value + "");
            t(l, s, u);
          }
      },
      ClassProperty(n, s) {
        let {
          node: a
        } = n, o = a.key, l = (0, Ss.skipTransparentExprWrappers)(n.get("value"));
        if (e(l))
          if (a.computed) {
            let u = r(n, o, s);
            t(l, s, u);
          } else if (o.type === "Identifier")
            t(l, s, o.name);
          else {
            let u = C.types.stringLiteral(o.value + "");
            t(l, s, u);
          }
      }
    };
  }
  i(Sye, "NamedEvaluationVisitoryFactory");
  function xye(e) {
    return e.isClassExpression({
      id: null
    }) && Tye(e.node);
  }
  i(xye, "isDecoratedAnonymousClassExpression");
  function Er(e, t) {
    let r = e.generateUidIdentifier(t);
    return e.push({
      id: r,
      kind: "let"
    }), C.types.cloneNode(r);
  }
  i(Er, "generateLetUidIdentifier");
  function vye({
    assertVersion: e,
    assumption: t
  }, {
    loose: r
  }, n, s) {
    var a, o;
    e(n === "2023-11" || n === "2023-05" || n === "2023-01" ? "^7.21.0" : n === "2021-12" ? "^7.16.0" : "^7.19.0");
    let l = /* @__PURE__ */ new WeakSet(), u = (a = t("constantSuper")) != null ? a : r, c = (o = t("ignoreFunctionLength")) != null ? o : r,
    p = Sye(xye, f);
    function f(h, g, P) {
      var d, y;
      if (l.has(h)) return;
      let {
        node: E
      } = h;
      (d = P) != null || (P = (y = E.id) == null ? void 0 : y.name);
      let _ = yye(h, g, u, c, P, p, n);
      if (_) {
        l.add(_);
        return;
      }
      l.add(h);
    }
    return i(f, "visitClass"), {
      name: "proposal-decorators",
      inherits: s,
      visitor: Object.assign({
        ExportDefaultDeclaration(h, g) {
          let {
            declaration: P
          } = h.node;
          if (P?.type === "ClassDeclaration" && $o(P)) {
            let d = !P.id, y = (0, hI.default)(h);
            d && f(y, g, C.types.stringLiteral("default"));
          }
        },
        ExportNamedDeclaration(h) {
          let {
            declaration: g
          } = h.node;
          g?.type === "ClassDeclaration" && $o(g) && (0, hI.default)(h);
        },
        Class(h, g) {
          f(h, g, void 0);
        }
      }, p)
    };
  }
  i(vye, "_default");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js
var Pb = A((Wo) => {
  "use strict";
  Object.defineProperty(Wo, "__esModule", {
    value: !0
  });
  Wo.buildDecoratedClass = Oye;
  Wo.hasDecorators = Cye;
  Wo.hasOwnDecorators = vb;
  var ot = bt(), Pye = op(), Aye = $g();
  function vb(e) {
    var t;
    return !!((t = e.decorators) != null && t.length);
  }
  i(vb, "hasOwnDecorators");
  function Cye(e) {
    return vb(e) || e.body.body.some(vb);
  }
  i(Cye, "hasDecorators");
  function aa(e, t) {
    return t ? ot.types.objectProperty(ot.types.identifier(e), t) : null;
  }
  i(aa, "prop");
  function Dye(e, t) {
    return ot.types.objectMethod("method", ot.types.identifier(e), [], ot.types.blockStatement(t));
  }
  i(Dye, "method");
  function II(e) {
    let t;
    return e.decorators && e.decorators.length > 0 && (t = ot.types.arrayExpression(e.decorators.map((r) => r.expression))), e.decorators = void 0,
    t;
  }
  i(II, "takeDecorators");
  function wye(e) {
    return e.computed ? e.key : ot.types.isIdentifier(e.key) ? ot.types.stringLiteral(e.key.name) : ot.types.stringLiteral(String(e.key.value));
  }
  i(wye, "getKey");
  function Iye(e, t, r, n) {
    let s = n.isClassMethod();
    if (n.isPrivate())
      throw n.buildCodeFrameError(`Private ${s ? "methods" : "fields"} in decorated classes are not supported yet.`);
    if (n.node.type === "ClassAccessorProperty")
      throw n.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-1\
2" } instead.');
    if (n.node.type === "StaticBlock")
      throw n.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } i\
nstead.');
    let {
      node: a,
      scope: o
    } = n;
    n.isTSDeclareMethod() || new Pye.default({
      methodPath: n,
      objectRef: t,
      superRef: r,
      file: e,
      refToPreserve: t
    }).replace();
    let l = [aa("kind", ot.types.stringLiteral(ot.types.isClassMethod(a) ? a.kind : "field")), aa("decorators", II(a)), aa("static", a.static &&
    ot.types.booleanLiteral(!0)), aa("key", wye(a))].filter(Boolean);
    if (ot.types.isClassMethod(a)) {
      let u = a.computed ? null : a.key, c = ot.types.toExpression(a);
      l.push(aa("value", (0, Aye.default)({
        node: c,
        id: u,
        scope: o
      }) || c));
    } else ot.types.isClassProperty(a) && a.value ? l.push(Dye("value", ot.template.statements.ast`return ${a.value}`)) : l.push(aa("value",
    o.buildUndefinedNode()));
    return n.remove(), ot.types.objectExpression(l);
  }
  i(Iye, "extractElementDescriptor");
  function _ye(e) {
    return e.addHelper("decorate");
  }
  i(_ye, "addDecorateHelper");
  function Oye(e, t, r, n) {
    let {
      node: s,
      scope: a
    } = t, o = a.generateUidIdentifier("initialize"), l = s.id && t.isDeclaration(), u = t.isInStrictMode(), {
      superClass: c
    } = s;
    s.type = "ClassDeclaration", s.id || (s.id = ot.types.cloneNode(e));
    let p;
    c && (p = a.generateUidIdentifierBasedOnNode(s.superClass, "super"), s.superClass = p);
    let f = II(s), h = ot.types.arrayExpression(r.filter((y) => !y.node.abstract && y.node.type !== "TSIndexSignature").map((y) => Iye(n, s.
    id, p, y))), g = ot.template.expression.ast`
    ${_ye(n)}(
      ${f || ot.types.nullLiteral()},
      function (${o}, ${c ? ot.types.cloneNode(p) : null}) {
        ${s}
        return { F: ${ot.types.cloneNode(s.id)}, d: ${h} };
      },
      ${c}
    )
  `;
    u || g.arguments[1].body.directives.push(ot.types.directive(ot.types.directiveLiteral("use strict")));
    let P = g, d = "arguments.1.body.body.0";
    return l && (P = ot.template.statement.ast`let ${e} = ${g}`, d = "declarations.0.init." + d), {
      instanceNodes: [ot.template.statement.ast`
        ${ot.types.cloneNode(o)}(this)
      `],
      wrapClass(y) {
        return y.replaceWith(P), y.get(d);
      }
    };
  }
  i(Oye, "buildDecoratedClass");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/features.js
var BI = A((oi) => {
  "use strict";
  Object.defineProperty(oi, "__esModule", {
    value: !0
  });
  oi.FEATURES = void 0;
  oi.enableFeature = Nye;
  oi.isLoose = Db;
  oi.shouldTransform = Bye;
  var _I = Pb(), $n = oi.FEATURES = Object.freeze({
    fields: 2,
    privateMethods: 4,
    decorators: 8,
    privateIn: 16,
    staticBlocks: 32
  }), OI = /* @__PURE__ */ new Map([[$n.fields, "@babel/plugin-transform-class-properties"], [$n.privateMethods, "@babel/plugin-transform-pr\
ivate-methods"], [$n.privateIn, "@babel/plugin-transform-private-property-in-object"]]), Ab = "@babel/plugin-class-features/featuresKey", Ko = "\
@babel/plugin-class-features/looseKey";
  Ps = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
  var Ps;
  Cb = /* @__PURE__ */ i(function(e, t) {
    return !!(e.get(Ps) & t);
  }, "canIgnoreLoose");
  var Cb;
  function Nye(e, t, r) {
    (!Wn(e, t) || Cb(e, t)) && (e.set(Ab, e.get(Ab) | t), r === "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-\
an-error" ? (dp(e, t, !0), e.set(Ps, e.get(Ps) | t)) : r === "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-\
error" ? (dp(e, t, !1), e.set(Ps, e.get(Ps) | t)) : dp(e, t, r));
    let n;
    for (let [a, o] of OI) {
      if (!Wn(e, a) || Cb(e, a)) continue;
      let l = Db(e, a);
      if (n === !l)
        throw new Error(`'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-p\
rivate-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).

` + NI(e));
      n = l;
      var s = o;
    }
    if (n !== void 0)
      for (let [a, o] of OI)
        Wn(e, a) && Db(e, a) !== n && (dp(e, a, n), console.warn(`Though the "loose" option was set to "${!n}" in your @babel/preset-env con\
fig, it will not be used for ${o} since the "loose" mode option was set to "${n}" for ${s}.
The "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-\
transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${o}", { "loose": ${n} }]
to the "plugins" section of your Babel config.

` + NI(e)));
  }
  i(Nye, "enableFeature");
  function NI(e) {
    let {
      filename: t
    } = e.opts;
    return (!t || t === "unknown") && (t = "[name of the input file]"), `If you already set the same 'loose' mode for these plugins in your \
config, it's possible that they are enabled multiple times with different options.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${t} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
  }
  i(NI, "getBabelShowConfigForHint");
  function Wn(e, t) {
    return !!(e.get(Ab) & t);
  }
  i(Wn, "hasFeature");
  function Db(e, t) {
    return !!(e.get(Ko) & t);
  }
  i(Db, "isLoose");
  function dp(e, t, r) {
    r ? e.set(Ko, e.get(Ko) | t) : e.set(Ko, e.get(Ko) & ~t), e.set(Ps, e.get(Ps) & ~t);
  }
  i(dp, "setLoose");
  function Bye(e, t) {
    let r = null, n = null, s = null, a = null, o = null;
    (0, _I.hasOwnDecorators)(e.node) && (r = e.get("decorators.0"));
    for (let l of e.get("body.body"))
      !r && (0, _I.hasOwnDecorators)(l.node) && (r = l.get("decorators.0")), !n && l.isClassProperty() && (n = l), !s && l.isClassPrivateProperty() &&
      (s = l), !a && l.isClassPrivateMethod != null && l.isClassPrivateMethod() && (a = l), !o && l.isStaticBlock != null && l.isStaticBlock() &&
      (o = l);
    if (r && s)
      throw s.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
    if (r && a)
      throw a.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
    if (r && !Wn(t, $n.decorators))
      throw e.buildCodeFrameError(`Decorators are not enabled.
If you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-transform-class-\
properties" and enable loose mode, like so:
	["@babel/plugin-proposal-decorators", { "version": "legacy" }]
	["@babel/plugin-transform-class-properties", { "loose": true }]`);
    if (a && !Wn(t, $n.privateMethods))
      throw a.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your confi\
guration.");
    if ((n || s) && !Wn(t, $n.fields) && !Wn(t, $n.privateMethods))
      throw e.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration\
.");
    if (o && !Wn(t, $n.staticBlocks))
      throw e.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your conf\
iguration.");
    return !!(r || a || o || (n || s) && Wn(t, $n.fields));
  }
  i(Bye, "shouldTransform");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/index.js
var kI = A((ui) => {
  "use strict";
  Object.defineProperty(ui, "__esModule", {
    value: !0
  });
  Object.defineProperty(ui, "FEATURES", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return oa.FEATURES;
    }, "get")
  });
  Object.defineProperty(ui, "buildCheckInRHS", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Go.buildCheckInRHS;
    }, "get")
  });
  ui.createClassFeaturePlugin = Rye;
  Object.defineProperty(ui, "enableFeature", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return oa.enableFeature;
    }, "get")
  });
  Object.defineProperty(ui, "injectInitialization", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return _b.injectInitialization;
    }, "get")
  });
  var wb = bt(), kye = $g(), Fye = Hg(), jye = wI(), Lye = le("semver"), Go = hb(), Ib = Pb(), _b = mb(), oa = BI(), Mye = ub(), li = "@babe\
l/plugin-class-features/version";
  function Rye({
    name: e,
    feature: t,
    loose: r,
    manipulateOptions: n,
    api: s,
    inherits: a,
    decoratorVersion: o
  }) {
    var l;
    if (t & oa.FEATURES.decorators && (o === "2023-11" || o === "2023-05" || o === "2023-01" || o === "2022-03" || o === "2021-12"))
      return (0, jye.default)(s, {
        loose: r
      }, o, a);
    {
      var u;
      (u = s) != null || (s = {
        assumption: /* @__PURE__ */ i(() => {
        }, "assumption")
      });
    }
    let c = s.assumption("setPublicClassFields"), p = s.assumption("privateFieldsAsSymbols"), f = s.assumption("privateFieldsAsProperties"),
    h = (l = s.assumption("noUninitializedPrivateFieldAccess")) != null ? l : !1, g = s.assumption("constantSuper"), P = s.assumption("noDoc\
umentAll");
    if (f && p)
      throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');
    let d = f || p;
    if (r === !0) {
      let y = [];
      c !== void 0 && y.push('"setPublicClassFields"'), f !== void 0 && y.push('"privateFieldsAsProperties"'), p !== void 0 && y.push('"priv\
ateFieldsAsSymbols"'), y.length !== 0 && console.warn(`[${e}]: You are using the "loose: true" option and you are explicitly setting a value\
 for the ${y.join(" and ")} assumption${y.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class featur\
es plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsSymbols": true
	}`);
    }
    return {
      name: e,
      manipulateOptions: n,
      inherits: a,
      pre(y) {
        if ((0, oa.enableFeature)(y, t, r), typeof y.get(li) == "number") {
          y.set(li, "7.24.7");
          return;
        }
        (!y.get(li) || Lye.lt(y.get(li), "7.24.7")) && y.set(li, "7.24.7");
      },
      visitor: {
        Class(y, {
          file: E
        }) {
          var _;
          if (E.get(li) !== "7.24.7" || !(0, oa.shouldTransform)(y, E)) return;
          let k = y.isClassDeclaration();
          k && (0, Mye.assertFieldTransformed)(y);
          let B = (0, oa.isLoose)(E, t), L, U = (0, Ib.hasDecorators)(y.node), $ = [], ee = [], W = [], q = /* @__PURE__ */ new Set(), R = y.
          get("body");
          for (let Ne of R.get("body")) {
            if ((Ne.isClassProperty() || Ne.isClassMethod()) && Ne.node.computed && W.push(Ne), Ne.isPrivate()) {
              let {
                name: ke
              } = Ne.node.key.id, pt = `get ${ke}`, Ot = `set ${ke}`;
              if (Ne.isClassPrivateMethod()) {
                if (Ne.node.kind === "get") {
                  if (q.has(pt) || q.has(ke) && !q.has(Ot))
                    throw Ne.buildCodeFrameError("Duplicate private field");
                  q.add(pt).add(ke);
                } else if (Ne.node.kind === "set") {
                  if (q.has(Ot) || q.has(ke) && !q.has(pt))
                    throw Ne.buildCodeFrameError("Duplicate private field");
                  q.add(Ot).add(ke);
                }
              } else {
                if (q.has(ke) && !q.has(pt) && !q.has(Ot) || q.has(ke) && (q.has(pt) || q.has(Ot)))
                  throw Ne.buildCodeFrameError("Duplicate private field");
                q.add(ke);
              }
            }
            Ne.isClassMethod({
              kind: "constructor"
            }) ? L = Ne : (ee.push(Ne), (Ne.isProperty() || Ne.isPrivate() || Ne.isStaticBlock != null && Ne.isStaticBlock()) && $.push(Ne));
          }
          if (!$.length && !U) return;
          let K = y.node.id, pe;
          (!K || !k) && ((0, kye.default)(y), pe = y.scope.generateUidIdentifier(K?.name || "Class"));
          let fe = (_ = pe) != null ? _ : wb.types.cloneNode(K), Q = (0, Go.buildPrivateNamesMap)(fe.name, d ?? B, $, E), X = (0, Go.buildPrivateNamesNodes)(
          Q, f ?? B, p ?? !1, E);
          (0, Go.transformPrivateNamesUsage)(fe, y, Q, {
            privateFieldsAsProperties: d ?? B,
            noUninitializedPrivateFieldAccess: h,
            noDocumentAll: P,
            innerBinding: K
          }, E);
          let se, oe, Te, ve, we, me, Be;
          U ? (oe = we = se = [], {
            instanceNodes: Te,
            wrapClass: Be
          } = (0, Ib.buildDecoratedClass)(fe, y, ee, E)) : (se = (0, _b.extractComputedKeys)(y, W, E), {
            staticNodes: oe,
            pureStaticNodes: we,
            instanceNodes: Te,
            lastInstanceNodeReturnsThis: ve,
            classBindingNode: me,
            wrapClass: Be
          } = (0, Go.buildFieldsInitNodes)(pe, y.node.superClass, $, Q, E, c ?? B, d ?? B, h, g ?? B, K)), Te.length > 0 && (0, _b.injectInitialization)(
          y, L, Te, (Ne, ke) => {
            if (!U)
              for (let pt of $)
                wb.types.isStaticBlock != null && wb.types.isStaticBlock(pt.node) || pt.node.static || pt.traverse(Ne, ke);
          }, ve);
          let ht = Be(y);
          ht.insertBefore([...X, ...se]), oe.length > 0 && ht.insertAfter(oe), we.length > 0 && ht.find((Ne) => Ne.isStatement() || Ne.isDeclaration()).
          insertAfter(we), me != null && k && ht.insertAfter(me);
        },
        ExportDefaultDeclaration(y, {
          file: E
        }) {
          {
            if (E.get(li) !== "7.24.7") return;
            let _ = y.get("declaration");
            _.isClassDeclaration() && (0, Ib.hasDecorators)(_.node) && (_.node.id ? (0, Fye.default)(y) : _.node.type = "ClassExpression");
          }
        }
      }
    };
  }
  i(Rye, "createClassFeaturePlugin");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/enum.js
var Nb = A((hp) => {
  "use strict";
  Object.defineProperty(hp, "__esModule", {
    value: !0
  });
  hp.default = $ye;
  hp.translateEnumValues = jI;
  var la = bt(), qye = le("assert"), Uye = ob(), Ob = /* @__PURE__ */ new WeakMap(), Vye = la.template.expression(`
    (function (ID) {
      ASSIGNMENTS;
      return ID;
    })(INIT)
  `);
  function $ye(e, t) {
    let {
      node: r,
      parentPath: n
    } = e;
    if (r.declare) {
      e.remove();
      return;
    }
    let s = r.id.name, {
      fill: a,
      data: o,
      isPure: l
    } = Hye(e, t, r.id);
    switch (n.type) {
      case "BlockStatement":
      case "ExportNamedDeclaration":
      case "Program": {
        let c = t.isProgram(e.parent), p = u(n), f = t.objectExpression([]);
        (p || c) && (f = t.logicalExpression("||", t.cloneNode(a.ID), f));
        let h = Vye(Object.assign({}, a, {
          INIT: f
        }));
        l && (0, Uye.default)(h), p ? (n.isExportDeclaration() ? n : e).replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(
        r.id), h))) : e.scope.registerDeclaration(e.replaceWith(t.variableDeclaration(c ? "var" : "let", [t.variableDeclarator(r.id, h)]))[0]),
        Ob.set(e.scope.getBindingIdentifier(s), o);
        break;
      }
      default:
        throw new Error(`Unexpected enum parent '${e.parent.type}`);
    }
    function u(c) {
      return c.isExportDeclaration() ? u(c.parentPath) : c.getData(s) ? !0 : (c.setData(s, !0), !1);
    }
    i(u, "seen");
  }
  i($ye, "transpileEnum");
  var Wye = (0, la.template)(`
  ENUM["NAME"] = VALUE;
`), Kye = (0, la.template)(`
  ENUM[ENUM["NAME"] = VALUE] = "NAME";
`), Gye = /* @__PURE__ */ i((e, t) => (e ? Wye : Kye)(t), "buildEnumMember");
  function Hye(e, t, r) {
    let {
      enumValues: n,
      data: s,
      isPure: a
    } = jI(e, t), o = n.map(([l, u]) => Gye(t.isStringLiteral(u), {
      ENUM: t.cloneNode(r),
      NAME: l,
      VALUE: u
    }));
    return {
      fill: {
        ID: t.cloneNode(r),
        ASSIGNMENTS: o
      },
      data: s,
      isPure: a
    };
  }
  i(Hye, "enumFill");
  function FI(e, t) {
    let {
      seen: r,
      path: n,
      t: s
    } = t, a = e.node.name;
    r.has(a) && !e.scope.hasOwnBinding(a) && (e.replaceWith(s.memberExpression(s.cloneNode(n.node.id), s.cloneNode(e.node))), e.skip());
  }
  i(FI, "ReferencedIdentifier");
  var Yye = {
    ReferencedIdentifier: FI
  };
  function jI(e, t) {
    var r;
    let n = e.scope.getBindingIdentifier(e.node.id.name), s = (r = Ob.get(n)) != null ? r : /* @__PURE__ */ new Map(), a = -1, o, l = !0, u = e.
    get("members").map((c) => {
      let p = c.node, f = t.isIdentifier(p.id) ? p.id.name : p.id.value, h = c.get("initializer"), g = p.initializer, P;
      if (g)
        a = LI(h, s), a !== void 0 ? (s.set(f, a), qye(typeof a == "number" || typeof a == "string"), a === 1 / 0 || Number.isNaN(a) ? P = t.
        identifier(String(a)) : a === -1 / 0 ? P = t.unaryExpression("-", t.identifier("Infinity")) : P = t.valueToNode(a)) : (l && (l = h.isPure()),
        h.isReferencedIdentifier() ? FI(h, {
          t,
          seen: s,
          path: e
        }) : h.traverse(Yye, {
          t,
          seen: s,
          path: e
        }), P = h.node, s.set(f, void 0));
      else if (typeof a == "number")
        a += 1, P = t.numericLiteral(a), s.set(f, a);
      else {
        if (typeof a == "string")
          throw e.buildCodeFrameError("Enum member must have initializer.");
        {
          let d = t.memberExpression(t.cloneNode(e.node.id), t.stringLiteral(o), !0);
          P = t.binaryExpression("+", t.numericLiteral(1), d), s.set(f, void 0);
        }
      }
      return o = f, [f, P];
    });
    return {
      isPure: l,
      data: s,
      enumValues: u
    };
  }
  i(jI, "translateEnumValues");
  function LI(e, t, r = /* @__PURE__ */ new Set()) {
    return n(e);
    function n(l) {
      let u = l.node;
      switch (u.type) {
        case "MemberExpression":
          return s(l, t, r);
        case "StringLiteral":
          return u.value;
        case "UnaryExpression":
          return a(l);
        case "BinaryExpression":
          return o(l);
        case "NumericLiteral":
          return u.value;
        case "ParenthesizedExpression":
          return n(l.get("expression"));
        case "Identifier":
          return s(l, t, r);
        case "TemplateLiteral": {
          if (u.quasis.length === 1)
            return u.quasis[0].value.cooked;
          let c = l.get("expressions"), p = u.quasis, f = "";
          for (let h = 0; h < p.length; h++)
            if (f += p[h].value.cooked, h + 1 < p.length) {
              let g = s(c[h], t, r);
              if (g === void 0) return;
              f += g;
            }
          return f;
        }
        default:
          return;
      }
    }
    function s(l, u, c) {
      if (l.isMemberExpression()) {
        let p = l.node, f = p.object, h = p.property;
        if (!la.types.isIdentifier(f) || (p.computed ? !la.types.isStringLiteral(h) : !la.types.isIdentifier(h)))
          return;
        let g = l.scope.getBindingIdentifier(f.name), P = Ob.get(g);
        return P ? P.get(h.computed ? h.value : h.name) : void 0;
      } else if (l.isIdentifier()) {
        let p = l.node.name;
        if (["Infinity", "NaN"].includes(p))
          return Number(p);
        let f = u?.get(p);
        return f !== void 0 ? f : c.has(l.node) ? void 0 : (c.add(l.node), f = LI(l.resolve(), u, c), u?.set(p, f), f);
      }
    }
    function a(l) {
      let u = n(l.get("argument"));
      if (u !== void 0)
        switch (l.node.operator) {
          case "+":
            return u;
          case "-":
            return -u;
          case "~":
            return ~u;
          default:
            return;
        }
    }
    function o(l) {
      let u = n(l.get("left"));
      if (u === void 0)
        return;
      let c = n(l.get("right"));
      if (c !== void 0)
        switch (l.node.operator) {
          case "|":
            return u | c;
          case "&":
            return u & c;
          case ">>":
            return u >> c;
          case ">>>":
            return u >>> c;
          case "<<":
            return u << c;
          case "^":
            return u ^ c;
          case "*":
            return u * c;
          case "/":
            return u / c;
          case "+":
            return u + c;
          case "-":
            return u - c;
          case "%":
            return u % c;
          case "**":
            return Math.pow(u, c);
          default:
            return;
        }
    }
  }
  i(LI, "computeConstantValue");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/const-enum.js
var MI = A((Bb) => {
  "use strict";
  Object.defineProperty(Bb, "__esModule", {
    value: !0
  });
  Bb.default = zye;
  var Jye = Nb();
  function zye(e, t) {
    let {
      name: r
    } = e.node.id, n = e.parentPath.isExportNamedDeclaration(), s = n;
    !s && t.isProgram(e.parent) && (s = e.parent.body.some((l) => t.isExportNamedDeclaration(l) && l.exportKind !== "type" && !l.source && l.
    specifiers.some((u) => t.isExportSpecifier(u) && u.exportKind !== "type" && u.local.name === r)));
    let {
      enumValues: a
    } = (0, Jye.translateEnumValues)(e, t);
    if (s) {
      let l = t.objectExpression(a.map(([u, c]) => t.objectProperty(t.isValidIdentifier(u) ? t.identifier(u) : t.stringLiteral(u), c)));
      e.scope.hasOwnBinding(r) ? (n ? e.parentPath : e).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("\
Object"), t.identifier("assign")), [e.node.id, l]))) : (e.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(e.node.id, l)])), e.
      scope.registerDeclaration(e));
      return;
    }
    let o = new Map(a);
    e.scope.path.traverse({
      Scope(l) {
        l.scope.hasOwnBinding(r) && l.skip();
      },
      MemberExpression(l) {
        if (!t.isIdentifier(l.node.object, {
          name: r
        })) return;
        let u;
        if (l.node.computed)
          if (t.isStringLiteral(l.node.property))
            u = l.node.property.value;
          else
            return;
        else if (t.isIdentifier(l.node.property))
          u = l.node.property.name;
        else
          return;
        o.has(u) && l.replaceWith(t.cloneNode(o.get(u)));
      }
    }), e.remove();
  }
  i(zye, "transpileConstEnum");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/global-types.js
var kb = A((ua) => {
  "use strict";
  Object.defineProperty(ua, "__esModule", {
    value: !0
  });
  ua.GLOBAL_TYPES = void 0;
  ua.isGlobalType = Xye;
  ua.registerGlobalType = Qye;
  var RI = ua.GLOBAL_TYPES = /* @__PURE__ */ new WeakMap();
  function Xye({
    scope: e
  }, t) {
    return e.hasBinding(t) ? !1 : RI.get(e).has(t) ? !0 : (console.warn(`The exported identifier "${t}" is not declared in Babel's scope tra\
cker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${t}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), !1);
  }
  i(Xye, "isGlobalType");
  function Qye(e, t) {
    RI.get(e).add(t);
  }
  i(Qye, "registerGlobalType");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/namespace.js
var UI = A((Mb) => {
  "use strict";
  Object.defineProperty(Mb, "__esModule", {
    value: !0
  });
  Mb.default = e0e;
  var Qe = bt(), Zye = kb();
  function e0e(e, t) {
    if (e.node.declare || e.node.id.type === "StringLiteral") {
      e.remove();
      return;
    }
    if (!t)
      throw e.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimen\
tally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    let r = e.node.id.name, n = Lb(e, Qe.types.cloneNode(e.node, !0));
    if (n === null) {
      let s = e.findParent((a) => a.isProgram());
      (0, Zye.registerGlobalType)(s.scope, r), e.remove();
    } else e.scope.hasOwnBinding(r) ? e.replaceWith(n) : e.scope.registerDeclaration(e.replaceWithMultiple([Fb(r), n])[0]);
  }
  i(e0e, "transpileNamespace");
  function Fb(e) {
    return Qe.types.variableDeclaration("let", [Qe.types.variableDeclarator(Qe.types.identifier(e))]);
  }
  i(Fb, "getDeclaration");
  function jb(e, t) {
    return Qe.types.memberExpression(Qe.types.identifier(e), Qe.types.identifier(t));
  }
  i(jb, "getMemberExpression");
  function t0e(e, t, r) {
    if (e.kind !== "const")
      throw r.file.buildCodeFrameError(e, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babelj\
s.io/docs/en/babel-plugin-transform-typescript");
    let {
      declarations: n
    } = e;
    if (n.every((o) => Qe.types.isIdentifier(o.id))) {
      for (let o of n)
        o.init = Qe.types.assignmentExpression("=", jb(t, o.id.name), o.init);
      return [e];
    }
    let s = Qe.types.getBindingIdentifiers(e), a = [];
    for (let o in s)
      a.push(Qe.types.assignmentExpression("=", jb(t, o), Qe.types.cloneNode(s[o])));
    return [e, Qe.types.expressionStatement(Qe.types.sequenceExpression(a))];
  }
  i(t0e, "handleVariableDeclaration");
  function qI(e, t) {
    return e.hub.buildError(t, "Ambient modules cannot be nested in other modules or namespaces.", Error);
  }
  i(qI, "buildNestedAmbientModuleError");
  function Lb(e, t, r) {
    let n = /* @__PURE__ */ new Set(), s = t.id;
    Qe.types.assertIdentifier(s);
    let a = e.scope.generateUid(s.name), o = Qe.types.isTSModuleBlock(t.body) ? t.body.body : [Qe.types.exportNamedDeclaration(t.body)], l = !0;
    for (let c = 0; c < o.length; c++) {
      let p = o[c];
      switch (p.type) {
        case "TSModuleDeclaration": {
          if (!Qe.types.isIdentifier(p.id))
            throw qI(e, p);
          let f = Lb(e, p);
          if (f !== null) {
            l = !1;
            let h = p.id.name;
            n.has(h) ? o[c] = f : (n.add(h), o.splice(c++, 1, Fb(h), f));
          }
          continue;
        }
        case "TSEnumDeclaration":
        case "FunctionDeclaration":
        case "ClassDeclaration":
          l = !1, n.add(p.id.name);
          continue;
        case "VariableDeclaration": {
          l = !1;
          for (let f in Qe.types.getBindingIdentifiers(p))
            n.add(f);
          continue;
        }
        default:
          l && (l = Qe.types.isTypeScript(p));
          continue;
        case "ExportNamedDeclaration":
      }
      if (!("declare" in p.declaration && p.declaration.declare))
        switch (p.declaration.type) {
          case "TSEnumDeclaration":
          case "FunctionDeclaration":
          case "ClassDeclaration": {
            l = !1;
            let f = p.declaration.id.name;
            n.add(f), o.splice(c++, 1, p.declaration, Qe.types.expressionStatement(Qe.types.assignmentExpression("=", jb(a, f), Qe.types.identifier(
            f))));
            break;
          }
          case "VariableDeclaration": {
            l = !1;
            let f = t0e(p.declaration, a, e.hub);
            o.splice(c, f.length, ...f), c += f.length - 1;
            break;
          }
          case "TSModuleDeclaration": {
            if (!Qe.types.isIdentifier(p.declaration.id))
              throw qI(e, p.declaration);
            let f = Lb(e, p.declaration, Qe.types.identifier(a));
            if (f !== null) {
              l = !1;
              let h = p.declaration.id.name;
              n.has(h) ? o[c] = f : (n.add(h), o.splice(c++, 1, Fb(h), f));
            } else
              o.splice(c, 1), c--;
          }
        }
    }
    if (l) return null;
    let u = Qe.types.objectExpression([]);
    if (r) {
      let c = Qe.types.memberExpression(r, s);
      u = Qe.template.expression.ast`
      ${Qe.types.cloneNode(c)} ||
        (${Qe.types.cloneNode(c)} = ${u})
    `;
    }
    return Qe.template.statement.ast`
    (function (${Qe.types.identifier(a)}) {
      ${o}
    })(${s} || (${Qe.types.cloneNode(s)} = ${u}));
  `;
  }
  i(Lb, "handleNested");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/index.js
var WI = A((yp) => {
  "use strict";
  Object.defineProperty(yp, "__esModule", {
    value: !0
  });
  yp.default = void 0;
  var r0e = ta(), n0e = kw(), s0e = kI(), i0e = MI(), a0e = Nb(), Kn = kb(), o0e = UI();
  function l0e(e) {
    switch (e.parent.type) {
      case "TSTypeReference":
      case "TSExpressionWithTypeArguments":
      case "TSTypeQuery":
        return !0;
      case "TSQualifiedName":
        return e.parentPath.findParent((t) => t.type !== "TSQualifiedName").type !== "TSImportEqualsDeclaration";
      case "ExportSpecifier":
        return e.parent.exportKind === "type" || e.parentPath.parent.exportKind === "type";
      default:
        return !1;
    }
  }
  i(l0e, "isInType");
  var Mr = /* @__PURE__ */ new WeakMap(), VI = /* @__PURE__ */ new WeakSet();
  function mp(e) {
    let t = e.getBindingIdentifiers();
    for (let r of Object.keys(t)) {
      let n = e.scope.getBinding(r);
      n && n.identifier === t[r] && n.scope.removeBinding(r);
    }
    e.opts.noScope = !0, e.remove(), e.opts.noScope = !1;
  }
  i(mp, "safeRemove");
  function $I(e, t, r, n, s = "") {
    if (t.file.get("@babel/plugin-transform-modules-*") !== "commonjs")
      throw e.buildCodeFrameError(`\`${r}\` is only supported when compiling modules to CommonJS.
Please consider using \`${n}\`${s}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
  }
  i($I, "assertCjsTransformEnabled");
  var Owe = yp.default = (0, r0e.declare)((e, t) => {
    let {
      types: r,
      template: n
    } = e;
    e.assertVersion(7);
    let s = /\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/, {
      allowNamespaces: a = !0,
      jsxPragma: o = "React.createElement",
      jsxPragmaFrag: l = "React.Fragment",
      onlyRemoveTypeImports: u = !1,
      optimizeConstEnums: c = !1
    } = t;
    var {
      allowDeclareFields: p = !1
    } = t;
    let f = {
      field(d) {
        let {
          node: y
        } = d;
        if (!p && y.declare)
          throw d.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transfor\
m-typescript or @babel/preset-typescript is enabled.");
        if (y.declare) {
          if (y.value)
            throw d.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
          y.decorators || d.remove();
        } else if (y.definite) {
          if (y.value)
            throw d.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
          !p && !y.decorators && !r.isClassPrivateProperty(y) && d.remove();
        } else (y.abstract || !p && !y.value && !y.decorators && !r.isClassPrivateProperty(y)) && d.remove();
        y.accessibility && (y.accessibility = null), y.abstract && (y.abstract = null), y.readonly && (y.readonly = null), y.optional && (y.
        optional = null), y.typeAnnotation && (y.typeAnnotation = null), y.definite && (y.definite = null), y.declare && (y.declare = null),
        y.override && (y.override = null);
      },
      method({
        node: d
      }) {
        d.accessibility && (d.accessibility = null), d.abstract && (d.abstract = null), d.optional && (d.optional = null), d.override && (d.
        override = null);
      },
      constructor(d, y) {
        d.node.accessibility && (d.node.accessibility = null);
        let E = [], {
          scope: _
        } = d;
        for (let k of d.get("params")) {
          let B = k.node;
          if (B.type === "TSParameterProperty") {
            let L = B.parameter;
            if (VI.has(L)) continue;
            VI.add(L);
            let U;
            if (r.isIdentifier(L))
              U = L;
            else if (r.isAssignmentPattern(L) && r.isIdentifier(L.left))
              U = L.left;
            else
              throw k.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
            E.push(n.statement.ast`
              this.${r.cloneNode(U)} = ${r.cloneNode(U)}
            `), k.replaceWith(k.get("parameter")), _.registerBinding("param", k);
          }
        }
        (0, s0e.injectInitialization)(y, d, E);
      }
    };
    return {
      name: "transform-typescript",
      inherits: n0e.default,
      visitor: {
        Pattern: g,
        Identifier: g,
        RestElement: g,
        Program: {
          enter(d, y) {
            let {
              file: E
            } = y, _ = null, k = null, B = d.scope;
            if (Kn.GLOBAL_TYPES.has(B) || Kn.GLOBAL_TYPES.set(B, /* @__PURE__ */ new Set()), E.ast.comments)
              for (let $ of E.ast.comments) {
                let ee = s.exec($.value);
                ee && (ee[1] ? k = ee[2] : _ = ee[2]);
              }
            let L = _ || o;
            L && ([L] = L.split("."));
            let U = k || l;
            U && ([U] = U.split("."));
            for (let $ of d.get("body")) {
              if ($.isImportDeclaration()) {
                if (Mr.has(y.file.ast.program) || Mr.set(y.file.ast.program, !0), $.node.importKind === "type") {
                  for (let R of $.node.specifiers)
                    (0, Kn.registerGlobalType)(B, R.local.name);
                  $.remove();
                  continue;
                }
                let ee = /* @__PURE__ */ new Set(), W = $.node.specifiers.length, q = /* @__PURE__ */ i(() => W > 0 && W === ee.size, "isAll\
SpecifiersElided");
                for (let R of $.node.specifiers)
                  if (R.type === "ImportSpecifier" && R.importKind === "type") {
                    (0, Kn.registerGlobalType)(B, R.local.name);
                    let K = $.scope.getBinding(R.local.name);
                    K && ee.add(K.path);
                  }
                if (u)
                  Mr.set(d.node, !1);
                else {
                  if ($.node.specifiers.length === 0) {
                    Mr.set(d.node, !1);
                    continue;
                  }
                  for (let R of $.node.specifiers) {
                    let K = $.scope.getBinding(R.local.name);
                    K && !ee.has(K.path) && (P({
                      binding: K,
                      programPath: d,
                      pragmaImportName: L,
                      pragmaFragImportName: U
                    }) ? ee.add(K.path) : Mr.set(d.node, !1));
                  }
                }
                if (q() && !u)
                  $.remove();
                else
                  for (let R of ee)
                    R.remove();
                continue;
              }
              if ($.isExportDeclaration() && ($ = $.get("declaration")), $.isVariableDeclaration({
                declare: !0
              }))
                for (let ee of Object.keys($.getBindingIdentifiers()))
                  (0, Kn.registerGlobalType)(B, ee);
              else ($.isTSTypeAliasDeclaration() || $.isTSDeclareFunction() && $.get("id").isIdentifier() || $.isTSInterfaceDeclaration() ||
              $.isClassDeclaration({
                declare: !0
              }) || $.isTSEnumDeclaration({
                declare: !0
              }) || $.isTSModuleDeclaration({
                declare: !0
              }) && $.get("id").isIdentifier()) && (0, Kn.registerGlobalType)(B, $.node.id.name);
            }
          },
          exit(d) {
            d.node.sourceType === "module" && Mr.get(d.node) && d.pushContainer("body", r.exportNamedDeclaration());
          }
        },
        ExportNamedDeclaration(d, y) {
          if (Mr.has(y.file.ast.program) || Mr.set(y.file.ast.program, !0), d.node.exportKind === "type") {
            d.remove();
            return;
          }
          if (d.node.source && d.node.specifiers.length > 0 && d.node.specifiers.every((E) => E.type === "ExportSpecifier" && E.exportKind ===
          "type")) {
            d.remove();
            return;
          }
          if (!d.node.source && d.node.specifiers.length > 0 && d.node.specifiers.every((E) => r.isExportSpecifier(E) && (0, Kn.isGlobalType)(
          d, E.local.name))) {
            d.remove();
            return;
          }
          if (r.isTSModuleDeclaration(d.node.declaration)) {
            let E = d.node.declaration, {
              id: _
            } = E;
            if (r.isIdentifier(_))
              if (d.scope.hasOwnBinding(_.name))
                d.replaceWith(E);
              else {
                let [k] = d.replaceWithMultiple([r.exportNamedDeclaration(r.variableDeclaration("let", [r.variableDeclarator(r.cloneNode(_))])),
                E]);
                d.scope.registerDeclaration(k);
              }
          }
          Mr.set(y.file.ast.program, !1);
        },
        ExportAllDeclaration(d) {
          d.node.exportKind === "type" && d.remove();
        },
        ExportSpecifier(d) {
          (!d.parent.source && (0, Kn.isGlobalType)(d, d.node.local.name) || d.node.exportKind === "type") && d.remove();
        },
        ExportDefaultDeclaration(d, y) {
          if (Mr.has(y.file.ast.program) || Mr.set(y.file.ast.program, !0), r.isIdentifier(d.node.declaration) && (0, Kn.isGlobalType)(d, d.
          node.declaration.name)) {
            d.remove();
            return;
          }
          Mr.set(y.file.ast.program, !1);
        },
        TSDeclareFunction(d) {
          mp(d);
        },
        TSDeclareMethod(d) {
          mp(d);
        },
        VariableDeclaration(d) {
          d.node.declare && mp(d);
        },
        VariableDeclarator({
          node: d
        }) {
          d.definite && (d.definite = null);
        },
        TSIndexSignature(d) {
          d.remove();
        },
        ClassDeclaration(d) {
          let {
            node: y
          } = d;
          y.declare && mp(d);
        },
        Class(d) {
          let {
            node: y
          } = d;
          y.typeParameters && (y.typeParameters = null), y.superTypeParameters && (y.superTypeParameters = null), y.implements && (y.implements =
          null), y.abstract && (y.abstract = null), d.get("body.body").forEach((E) => {
            E.isClassMethod() || E.isClassPrivateMethod() ? E.node.kind === "constructor" ? f.constructor(E, d) : f.method(E) : (E.isClassProperty() ||
            E.isClassPrivateProperty() || E.isClassAccessorProperty()) && f.field(E);
          });
        },
        Function(d) {
          let {
            node: y
          } = d;
          y.typeParameters && (y.typeParameters = null), y.returnType && (y.returnType = null);
          let E = y.params;
          E.length > 0 && r.isIdentifier(E[0], {
            name: "this"
          }) && E.shift();
        },
        TSModuleDeclaration(d) {
          (0, o0e.default)(d, a);
        },
        TSInterfaceDeclaration(d) {
          d.remove();
        },
        TSTypeAliasDeclaration(d) {
          d.remove();
        },
        TSEnumDeclaration(d) {
          c && d.node.const ? (0, i0e.default)(d, r) : (0, a0e.default)(d, r);
        },
        TSImportEqualsDeclaration(d, y) {
          let {
            id: E,
            moduleReference: _
          } = d.node, k, B;
          r.isTSExternalModuleReference(_) ? ($I(d, y, `import ${E.name} = require(...);`, `import ${E.name} from '...';`, " alongside Types\
cript's --allowSyntheticDefaultImports option"), k = r.callExpression(r.identifier("require"), [_.expression]), B = "const") : (k = h(_), B =
          "var"), d.replaceWith(r.variableDeclaration(B, [r.variableDeclarator(E, k)])), d.scope.registerDeclaration(d);
        },
        TSExportAssignment(d, y) {
          $I(d, y, "export = <value>;", "export default <value>;"), d.replaceWith(n.statement.ast`module.exports = ${d.node.expression}`);
        },
        TSTypeAssertion(d) {
          d.replaceWith(d.node.expression);
        },
        [`TSAsExpression${r.tsSatisfiesExpression ? "|TSSatisfiesExpression" : ""}`](d) {
          let {
            node: y
          } = d;
          do
            y = y.expression;
          while (r.isTSAsExpression(y) || r.isTSSatisfiesExpression != null && r.isTSSatisfiesExpression(y));
          d.replaceWith(y);
        },
        [e.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](d) {
          d.replaceWith(d.node.expression);
        },
        CallExpression(d) {
          d.node.typeParameters = null;
        },
        OptionalCallExpression(d) {
          d.node.typeParameters = null;
        },
        NewExpression(d) {
          d.node.typeParameters = null;
        },
        JSXOpeningElement(d) {
          d.node.typeParameters = null;
        },
        TaggedTemplateExpression(d) {
          d.node.typeParameters = null;
        }
      }
    };
    function h(d) {
      return r.isTSQualifiedName(d) ? r.memberExpression(h(d.left), d.right) : d;
    }
    function g({
      node: d
    }) {
      d.typeAnnotation && (d.typeAnnotation = null), r.isIdentifier(d) && d.optional && (d.optional = null);
    }
    function P({
      binding: d,
      programPath: y,
      pragmaImportName: E,
      pragmaFragImportName: _
    }) {
      for (let B of d.referencePaths)
        if (!l0e(B))
          return !1;
      if (d.identifier.name !== E && d.identifier.name !== _)
        return !0;
      let k = !1;
      return y.traverse({
        "JSXElement|JSXFragment"(B) {
          k = !0, B.stop();
        }
      }), !k;
    }
  });
});

// ../node_modules/@babel/plugin-syntax-jsx/lib/index.js
var KI = A((gp) => {
  "use strict";
  Object.defineProperty(gp, "__esModule", {
    value: !0
  });
  gp.default = void 0;
  var u0e = ta(), kwe = gp.default = (0, u0e.declare)((e) => (e.assertVersion(7), {
    name: "syntax-jsx",
    manipulateOptions(t, r) {
      r.plugins.some((n) => (Array.isArray(n) ? n[0] : n) === "typescript") || r.plugins.push("jsx");
    }
  }));
});

// ../node_modules/@babel/helper-simple-access/lib/index.js
var YI = A((Vb) => {
  "use strict";
  Object.defineProperty(Vb, "__esModule", {
    value: !0
  });
  Vb.default = h0e;
  var c0e = Pe(), {
    LOGICAL_OPERATORS: p0e,
    assignmentExpression: Ho,
    binaryExpression: qb,
    cloneNode: Ub,
    identifier: bp,
    logicalExpression: f0e,
    numericLiteral: Rb,
    sequenceExpression: d0e,
    unaryExpression: GI
  } = c0e, HI = {
    AssignmentExpression: {
      exit(e) {
        let {
          scope: t,
          seen: r,
          bindingNames: n
        } = this;
        if (e.node.operator === "=" || r.has(e.node)) return;
        r.add(e.node);
        let s = e.get("left");
        if (!s.isIdentifier()) return;
        let a = s.node.name;
        if (!n.has(a) || t.getBinding(a) !== e.scope.getBinding(a))
          return;
        let o = e.node.operator.slice(0, -1);
        p0e.includes(o) ? e.replaceWith(f0e(o, e.node.left, Ho("=", Ub(e.node.left), e.node.right))) : (e.node.right = qb(o, Ub(e.node.left),
        e.node.right), e.node.operator = "=");
      }
    }
  };
  HI.UpdateExpression = {
    exit(e) {
      if (!this.includeUpdateExpression) return;
      let {
        scope: t,
        bindingNames: r
      } = this, n = e.get("argument");
      if (!n.isIdentifier()) return;
      let s = n.node.name;
      if (r.has(s) && t.getBinding(s) === e.scope.getBinding(s))
        if (e.parentPath.isExpressionStatement() && !e.isCompletionRecord()) {
          let a = e.node.operator === "++" ? "+=" : "-=";
          e.replaceWith(Ho(a, n.node, Rb(1)));
        } else if (e.node.prefix)
          e.replaceWith(Ho("=", bp(s), qb(e.node.operator[0], GI("+", n.node), Rb(1))));
        else {
          let a = e.scope.generateUidIdentifierBasedOnNode(n.node, "old"), o = a.name;
          e.scope.push({
            id: a
          });
          let l = qb(e.node.operator[0], bp(o), Rb(1));
          e.replaceWith(d0e([Ho("=", bp(o), GI("+", n.node)), Ho("=", Ub(n.node), l), bp(o)]));
        }
    }
  };
  function h0e(e, t) {
    {
      var r;
      e.traverse(HI, {
        scope: e.scope,
        bindingNames: t,
        seen: /* @__PURE__ */ new WeakSet(),
        includeUpdateExpression: (r = arguments[2]) != null ? r : !0
      });
    }
  }
  i(h0e, "simplifyAccess");
});

// ../node_modules/@babel/preset-typescript/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js
var XI = A(($b) => {
  "use strict";
  Object.defineProperty($b, "__esModule", {
    value: !0
  });
  $b.transformDynamicImport = g0e;
  var JI = bt(), m0e = co(), zI = /* @__PURE__ */ i((e) => JI.template.expression.ast`require(${e})`, "requireNoInterop"), y0e = /* @__PURE__ */ i(
  (e, t) => JI.types.callExpression(t.addHelper("interopRequireWildcard"), [zI(e)]), "requireInterop");
  function g0e(e, t, r) {
    let n = t ? zI : y0e;
    e.replaceWith((0, m0e.buildDynamicImport)(e.node, !0, !1, (s) => n(s, r)));
  }
  i(g0e, "transformDynamicImport");
});

// ../node_modules/@babel/preset-typescript/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js
var ZI = A((Ep) => {
  "use strict";
  Object.defineProperty(Ep, "__esModule", {
    value: !0
  });
  Ep.lazyImportsHook = void 0;
  var QI = bt(), b0e = co(), E0e = /* @__PURE__ */ i((e) => ({
    name: "@babel/plugin-transform-modules-commonjs/lazy",
    version: "7.24.7",
    getWrapperPayload(t, r) {
      if ((0, b0e.isSideEffectImport)(r) || r.reexportAll)
        return null;
      if (e === !0)
        return /\./.test(t) ? null : "lazy/function";
      if (Array.isArray(e))
        return e.indexOf(t) === -1 ? null : "lazy/function";
      if (typeof e == "function")
        return e(t) ? "lazy/function" : null;
    },
    buildRequireWrapper(t, r, n, s) {
      if (n === "lazy/function")
        return s ? QI.template.statement.ast`
        function ${t}() {
          const data = ${r};
          ${t} = function(){ return data; };
          return data;
        }
      ` : !1;
    },
    wrapReference(t, r) {
      if (r === "lazy/function") return QI.types.callExpression(t, []);
    }
  }), "lazyImportsHook");
  Ep.lazyImportsHook = E0e;
});

// ../node_modules/@babel/preset-typescript/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js
var e_ = A((Tp) => {
  "use strict";
  Object.defineProperty(Tp, "__esModule", {
    value: !0
  });
  Tp.defineCommonJSHook = T0e;
  Tp.makeInvokers = S0e;
  var Kb = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
  function T0e(e, t) {
    let r = e.get(Kb);
    r || e.set(Kb, r = []), r.push(t);
  }
  i(T0e, "defineCommonJSHook");
  function Wb(e, t) {
    if (e)
      for (let r of e) {
        let n = t(r);
        if (n != null) return n;
      }
  }
  i(Wb, "findMap");
  function S0e(e) {
    let t = e.get(Kb);
    return {
      getWrapperPayload(...r) {
        return Wb(t, (n) => n.getWrapperPayload == null ? void 0 : n.getWrapperPayload(...r));
      },
      wrapReference(...r) {
        return Wb(t, (n) => n.wrapReference == null ? void 0 : n.wrapReference(...r));
      },
      buildRequireWrapper(...r) {
        return Wb(t, (n) => n.buildRequireWrapper == null ? void 0 : n.buildRequireWrapper(...r));
      }
    };
  }
  i(S0e, "makeInvokers");
});

// ../node_modules/@babel/preset-typescript/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js
var t_ = A((Yo) => {
  "use strict";
  Object.defineProperty(Yo, "__esModule", {
    value: !0
  });
  Yo.default = void 0;
  Object.defineProperty(Yo, "defineCommonJSHook", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Gb.defineCommonJSHook;
    }, "get")
  });
  var x0e = ta(), ci = co(), v0e = YI(), Zr = bt(), P0e = XI(), A0e = ZI(), Gb = e_(), Wwe = Yo.default = (0, x0e.declare)((e, t) => {
    var r, n, s;
    e.assertVersion(7);
    let {
      strictNamespace: a = !1,
      mjsStrictNamespace: o = a,
      allowTopLevelThis: l,
      strict: u,
      strictMode: c,
      noInterop: p,
      importInterop: f,
      lazy: h = !1,
      allowCommonJSExports: g = !0,
      loose: P = !1
    } = t, d = (r = e.assumption("constantReexports")) != null ? r : P, y = (n = e.assumption("enumerableModuleMeta")) != null ? n : P, E = (s =
    e.assumption("noIncompleteNsImportDetection")) != null ? s : !1;
    if (typeof h != "boolean" && typeof h != "function" && (!Array.isArray(h) || !h.every((B) => typeof B == "string")))
      throw new Error(".lazy must be a boolean, array of strings, or a function");
    if (typeof a != "boolean")
      throw new Error(".strictNamespace must be a boolean, or undefined");
    if (typeof o != "boolean")
      throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
    let _ = /* @__PURE__ */ i((B) => Zr.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${B}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, "getAssertion"), k = {
      ReferencedIdentifier(B) {
        let L = B.node.name;
        if (L !== "module" && L !== "exports") return;
        let U = B.scope.getBinding(L);
        this.scope.getBinding(L) !== U || B.parentPath.isObjectProperty({
          value: B.node
        }) && B.parentPath.parentPath.isObjectPattern() || B.parentPath.isAssignmentExpression({
          left: B.node
        }) || B.isAssignmentExpression({
          left: B.node
        }) || B.replaceWith(_(L));
      },
      UpdateExpression(B) {
        let L = B.get("argument");
        if (!L.isIdentifier()) return;
        let U = L.node.name;
        if (U !== "module" && U !== "exports") return;
        let $ = B.scope.getBinding(U);
        this.scope.getBinding(U) === $ && B.replaceWith(Zr.types.assignmentExpression(B.node.operator[0] + "=", L.node, _(U)));
      },
      AssignmentExpression(B) {
        let L = B.get("left");
        if (L.isIdentifier()) {
          let U = L.node.name;
          if (U !== "module" && U !== "exports") return;
          let $ = B.scope.getBinding(U);
          if (this.scope.getBinding(U) !== $) return;
          let W = B.get("right");
          W.replaceWith(Zr.types.sequenceExpression([W.node, _(U)]));
        } else if (L.isPattern()) {
          let U = L.getOuterBindingIdentifiers(), $ = Object.keys(U).filter((ee) => ee !== "module" && ee !== "exports" ? !1 : this.scope.getBinding(
          ee) === B.scope.getBinding(ee))[0];
          if ($) {
            let ee = B.get("right");
            ee.replaceWith(Zr.types.sequenceExpression([ee.node, _($)]));
          }
        }
      }
    };
    return {
      name: "transform-modules-commonjs",
      pre() {
        this.file.set("@babel/plugin-transform-modules-*", "commonjs"), h && (0, Gb.defineCommonJSHook)(this.file, (0, A0e.lazyImportsHook)(
        h));
      },
      visitor: {
        ["CallExpression" + (e.types.importExpression ? "|ImportExpression" : "")](B) {
          if (!this.file.has("@babel/plugin-proposal-dynamic-import") || B.isCallExpression() && !Zr.types.isImport(B.node.callee)) return;
          let {
            scope: L
          } = B;
          do
            L.rename("require");
          while (L = L.parent);
          (0, P0e.transformDynamicImport)(B, p, this.file);
        },
        Program: {
          exit(B, L) {
            if (!(0, ci.isModule)(B)) return;
            B.scope.rename("exports"), B.scope.rename("module"), B.scope.rename("require"), B.scope.rename("__filename"), B.scope.rename("__\
dirname"), g || ((0, v0e.default)(B, /* @__PURE__ */ new Set(["module", "exports"]), !1), B.traverse(k, {
              scope: B.scope
            }));
            let U = (0, ci.getModuleName)(this.file.opts, t);
            U && (U = Zr.types.stringLiteral(U));
            let $ = (0, Gb.makeInvokers)(this.file), {
              meta: ee,
              headers: W
            } = (0, ci.rewriteModuleStatementsAndPrepareHeader)(B, {
              exportName: "exports",
              constantReexports: d,
              enumerableModuleMeta: y,
              strict: u,
              strictMode: c,
              allowTopLevelThis: l,
              noInterop: p,
              importInterop: f,
              wrapReference: $.wrapReference,
              getWrapperPayload: $.getWrapperPayload,
              esNamespaceOnly: typeof L.filename == "string" && /\.mjs$/.test(L.filename) ? o : a,
              noIncompleteNsImportDetection: E,
              filename: this.file.opts.filename
            });
            for (let [R, K] of ee.source) {
              let pe = Zr.types.callExpression(Zr.types.identifier("require"), [Zr.types.stringLiteral(R)]), fe;
              if ((0, ci.isSideEffectImport)(K)) {
                if (h && K.wrap === "function")
                  throw new Error("Assertion failure");
                fe = Zr.types.expressionStatement(pe);
              } else {
                var q;
                let Q = (0, ci.wrapInterop)(B, pe, K.interop) || pe;
                if (K.wrap) {
                  let X = $.buildRequireWrapper(K.name, Q, K.wrap, K.referenced);
                  if (X === !1) continue;
                  fe = X;
                }
                (q = fe) != null || (fe = Zr.template.statement.ast`
                var ${K.name} = ${Q};
              `);
              }
              fe.loc = K.loc, W.push(fe), W.push(...(0, ci.buildNamespaceInitStatements)(ee, K, d, $.wrapReference));
            }
            (0, ci.ensureStatementsHoisted)(W), B.unshiftContainer("body", W), B.get("body").forEach((R) => {
              W.indexOf(R.node) !== -1 && R.isVariableDeclaration() && R.scope.registerDeclaration(R);
            });
          }
        }
      }
    };
  });
});

// ../node_modules/@babel/preset-typescript/lib/index.js
var i_ = A((Hb) => {
  "use strict";
  Object.defineProperty(Hb, "__esModule", { value: !0 });
  var n_ = ta(), C0e = WI();
  KI();
  var D0e = t_(), w0e = Pc();
  function s_(e) {
    return e && e.__esModule ? e : { default: e };
  }
  i(s_, "_interopDefault");
  var r_ = /* @__PURE__ */ s_(C0e), I0e = /* @__PURE__ */ s_(D0e), Gn = new w0e.OptionValidator("@babel/preset-typescript");
  function _0e(e = {}) {
    let {
      allowNamespaces: t = !0,
      jsxPragma: r,
      onlyRemoveTypeImports: n
    } = e, s = {
      ignoreExtensions: "ignoreExtensions",
      allowNamespaces: "allowNamespaces",
      disallowAmbiguousJSXLike: "disallowAmbiguousJSXLike",
      jsxPragma: "jsxPragma",
      jsxPragmaFrag: "jsxPragmaFrag",
      onlyRemoveTypeImports: "onlyRemoveTypeImports",
      optimizeConstEnums: "optimizeConstEnums",
      rewriteImportExtensions: "rewriteImportExtensions",
      allExtensions: "allExtensions",
      isTSX: "isTSX"
    }, a = Gn.validateStringOption(s.jsxPragmaFrag, e.jsxPragmaFrag, "React.Fragment");
    {
      var o = Gn.validateBooleanOption(s.allExtensions, e.allExtensions, !1), l = Gn.validateBooleanOption(s.isTSX, e.isTSX, !1);
      l && Gn.invariant(o, "isTSX:true requires allExtensions:true");
    }
    let u = Gn.validateBooleanOption(s.ignoreExtensions, e.ignoreExtensions, !1), c = Gn.validateBooleanOption(s.disallowAmbiguousJSXLike, e.
    disallowAmbiguousJSXLike, !1);
    c && Gn.invariant(o, "disallowAmbiguousJSXLike:true requires allExtensions:true");
    let p = Gn.validateBooleanOption(s.optimizeConstEnums, e.optimizeConstEnums, !1), f = Gn.validateBooleanOption(s.rewriteImportExtensions,
    e.rewriteImportExtensions, !1), h = {
      ignoreExtensions: u,
      allowNamespaces: t,
      disallowAmbiguousJSXLike: c,
      jsxPragma: r,
      jsxPragmaFrag: a,
      onlyRemoveTypeImports: n,
      optimizeConstEnums: p,
      rewriteImportExtensions: f
    };
    return h.allExtensions = o, h.isTSX = l, h;
  }
  i(_0e, "normalizeOptions");
  var O0e = n_.declare(function({
    types: e
  }) {
    return {
      name: "preset-typescript/plugin-rewrite-ts-imports",
      visitor: {
        "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"({
          node: t
        }) {
          let {
            source: r
          } = t;
          (e.isImportDeclaration(t) ? t.importKind : t.exportKind) === "value" && r && /[\\/]/.test(r.value) && (r.value = r.value.replace(/(\.[mc]?)ts$/,
          "$1js").replace(/\.tsx$/, ".js"));
        }
      }
    };
  }), N0e = n_.declarePreset((e, t) => {
    e.assertVersion(7);
    let {
      allExtensions: r,
      ignoreExtensions: n,
      allowNamespaces: s,
      disallowAmbiguousJSXLike: a,
      isTSX: o,
      jsxPragma: l,
      jsxPragmaFrag: u,
      onlyRemoveTypeImports: c,
      optimizeConstEnums: p,
      rewriteImportExtensions: f
    } = _0e(t), h = /* @__PURE__ */ i((d) => ({
      allowDeclareFields: t.allowDeclareFields,
      allowNamespaces: s,
      disallowAmbiguousJSXLike: d,
      jsxPragma: l,
      jsxPragmaFrag: u,
      onlyRemoveTypeImports: c,
      optimizeConstEnums: p
    }), "pluginOptions"), g = /* @__PURE__ */ i((d, y) => [[r_.default, Object.assign({
      isTSX: d
    }, h(y))]], "getPlugins");
    return {
      plugins: f ? [O0e] : [],
      overrides: r || n ? [{
        plugins: g(o, a)
      }] : [{
        test: /\.ts$/,
        plugins: g(!1, !1)
      }, {
        test: /\.mts$/,
        sourceType: "module",
        plugins: g(!1, !0)
      }, {
        test: /\.cts$/,
        sourceType: "unambiguous",
        plugins: [[I0e.default, {
          allowTopLevelThis: !0
        }], [r_.default, h(!0)]]
      }, {
        test: /\.tsx$/,
        plugins: g(!0, !1)
      }]
    };
  });
  Hb.default = N0e;
});

// ../node_modules/@babel/core/lib/config/files/module-types.js
var e1 = A((Jo) => {
  "use strict";
  Object.defineProperty(Jo, "__esModule", {
    value: !0
  });
  Jo.default = M0e;
  Jo.supportsESM = void 0;
  var Yb = hs();
  function Qb() {
    let e = le("path");
    return Qb = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(Qb, "_path");
  function l_() {
    let e = le("url");
    return l_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_url"), e;
  }
  i(l_, "_url");
  function Zb() {
    let e = le("semver");
    return Zb = /* @__PURE__ */ i(function() {
      return e;
    }, "_semver"), e;
  }
  i(Zb, "_semver");
  function u_() {
    let e = Ls();
    return u_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_debug"), e;
  }
  i(u_, "_debug");
  var c_ = Fn(), Sp = Zs(), B0e = Rg();
  function a_(e, t, r, n, s, a, o) {
    try {
      var l = e[a](o), u = l.value;
    } catch (c) {
      return void r(c);
    }
    l.done ? t(u) : Promise.resolve(u).then(n, s);
  }
  i(a_, "asyncGeneratorStep");
  function k0e(e) {
    return function() {
      var t = this, r = arguments;
      return new Promise(function(n, s) {
        var a = e.apply(t, r);
        function o(u) {
          a_(a, n, s, o, l, "next", u);
        }
        i(o, "_next");
        function l(u) {
          a_(a, n, s, o, l, "throw", u);
        }
        i(l, "_throw"), o(void 0);
      });
    };
  }
  i(k0e, "_asyncToGenerator");
  var F0e = u_()("babel:config:loading:files:module-types");
  try {
    zb = Ow();
  } catch {
  }
  var zb, Jwe = Jo.supportsESM = Zb().satisfies(process.versions.node, "^12.17 || >=13.2"), Jb = /* @__PURE__ */ new Set();
  function Xb(e) {
    if (Jb.has(e))
      return F0e("Auto-ignoring usage of config %o.", e), {};
    let t;
    try {
      Jb.add(e), t = (0, c_.endHiddenCallStack)(le)(e);
    } finally {
      Jb.delete(e);
    }
    return t != null && (t.__esModule || t[Symbol.toStringTag] === "Module") ? t.default || (arguments[1] ? t : void 0) : t;
  }
  i(Xb, "loadCjsDefault");
  var j0e = (0, c_.endHiddenCallStack)(function() {
    var e = k0e(function* (r) {
      let n = (0, l_().pathToFileURL)(r).toString() + "?import";
      {
        if (!zb)
          throw new Sp.default(`Internal error: Native ECMAScript modules aren't supported by this platform.
`, r);
        return yield zb(n);
      }
    });
    function t(r) {
      return e.apply(this, arguments);
    }
    return i(t, "loadMjsFromPath"), t;
  }()), L0e = /* @__PURE__ */ new Set([".js", ".mjs", ".cjs", ".cts"]), o_ = /* @__PURE__ */ new Set();
  function* M0e(e, t, r, n) {
    var s;
    let a, o = Qb().extname(e);
    switch (L0e.has(o) || (o = ".js"), `${t} ${o}`) {
      case "require .cjs":
      case "auto .cjs":
        return Xb(e, arguments[2]);
      case "require .cts":
      case "auto .cts":
        return R0e(e);
      case "auto .js":
      case "require .js":
      case "require .mjs":
        try {
          return Xb(e, arguments[2]);
        } catch (c) {
          if (c.code === "ERR_REQUIRE_ASYNC_MODULE" || c.code === "ERR_REQUIRE_CYCLE_MODULE" && o_.has(e)) {
            var u;
            if (o_.add(e), !((u = a) != null ? u : a = yield* (0, Yb.isAsync)()))
              throw new Sp.default(n, e);
          } else if (!(c.code === "ERR_REQUIRE_ESM" || o === ".mjs"))
            throw c;
        }
      case "auto .mjs":
        if ((s = a) != null ? s : a = yield* (0, Yb.isAsync)())
          return (yield* (0, Yb.waitFor)(j0e(e))).default;
        throw new Sp.default(r, e);
      default:
        throw new Error("Internal Babel error: unreachable code.");
    }
  }
  i(M0e, "loadCodeDefault");
  function R0e(e) {
    let t = ".cts", r = !!(le.extensions[".ts"] || le.extensions[".cts"] || le.extensions[".mts"]), n;
    if (!r) {
      let s = {
        babelrc: !1,
        configFile: !1,
        sourceType: "unambiguous",
        sourceMaps: "inline",
        sourceFileName: Qb().basename(e),
        presets: [[q0e(e), Object.assign({
          onlyRemoveTypeImports: !0,
          optimizeConstEnums: !0
        }, {
          allowDeclareFields: !0
        })]]
      };
      n = /* @__PURE__ */ i(function(a, o) {
        if (n && o.endsWith(t))
          try {
            return a._compile((0, B0e.transformFileSync)(o, Object.assign({}, s, {
              filename: o
            })).code, o);
          } catch (l) {
            if (!r) {
              let u = Nw();
              Zb().lt(u.version, "7.21.4") && console.error("`.cts` configuration file failed to load, please try to update `@babel/preset-t\
ypescript`.");
            }
            throw l;
          }
        return le.extensions[".js"](a, o);
      }, "handler"), le.extensions[t] = n;
    }
    try {
      return Xb(e);
    } finally {
      r || (le.extensions[t] === n && delete le.extensions[t], n = void 0);
    }
  }
  i(R0e, "loadCtsDefault");
  function q0e(e) {
    try {
      return i_();
    } catch (t) {
      if (t.code !== "MODULE_NOT_FOUND") throw t;
      let r = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please i\
nstall it!";
      throw process.versions.pnp && (r += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
	"@babel/core@*":
		peerDependencies:
			"@babel/preset-typescript": "*"
`), new Sp.default(r, e);
    }
  }
  i(q0e, "getTSPreset");
});

// ../node_modules/@babel/core/lib/config/files/configuration.js
var T_ = A((Hn) => {
  "use strict";
  Object.defineProperty(Hn, "__esModule", {
    value: !0
  });
  Hn.ROOT_CONFIG_FILENAMES = void 0;
  Hn.findConfigUpwards = tge;
  Hn.findRelativeConfig = rge;
  Hn.findRootConfig = nge;
  Hn.loadConfig = sge;
  Hn.resolveShowConfigPath = ige;
  function f_() {
    let e = Ls();
    return f_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_debug"), e;
  }
  i(f_, "_debug");
  function t1() {
    let e = le("fs");
    return t1 = /* @__PURE__ */ i(function() {
      return e;
    }, "_fs"), e;
  }
  i(t1, "_fs");
  function Tr() {
    let e = le("path");
    return Tr = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(Tr, "_path");
  function d_() {
    let e = yC();
    return d_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_json"), e;
  }
  i(d_, "_json");
  function h_() {
    let e = gr();
    return h_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(h_, "_gensync");
  var m_ = Qs(), U0e = t0(), y_ = $y(), V0e = e1(), $0e = K0(), en = Zs(), W0e = Zu(), K0e = Fn(), G0e = hs(), r1 = f_()("babel:config:loadi\
ng:files:configuration"), g_ = Hn.ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "\
babel.config.cts"], H0e = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"], Y0e = ".babelignore",
  J0e = (0, m_.makeWeakCache)(/* @__PURE__ */ i(function* (t, r) {
    return yield* [], {
      options: (0, K0e.endHiddenCallStack)(t)((0, U0e.makeConfigAPI)(r)),
      cacheNeedsConfiguration: !r.configured()
    };
  }, "runConfig"));
  function* z0e(e, t) {
    if (!t1().existsSync(e)) return null;
    let r = yield* (0, V0e.default)(e, (yield* (0, G0e.isAsync)()) ? "auto" : "require", "You appear to be using a native ECMAScript module \
configuration file, which is only supported when running Babel asynchronously or when using the Node.js `--experimental-require-module` flag\
.", "You appear to be using a configuration file that contains top-level await, which is only supported when running Babel asynchronously."),
    n = !1;
    if (typeof r == "function" && ({
      options: r,
      cacheNeedsConfiguration: n
    } = yield* J0e(r, t)), !r || typeof r != "object" || Array.isArray(r))
      throw new en.default("Configuration should be an exported JavaScript object.", e);
    if (typeof r.then == "function")
      throw r.catch == null || r.catch(() => {
      }), new en.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add su\
pport for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synch\
ronously return your config.", e);
    return n && age(e), X0e(r, e);
  }
  i(z0e, "readConfigCode");
  var p_ = /* @__PURE__ */ new WeakMap();
  function X0e(e, t) {
    let r = p_.get(e);
    r || p_.set(e, r = /* @__PURE__ */ new Map());
    let n = r.get(t);
    return n || (n = {
      filepath: t,
      dirname: Tr().dirname(t),
      options: e
    }, r.set(t, n)), n;
  }
  i(X0e, "buildConfigFileObject");
  var Q0e = (0, m_.makeWeakCacheSync)((e) => {
    let t = e.options.babel;
    if (t === void 0) return null;
    if (typeof t != "object" || Array.isArray(t) || t === null)
      throw new en.default(".babel property must be an object", e.filepath);
    return {
      filepath: e.filepath,
      dirname: e.dirname,
      options: t
    };
  }), Z0e = (0, y_.makeStaticFileCache)((e, t) => {
    let r;
    try {
      r = d_().parse(t);
    } catch (n) {
      throw new en.default(`Error while parsing config - ${n.message}`, e);
    }
    if (!r) throw new en.default("No config detected", e);
    if (typeof r != "object")
      throw new en.default(`Config returned typeof ${typeof r}`, e);
    if (Array.isArray(r))
      throw new en.default("Expected config object but found array", e);
    return delete r.$schema, {
      filepath: e,
      dirname: Tr().dirname(e),
      options: r
    };
  }), ege = (0, y_.makeStaticFileCache)((e, t) => {
    let r = Tr().dirname(e), n = t.split(`
`).map((s) => s.replace(/#.*$/, "").trim()).filter(Boolean);
    for (let s of n)
      if (s[0] === "!")
        throw new en.default("Negation of file paths is not supported.", e);
    return {
      filepath: e,
      dirname: Tr().dirname(e),
      ignore: n.map((s) => (0, $0e.default)(s, r))
    };
  });
  function tge(e) {
    let t = e;
    for (; ; ) {
      for (let n of g_)
        if (t1().existsSync(Tr().join(t, n)))
          return t;
      let r = Tr().dirname(t);
      if (t === r) break;
      t = r;
    }
    return null;
  }
  i(tge, "findConfigUpwards");
  function* rge(e, t, r) {
    let n = null, s = null, a = Tr().dirname(e.filepath);
    for (let l of e.directories) {
      if (!n) {
        var o;
        n = yield* b_(H0e, l, t, r, ((o = e.pkg) == null ? void 0 : o.dirname) === l ? Q0e(e.pkg) : null);
      }
      if (!s) {
        let u = Tr().join(l, Y0e);
        s = yield* ege(u), s && r1("Found ignore %o from %o.", s.filepath, a);
      }
    }
    return {
      config: n,
      ignore: s
    };
  }
  i(rge, "findRelativeConfig");
  function nge(e, t, r) {
    return b_(g_, e, t, r);
  }
  i(nge, "findRootConfig");
  function* b_(e, t, r, n, s = null) {
    let o = (yield* h_().all(e.map((l) => E_(Tr().join(t, l), r, n)))).reduce((l, u) => {
      if (u && l)
        throw new en.default(`Multiple configuration files found. Please remove one:
 - ${Tr().basename(l.filepath)}
 - ${u.filepath}
from ${t}`);
      return u || l;
    }, s);
    return o && r1("Found configuration %o from %o.", o.filepath, t), o;
  }
  i(b_, "loadOneConfig");
  function* sge(e, t, r, n) {
    let s = (((o, l) => (o = o.split("."), l = l.split("."), +o[0] > +l[0] || o[0] == l[0] && +o[1] >= +l[1]))(process.versions.node, "8.9") ?
    le.resolve : (o, {
      paths: [l]
    }, u = le("module")) => {
      let c = u._findPath(o, u._nodeModulePaths(l).concat(l));
      if (c) return c;
      throw c = new Error(`Cannot resolve module '${o}'`), c.code = "MODULE_NOT_FOUND", c;
    })(e, {
      paths: [t]
    }), a = yield* E_(s, r, n);
    if (!a)
      throw new en.default("Config file contains no configuration data", s);
    return r1("Loaded config %o from %o.", e, t), a;
  }
  i(sge, "loadConfig");
  function E_(e, t, r) {
    switch (Tr().extname(e)) {
      case ".js":
      case ".cjs":
      case ".mjs":
      case ".cts":
        return z0e(e, {
          envName: t,
          caller: r
        });
      default:
        return Z0e(e);
    }
  }
  i(E_, "readConfig");
  function* ige(e) {
    let t = process.env.BABEL_SHOW_CONFIG_FOR;
    if (t != null) {
      let r = Tr().resolve(e, t);
      if (!(yield* W0e.stat(r)).isFile())
        throw new Error(`${r}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
      return r;
    }
    return null;
  }
  i(ige, "resolveShowConfigPath");
  function age(e) {
    throw new en.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, e);
  }
  i(age, "throwConfigError");
});

// ../node_modules/@babel/core/lib/vendor/import-meta-resolve.js
var K_ = A((Dp) => {
  "use strict";
  Object.defineProperty(Dp, "__esModule", {
    value: !0
  });
  Dp.moduleResolve = W_;
  Dp.resolve = Qge;
  function gn() {
    let e = le("assert");
    return gn = /* @__PURE__ */ i(function() {
      return e;
    }, "_assert"), e;
  }
  i(gn, "_assert");
  function Zo() {
    let e = oge(le("fs"), !0);
    return Zo = /* @__PURE__ */ i(function() {
      return e;
    }, "_fs"), e;
  }
  i(Zo, "_fs");
  function As() {
    let e = le("process");
    return As = /* @__PURE__ */ i(function() {
      return e;
    }, "_process"), e;
  }
  i(As, "_process");
  function Se() {
    let e = le("url");
    return Se = /* @__PURE__ */ i(function() {
      return e;
    }, "_url"), e;
  }
  i(Se, "_url");
  function Pp() {
    let e = le("path");
    return Pp = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(Pp, "_path");
  function Ap() {
    let e = le("module");
    return Ap = /* @__PURE__ */ i(function() {
      return e;
    }, "_module"), e;
  }
  i(Ap, "_module");
  function B_() {
    let e = le("v8");
    return B_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_v"), e;
  }
  i(B_, "_v");
  function Qo() {
    let e = le("util");
    return Qo = /* @__PURE__ */ i(function() {
      return e;
    }, "_util"), e;
  }
  i(Qo, "_util");
  function k_(e) {
    if (typeof WeakMap != "function") return null;
    var t = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap();
    return (k_ = /* @__PURE__ */ i(function(n) {
      return n ? r : t;
    }, "_getRequireWildcardCache"))(e);
  }
  i(k_, "_getRequireWildcardCache");
  function oge(e, t) {
    if (!t && e && e.__esModule) return e;
    if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
    var r = k_(t);
    if (r && r.has(e)) return r.get(e);
    var n = { __proto__: null }, s = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var a in e) if (a !== "default" && {}.hasOwnProperty.call(e, a)) {
      var o = s ? Object.getOwnPropertyDescriptor(e, a) : null;
      o && (o.get || o.set) ? Object.defineProperty(n, a, o) : n[a] = e[a];
    }
    return n.default = e, r && r.set(e, n), n;
  }
  i(oge, "_interopRequireWildcard");
  var lge = {}.hasOwnProperty, uge = /^([A-Z][a-z\d]*)+$/, cge = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Functio\
n", "Object", "boolean", "bigint", "symbol"]), Kt = {};
  function n1(e, t = "and") {
    return e.length < 3 ? e.join(` ${t} `) : `${e.slice(0, -1).join(", ")}, ${t} ${e[e.length - 1]}`;
  }
  i(n1, "formatList");
  var F_ = /* @__PURE__ */ new Map(), pge = "__node_internal_", S_;
  Kt.ERR_INVALID_ARG_TYPE = Rr("ERR_INVALID_ARG_TYPE", (e, t, r) => {
    gn()(typeof e == "string", "'name' must be a string"), Array.isArray(t) || (t = [t]);
    let n = "The ";
    if (e.endsWith(" argument"))
      n += `${e} `;
    else {
      let l = e.includes(".") ? "property" : "argument";
      n += `"${e}" ${l} `;
    }
    n += "must be ";
    let s = [], a = [], o = [];
    for (let l of t)
      gn()(typeof l == "string", "All expected entries have to be of type string"), cge.has(l) ? s.push(l.toLowerCase()) : uge.exec(l) === null ?
      (gn()(l !== "object", 'The value "object" should be written as "Object"'), o.push(l)) : a.push(l);
    if (a.length > 0) {
      let l = s.indexOf("object");
      l !== -1 && (s.slice(l, 1), a.push("Object"));
    }
    return s.length > 0 && (n += `${s.length > 1 ? "one of type" : "of type"} ${n1(s, "or")}`, (a.length > 0 || o.length > 0) && (n += " or ")),
    a.length > 0 && (n += `an instance of ${n1(a, "or")}`, o.length > 0 && (n += " or ")), o.length > 0 && (o.length > 1 ? n += `one of ${n1(
    o, "or")}` : (o[0].toLowerCase() !== o[0] && (n += "an "), n += `${o[0]}`)), n += `. Received ${yge(r)}`, n;
  }, TypeError);
  Kt.ERR_INVALID_MODULE_SPECIFIER = Rr("ERR_INVALID_MODULE_SPECIFIER", (e, t, r = void 0) => `Invalid module "${e}" ${t}${r ? ` imported fro\
m ${r}` : ""}`, TypeError);
  Kt.ERR_INVALID_PACKAGE_CONFIG = Rr("ERR_INVALID_PACKAGE_CONFIG", (e, t, r) => `Invalid package config ${e}${t ? ` while importing ${t}` : ""}${r ?
  `. ${r}` : ""}`, Error);
  Kt.ERR_INVALID_PACKAGE_TARGET = Rr("ERR_INVALID_PACKAGE_TARGET", (e, t, r, n = !1, s = void 0) => {
    let a = typeof r == "string" && !n && r.length > 0 && !r.startsWith("./");
    return t === "." ? (gn()(n === !1), `Invalid "exports" main target ${JSON.stringify(r)} defined in the package config ${e}package.json${s ?
    ` imported from ${s}` : ""}${a ? '; targets must start with "./"' : ""}`) : `Invalid "${n ? "imports" : "exports"}" target ${JSON.stringify(
    r)} defined for '${t}' in the package config ${e}package.json${s ? ` imported from ${s}` : ""}${a ? '; targets must start with "./"' : ""}`;
  }, Error);
  Kt.ERR_MODULE_NOT_FOUND = Rr("ERR_MODULE_NOT_FOUND", (e, t, r = !1) => `Cannot find ${r ? "module" : "package"} '${e}' imported from ${t}`,
  Error);
  Kt.ERR_NETWORK_IMPORT_DISALLOWED = Rr("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error);
  Kt.ERR_PACKAGE_IMPORT_NOT_DEFINED = Rr("ERR_PACKAGE_IMPORT_NOT_DEFINED", (e, t, r) => `Package import specifier "${e}" is not defined${t ?
  ` in package ${t}package.json` : ""} imported from ${r}`, TypeError);
  Kt.ERR_PACKAGE_PATH_NOT_EXPORTED = Rr("ERR_PACKAGE_PATH_NOT_EXPORTED", (e, t, r = void 0) => t === "." ? `No "exports" main defined in ${e}\
package.json${r ? ` imported from ${r}` : ""}` : `Package subpath '${t}' is not defined by "exports" in ${e}package.json${r ? ` imported fro\
m ${r}` : ""}`, Error);
  Kt.ERR_UNSUPPORTED_DIR_IMPORT = Rr("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported fro\
m %s", Error);
  Kt.ERR_UNSUPPORTED_RESOLVE_REQUEST = Rr("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid rel\
ative URL or base scheme is not hierarchical.', TypeError);
  Kt.ERR_UNKNOWN_FILE_EXTENSION = Rr("ERR_UNKNOWN_FILE_EXTENSION", (e, t) => `Unknown file extension "${e}" for ${t}`, TypeError);
  Kt.ERR_INVALID_ARG_VALUE = Rr("ERR_INVALID_ARG_VALUE", (e, t, r = "is invalid") => {
    let n = (0, Qo().inspect)(t);
    return n.length > 128 && (n = `${n.slice(0, 128)}...`), `The ${e.includes(".") ? "property" : "argument"} '${e}' ${r}. Received ${n}`;
  }, TypeError);
  function Rr(e, t, r) {
    return F_.set(e, t), fge(r, e);
  }
  i(Rr, "createError");
  function fge(e, t) {
    return r;
    function r(...n) {
      let s = Error.stackTraceLimit;
      o1() && (Error.stackTraceLimit = 0);
      let a = new e();
      o1() && (Error.stackTraceLimit = s);
      let o = mge(t, n, a);
      return Object.defineProperties(a, {
        message: {
          value: o,
          enumerable: !1,
          writable: !0,
          configurable: !0
        },
        toString: {
          value() {
            return `${this.name} [${t}]: ${this.message}`;
          },
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), hge(a), a.code = t, a;
    }
  }
  i(fge, "makeNodeErrorWithCode");
  function o1() {
    try {
      if (B_().startupSnapshot.isBuildingSnapshot())
        return !1;
    } catch {
    }
    let e = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
    return e === void 0 ? Object.isExtensible(Error) : lge.call(e, "writable") && e.writable !== void 0 ? e.writable : e.set !== void 0;
  }
  i(o1, "isErrorStackTraceLimitWritable");
  function dge(e) {
    let t = pge + e.name;
    return Object.defineProperty(e, "name", {
      value: t
    }), e;
  }
  i(dge, "hideStackFrames");
  var hge = dge(function(e) {
    let t = o1();
    return t && (S_ = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(e), t && (Error.stackTraceLimit =
    S_), e;
  });
  function mge(e, t, r) {
    let n = F_.get(e);
    if (gn()(n !== void 0, "expected `message` to be found"), typeof n == "function")
      return gn()(n.length <= t.length, `Code: ${e}; The provided arguments length (${t.length}) does not match the required ones (${n.length}\
).`), Reflect.apply(n, r, t);
    let s = /%[dfijoOs]/g, a = 0;
    for (; s.exec(n) !== null; ) a++;
    return gn()(a === t.length, `Code: ${e}; The provided arguments length (${t.length}) does not match the required ones (${a}).`), t.length ===
    0 ? n : (t.unshift(n), Reflect.apply(Qo().format, null, t));
  }
  i(mge, "getMessage");
  function yge(e) {
    if (e == null)
      return String(e);
    if (typeof e == "function" && e.name)
      return `function ${e.name}`;
    if (typeof e == "object")
      return e.constructor && e.constructor.name ? `an instance of ${e.constructor.name}` : `${(0, Qo().inspect)(e, {
        depth: -1
      })}`;
    let t = (0, Qo().inspect)(e, {
      colors: !1
    });
    return t.length > 28 && (t = `${t.slice(0, 25)}...`), `type ${typeof e} (${t})`;
  }
  i(yge, "determineSpecificType");
  var zo = {}.hasOwnProperty, {
    ERR_INVALID_PACKAGE_CONFIG: gge
  } = Kt, x_ = /* @__PURE__ */ new Map();
  function j_(e, {
    base: t,
    specifier: r
  }) {
    let n = x_.get(e);
    if (n)
      return n;
    let s;
    try {
      s = Zo().default.readFileSync(Pp().toNamespacedPath(e), "utf8");
    } catch (o) {
      let l = o;
      if (l.code !== "ENOENT")
        throw l;
    }
    let a = {
      exists: !1,
      pjsonPath: e,
      main: void 0,
      name: void 0,
      type: "none",
      exports: void 0,
      imports: void 0
    };
    if (s !== void 0) {
      let o;
      try {
        o = JSON.parse(s);
      } catch (l) {
        let u = l, c = new gge(e, (t ? `"${r}" from ` : "") + (0, Se().fileURLToPath)(t || r), u.message);
        throw c.cause = u, c;
      }
      a.exists = !0, zo.call(o, "name") && typeof o.name == "string" && (a.name = o.name), zo.call(o, "main") && typeof o.main == "string" &&
      (a.main = o.main), zo.call(o, "exports") && (a.exports = o.exports), zo.call(o, "imports") && (a.imports = o.imports), zo.call(o, "typ\
e") && (o.type === "commonjs" || o.type === "module") && (a.type = o.type);
    }
    return x_.set(e, a), a;
  }
  i(j_, "read");
  function l1(e) {
    let t = new URL("package.json", e);
    for (; !t.pathname.endsWith("node_modules/package.json"); ) {
      let s = j_((0, Se().fileURLToPath)(t), {
        specifier: e
      });
      if (s.exists)
        return s;
      let a = t;
      if (t = new URL("../package.json", t), t.pathname === a.pathname)
        break;
    }
    return {
      pjsonPath: (0, Se().fileURLToPath)(t),
      exists: !1,
      type: "none"
    };
  }
  i(l1, "getPackageScopeConfig");
  function v_(e) {
    return l1(e).type;
  }
  i(v_, "getPackageType");
  var {
    ERR_UNKNOWN_FILE_EXTENSION: bge
  } = Kt, Ege = {}.hasOwnProperty, Tge = {
    __proto__: null,
    ".cjs": "commonjs",
    ".js": "module",
    ".json": "json",
    ".mjs": "module"
  };
  function Sge(e) {
    return e && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(e) ? "module" : e === "application/json" ? "json" : null;
  }
  i(Sge, "mimeToFormat");
  var P_ = {
    __proto__: null,
    "data:": xge,
    "file:": Pge,
    "http:": A_,
    "https:": A_,
    "node:"() {
      return "builtin";
    }
  };
  function xge(e) {
    let {
      1: t
    } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(e.pathname) || [null, null, null];
    return Sge(t);
  }
  i(xge, "getDataProtocolModuleFormat");
  function vge(e) {
    let t = e.pathname, r = t.length;
    for (; r--; ) {
      let n = t.codePointAt(r);
      if (n === 47)
        return "";
      if (n === 46)
        return t.codePointAt(r - 1) === 47 ? "" : t.slice(r);
    }
    return "";
  }
  i(vge, "extname");
  function Pge(e, t, r) {
    let n = vge(e);
    if (n === ".js") {
      let o = v_(e);
      return o !== "none" ? o : "commonjs";
    }
    if (n === "") {
      let o = v_(e);
      return o === "none" || o === "commonjs" ? "commonjs" : "module";
    }
    let s = Tge[n];
    if (s) return s;
    if (r)
      return;
    let a = (0, Se().fileURLToPath)(e);
    throw new bge(n, a);
  }
  i(Pge, "getFileProtocolModuleFormat");
  function A_() {
  }
  i(A_, "getHttpProtocolModuleFormat");
  function L_(e, t) {
    let r = e.protocol;
    return Ege.call(P_, r) && P_[r](e, t, !0) || null;
  }
  i(L_, "defaultGetFormatWithoutErrors");
  var {
    ERR_INVALID_ARG_VALUE: Age
  } = Kt, M_ = Object.freeze(["node", "import"]), Cge = new Set(M_);
  function Dge() {
    return M_;
  }
  i(Dge, "getDefaultConditions");
  function wge() {
    return Cge;
  }
  i(wge, "getDefaultConditionsSet");
  function Ige(e) {
    if (e !== void 0 && e !== Dge()) {
      if (!Array.isArray(e))
        throw new Age("conditions", e, "expected an array");
      return new Set(e);
    }
    return wge();
  }
  i(Ige, "getConditionsSet");
  var xp = RegExp.prototype[Symbol.replace], {
    ERR_NETWORK_IMPORT_DISALLOWED: s1,
    ERR_INVALID_MODULE_SPECIFIER: Cp,
    ERR_INVALID_PACKAGE_CONFIG: R_,
    ERR_INVALID_PACKAGE_TARGET: _ge,
    ERR_MODULE_NOT_FOUND: u1,
    ERR_PACKAGE_IMPORT_NOT_DEFINED: Oge,
    ERR_PACKAGE_PATH_NOT_EXPORTED: Nge,
    ERR_UNSUPPORTED_DIR_IMPORT: Bge,
    ERR_UNSUPPORTED_RESOLVE_REQUEST: C_
  } = Kt, q_ = {}.hasOwnProperty, D_ = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i,
  w_ = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,
  kge = /^\.|%|\\/, vp = /\*/g, Fge = /%2f|%5c/i, I_ = /* @__PURE__ */ new Set(), jge = /[/\\]{2}/;
  function __(e, t, r, n, s, a, o) {
    if (As().noDeprecation)
      return;
    let l = (0, Se().fileURLToPath)(n), u = jge.exec(o ? e : t) !== null;
    As().emitWarning(`Use of deprecated ${u ? "double slash" : "leading or trailing slash matching"} resolving "${e}" for module request "${t}\
" ${t === r ? "" : `matched to "${r}" `}in the "${s ? "imports" : "exports"}" field module resolution of the package at ${l}${a ? ` imported\
 from ${(0, Se().fileURLToPath)(a)}` : ""}.`, "DeprecationWarning", "DEP0166");
  }
  i(__, "emitInvalidSegmentDeprecation");
  function O_(e, t, r, n) {
    if (As().noDeprecation || L_(e, {
      parentURL: r.href
    }) !== "module") return;
    let a = (0, Se().fileURLToPath)(e.href), o = (0, Se().fileURLToPath)(new (Se()).URL(".", t)), l = (0, Se().fileURLToPath)(r);
    n ? Pp().resolve(o, n) !== a && As().emitWarning(`Package ${o} has a "main" field set to "${n}", excluding the full filename and extensi\
on to the resolved file at "${a.slice(o.length)}", imported from ${l}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : As().emitWarning(`No \
"main" or "exports" field defined in the package.json for ${o} resolving the main entry point "${a.slice(o.length)}", imported from ${l}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
  }
  i(O_, "emitLegacyIndexDeprecation");
  function U_(e) {
    try {
      return (0, Zo().statSync)(e);
    } catch {
    }
  }
  i(U_, "tryStatSync");
  function i1(e) {
    let t = (0, Zo().statSync)(e, {
      throwIfNoEntry: !1
    }), r = t ? t.isFile() : void 0;
    return r ?? !1;
  }
  i(i1, "fileExists");
  function Lge(e, t, r) {
    let n;
    if (t.main !== void 0) {
      if (n = new (Se()).URL(t.main, e), i1(n)) return n;
      let o = [`./${t.main}.js`, `./${t.main}.json`, `./${t.main}.node`, `./${t.main}/index.js`, `./${t.main}/index.json`, `./${t.main}/inde\
x.node`], l = -1;
      for (; ++l < o.length && (n = new (Se()).URL(o[l], e), !i1(n)); )
        n = void 0;
      if (n)
        return O_(n, e, r, t.main), n;
    }
    let s = ["./index.js", "./index.json", "./index.node"], a = -1;
    for (; ++a < s.length && (n = new (Se()).URL(s[a], e), !i1(n)); )
      n = void 0;
    if (n)
      return O_(n, e, r, t.main), n;
    throw new u1((0, Se().fileURLToPath)(new (Se()).URL(".", e)), (0, Se().fileURLToPath)(r));
  }
  i(Lge, "legacyMainResolve");
  function Mge(e, t, r) {
    if (Fge.exec(e.pathname) !== null)
      throw new Cp(e.pathname, 'must not include encoded "/" or "\\" characters', (0, Se().fileURLToPath)(t));
    let n;
    try {
      n = (0, Se().fileURLToPath)(e);
    } catch (a) {
      let o = a;
      throw Object.defineProperty(o, "input", {
        value: String(e)
      }), Object.defineProperty(o, "module", {
        value: String(t)
      }), o;
    }
    let s = U_(n.endsWith("/") ? n.slice(-1) : n);
    if (s && s.isDirectory()) {
      let a = new Bge(n, (0, Se().fileURLToPath)(t));
      throw a.url = String(e), a;
    }
    if (!s || !s.isFile()) {
      let a = new u1(n || e.pathname, t && (0, Se().fileURLToPath)(t), !0);
      throw a.url = String(e), a;
    }
    if (!r) {
      let a = (0, Zo().realpathSync)(n), {
        search: o,
        hash: l
      } = e;
      e = (0, Se().pathToFileURL)(a + (n.endsWith(Pp().sep) ? "/" : "")), e.search = o, e.hash = l;
    }
    return e;
  }
  i(Mge, "finalizeResolution");
  function Rge(e, t, r) {
    return new Oge(e, t && (0, Se().fileURLToPath)(new (Se()).URL(".", t)), (0, Se().fileURLToPath)(r));
  }
  i(Rge, "importNotDefined");
  function a1(e, t, r) {
    return new Nge((0, Se().fileURLToPath)(new (Se()).URL(".", t)), e, r && (0, Se().fileURLToPath)(r));
  }
  i(a1, "exportsNotFound");
  function qge(e, t, r, n, s) {
    let a = `request is not a valid match in pattern "${t}" for the "${n ? "imports" : "exports"}" resolution of ${(0, Se().fileURLToPath)(r)}`;
    throw new Cp(e, a, s && (0, Se().fileURLToPath)(s));
  }
  i(qge, "throwInvalidSubpath");
  function Xo(e, t, r, n, s) {
    return t = typeof t == "object" && t !== null ? JSON.stringify(t, null, "") : `${t}`, new _ge((0, Se().fileURLToPath)(new (Se()).URL(".",
    r)), e, t, n, s && (0, Se().fileURLToPath)(s));
  }
  i(Xo, "invalidPackageTarget");
  function Uge(e, t, r, n, s, a, o, l, u) {
    if (t !== "" && !a && e[e.length - 1] !== "/") throw Xo(r, e, n, o, s);
    if (!e.startsWith("./")) {
      if (o && !e.startsWith("../") && !e.startsWith("/")) {
        let h = !1;
        try {
          new (Se()).URL(e), h = !0;
        } catch {
        }
        if (!h) {
          let g = a ? xp.call(vp, e, () => t) : e + t;
          return $_(g, n, u);
        }
      }
      throw Xo(r, e, n, o, s);
    }
    if (D_.exec(e.slice(2)) !== null)
      if (w_.exec(e.slice(2)) === null) {
        if (!l) {
          let h = a ? r.replace("*", () => t) : r + t, g = a ? xp.call(vp, e, () => t) : e;
          __(g, h, r, n, o, s, !0);
        }
      } else
        throw Xo(r, e, n, o, s);
    let c = new (Se()).URL(e, n), p = c.pathname, f = new (Se()).URL(".", n).pathname;
    if (!p.startsWith(f)) throw Xo(r, e, n, o, s);
    if (t === "") return c;
    if (D_.exec(t) !== null) {
      let h = a ? r.replace("*", () => t) : r + t;
      if (w_.exec(t) === null) {
        if (!l) {
          let g = a ? xp.call(vp, e, () => t) : e;
          __(g, h, r, n, o, s, !1);
        }
      } else
        qge(h, r, n, o, s);
    }
    return a ? new (Se()).URL(xp.call(vp, c.href, () => t)) : new (Se()).URL(t, c);
  }
  i(Uge, "resolvePackageTargetString");
  function Vge(e) {
    let t = Number(e);
    return `${t}` !== e ? !1 : t >= 0 && t < 4294967295;
  }
  i(Vge, "isArrayIndex");
  function ca(e, t, r, n, s, a, o, l, u) {
    if (typeof t == "string")
      return Uge(t, r, n, e, s, a, o, l, u);
    if (Array.isArray(t)) {
      let c = t;
      if (c.length === 0) return null;
      let p, f = -1;
      for (; ++f < c.length; ) {
        let h = c[f], g;
        try {
          g = ca(e, h, r, n, s, a, o, l, u);
        } catch (P) {
          let d = P;
          if (p = d, d.code === "ERR_INVALID_PACKAGE_TARGET") continue;
          throw P;
        }
        if (g !== void 0) {
          if (g === null) {
            p = null;
            continue;
          }
          return g;
        }
      }
      if (p == null)
        return null;
      throw p;
    }
    if (typeof t == "object" && t !== null) {
      let c = Object.getOwnPropertyNames(t), p = -1;
      for (; ++p < c.length; ) {
        let f = c[p];
        if (Vge(f))
          throw new R_((0, Se().fileURLToPath)(e), s, '"exports" cannot contain numeric property keys.');
      }
      for (p = -1; ++p < c.length; ) {
        let f = c[p];
        if (f === "default" || u && u.has(f)) {
          let h = t[f], g = ca(e, h, r, n, s, a, o, l, u);
          if (g === void 0) continue;
          return g;
        }
      }
      return null;
    }
    if (t === null)
      return null;
    throw Xo(n, t, e, o, s);
  }
  i(ca, "resolvePackageTarget");
  function $ge(e, t, r) {
    if (typeof e == "string" || Array.isArray(e)) return !0;
    if (typeof e != "object" || e === null) return !1;
    let n = Object.getOwnPropertyNames(e), s = !1, a = 0, o = -1;
    for (; ++o < n.length; ) {
      let l = n[o], u = l === "" || l[0] !== ".";
      if (a++ === 0)
        s = u;
      else if (s !== u)
        throw new R_((0, Se().fileURLToPath)(t), r, `"exports" cannot contain some keys starting with '.' and some not. The exports object m\
ust either be an object of package subpath keys or an object of main entry condition name keys only.`);
    }
    return s;
  }
  i($ge, "isConditionalExportsMainSugar");
  function Wge(e, t, r) {
    if (As().noDeprecation)
      return;
    let n = (0, Se().fileURLToPath)(t);
    I_.has(n + "|" + e) || (I_.add(n + "|" + e), As().emitWarning(`Use of deprecated trailing slash pattern mapping "${e}" in the "exports" \
field module resolution of the package at ${n}${r ? ` imported from ${(0, Se().fileURLToPath)(r)}` : ""}. Mapping specifiers ending in "/" i\
s no longer supported.`, "DeprecationWarning", "DEP0155"));
  }
  i(Wge, "emitTrailingSlashPatternDeprecation");
  function N_(e, t, r, n, s) {
    let a = r.exports;
    if ($ge(a, e, n) && (a = {
      ".": a
    }), q_.call(a, t) && !t.includes("*") && !t.endsWith("/")) {
      let p = a[t], f = ca(e, p, "", t, n, !1, !1, !1, s);
      if (f == null)
        throw a1(t, e, n);
      return f;
    }
    let o = "", l = "", u = Object.getOwnPropertyNames(a), c = -1;
    for (; ++c < u.length; ) {
      let p = u[c], f = p.indexOf("*");
      if (f !== -1 && t.startsWith(p.slice(0, f))) {
        t.endsWith("/") && Wge(t, e, n);
        let h = p.slice(f + 1);
        t.length >= p.length && t.endsWith(h) && V_(o, p) === 1 && p.lastIndexOf("*") === f && (o = p, l = t.slice(f, t.length - h.length));
      }
    }
    if (o) {
      let p = a[o], f = ca(e, p, l, o, n, !0, !1, t.endsWith("/"), s);
      if (f == null)
        throw a1(t, e, n);
      return f;
    }
    throw a1(t, e, n);
  }
  i(N_, "packageExportsResolve");
  function V_(e, t) {
    let r = e.indexOf("*"), n = t.indexOf("*"), s = r === -1 ? e.length : r + 1, a = n === -1 ? t.length : n + 1;
    return s > a ? -1 : a > s || r === -1 ? 1 : n === -1 || e.length > t.length ? -1 : t.length > e.length ? 1 : 0;
  }
  i(V_, "patternKeyCompare");
  function Kge(e, t, r) {
    if (e === "#" || e.startsWith("#/") || e.endsWith("/")) {
      let a = "is not a valid internal imports specifier name";
      throw new Cp(e, a, (0, Se().fileURLToPath)(t));
    }
    let n, s = l1(t);
    if (s.exists) {
      n = (0, Se().pathToFileURL)(s.pjsonPath);
      let a = s.imports;
      if (a)
        if (q_.call(a, e) && !e.includes("*")) {
          let o = ca(n, a[e], "", e, t, !1, !0, !1, r);
          if (o != null)
            return o;
        } else {
          let o = "", l = "", u = Object.getOwnPropertyNames(a), c = -1;
          for (; ++c < u.length; ) {
            let p = u[c], f = p.indexOf("*");
            if (f !== -1 && e.startsWith(p.slice(0, -1))) {
              let h = p.slice(f + 1);
              e.length >= p.length && e.endsWith(h) && V_(o, p) === 1 && p.lastIndexOf("*") === f && (o = p, l = e.slice(f, e.length - h.length));
            }
          }
          if (o) {
            let p = a[o], f = ca(n, p, l, o, t, !0, !0, !1, r);
            if (f != null)
              return f;
          }
        }
    }
    throw Rge(e, n, t);
  }
  i(Kge, "packageImportsResolve");
  function Gge(e, t) {
    let r = e.indexOf("/"), n = !0, s = !1;
    e[0] === "@" && (s = !0, r === -1 || e.length === 0 ? n = !1 : r = e.indexOf("/", r + 1));
    let a = r === -1 ? e : e.slice(0, r);
    if (kge.exec(a) !== null && (n = !1), !n)
      throw new Cp(e, "is not a valid package name", (0, Se().fileURLToPath)(t));
    let o = "." + (r === -1 ? "" : e.slice(r));
    return {
      packageName: a,
      packageSubpath: o,
      isScoped: s
    };
  }
  i(Gge, "parsePackageName");
  function $_(e, t, r) {
    if (Ap().builtinModules.includes(e))
      return new (Se()).URL("node:" + e);
    let {
      packageName: n,
      packageSubpath: s,
      isScoped: a
    } = Gge(e, t), o = l1(t);
    if (o.exists) {
      let p = (0, Se().pathToFileURL)(o.pjsonPath);
      if (o.name === n && o.exports !== void 0 && o.exports !== null)
        return N_(p, s, o, t, r);
    }
    let l = new (Se()).URL("./node_modules/" + n + "/package.json", t), u = (0, Se().fileURLToPath)(l), c;
    do {
      let p = U_(u.slice(0, -13));
      if (!p || !p.isDirectory()) {
        c = u, l = new (Se()).URL((a ? "../../../../node_modules/" : "../../../node_modules/") + n + "/package.json", l), u = (0, Se().fileURLToPath)(
        l);
        continue;
      }
      let f = j_(u, {
        base: t,
        specifier: e
      });
      return f.exports !== void 0 && f.exports !== null ? N_(l, s, f, t, r) : s === "." ? Lge(l, f, t) : new (Se()).URL(s, l);
    } while (u.length !== c.length);
    throw new u1(n, (0, Se().fileURLToPath)(t), !1);
  }
  i($_, "packageResolve");
  function Hge(e) {
    return e[0] === "." && (e.length === 1 || e[1] === "/" || e[1] === "." && (e.length === 2 || e[2] === "/"));
  }
  i(Hge, "isRelativeSpecifier");
  function c1(e) {
    return e === "" ? !1 : e[0] === "/" ? !0 : Hge(e);
  }
  i(c1, "shouldBeTreatedAsRelativeOrAbsolutePath");
  function W_(e, t, r, n) {
    let s = t.protocol, o = s === "data:" || s === "http:" || s === "https:", l;
    if (c1(e))
      try {
        l = new (Se()).URL(e, t);
      } catch (u) {
        let c = new C_(e, t);
        throw c.cause = u, c;
      }
    else if (s === "file:" && e[0] === "#")
      l = Kge(e, t, r);
    else
      try {
        l = new (Se()).URL(e);
      } catch (u) {
        if (o && !Ap().builtinModules.includes(e)) {
          let c = new C_(e, t);
          throw c.cause = u, c;
        }
        l = $_(e, t, r);
      }
    return gn()(l !== void 0, "expected to be defined"), l.protocol !== "file:" ? l : Mge(l, t, n);
  }
  i(W_, "moduleResolve");
  function Yge(e, t, r) {
    if (r) {
      let n = r.protocol;
      if (n === "http:" || n === "https:") {
        if (c1(e)) {
          let s = t?.protocol;
          if (s && s !== "https:" && s !== "http:")
            throw new s1(e, r, "remote imports cannot import from a local location.");
          return {
            url: t?.href || ""
          };
        }
        throw Ap().builtinModules.includes(e) ? new s1(e, r, "remote imports cannot import from a local location.") : new s1(e, r, "only rel\
ative and absolute specifiers are supported.");
      }
    }
  }
  i(Yge, "checkIfDisallowedImport");
  function Jge(e) {
    return !!(e && typeof e == "object" && "href" in e && typeof e.href == "string" && "protocol" in e && typeof e.protocol == "string" && e.
    href && e.protocol);
  }
  i(Jge, "isURL");
  function zge(e) {
    if (e !== void 0 && typeof e != "string" && !Jge(e))
      throw new Kt.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], e);
  }
  i(zge, "throwIfInvalidParentURL");
  function Xge(e, t = {}) {
    let {
      parentURL: r
    } = t;
    gn()(r !== void 0, "expected `parentURL` to be defined"), zge(r);
    let n;
    if (r)
      try {
        n = new (Se()).URL(r);
      } catch {
      }
    let s, a;
    try {
      if (s = c1(e) ? new (Se()).URL(e, n) : new (Se()).URL(e), a = s.protocol, a === "data:")
        return {
          url: s.href,
          format: null
        };
    } catch {
    }
    let o = Yge(e, s, n);
    if (o) return o;
    if (a === void 0 && s && (a = s.protocol), a === "node:")
      return {
        url: e
      };
    if (s && s.protocol === "node:") return {
      url: e
    };
    let l = Ige(t.conditions), u = W_(e, new (Se()).URL(r), l, !1);
    return {
      url: u.href,
      format: L_(u, {
        parentURL: r
      })
    };
  }
  i(Xge, "defaultResolve");
  function Qge(e, t) {
    if (!t)
      throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
    try {
      return Xge(e, {
        parentURL: t
      }).url;
    } catch (r) {
      let n = r;
      if ((n.code === "ERR_UNSUPPORTED_DIR_IMPORT" || n.code === "ERR_MODULE_NOT_FOUND") && typeof n.url == "string")
        return n.url;
      throw r;
    }
  }
  i(Qge, "resolve");
});

// ../node_modules/@babel/core/lib/config/files/plugins.js
var eO = A((Cs) => {
  "use strict";
  Object.defineProperty(Cs, "__esModule", {
    value: !0
  });
  Cs.loadPlugin = cbe;
  Cs.loadPreset = pbe;
  Cs.resolvePreset = Cs.resolvePlugin = void 0;
  function H_() {
    let e = Ls();
    return H_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_debug"), e;
  }
  i(H_, "_debug");
  function d1() {
    let e = le("path");
    return d1 = /* @__PURE__ */ i(function() {
      return e;
    }, "_path"), e;
  }
  i(d1, "_path");
  var h1 = hs(), Y_ = e1();
  function f1() {
    let e = le("url");
    return f1 = /* @__PURE__ */ i(function() {
      return e;
    }, "_url"), e;
  }
  i(f1, "_url");
  var Zge = K_();
  function J_() {
    let e = le("fs");
    return J_ = /* @__PURE__ */ i(function() {
      return e;
    }, "_fs"), e;
  }
  i(J_, "_fs");
  var z_ = H_()("babel:config:loading:files:plugins"), ebe = /^module:/, tbe = /^(?!@|module:|[^/]+\/|babel-plugin-)/, rbe = /^(?!@|module:|[^/]+\/|babel-preset-)/,
  nbe = /^(@babel\/)(?!plugin-|[^/]+\/)/, sbe = /^(@babel\/)(?!preset-|[^/]+\/)/, ibe = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/,
  abe = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, obe = /^(@(?!babel$)[^/]+)$/, lbe = Cs.resolvePlugin = Q_.bind(null,
  "plugin"), ube = Cs.resolvePreset = Q_.bind(null, "preset");
  function* cbe(e, t) {
    let {
      filepath: r,
      loader: n
    } = lbe(e, t, yield* (0, h1.isAsync)()), s = yield* Z_("plugin", n, r);
    return z_("Loaded plugin %o from %o.", e, t), {
      filepath: r,
      value: s
    };
  }
  i(cbe, "loadPlugin");
  function* pbe(e, t) {
    let {
      filepath: r,
      loader: n
    } = ube(e, t, yield* (0, h1.isAsync)()), s = yield* Z_("preset", n, r);
    return z_("Loaded preset %o from %o.", e, t), {
      filepath: r,
      value: s
    };
  }
  i(pbe, "loadPreset");
  function p1(e, t) {
    if (d1().isAbsolute(t)) return t;
    let r = e === "preset";
    return t.replace(r ? rbe : tbe, `babel-${e}-`).replace(r ? sbe : nbe, `$1${e}-`).replace(r ? abe : ibe, `$1babel-${e}-`).replace(obe, `$\
1/babel-${e}`).replace(ebe, "");
  }
  i(p1, "standardizeName");
  function* X_(e, t) {
    let r = p1(e, t), {
      error: n,
      value: s
    } = yield r;
    if (!n) return s;
    if (n.code !== "MODULE_NOT_FOUND") throw n;
    r !== t && !(yield t).error && (n.message += `
- If you want to resolve "${t}", use "module:${t}"`), (yield p1(e, "@babel/" + t)).error || (n.message += `
- Did you mean "@babel/${t}"?`);
    let a = e === "preset" ? "plugin" : "preset";
    if ((yield p1(a, t)).error || (n.message += `
- Did you accidentally pass a ${a} as a ${e}?`), e === "plugin") {
      let o = r.replace("-proposal-", "-transform-");
      o !== r && !(yield o).error && (n.message += `
- Did you mean "${o}"?`);
    }
    throw n.message += `

Make sure that all the Babel plugins and presets you are using
are defined as dependencies or devDependencies in your package.json
file. It's possible that the missing plugin is loaded by a preset
you are using that forgot to add the plugin to its dependencies: you
can workaround this problem by explicitly adding the missing package
to your top-level package.json.
`, n;
  }
  i(X_, "resolveAlternativesHelper");
  function fbe(e, t) {
    try {
      return t ? {
        error: null,
        value: (((r, n) => (r = r.split("."), n = n.split("."), +r[0] > +n[0] || r[0] == n[0] && +r[1] >= +n[1]))(process.versions.node, "8.\
9") ? le.resolve : (r, {
          paths: [n]
        }, s = le("module")) => {
          let a = s._findPath(r, s._nodeModulePaths(n).concat(n));
          if (a) return a;
          throw a = new Error(`Cannot resolve module '${r}'`), a.code = "MODULE_NOT_FOUND", a;
        })(e, {
          paths: [t]
        })
      } : {
        error: null,
        value: le.resolve(e)
      };
    } catch (r) {
      return {
        error: r,
        value: null
      };
    }
  }
  i(fbe, "tryRequireResolve");
  function dbe(e, t) {
    try {
      return {
        error: null,
        value: (0, Zge.resolve)(e, t)
      };
    } catch (r) {
      return {
        error: r,
        value: null
      };
    }
  }
  i(dbe, "tryImportMetaResolve");
  function G_(e, t, r) {
    let n = X_(e, t), s = n.next();
    for (; !s.done; )
      s = n.next(fbe(s.value, r));
    return {
      loader: "require",
      filepath: s.value
    };
  }
  i(G_, "resolveStandardizedNameForRequire");
  function hbe(e, t, r) {
    let n = (0, f1().pathToFileURL)(d1().join(r, "./babel-virtual-resolve-base.js")).href, s = X_(e, t), a = s.next();
    for (; !a.done; )
      a = s.next(dbe(a.value, n));
    return {
      loader: "auto",
      filepath: (0, f1().fileURLToPath)(a.value)
    };
  }
  i(hbe, "resolveStandardizedNameForImport");
  function Q_(e, t, r, n) {
    if (!Y_.supportsESM || !n)
      return G_(e, t, r);
    try {
      let s = hbe(e, t, r);
      if (!(0, J_().existsSync)(s.filepath))
        throw Object.assign(new Error(`Could not resolve "${t}" in file ${r}.`), {
          type: "MODULE_NOT_FOUND"
        });
      return s;
    } catch (s) {
      try {
        return G_(e, t, r);
      } catch (a) {
        throw s.type === "MODULE_NOT_FOUND" ? s : a.type === "MODULE_NOT_FOUND" ? a : s;
      }
    }
  }
  i(Q_, "resolveStandardizedName");
  wp = /* @__PURE__ */ new Set();
  var wp;
  function* Z_(e, t, r) {
    if (!(yield* (0, h1.isAsync)()) && wp.has(r))
      throw new Error(`Reentrant ${e} detected trying to load "${r}". This module is not ignored and is trying to load itself while compilin\
g itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
    try {
      return wp.add(r), yield* (0, Y_.default)(r, t, `You appear to be using a native ECMAScript module ${e}, which is only supported when r\
unning Babel asynchronously or when using the Node.js \`--experimental-require-module\` flag.`, `You appear to be using a ${e} that contains\
 top-level await, which is only supported when running Babel asynchronously.`, !0);
    } catch (n) {
      throw n.message = `[BABEL]: ${n.message} (While processing: ${r})`, n;
    } finally {
      wp.delete(r);
    }
  }
  i(Z_, "requireModule");
});

// ../node_modules/@babel/core/lib/config/files/index.js
var Co = A((Sr) => {
  "use strict";
  Object.defineProperty(Sr, "__esModule", {
    value: !0
  });
  Object.defineProperty(Sr, "ROOT_CONFIG_FILENAMES", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pa.ROOT_CONFIG_FILENAMES;
    }, "get")
  });
  Object.defineProperty(Sr, "findConfigUpwards", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pa.findConfigUpwards;
    }, "get")
  });
  Object.defineProperty(Sr, "findPackageData", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return mbe.findPackageData;
    }, "get")
  });
  Object.defineProperty(Sr, "findRelativeConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pa.findRelativeConfig;
    }, "get")
  });
  Object.defineProperty(Sr, "findRootConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pa.findRootConfig;
    }, "get")
  });
  Object.defineProperty(Sr, "loadConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pa.loadConfig;
    }, "get")
  });
  Object.defineProperty(Sr, "loadPlugin", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Ip.loadPlugin;
    }, "get")
  });
  Object.defineProperty(Sr, "loadPreset", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Ip.loadPreset;
    }, "get")
  });
  Object.defineProperty(Sr, "resolvePlugin", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Ip.resolvePlugin;
    }, "get")
  });
  Object.defineProperty(Sr, "resolvePreset", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Ip.resolvePreset;
    }, "get")
  });
  Object.defineProperty(Sr, "resolveShowConfigPath", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pa.resolveShowConfigPath;
    }, "get")
  });
  var mbe = iC(), pa = T_(), Ip = eO();
});

// ../node_modules/@babel/core/lib/transform.js
var rO = A((fa) => {
  "use strict";
  Object.defineProperty(fa, "__esModule", {
    value: !0
  });
  fa.transform = void 0;
  fa.transformAsync = Ebe;
  fa.transformSync = bbe;
  function tO() {
    let e = gr();
    return tO = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(tO, "_gensync");
  var ybe = ea(), gbe = Zc(), _p = Fn(), Op = tO()(/* @__PURE__ */ i(function* (t, r) {
    let n = yield* (0, ybe.default)(r);
    return n === null ? null : yield* (0, gbe.run)(n, t);
  }, "transform")), aIe = fa.transform = /* @__PURE__ */ i(function(t, r, n) {
    let s, a;
    if (typeof r == "function" ? (a = r, s = void 0) : (s = r, a = n), a === void 0)
      return (0, _p.beginHiddenCallStack)(Op.sync)(t, s);
    (0, _p.beginHiddenCallStack)(Op.errback)(t, s, a);
  }, "transform");
  function bbe(...e) {
    return (0, _p.beginHiddenCallStack)(Op.sync)(...e);
  }
  i(bbe, "transformSync");
  function Ebe(...e) {
    return (0, _p.beginHiddenCallStack)(Op.async)(...e);
  }
  i(Ebe, "transformAsync");
});

// ../node_modules/@babel/core/lib/transform-ast.js
var sO = A((da) => {
  "use strict";
  Object.defineProperty(da, "__esModule", {
    value: !0
  });
  da.transformFromAst = void 0;
  da.transformFromAstAsync = vbe;
  da.transformFromAstSync = xbe;
  function nO() {
    let e = gr();
    return nO = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(nO, "_gensync");
  var Tbe = ea(), Sbe = Zc(), Np = Fn(), Bp = nO()(function* (e, t, r) {
    let n = yield* (0, Tbe.default)(r);
    if (n === null) return null;
    if (!e) throw new Error("No AST given");
    return yield* (0, Sbe.run)(n, t, e);
  }), uIe = da.transformFromAst = /* @__PURE__ */ i(function(t, r, n, s) {
    let a, o;
    if (typeof n == "function" ? (o = n, a = void 0) : (a = n, o = s), o === void 0)
      return (0, Np.beginHiddenCallStack)(Bp.sync)(t, r, a);
    (0, Np.beginHiddenCallStack)(Bp.errback)(t, r, a, o);
  }, "transformFromAst");
  function xbe(...e) {
    return (0, Np.beginHiddenCallStack)(Bp.sync)(...e);
  }
  i(xbe, "transformFromAstSync");
  function vbe(...e) {
    return (0, Np.beginHiddenCallStack)(Bp.async)(...e);
  }
  i(vbe, "transformFromAstAsync");
});

// ../node_modules/@babel/core/lib/parse.js
var aO = A((ha) => {
  "use strict";
  Object.defineProperty(ha, "__esModule", {
    value: !0
  });
  ha.parse = void 0;
  ha.parseAsync = wbe;
  ha.parseSync = Dbe;
  function iO() {
    let e = gr();
    return iO = /* @__PURE__ */ i(function() {
      return e;
    }, "_gensync"), e;
  }
  i(iO, "_gensync");
  var Pbe = ea(), Abe = vg(), Cbe = bg(), kp = Fn(), Fp = iO()(/* @__PURE__ */ i(function* (t, r) {
    let n = yield* (0, Pbe.default)(r);
    return n === null ? null : yield* (0, Abe.default)(n.passes, (0, Cbe.default)(n), t);
  }, "parse")), fIe = ha.parse = /* @__PURE__ */ i(function(t, r, n) {
    if (typeof r == "function" && (n = r, r = void 0), n === void 0)
      return (0, kp.beginHiddenCallStack)(Fp.sync)(t, r);
    (0, kp.beginHiddenCallStack)(Fp.errback)(t, r, n);
  }, "parse");
  function Dbe(...e) {
    return (0, kp.beginHiddenCallStack)(Fp.sync)(...e);
  }
  i(Dbe, "parseSync");
  function wbe(...e) {
    return (0, kp.beginHiddenCallStack)(Fp.async)(...e);
  }
  i(wbe, "parseAsync");
});

// ../node_modules/@babel/core/lib/index.js
var bt = A((Re) => {
  "use strict";
  Object.defineProperty(Re, "__esModule", {
    value: !0
  });
  Re.DEFAULT_EXTENSIONS = void 0;
  Object.defineProperty(Re, "File", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Ibe.default;
    }, "get")
  });
  Object.defineProperty(Re, "buildExternalHelpers", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return _be.default;
    }, "get")
  });
  Object.defineProperty(Re, "createConfigItem", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.createConfigItem;
    }, "get")
  });
  Object.defineProperty(Re, "createConfigItemAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.createConfigItemAsync;
    }, "get")
  });
  Object.defineProperty(Re, "createConfigItemSync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.createConfigItemSync;
    }, "get")
  });
  Object.defineProperty(Re, "getEnv", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return Obe.getEnv;
    }, "get")
  });
  Object.defineProperty(Re, "loadOptions", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.loadOptions;
    }, "get")
  });
  Object.defineProperty(Re, "loadOptionsAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.loadOptionsAsync;
    }, "get")
  });
  Object.defineProperty(Re, "loadOptionsSync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.loadOptionsSync;
    }, "get")
  });
  Object.defineProperty(Re, "loadPartialConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.loadPartialConfig;
    }, "get")
  });
  Object.defineProperty(Re, "loadPartialConfigAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.loadPartialConfigAsync;
    }, "get")
  });
  Object.defineProperty(Re, "loadPartialConfigSync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return bn.loadPartialConfigSync;
    }, "get")
  });
  Object.defineProperty(Re, "parse", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return b1.parse;
    }, "get")
  });
  Object.defineProperty(Re, "parseAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return b1.parseAsync;
    }, "get")
  });
  Object.defineProperty(Re, "parseSync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return b1.parseSync;
    }, "get")
  });
  Re.resolvePreset = Re.resolvePlugin = void 0;
  Object.defineProperty(Re, "template", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return pO().default;
    }, "get")
  });
  Object.defineProperty(Re, "tokTypes", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return uO().tokTypes;
    }, "get")
  });
  Object.defineProperty(Re, "transform", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return m1.transform;
    }, "get")
  });
  Object.defineProperty(Re, "transformAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return m1.transformAsync;
    }, "get")
  });
  Object.defineProperty(Re, "transformFile", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return y1.transformFile;
    }, "get")
  });
  Object.defineProperty(Re, "transformFileAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return y1.transformFileAsync;
    }, "get")
  });
  Object.defineProperty(Re, "transformFileSync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return y1.transformFileSync;
    }, "get")
  });
  Object.defineProperty(Re, "transformFromAst", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return g1.transformFromAst;
    }, "get")
  });
  Object.defineProperty(Re, "transformFromAstAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return g1.transformFromAstAsync;
    }, "get")
  });
  Object.defineProperty(Re, "transformFromAstSync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return g1.transformFromAstSync;
    }, "get")
  });
  Object.defineProperty(Re, "transformSync", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return m1.transformSync;
    }, "get")
  });
  Object.defineProperty(Re, "traverse", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return cO().default;
    }, "get")
  });
  Re.version = Re.types = void 0;
  var Ibe = wy(), _be = NA(), oO = Co(), Obe = ag();
  function lO() {
    let e = Pe();
    return lO = /* @__PURE__ */ i(function() {
      return e;
    }, "_types"), e;
  }
  i(lO, "_types");
  Object.defineProperty(Re, "types", {
    enumerable: !0,
    get: /* @__PURE__ */ i(function() {
      return lO();
    }, "get")
  });
  function uO() {
    let e = Fs();
    return uO = /* @__PURE__ */ i(function() {
      return e;
    }, "_parser"), e;
  }
  i(uO, "_parser");
  function cO() {
    let e = Dr();
    return cO = /* @__PURE__ */ i(function() {
      return e;
    }, "_traverse"), e;
  }
  i(cO, "_traverse");
  function pO() {
    let e = Ai();
    return pO = /* @__PURE__ */ i(function() {
      return e;
    }, "_template"), e;
  }
  i(pO, "_template");
  var bn = ea(), m1 = rO(), y1 = Rg(), g1 = sO(), b1 = aO(), mIe = bt(), yIe = Re.version = "7.26.0", Nbe = /* @__PURE__ */ i((e, t) => oO.resolvePlugin(
  e, t, !1).filepath, "resolvePlugin");
  Re.resolvePlugin = Nbe;
  var Bbe = /* @__PURE__ */ i((e, t) => oO.resolvePreset(e, t, !1).filepath, "resolvePreset");
  Re.resolvePreset = Bbe;
  var gIe = Re.DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
  Re.OptionManager = class {
    static {
      i(this, "OptionManager");
    }
    init(t) {
      return (0, bn.loadOptionsSync)(t);
    }
  }, Re.Plugin = /* @__PURE__ */ i(function(t) {
    throw new Error(`The (${t}) Babel 5 plugin is being run with an unsupported Babel version.`);
  }, "Plugin");
});

// src/babel/index.ts
var Fbe = zn(bt(), 1), CIe = zn(bt(), 1), dO = zn(bt(), 1), E1 = zn(eo(), 1), DIe = zn(Fs(), 1), T1 = zn(Dr(), 1), wIe = zn(Pe(), 1);
import * as IIe from "recast";

// src/babel/babelParse.ts
var jp = zn(Fs(), 1);
import * as Lp from "recast";
function kbe(e, t) {
  let s = /^\s*\/\/\s*@flow/.test(e) ? ["flow"] : ["typescript"], a = {
    ...t,
    plugins: [...t.plugins ?? [], ...s]
  };
  return jp.parse(e, a);
}
i(kbe, "parseWithFlowOrTypescript");
var fO = {
  sourceType: "module",
  // FIXME: we should get this from the project config somehow?
  plugins: ["jsx", "decorators-legacy", "classProperties"],
  tokens: !0
}, SIe = /* @__PURE__ */ i((e) => Lp.parse(e, {
  parser: {
    parse(t) {
      return kbe(t, fO);
    }
  }
}), "babelParse"), xIe = /* @__PURE__ */ i((e) => Lp.print(e, {
  quote: "single",
  trailingComma: !0,
  tabWidth: 2,
  wrapColumn: 80,
  arrowParensAlways: !0
}).code, "babelPrint"), vIe = /* @__PURE__ */ i((e) => jp.parseExpression(e, fO), "babelParseExpression");

// src/babel/index.ts
var _Ie = T1.default.default || T1.default, OIe = E1.default.default || E1.default, NIe = dO.File;
var export_transformSync = Fbe.transformSync;
export {
  NIe as BabelFileClass,
  SIe as babelParse,
  vIe as babelParseExpression,
  xIe as babelPrint,
  CIe as core,
  OIe as generate,
  DIe as parser,
  fO as parserOptions,
  IIe as recast,
  export_transformSync as transformSync,
  _Ie as traverse,
  wIe as types
};
